"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@codesandbox";
exports.ids = ["vendor-chunks/@codesandbox"];
exports.modules = {

/***/ "(ssr)/./node_modules/@codesandbox/sandpack-themes/dist/esm/index.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@codesandbox/sandpack-themes/dist/esm/index.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   amethyst: () => (/* binding */ amethyst),\n/* harmony export */   aquaBlue: () => (/* binding */ aquaBlue),\n/* harmony export */   atomDark: () => (/* binding */ atomDark),\n/* harmony export */   cobalt2: () => (/* binding */ cobalt2),\n/* harmony export */   cyberpunk: () => (/* binding */ cyberpunk),\n/* harmony export */   dracula: () => (/* binding */ dracula),\n/* harmony export */   ecoLight: () => (/* binding */ ecoLight),\n/* harmony export */   freeCodeCampDark: () => (/* binding */ freeCodeCampDark),\n/* harmony export */   githubLight: () => (/* binding */ githubLight),\n/* harmony export */   gruvboxDark: () => (/* binding */ gruvboxDark),\n/* harmony export */   gruvboxLight: () => (/* binding */ gruvboxLight),\n/* harmony export */   levelUp: () => (/* binding */ levelUp),\n/* harmony export */   monokaiPro: () => (/* binding */ monokaiPro),\n/* harmony export */   neoCyan: () => (/* binding */ neoCyan),\n/* harmony export */   nightOwl: () => (/* binding */ nightOwl),\n/* harmony export */   sandpackDark: () => (/* binding */ sandpackDark)\n/* harmony export */ });\nvar amethyst = {\n    colors: {\n        surface1: \"#000000\",\n        surface2: \"#0a0a23\",\n        surface3: \"#3b3b4f\",\n        clickable: \"#dfdfe2\",\n        base: \"#ffffff\",\n        disabled: \"#858591\",\n        hover: \"#ffffff\",\n        accent: \"#a26cd6\",\n        error: \"#ffffff\",\n        errorSurface: \"#3b3b4f\"\n    },\n    syntax: {\n        plain: \"#ffffff\",\n        comment: {\n            color: \"#858591\",\n            fontStyle: \"italic\"\n        },\n        keyword: \"#a26cdd\",\n        tag: \"#f07178\",\n        punctuation: \"#99c9ff\",\n        definition: \"#ffffff\",\n        property: \"#99c9ff\",\n        static: \"#f78c6c\",\n        string: \"#57d1b7\"\n    },\n    font: {\n        body: '-apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"',\n        mono: '\"Fira Mono\", \"DejaVu Sans Mono\", Menlo, Consolas, \"Liberation Mono\", Monaco, \"Lucida Console\", monospace',\n        size: \"12px\",\n        lineHeight: \"18px\"\n    }\n};\n\nvar aquaBlue = {\n    colors: {\n        surface1: \"#f8f9fb\",\n        surface2: \"#EBEDF0\",\n        surface3: \"#e4e7eb\",\n        clickable: \"#737373\",\n        base: \"#323232\",\n        disabled: \"#C5C5C5\",\n        hover: \"#1f2933\",\n        accent: \"#2e7692\"\n    },\n    syntax: {\n        plain: \"#1F2933\",\n        comment: { color: \"#A7B6C2\", fontStyle: \"italic\" },\n        keyword: \"#1A56DB\",\n        tag: \"#1A56DB\",\n        punctuation: \"#394b59\",\n        definition: \"#A23DAD\",\n        property: \"#2e7692\",\n        static: \"#1A56DB\",\n        string: \"#1992D4\"\n    },\n    font: {\n        body: '-apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"',\n        mono: '\"Fira Mono\", \"DejaVu Sans Mono\", Menlo, Consolas, \"Liberation Mono\", Monaco, \"Lucida Console\", monospace',\n        size: \"13px\",\n        lineHeight: \"20px\"\n    }\n};\n\nvar atomDark = {\n    colors: {\n        surface1: \"#282c34\",\n        surface2: \"#21252b\",\n        surface3: \"#2c313c\",\n        clickable: \"#a8b1c2\",\n        base: \"#a8b1c2\",\n        disabled: \"#4d4d4d\",\n        hover: \"#e8effc\",\n        accent: \"#c678dd\",\n        error: \"#e06c75\",\n        errorSurface: \"#ffeceb\"\n    },\n    syntax: {\n        plain: \"#a8b1c2\",\n        comment: {\n            color: \"#757575\",\n            fontStyle: \"italic\"\n        },\n        keyword: \"#c678dd\",\n        tag: \"#e06c75\",\n        punctuation: \"#a8b1c2\",\n        definition: \"#62aeef\",\n        property: \"#d19a66\",\n        static: \"#a8b1c2\",\n        string: \"#98c379\"\n    },\n    font: {\n        body: '-apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"',\n        mono: '\"Fira Mono\", \"DejaVu Sans Mono\", Menlo, Consolas, \"Liberation Mono\", Monaco, \"Lucida Console\", monospace',\n        size: \"13px\",\n        lineHeight: \"20px\"\n    }\n};\n\nvar cobalt2 = {\n    colors: {\n        surface1: \"#193549\",\n        surface2: \"#0d3a58\",\n        surface3: \"#1f4662\",\n        clickable: \"#aaaaaa\",\n        base: \"#ffffff\",\n        disabled: \"#C5C5C5\",\n        hover: \"#ffffff\",\n        accent: \"#ffc600\",\n        error: \"#a22929\",\n        errorSurface: \"#0d3a58\"\n    },\n    syntax: {\n        plain: \"#ffffff\",\n        comment: {\n            color: \"#0088ff\",\n            fontStyle: \"italic\"\n        },\n        keyword: \"#ff9d00\",\n        tag: \"#9effff\",\n        punctuation: \"#e1efff\",\n        definition: \"#ffc600\",\n        property: \"#ffc600\",\n        static: \"#ffee80\",\n        string: \"#a5ff90\"\n    },\n    font: {\n        body: '-apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"',\n        mono: '\"Operator Mono\", \"Fira Mono\", \"DejaVu Sans Mono\", Menlo, Consolas, \"Liberation Mono\", Monaco, \"Lucida Console\", monospace',\n        size: \"13px\",\n        lineHeight: \"20px\"\n    }\n};\n\nvar cyberpunk = {\n    colors: {\n        surface1: \"#051c30\",\n        surface2: \"#042f40\",\n        surface3: \"#042f40\",\n        clickable: \"#aaaaaa\",\n        base: \"#ffffff\",\n        disabled: \"#C5C5C5\",\n        hover: \"#ffffff\",\n        accent: \"#fdf500\",\n        error: \"#ff003c\",\n        errorSurface: \"#051c30\"\n    },\n    syntax: {\n        plain: \"#ffffff\",\n        comment: {\n            color: \"#1ac5b0\",\n            fontStyle: \"italic\"\n        },\n        keyword: \"#fdf500\",\n        tag: \"#ffc600\",\n        punctuation: \"#afd7fa\",\n        definition: \"#ffc600\",\n        property: \"#fdf500\",\n        static: \"#e455ae\",\n        string: \"#37ebf3\"\n    },\n    font: {\n        body: '-apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"',\n        mono: '\"Fira Mono\", \"DejaVu Sans Mono\", Menlo, Consolas, \"Liberation Mono\", Monaco, \"Lucida Console\", monospace',\n        size: \"13px\",\n        lineHeight: \"20px\"\n    }\n};\n\nvar dracula = {\n    colors: {\n        surface1: \"#282a36\",\n        surface2: \"#44475a\",\n        surface3: \"#44475a\",\n        clickable: \"#6272a4\",\n        base: \"#f8f8f2\",\n        disabled: \"#6272a4\",\n        hover: \"#f8f8f2\",\n        accent: \"#bd93f9\",\n        error: \"#f8f8f2\",\n        errorSurface: \"#44475a\"\n    },\n    syntax: {\n        plain: \"#f8f8f2\",\n        comment: {\n            color: \"#6272a4\",\n            fontStyle: \"italic\"\n        },\n        keyword: \"#ff79c6\",\n        tag: \"#ff79c6\",\n        punctuation: \"#ff79c6\",\n        definition: \"#f8f8f2\",\n        property: \"#50fa7b\",\n        static: \"#bd93f9\",\n        string: \"#f1fa8c\"\n    },\n    font: {\n        body: '-apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"',\n        mono: '\"Fira Mono\", \"DejaVu Sans Mono\", Menlo, Consolas, \"Liberation Mono\", Monaco, \"Lucida Console\", monospace',\n        size: \"13px\",\n        lineHeight: \"20px\"\n    }\n};\n\n// ecoLight is inspired by love for green and associative environmental colors\nvar ecoLight = {\n    colors: {\n        surface1: \"#eae8e8\",\n        surface2: \"#00997761\",\n        surface3: \"#ffffff5e\",\n        clickable: \"#421010\",\n        base: \"#421010\",\n        disabled: \"#C5C5C5\",\n        hover: \"#4D4D4D\",\n        accent: \"#009977\",\n        error: \"#ff453a\",\n        errorSurface: \"#e8cac6\"\n    },\n    syntax: {\n        plain: \"#151515\",\n        comment: {\n            color: \"#a9a7a7\",\n            fontStyle: \"italic\"\n        },\n        keyword: \"#0971F1\",\n        tag: \"#097104\",\n        punctuation: \"#3B3B3B\",\n        definition: \"#042d60\",\n        property: \"#9013fe\",\n        static: \"#FF453A\",\n        string: \"#f5a623\"\n    },\n    font: {\n        body: '-apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"',\n        mono: '\"Fira Mono\", \"DejaVu Sans Mono\", Menlo, Consolas, \"Liberation Mono\", Monaco, \"Lucida Console\", monospace',\n        size: \"13px\",\n        lineHeight: \"20px\"\n    }\n};\n\nvar freeCodeCampDark = {\n    colors: {\n        surface1: \"#2a2a40\",\n        surface2: \"#0a0a23\",\n        surface3: \"#3b3b4f\",\n        clickable: \"#dfdfe2\",\n        base: \"#ffffff\",\n        disabled: \"#858591\",\n        hover: \"#ffffff\",\n        accent: \"#dbb8ff\",\n        error: \"#ffffff\",\n        errorSurface: \"#3b3b4f\"\n    },\n    syntax: {\n        plain: \"#ffffff\",\n        comment: {\n            color: \"#858591\",\n            fontStyle: \"italic\"\n        },\n        keyword: \"#dbb8ff\",\n        tag: \"#f07178\",\n        punctuation: \"#99c9ff\",\n        definition: \"#ffffff\",\n        property: \"#99c9ff\",\n        static: \"#f78c6c\",\n        string: \"#acd157\"\n    },\n    font: {\n        body: '-apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"',\n        mono: '\"Fira Mono\", \"DejaVu Sans Mono\", Menlo, Consolas, \"Liberation Mono\", Monaco, \"Lucida Console\", monospace',\n        size: \"13px\",\n        lineHeight: \"20px\"\n    }\n};\n\nvar githubLight = {\n    colors: {\n        surface1: \"#ffffff\",\n        surface2: \"#F3F3F3\",\n        surface3: \"#f5f5f5\",\n        clickable: \"#959da5\",\n        base: \"#24292e\",\n        disabled: \"#d1d4d8\",\n        hover: \"#24292e\",\n        accent: \"#24292e\"\n    },\n    syntax: {\n        keyword: \"#d73a49\",\n        property: \"#005cc5\",\n        plain: \"#24292e\",\n        static: \"#032f62\",\n        string: \"#032f62\",\n        definition: \"#6f42c1\",\n        punctuation: \"#24292e\",\n        tag: \"#22863a\",\n        comment: {\n            color: \"#6a737d\",\n            fontStyle: \"normal\"\n        }\n    },\n    font: {\n        body: '-apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"',\n        mono: '\"Fira Mono\", \"DejaVu Sans Mono\", Menlo, Consolas, \"Liberation Mono\", Monaco, \"Lucida Console\", monospace',\n        size: \"13px\",\n        lineHeight: \"20px\"\n    }\n};\n\n// Reference: https://github.com/gruvbox-community/gruvbox\nvar gruvboxDark = {\n    colors: {\n        surface1: \"#282828\",\n        surface2: \"#3c3836\",\n        surface3: \"#3c3836\",\n        clickable: \"#ebdbb2\",\n        base: \"#ebdbb2\",\n        disabled: \"#928374\",\n        hover: \"#fe8019\",\n        accent: \"#d65d0e\",\n        error: \"#ff453a\",\n        errorSurface: \"#3c3836\"\n    },\n    syntax: {\n        plain: \"#ebdbb2\",\n        comment: {\n            color: \"#928374\",\n            fontStyle: \"italic\"\n        },\n        keyword: \"#ff453a\",\n        tag: \"#83a598\",\n        punctuation: \"#ebdbb2\",\n        definition: \"#83a598\",\n        property: \"#fabd2f\",\n        static: \"#ebdbb2\",\n        string: \"#b8bb26\"\n    },\n    font: {\n        body: '-apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"',\n        mono: '\"Fira Mono\", \"DejaVu Sans Mono\", Menlo, Consolas, \"Liberation Mono\", Monaco, \"Lucida Console\", monospace',\n        size: \"13px\",\n        lineHeight: \"20px\"\n    }\n};\n\n// Reference: https://github.com/gruvbox-community/gruvbox\nvar gruvboxLight = {\n    colors: {\n        surface1: \"#fbf1c7\",\n        surface2: \"#ebdbb2\",\n        surface3: \"#ebdbb2\",\n        clickable: \"#808080\",\n        base: \"#3c3836\",\n        disabled: \"#928374\",\n        hover: \"#af3a03\",\n        accent: \"#d65d0e\",\n        error: \"#9d0006\",\n        errorSurface: \"#ebdbb2\"\n    },\n    syntax: {\n        plain: \"#3c3836\",\n        comment: {\n            color: \"#928374\",\n            fontStyle: \"italic\"\n        },\n        keyword: \"#9d0006\",\n        tag: \"#076678\",\n        punctuation: \"#3c3836\",\n        definition: \"#076678\",\n        property: \"#b57614\",\n        static: \"#3c3836\",\n        string: \"#79740e\"\n    },\n    font: {\n        body: '-apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"',\n        mono: '\"Fira Mono\", \"DejaVu Sans Mono\", Menlo, Consolas, \"Liberation Mono\", Monaco, \"Lucida Console\", monospace',\n        size: \"13px\",\n        lineHeight: \"20px\"\n    }\n};\n\nvar levelUp = {\n    colors: {\n        surface1: \"#191324\",\n        surface2: \"#261e33\",\n        surface3: \"#524763\",\n        clickable: \"#aaaaaa\",\n        base: \"#ffffff\",\n        disabled: \"#aaaaaa\",\n        hover: \"#ffffff\",\n        accent: \"#82d8d8\",\n        error: \"#e54b4b\",\n        errorSurface: \"#191324\"\n    },\n    syntax: {\n        plain: \"#ffffff\",\n        comment: {\n            color: \"#82d8d8\",\n            fontStyle: \"italic\"\n        },\n        keyword: \"#e54b4b\",\n        tag: \"#ff26be\",\n        punctuation: \"#9588aa\",\n        definition: \"#82d8d8\",\n        property: \"#82d8d8\",\n        static: \"#82d8d8\",\n        string: \"#a8fe39\"\n    },\n    font: {\n        body: '-apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"',\n        mono: '\"MonoLisa\", \"Fira Mono\", \"DejaVu Sans Mono\", Menlo, Consolas, \"Liberation Mono\", Monaco, \"Lucida Console\", monospace',\n        size: \"13px\",\n        lineHeight: \"20px\"\n    }\n};\n\nvar monokaiPro = {\n    colors: {\n        surface1: \"#2D2A2E\",\n        surface2: \"#444344\",\n        surface3: \"#484747\",\n        clickable: \"#939293\",\n        base: \"#C1C0C1\",\n        disabled: \"#444344\",\n        hover: \"#FCFCFA\",\n        accent: \"#FFD866\",\n        error: \"#ffcdca\",\n        errorSurface: \"#c24038\"\n    },\n    syntax: {\n        plain: \"rgb(252, 252, 250)\",\n        comment: { color: \"#757575\", fontStyle: \"italic\" },\n        keyword: \"rgb(255, 97, 136)\",\n        tag: \"rgb(120, 220, 232)\",\n        punctuation: \"rgb(147, 146, 147)\",\n        definition: \"rgb(169, 220, 118)\",\n        property: { color: \"rgb(120, 220, 232)\", fontStyle: \"italic\" },\n        static: \"rgb(171, 157, 242)\",\n        string: \"rgb(255, 216, 102)\"\n    },\n    font: {\n        body: '-apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"',\n        mono: '\"Fira Mono\", \"DejaVu Sans Mono\", Menlo, Consolas, \"Liberation Mono\", Monaco, \"Lucida Console\", monospace',\n        size: \"13px\",\n        lineHeight: \"20px\"\n    }\n};\n\nvar neoCyan = {\n    colors: {\n        surface1: \"#2b3935\",\n        surface2: \"#191324\",\n        surface3: \"#524763\",\n        clickable: \"#aaaaaa\",\n        base: \"#ffffff\",\n        disabled: \"#aaaaaa\",\n        hover: \"#ffffff\",\n        accent: \"#82d8d8\",\n        error: \"#e54b4b\",\n        errorSurface: \"#191324\"\n    },\n    syntax: {\n        plain: \"#ffffff\",\n        comment: {\n            color: \"#82d8d8\",\n            fontStyle: \"italic\"\n        },\n        keyword: \"#e54b4b\",\n        tag: \"#ff26be\",\n        punctuation: \"#9588aa\",\n        definition: \"#82d8d8\",\n        property: \"#82d8d8\",\n        static: \"#82d8d8\",\n        string: \"#a8fe39\"\n    },\n    font: {\n        body: '-apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"',\n        mono: '\"MonoLisa\", \"Fira Mono\", \"DejaVu Sans Mono\", Menlo, Consolas, \"Liberation Mono\", Monaco, \"Lucida Console\", monospace',\n        size: \"12px\",\n        lineHeight: \"18px\"\n    }\n};\n\nvar nightOwl = {\n    colors: {\n        surface1: \"#011627\",\n        surface2: \"#243b4c\",\n        surface3: \"#112331\",\n        clickable: \"#6988a1\",\n        base: \"#808080\",\n        disabled: \"#4D4D4D\",\n        hover: \"#c5e4fd\",\n        accent: \"#c5e4fd\",\n        error: \"#ffcdca\",\n        errorSurface: \"#811e18\"\n    },\n    syntax: {\n        plain: \"#d6deeb\",\n        comment: { color: \"#999999\", fontStyle: \"italic\" },\n        keyword: { color: \"#c792ea\", fontStyle: \"italic\" },\n        tag: \"#7fdbca\",\n        punctuation: \"#7fdbca\",\n        definition: \"#82aaff\",\n        property: { color: \"#addb67\", fontStyle: \"italic\" },\n        static: \"#f78c6c\",\n        string: \"#ecc48d\"\n    },\n    font: {\n        body: '-apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"',\n        mono: '\"Fira Mono\", \"DejaVu Sans Mono\", Menlo, Consolas, \"Liberation Mono\", Monaco, \"Lucida Console\", monospace',\n        size: \"13px\",\n        lineHeight: \"20px\"\n    }\n};\n\nvar sandpackDark = {\n    colors: {\n        surface1: \"#151515\",\n        surface2: \"#252525\",\n        surface3: \"#2F2F2F\",\n        clickable: \"#999999\",\n        base: \"#808080\",\n        disabled: \"#4D4D4D\",\n        hover: \"#C5C5C5\",\n        accent: \"#90e86f\",\n        error: \"#E1CFF8\",\n        errorSurface: \"#b08df8\"\n    },\n    syntax: {\n        plain: \"#f0fdaf\",\n        comment: {\n            color: \"#757575\",\n            fontStyle: \"italic\"\n        },\n        keyword: \"#e5fd78\",\n        tag: \"#f0fdaf\",\n        punctuation: \"#ffffff\",\n        definition: \"#eeeeee\",\n        property: \"#90e86f\",\n        static: \"#ffffff\",\n        string: \"#dafecf\"\n    },\n    font: {\n        body: '-apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"',\n        mono: '\"Fira Mono\", \"DejaVu Sans Mono\", Menlo, Consolas, \"Liberation Mono\", Monaco, \"Lucida Console\", monospace',\n        size: \"13px\",\n        lineHeight: \"20px\"\n    }\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@codesandbox/sandpack-themes/dist/esm/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@codesandbox/nodebox/build/index.mjs":
/*!***********************************************************!*\
  !*** ./node_modules/@codesandbox/nodebox/build/index.mjs ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   INJECT_MESSAGE_TYPE: () => (/* binding */ INJECT_MESSAGE_TYPE),\n/* harmony export */   MessageReceiver: () => (/* binding */ MessageReceiver),\n/* harmony export */   MessageSender: () => (/* binding */ MessageSender),\n/* harmony export */   Nodebox: () => (/* binding */ Nodebox),\n/* harmony export */   PREVIEW_LOADED_MESSAGE_TYPE: () => (/* binding */ PREVIEW_LOADED_MESSAGE_TYPE)\n/* harmony export */ });\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __commonJS = (cb, mod) => function __require() {\n  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nvar __accessCheck = (obj, member, msg) => {\n  if (!member.has(obj))\n    throw TypeError(\"Cannot \" + msg);\n};\nvar __privateGet = (obj, member, getter) => {\n  __accessCheck(obj, member, \"read from private field\");\n  return getter ? getter.call(obj) : member.get(obj);\n};\nvar __privateAdd = (obj, member, value) => {\n  if (member.has(obj))\n    throw TypeError(\"Cannot add the same private member more than once\");\n  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateSet = (obj, member, value, setter) => {\n  __accessCheck(obj, member, \"write to private field\");\n  setter ? setter.call(obj, value) : member.set(obj, value);\n  return value;\n};\nvar __privateMethod = (obj, member, method) => {\n  __accessCheck(obj, member, \"access private method\");\n  return method;\n};\n\n// ../../node_modules/.pnpm/cuid@2.1.8/node_modules/cuid/lib/pad.js\nvar require_pad = __commonJS({\n  \"../../node_modules/.pnpm/cuid@2.1.8/node_modules/cuid/lib/pad.js\"(exports, module) {\n    module.exports = function pad(num, size) {\n      var s = \"000000000\" + num;\n      return s.substr(s.length - size);\n    };\n  }\n});\n\n// ../../node_modules/.pnpm/cuid@2.1.8/node_modules/cuid/lib/fingerprint.browser.js\nvar require_fingerprint_browser = __commonJS({\n  \"../../node_modules/.pnpm/cuid@2.1.8/node_modules/cuid/lib/fingerprint.browser.js\"(exports, module) {\n    var pad = require_pad();\n    var env = typeof window === \"object\" ? window : self;\n    var globalCount = Object.keys(env).length;\n    var mimeTypesLength = navigator.mimeTypes ? navigator.mimeTypes.length : 0;\n    var clientId = pad((mimeTypesLength + navigator.userAgent.length).toString(36) + globalCount.toString(36), 4);\n    module.exports = function fingerprint() {\n      return clientId;\n    };\n  }\n});\n\n// ../../node_modules/.pnpm/cuid@2.1.8/node_modules/cuid/lib/getRandomValue.browser.js\nvar require_getRandomValue_browser = __commonJS({\n  \"../../node_modules/.pnpm/cuid@2.1.8/node_modules/cuid/lib/getRandomValue.browser.js\"(exports, module) {\n    var getRandomValue;\n    var crypto = typeof window !== \"undefined\" && (window.crypto || window.msCrypto) || typeof self !== \"undefined\" && self.crypto;\n    if (crypto) {\n      lim = Math.pow(2, 32) - 1;\n      getRandomValue = function() {\n        return Math.abs(crypto.getRandomValues(new Uint32Array(1))[0] / lim);\n      };\n    } else {\n      getRandomValue = Math.random;\n    }\n    var lim;\n    module.exports = getRandomValue;\n  }\n});\n\n// ../../node_modules/.pnpm/cuid@2.1.8/node_modules/cuid/index.js\nvar require_cuid = __commonJS({\n  \"../../node_modules/.pnpm/cuid@2.1.8/node_modules/cuid/index.js\"(exports, module) {\n    var fingerprint = require_fingerprint_browser();\n    var pad = require_pad();\n    var getRandomValue = require_getRandomValue_browser();\n    var c = 0;\n    var blockSize = 4;\n    var base = 36;\n    var discreteValues = Math.pow(base, blockSize);\n    function randomBlock() {\n      return pad((getRandomValue() * discreteValues << 0).toString(base), blockSize);\n    }\n    function safeCounter() {\n      c = c < discreteValues ? c : 0;\n      c++;\n      return c - 1;\n    }\n    function cuid3() {\n      var letter = \"c\", timestamp = new Date().getTime().toString(base), counter = pad(safeCounter().toString(base), blockSize), print = fingerprint(), random = randomBlock() + randomBlock();\n      return letter + timestamp + counter + print + random;\n    }\n    cuid3.slug = function slug() {\n      var date = new Date().getTime().toString(36), counter = safeCounter().toString(36).slice(-4), print = fingerprint().slice(0, 1) + fingerprint().slice(-1), random = randomBlock().slice(-2);\n      return date.slice(-2) + counter + print + random;\n    };\n    cuid3.isCuid = function isCuid(stringToCheck) {\n      if (typeof stringToCheck !== \"string\")\n        return false;\n      if (stringToCheck.startsWith(\"c\"))\n        return true;\n      return false;\n    };\n    cuid3.isSlug = function isSlug(stringToCheck) {\n      if (typeof stringToCheck !== \"string\")\n        return false;\n      var stringLength = stringToCheck.length;\n      if (stringLength >= 7 && stringLength <= 10)\n        return true;\n      return false;\n    };\n    cuid3.fingerprint = fingerprint;\n    module.exports = cuid3;\n  }\n});\n\n// ../../node_modules/.pnpm/@open-draft+deferred-promise@2.1.0/node_modules/@open-draft/deferred-promise/build/createDeferredExecutor.js\nvar require_createDeferredExecutor = __commonJS({\n  \"../../node_modules/.pnpm/@open-draft+deferred-promise@2.1.0/node_modules/@open-draft/deferred-promise/build/createDeferredExecutor.js\"(exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.createDeferredExecutor = void 0;\n    function createDeferredExecutor() {\n      const executor = (resolve, reject) => {\n        executor.state = \"pending\";\n        executor.resolve = (data) => {\n          if (executor.state !== \"pending\") {\n            return;\n          }\n          executor.result = data;\n          const onFulfilled = (value) => {\n            executor.state = \"fulfilled\";\n            return value;\n          };\n          return resolve(data instanceof Promise ? data : Promise.resolve(data).then(onFulfilled));\n        };\n        executor.reject = (reason) => {\n          if (executor.state !== \"pending\") {\n            return;\n          }\n          queueMicrotask(() => {\n            executor.state = \"rejected\";\n          });\n          return reject(executor.rejectionReason = reason);\n        };\n      };\n      return executor;\n    }\n    exports.createDeferredExecutor = createDeferredExecutor;\n  }\n});\n\n// ../../node_modules/.pnpm/@open-draft+deferred-promise@2.1.0/node_modules/@open-draft/deferred-promise/build/DeferredPromise.js\nvar require_DeferredPromise = __commonJS({\n  \"../../node_modules/.pnpm/@open-draft+deferred-promise@2.1.0/node_modules/@open-draft/deferred-promise/build/DeferredPromise.js\"(exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.DeferredPromise = void 0;\n    var createDeferredExecutor_1 = require_createDeferredExecutor();\n    var DeferredPromise4 = class extends Promise {\n      #executor;\n      resolve;\n      reject;\n      constructor(executor = null) {\n        const deferredExecutor = (0, createDeferredExecutor_1.createDeferredExecutor)();\n        super((originalResolve, originalReject) => {\n          deferredExecutor(originalResolve, originalReject);\n          executor?.(deferredExecutor.resolve, deferredExecutor.reject);\n        });\n        this.#executor = deferredExecutor;\n        this.resolve = this.#executor.resolve;\n        this.reject = this.#executor.reject;\n      }\n      get state() {\n        return this.#executor.state;\n      }\n      get rejectionReason() {\n        return this.#executor.rejectionReason;\n      }\n      then(onFulfilled, onRejected) {\n        return this.#decorate(super.then(onFulfilled, onRejected));\n      }\n      catch(onRejected) {\n        return this.#decorate(super.catch(onRejected));\n      }\n      finally(onfinally) {\n        return this.#decorate(super.finally(onfinally));\n      }\n      #decorate(promise) {\n        return Object.defineProperties(promise, {\n          resolve: { configurable: true, value: this.resolve },\n          reject: { configurable: true, value: this.reject }\n        });\n      }\n    };\n    exports.DeferredPromise = DeferredPromise4;\n  }\n});\n\n// ../../node_modules/.pnpm/@open-draft+deferred-promise@2.1.0/node_modules/@open-draft/deferred-promise/build/index.js\nvar require_build = __commonJS({\n  \"../../node_modules/.pnpm/@open-draft+deferred-promise@2.1.0/node_modules/@open-draft/deferred-promise/build/index.js\"(exports) {\n    \"use strict\";\n    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {\n      if (k2 === void 0)\n        k2 = k;\n      var desc = Object.getOwnPropertyDescriptor(m, k);\n      if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = { enumerable: true, get: function() {\n          return m[k];\n        } };\n      }\n      Object.defineProperty(o, k2, desc);\n    } : function(o, m, k, k2) {\n      if (k2 === void 0)\n        k2 = k;\n      o[k2] = m[k];\n    });\n    var __exportStar = exports && exports.__exportStar || function(m, exports2) {\n      for (var p in m)\n        if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports2, p))\n          __createBinding(exports2, m, p);\n    };\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    __exportStar(require_createDeferredExecutor(), exports);\n    __exportStar(require_DeferredPromise(), exports);\n  }\n});\n\n// ../../node_modules/.pnpm/strict-event-emitter@0.4.3/node_modules/strict-event-emitter/lib/MemoryLeakError.js\nvar require_MemoryLeakError = __commonJS({\n  \"../../node_modules/.pnpm/strict-event-emitter@0.4.3/node_modules/strict-event-emitter/lib/MemoryLeakError.js\"(exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.MemoryLeakError = void 0;\n    var MemoryLeakError = class extends Error {\n      emitter;\n      type;\n      count;\n      constructor(emitter, type, count) {\n        super(`Possible EventEmitter memory leak detected. ${count} ${type.toString()} listeners added. Use emitter.setMaxListeners() to increase limit`);\n        this.emitter = emitter;\n        this.type = type;\n        this.count = count;\n        this.name = \"MaxListenersExceededWarning\";\n      }\n    };\n    exports.MemoryLeakError = MemoryLeakError;\n  }\n});\n\n// ../../node_modules/.pnpm/strict-event-emitter@0.4.3/node_modules/strict-event-emitter/lib/Emitter.js\nvar require_Emitter = __commonJS({\n  \"../../node_modules/.pnpm/strict-event-emitter@0.4.3/node_modules/strict-event-emitter/lib/Emitter.js\"(exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.Emitter = void 0;\n    var MemoryLeakError_1 = require_MemoryLeakError();\n    var _events, _maxListeners, _hasWarnedAboutPotentialMemortyLeak, _getListeners, getListeners_fn, _removeListener, removeListener_fn, _wrapOnceListener, wrapOnceListener_fn, _internalEmit, internalEmit_fn;\n    var _Emitter = class {\n      constructor() {\n        __privateAdd(this, _getListeners);\n        __privateAdd(this, _removeListener);\n        __privateAdd(this, _wrapOnceListener);\n        __privateAdd(this, _internalEmit);\n        __privateAdd(this, _events, void 0);\n        __privateAdd(this, _maxListeners, void 0);\n        __privateAdd(this, _hasWarnedAboutPotentialMemortyLeak, void 0);\n        __privateSet(this, _events, /* @__PURE__ */ new Map());\n        __privateSet(this, _maxListeners, _Emitter.defaultMaxListeners);\n        __privateSet(this, _hasWarnedAboutPotentialMemortyLeak, false);\n      }\n      static listenerCount(emitter, eventName) {\n        return emitter.listenerCount(eventName);\n      }\n      setMaxListeners(maxListeners) {\n        __privateSet(this, _maxListeners, maxListeners);\n        return this;\n      }\n      getMaxListeners() {\n        return __privateGet(this, _maxListeners);\n      }\n      eventNames() {\n        return Array.from(__privateGet(this, _events).keys());\n      }\n      emit(eventName, ...data) {\n        const listeners = __privateMethod(this, _getListeners, getListeners_fn).call(this, eventName);\n        listeners.forEach((listener) => {\n          listener.apply(this, data);\n        });\n        return listeners.length > 0;\n      }\n      addListener(eventName, listener) {\n        __privateMethod(this, _internalEmit, internalEmit_fn).call(this, \"newListener\", eventName, listener);\n        const nextListeners = __privateMethod(this, _getListeners, getListeners_fn).call(this, eventName).concat(listener);\n        __privateGet(this, _events).set(eventName, nextListeners);\n        if (__privateGet(this, _maxListeners) > 0 && this.listenerCount(eventName) > __privateGet(this, _maxListeners) && !__privateGet(this, _hasWarnedAboutPotentialMemortyLeak)) {\n          __privateSet(this, _hasWarnedAboutPotentialMemortyLeak, true);\n          const memoryLeakWarning = new MemoryLeakError_1.MemoryLeakError(this, eventName, this.listenerCount(eventName));\n          console.warn(memoryLeakWarning);\n        }\n        return this;\n      }\n      on(eventName, listener) {\n        return this.addListener(eventName, listener);\n      }\n      once(eventName, listener) {\n        return this.addListener(eventName, __privateMethod(this, _wrapOnceListener, wrapOnceListener_fn).call(this, eventName, listener));\n      }\n      prependListener(eventName, listener) {\n        const listeners = __privateMethod(this, _getListeners, getListeners_fn).call(this, eventName);\n        if (listeners.length > 0) {\n          const nextListeners = [listener].concat(listeners);\n          __privateGet(this, _events).set(eventName, nextListeners);\n        } else {\n          __privateGet(this, _events).set(eventName, listeners.concat(listener));\n        }\n        return this;\n      }\n      prependOnceListener(eventName, listener) {\n        return this.prependListener(eventName, __privateMethod(this, _wrapOnceListener, wrapOnceListener_fn).call(this, eventName, listener));\n      }\n      removeListener(eventName, listener) {\n        const listeners = __privateMethod(this, _getListeners, getListeners_fn).call(this, eventName);\n        if (listeners.length > 0) {\n          __privateMethod(this, _removeListener, removeListener_fn).call(this, listeners, listener);\n          __privateGet(this, _events).set(eventName, listeners);\n          __privateMethod(this, _internalEmit, internalEmit_fn).call(this, \"removeListener\", eventName, listener);\n        }\n        return this;\n      }\n      off(eventName, listener) {\n        return this.removeListener(eventName, listener);\n      }\n      removeAllListeners(eventName) {\n        if (eventName) {\n          __privateGet(this, _events).delete(eventName);\n        } else {\n          __privateGet(this, _events).clear();\n        }\n        return this;\n      }\n      listeners(eventName) {\n        return Array.from(__privateMethod(this, _getListeners, getListeners_fn).call(this, eventName));\n      }\n      listenerCount(eventName) {\n        return __privateMethod(this, _getListeners, getListeners_fn).call(this, eventName).length;\n      }\n      rawListeners(eventName) {\n        return this.listeners(eventName);\n      }\n    };\n    var Emitter2 = _Emitter;\n    _events = new WeakMap();\n    _maxListeners = new WeakMap();\n    _hasWarnedAboutPotentialMemortyLeak = new WeakMap();\n    _getListeners = new WeakSet();\n    getListeners_fn = function(eventName) {\n      return __privateGet(this, _events).get(eventName) || [];\n    };\n    _removeListener = new WeakSet();\n    removeListener_fn = function(listeners, listener) {\n      const index = listeners.indexOf(listener);\n      if (index > -1) {\n        listeners.splice(index, 1);\n      }\n      return [];\n    };\n    _wrapOnceListener = new WeakSet();\n    wrapOnceListener_fn = function(eventName, listener) {\n      const onceListener = (...data) => {\n        this.removeListener(eventName, onceListener);\n        listener.apply(this, data);\n      };\n      return onceListener;\n    };\n    _internalEmit = new WeakSet();\n    internalEmit_fn = function(internalEventName, eventName, listener) {\n      this.emit(\n        internalEventName,\n        ...[eventName, listener]\n      );\n    };\n    __publicField(Emitter2, \"defaultMaxListeners\", 10);\n    exports.Emitter = Emitter2;\n  }\n});\n\n// ../../node_modules/.pnpm/strict-event-emitter@0.4.3/node_modules/strict-event-emitter/lib/index.js\nvar require_lib = __commonJS({\n  \"../../node_modules/.pnpm/strict-event-emitter@0.4.3/node_modules/strict-event-emitter/lib/index.js\"(exports) {\n    \"use strict\";\n    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {\n      if (k2 === void 0)\n        k2 = k;\n      var desc = Object.getOwnPropertyDescriptor(m, k);\n      if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = { enumerable: true, get: function() {\n          return m[k];\n        } };\n      }\n      Object.defineProperty(o, k2, desc);\n    } : function(o, m, k, k2) {\n      if (k2 === void 0)\n        k2 = k;\n      o[k2] = m[k];\n    });\n    var __exportStar = exports && exports.__exportStar || function(m, exports2) {\n      for (var p in m)\n        if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports2, p))\n          __createBinding(exports2, m, p);\n    };\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    __exportStar(require_Emitter(), exports);\n    __exportStar(require_MemoryLeakError(), exports);\n  }\n});\n\n// src/messages.ts\nvar import_cuid = __toESM(require_cuid());\n\n// ../../node_modules/.pnpm/outvariant@1.4.0/node_modules/outvariant/lib/index.mjs\nvar POSITIONALS_EXP = /(%?)(%([sdjo]))/g;\nfunction serializePositional(positional, flag) {\n  switch (flag) {\n    case \"s\":\n      return positional;\n    case \"d\":\n    case \"i\":\n      return Number(positional);\n    case \"j\":\n      return JSON.stringify(positional);\n    case \"o\": {\n      if (typeof positional === \"string\") {\n        return positional;\n      }\n      const json = JSON.stringify(positional);\n      if (json === \"{}\" || json === \"[]\" || /^\\[object .+?\\]$/.test(json)) {\n        return positional;\n      }\n      return json;\n    }\n  }\n}\nfunction format(message, ...positionals) {\n  if (positionals.length === 0) {\n    return message;\n  }\n  let positionalIndex = 0;\n  let formattedMessage = message.replace(\n    POSITIONALS_EXP,\n    (match, isEscaped, _, flag) => {\n      const positional = positionals[positionalIndex];\n      const value = serializePositional(positional, flag);\n      if (!isEscaped) {\n        positionalIndex++;\n        return value;\n      }\n      return match;\n    }\n  );\n  if (positionalIndex < positionals.length) {\n    formattedMessage += ` ${positionals.slice(positionalIndex).join(\" \")}`;\n  }\n  formattedMessage = formattedMessage.replace(/%{2,2}/g, \"%\");\n  return formattedMessage;\n}\nvar STACK_FRAMES_TO_IGNORE = 2;\nfunction cleanErrorStack(error) {\n  if (!error.stack) {\n    return;\n  }\n  const nextStack = error.stack.split(\"\\n\");\n  nextStack.splice(1, STACK_FRAMES_TO_IGNORE);\n  error.stack = nextStack.join(\"\\n\");\n}\nvar InvariantError = class extends Error {\n  constructor(message, ...positionals) {\n    super(message);\n    this.message = message;\n    this.name = \"Invariant Violation\";\n    this.message = format(message, ...positionals);\n    cleanErrorStack(this);\n  }\n};\nvar invariant = (predicate, message, ...positionals) => {\n  if (!predicate) {\n    throw new InvariantError(message, ...positionals);\n  }\n};\ninvariant.as = (ErrorConstructor, predicate, message, ...positionals) => {\n  if (!predicate) {\n    const isConstructor = ErrorConstructor.prototype.name != null;\n    const error = isConstructor ? new ErrorConstructor(format(message, positionals)) : ErrorConstructor(format(message, positionals));\n    throw error;\n  }\n};\n\n// src/messages.ts\nvar import_deferred_promise = __toESM(require_build());\n\n// src/logger.ts\nvar FLAG = window.localStorage[\"CSB_EMULATOR_DEBUG\"];\nvar DEFAULT = \"\\x1B[0m\";\nvar GREEN = \"\\x1B[32;1m\";\nvar RED = \"\\x1B[31m\";\nvar BLUE = \"\\x1B[34m\";\nvar YELLOW = \"\\x1B[33;1m\";\nvar MAGENTA = \"\\x1B[35;1m\";\nvar CYAN = \"\\x1B[36;1m\";\nvar COLOR_SCOPE = {\n  preview: YELLOW,\n  emulator: MAGENTA,\n  runtime: CYAN,\n  bridge: BLUE,\n  \"runtime:worker\": CYAN\n};\nfunction createDebug(scope) {\n  return function debug3(message, ...data) {\n    if (FLAG === \"true\") {\n      const direction = () => {\n        if (message.includes(\"sender\"))\n          return `${GREEN}sender`;\n        if (message.includes(\"receiver\"))\n          return `${RED}receiver`;\n        return \"\";\n      };\n      const cleanMessage = message.replace(/\\[.+\\]:/, \"\");\n      console.debug(`${COLOR_SCOPE[scope]}${scope}:${direction()}${DEFAULT}:${cleanMessage}`, ...data);\n    }\n  };\n}\n\n// src/messages.ts\nvar debug = createDebug(\"emulator\");\nvar MessageReceiver = class {\n  emitter;\n  senderPort = null;\n  constructor() {\n    this.emitter = new EventTarget();\n    this.waitForHandshake();\n  }\n  waitForHandshake() {\n    const handshakePromise = new import_deferred_promise.DeferredPromise();\n    const handshakeListener = (message) => {\n      const { data } = message;\n      debug(\"[message-receiver]: incoming\", message);\n      if (data.type === \"internal/handshake\") {\n        invariant(\n          message.ports.length > 0,\n          \"Failed to confirm a MessageReceiver handshake: received event has no ports\"\n        );\n        this.senderPort = message.ports[0];\n        this.addMessageListener();\n        debug(\"[message-receiver]: handshake received!\", this.senderPort);\n        this.send(\"internal/handshake/done\");\n        debug(\"[message-receiver]: finish handshake\");\n      }\n    };\n    window.addEventListener(\"message\", handshakeListener);\n    handshakePromise.then(() => {\n      window.removeEventListener(\"message\", handshakeListener);\n    });\n    window.parent.postMessage({ type: \"internal/ready\" }, \"*\");\n    return handshakePromise;\n  }\n  addMessageListener() {\n    invariant(\n      this.senderPort,\n      \"[MessageReceiver] Failed to add a message listener: sender port is not defined. Did you forget to await a handshake?\"\n    );\n    this.senderPort.onmessage = (evt) => {\n      const data = evt.data;\n      if (data.type == null) {\n        return;\n      }\n      this.emitter.dispatchEvent(\n        new MessageEvent(data.type, {\n          data: data.payload\n        })\n      );\n    };\n  }\n  on(event, listener, options) {\n    this.emitter.addEventListener(\n      event,\n      async (message) => {\n        if (!(message instanceof MessageEvent)) {\n          return;\n        }\n        const { operationId, payload } = message.data;\n        try {\n          const listenerPayload = await listener(payload);\n          this.send(\"internal/operation/done\", { operationId, listenerPayload });\n        } catch (error) {\n          if (error instanceof Error) {\n            this.send(\"internal/operation/failed\", { operationId, error });\n          }\n        }\n      },\n      options\n    );\n  }\n  send(event, ...data) {\n    invariant(\n      this.senderPort,\n      '[MessageReceiver] Failed to send a message \"%j\": sender port is not defined. Did you forget to await a handshake?',\n      event\n    );\n    const payload = data[0] || {};\n    debug('[message-receiver]: send \"%s\"', event, payload);\n    this.senderPort.postMessage({ type: event, payload });\n  }\n};\nvar MessageSender = class {\n  constructor(target) {\n    this.target = target;\n    this.emitter = new EventTarget();\n    this.channel = new MessageChannel();\n    this.receiverPort = this.channel.port1;\n    const receiverReadyPromise = new import_deferred_promise.DeferredPromise();\n    const handshakeListener = (message) => {\n      if (message.data.type === \"internal/ready\") {\n        debug(\"[message-sender]: runtime is ready\");\n        receiverReadyPromise.resolve();\n      }\n    };\n    window.addEventListener(\"message\", handshakeListener);\n    receiverReadyPromise.then(() => {\n      window.removeEventListener(\"message\", handshakeListener);\n    });\n    this.receiverReadyPromise = receiverReadyPromise;\n    this.receiverPort.onmessage = (evt) => {\n      const data = evt.data;\n      if (data.type != null) {\n        debug('[message-sender]: emitting \"%s\" event...', data.type, data.payload);\n        this.emitter.dispatchEvent(new MessageEvent(data.type, { data: data.payload }));\n      }\n    };\n  }\n  emitter;\n  channel;\n  receiverPort;\n  receiverReadyPromise;\n  async handshake() {\n    const handshakePromise = new import_deferred_promise.DeferredPromise();\n    await this.receiverReadyPromise;\n    debug(\"[message-sender]: sending handshake\");\n    this.target.postMessage(\n      {\n        type: \"internal/handshake\"\n      },\n      \"*\",\n      [this.channel.port2]\n    );\n    this.on(\"internal/handshake/done\", () => {\n      handshakePromise.resolve();\n      clearTimeout(rejectionTimeout);\n    });\n    const rejectionTimeout = setTimeout(() => {\n      handshakePromise.reject(new Error(\"MessageSender: Handshake timeout\"));\n    }, 5e3);\n    return handshakePromise;\n  }\n  on(event, listener, options) {\n    debug('[message-sender]: add listener \"%s\"', event);\n    this.emitter.addEventListener(\n      event,\n      (message) => {\n        if (message instanceof MessageEvent) {\n          listener(message);\n        }\n      },\n      options\n    );\n  }\n  off(event, listener, options) {\n    this.emitter.removeEventListener(event, listener, options);\n  }\n  async send(event, ...data) {\n    const operationPromise = new import_deferred_promise.DeferredPromise();\n    const operationId = (0, import_cuid.default)();\n    const payload = data[0] || {};\n    debug('[message-sender]: send \"%s\" (%s)', event, operationId, payload);\n    this.receiverPort.postMessage({ type: event, payload: { operationId, payload } });\n    debug('[message-sender]: adding done listener for \"%s\" (%s)', event, operationId);\n    const handleOperationDone = (doneEvent) => {\n      const { data: data2 } = doneEvent;\n      if (data2.operationId === operationId) {\n        const listenerPayload = data2.listenerPayload || {};\n        debug('[message-sender]: resolving \"%s (%s) promise!', event, operationId);\n        operationPromise.resolve({\n          ...listenerPayload,\n          operationId: data2.operationId\n        });\n      }\n    };\n    const handleOperationFailed = (failEvent) => {\n      const { data: data2 } = failEvent;\n      if (data2.operationId === operationId) {\n        debug('[message-sender]: rejecting \"%s (%s) promise!', event, operationId);\n        operationPromise.reject(data2.error);\n      }\n    };\n    this.on(\"internal/operation/done\", handleOperationDone);\n    this.on(\"internal/operation/failed\", handleOperationFailed);\n    return operationPromise.finally(() => {\n      this.emitter.removeEventListener(\"internal/operation/done\", handleOperationDone);\n      this.emitter.removeEventListener(\"internal/operation/failed\", handleOperationFailed);\n    });\n  }\n};\n\n// src/Nodebox.ts\nvar import_deferred_promise3 = __toESM(require_build());\n\n// src/modules/fs.ts\nvar import_cuid2 = __toESM(require_cuid());\nvar FileSystemApi = class {\n  constructor(channel) {\n    this.channel = channel;\n  }\n  async init(files) {\n    await this.channel.send(\"fs/init\", { files });\n  }\n  async readFile(path, encoding) {\n    const response = await this.channel.send(\"fs/readFile\", { path, encoding }).catch((error) => {\n      throw new Error(format('Failed to read file at path \"%s\"', path), { cause: error });\n    });\n    if (!response) {\n      throw new Error(\"File not found\");\n    }\n    return response.data;\n  }\n  async writeFile(path, content, options) {\n    let encoding = void 0;\n    let recursive = false;\n    if (typeof options === \"object\") {\n      encoding = options.encoding;\n      recursive = !!options.recursive;\n    } else if (typeof options === \"string\") {\n      encoding = options;\n    }\n    await this.channel.send(\"fs/writeFile\", { path, content, encoding, recursive }).catch((error) => {\n      throw new Error(format('Failed to write file at path \"%s\"', path), { cause: error });\n    });\n  }\n  async readdir(path) {\n    const response = await this.channel.send(\"fs/readdir\", { path }).catch((error) => {\n      throw new Error(format('Failed to read directory at path \"%s\"', path), { cause: error });\n    });\n    if (!response) {\n      throw new Error(\"Directory not found\");\n    }\n    return response.data;\n  }\n  async mkdir(path, options) {\n    const recursive = !!options?.recursive;\n    await this.channel.send(\"fs/mkdir\", { path, recursive }).catch((error) => {\n      throw new Error(format('Failed to make directory at path \"%s\"', path), { cause: error });\n    });\n  }\n  async stat(path) {\n    const response = await this.channel.send(\"fs/stat\", { path }).catch((error) => {\n      throw new Error(format('Failed to stat file at path \"%s\"', path), { cause: error });\n    });\n    if (!response) {\n      throw new Error(\"File not found\");\n    }\n    return response.data;\n  }\n  async rm(path, options) {\n    const { force, recursive } = options || {};\n    await this.channel.send(\"fs/rm\", { path, force, recursive }).catch((error) => {\n      throw new Error(format('Failed to remove file at path \"%s\"', path), { cause: error });\n    });\n  }\n  async watch(includes, excludes, listener) {\n    const watcherId = (0, import_cuid2.default)();\n    await this.channel.send(\"fs/watch\", { watcherId, includes, excludes });\n    this.channel.on(\"fs/watch-event\", ({ data }) => {\n      if (data.watcherId === watcherId && listener) {\n        const evt = { ...data };\n        delete evt.watcherId;\n        listener(evt);\n      }\n    });\n    return {\n      dispose: () => this.channel.send(\"fs/unwatch\", { watcherId })\n    };\n  }\n};\n\n// src/modules/shell.ts\nvar import_strict_event_emitter = __toESM(require_lib());\nvar ShellApi = class {\n  constructor(channel) {\n    this.channel = channel;\n  }\n  create() {\n    return new ShellProcess(this.channel);\n  }\n};\nvar ShellProcess = class {\n  constructor(channel) {\n    this.channel = channel;\n    this.state = \"running\";\n    this.stdout = new import_strict_event_emitter.Emitter();\n    this.stderr = new import_strict_event_emitter.Emitter();\n    this.stdin = {\n      write: (data) => {\n        if (!this.id) {\n          throw new Error(\"Failed to write to stdin, no process is currently running\");\n        }\n        return this.channel.send(\"shell/stdin\", { data, workerId: this.id });\n      }\n    };\n    this.forwardStdEvents();\n  }\n  id;\n  state;\n  stdout;\n  stderr;\n  stdin;\n  forwardStdEvents() {\n    this.channel.on(\"worker/tty\", (message) => {\n      const { data } = message;\n      if (data.workerId !== this.id) {\n        return;\n      }\n      switch (data.payload.type) {\n        case \"out\": {\n          this.stdout.emit(\"data\", data.payload.data);\n          break;\n        }\n        case \"err\": {\n          this.stderr.emit(\"data\", data.payload.data);\n          break;\n        }\n      }\n    });\n  }\n  async runCommand(command, args, options = {}) {\n    invariant(!this.id, 'Failed to run \"runCommand\" on a ShellProcess: there is already a process running.');\n    const shellInfo = await this.channel.send(\"shell/runCommand\", { command, args, options });\n    invariant(shellInfo, 'Failed to run \"runCommand\" on a ShellProcess: was not able to retrieve a running process.');\n    this.id = shellInfo.id;\n    this.state = \"running\";\n    return shellInfo;\n  }\n  async on(message, listener) {\n    switch (message) {\n      case \"progress\": {\n        this.channel.on(\"worker/progress\", ({ data }) => {\n          listener(data.status);\n        });\n        return;\n      }\n      case \"exit\": {\n        this.channel.on(\"worker/exit\", ({ data }) => {\n          if (data.workerId === this.id) {\n            listener(data.exitCode, data.error);\n          }\n        });\n        return;\n      }\n    }\n  }\n  async kill() {\n    invariant(\n      this.id,\n      'Failed to run \"kill\" on a ShellProcess: there is no process running. Did you forget to run it?'\n    );\n    this.state = \"idle\";\n    await this.channel.send(\"shell/exit\", { id: this.id }).catch((error) => {\n      throw new Error(format('Failed to kill shell with ID \"%s\"', this.id), { cause: error });\n    });\n    this.id = void 0;\n  }\n};\n\n// src/modules/preview.ts\nvar import_deferred_promise2 = __toESM(require_build());\nvar TIMEOUT = 2e4;\nvar PreviewApi = class {\n  constructor(channel) {\n    this.channel = channel;\n  }\n  async waitFor(payload, predicate, timeout = TIMEOUT) {\n    const readyPromise = new import_deferred_promise2.DeferredPromise();\n    const rejectTimeout = setTimeout(() => {\n      readyPromise.reject();\n    }, timeout);\n    const previewInformation = await this.channel.send(\"preview/get/info\", payload).catch((error) => {\n      readyPromise.reject(\n        new Error(\n          format(\n            'Failed to look up preview information for shell ID \"%s\" (port: %d)',\n            payload.sourceShellId,\n            payload.port\n          )\n        )\n      );\n    });\n    const foundPreview = previewInformation && predicate(previewInformation);\n    if (foundPreview) {\n      readyPromise.resolve({\n        url: previewInformation.url,\n        port: previewInformation.port,\n        sourceShellId: previewInformation.sourceShellId\n      });\n    }\n    this.channel.on(\"preview/port/ready\", ({ data }) => {\n      if (!foundPreview && predicate(data)) {\n        readyPromise.resolve({\n          url: data.url,\n          port: data.port,\n          sourceShellId: data.sourceShellId\n        });\n      }\n    });\n    return readyPromise.finally(() => {\n      clearTimeout(rejectTimeout);\n    });\n  }\n  async getByShellId(sourceShellId, timeout) {\n    return this.waitFor({ sourceShellId }, (data) => data.sourceShellId === sourceShellId, timeout).catch((error) => {\n      throw new Error(format('Failed to get shell by ID \"%s\"', sourceShellId), { cause: error });\n    });\n  }\n  async waitForPort(port, timeout) {\n    return this.waitFor({ port }, (data) => data.port === port, timeout).catch((error) => {\n      throw new Error(format(\"Failed to await port %d\", port), { cause: error });\n    });\n  }\n};\n\n// src/Nodebox.ts\nvar DEFAULT_RUNTIME_URL = \"https://nodebox-runtime.codesandbox.io\";\nvar debug2 = createDebug(\"emulator\");\nvar Nodebox = class {\n  constructor(options) {\n    this.options = options;\n    invariant(\n      this.options.iframe,\n      'Failed to create a Nodebox: expected \"iframe\" argument to be a reference to an <iframe> element but got %j',\n      this.options.iframe\n    );\n    this.url = this.options.runtimeUrl || DEFAULT_RUNTIME_URL;\n    this.isConnected = false;\n  }\n  channel = null;\n  isConnected;\n  url;\n  fileSystemApi = null;\n  shellApi = null;\n  previewApi = null;\n  async connect() {\n    const { iframe, cdnUrl } = this.options;\n    debug2(\"[message-sender]: Connecting to node emulator...\");\n    const connectionPromise = new import_deferred_promise3.DeferredPromise();\n    if (!this.url) {\n      connectionPromise.reject(\n        new Error(\"Nodebox URL is missing. Did you forget to provide it when creating this Nodebox instance?\")\n      );\n    }\n    invariant(\n      iframe.contentWindow,\n      \"Failed to create a MessageChannel with the Nodebox iframe: no content window found\"\n    );\n    this.channel = new MessageSender(iframe.contentWindow);\n    const frameLoadPromise = new import_deferred_promise3.DeferredPromise();\n    iframe.setAttribute(\"src\", this.url);\n    iframe.addEventListener(\n      \"load\",\n      () => {\n        frameLoadPromise.resolve();\n      },\n      { once: true }\n    );\n    iframe.addEventListener(\n      \"error\",\n      (event) => {\n        frameLoadPromise.reject(event.error);\n      },\n      { once: true }\n    );\n    await frameLoadPromise;\n    debug2(\"[message-sender]: IFrame loaded...\");\n    await this.channel.handshake();\n    debug2(\"[message-sender]: Handshake completed...\");\n    this.channel.send(\"connect\", {\n      cdnUrl\n    });\n    this.channel.on(\"runtime/ready\", () => {\n      connectionPromise.resolve();\n    });\n    return connectionPromise.then(() => {\n      debug2(\"[message-sender]: Connected to runtime...\");\n      this.isConnected = true;\n    });\n  }\n  get fs() {\n    invariant(\n      this.isConnected,\n      'Failed to access the File System API: consumer is not connected. Did you forget to run \"connect()\"?'\n    );\n    if (this.fileSystemApi) {\n      return this.fileSystemApi;\n    }\n    this.fileSystemApi = new FileSystemApi(this.channel);\n    return this.fileSystemApi;\n  }\n  get shell() {\n    invariant(\n      this.isConnected,\n      'Failed to access the Shell API: consumer is not connected. Did you forget to run \"connect()\"?'\n    );\n    if (this.shellApi) {\n      return this.shellApi;\n    }\n    this.shellApi = new ShellApi(this.channel);\n    return this.shellApi;\n  }\n  get preview() {\n    invariant(\n      this.isConnected,\n      'Failed to access the Preview API: consumer is not connected. Did you forget to run \"connect()\"?'\n    );\n    if (this.previewApi) {\n      return this.previewApi;\n    }\n    this.previewApi = new PreviewApi(this.channel);\n    return this.previewApi;\n  }\n};\n\n// src/runtime-protocol.types.ts\nvar INJECT_MESSAGE_TYPE = \"INJECT_AND_INVOKE\";\nvar PREVIEW_LOADED_MESSAGE_TYPE = \"PREVIEW_LOADED\";\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@codesandbox/nodebox/build/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@codesandbox/sandpack-client/dist/base-80a1f760.mjs":
/*!**************************************************************************!*\
  !*** ./node_modules/@codesandbox/sandpack-client/dist/base-80a1f760.mjs ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   S: () => (/* binding */ SandpackClient)\n/* harmony export */ });\n/* harmony import */ var dequal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dequal */ \"(ssr)/./node_modules/dequal/dist/index.mjs\");\n\n\nvar SandpackClient = /** @class */ (function () {\n    function SandpackClient(iframeSelector, sandboxSetup, options) {\n        if (options === void 0) { options = {}; }\n        this.status = \"idle\";\n        this.options = options;\n        this.sandboxSetup = sandboxSetup;\n        this.iframeSelector = iframeSelector;\n    }\n    /**\n     * Clients handles\n     */\n    SandpackClient.prototype.updateOptions = function (options) {\n        if (!(0,dequal__WEBPACK_IMPORTED_MODULE_0__.dequal)(this.options, options)) {\n            this.options = options;\n            this.updateSandbox();\n        }\n    };\n    SandpackClient.prototype.updateSandbox = function (_sandboxSetup, _isInitializationCompile) {\n        if (_sandboxSetup === void 0) { _sandboxSetup = this.sandboxSetup; }\n        throw Error(\"Method not implemented\");\n    };\n    SandpackClient.prototype.destroy = function () {\n        throw Error(\"Method not implemented\");\n    };\n    /**\n     * Bundler communication\n     */\n    SandpackClient.prototype.dispatch = function (_message) {\n        throw Error(\"Method not implemented\");\n    };\n    SandpackClient.prototype.listen = function (_listener) {\n        throw Error(\"Method not implemented\");\n    };\n    return SandpackClient;\n}());\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvZGVzYW5kYm94L3NhbmRwYWNrLWNsaWVudC9kaXN0L2Jhc2UtODBhMWY3NjAubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQWdDOztBQUVoQztBQUNBO0FBQ0Esa0NBQWtDO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsOENBQU07QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3QztBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUU4QiIsInNvdXJjZXMiOlsid2VicGFjazovL2xsYW1hY29kZXItbmV3Ly4vbm9kZV9tb2R1bGVzL0Bjb2Rlc2FuZGJveC9zYW5kcGFjay1jbGllbnQvZGlzdC9iYXNlLTgwYTFmNzYwLm1qcz8wNmY5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGRlcXVhbCB9IGZyb20gJ2RlcXVhbCc7XG5cbnZhciBTYW5kcGFja0NsaWVudCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTYW5kcGFja0NsaWVudChpZnJhbWVTZWxlY3Rvciwgc2FuZGJveFNldHVwLCBvcHRpb25zKSB7XG4gICAgICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XG4gICAgICAgIHRoaXMuc3RhdHVzID0gXCJpZGxlXCI7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIHRoaXMuc2FuZGJveFNldHVwID0gc2FuZGJveFNldHVwO1xuICAgICAgICB0aGlzLmlmcmFtZVNlbGVjdG9yID0gaWZyYW1lU2VsZWN0b3I7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENsaWVudHMgaGFuZGxlc1xuICAgICAqL1xuICAgIFNhbmRwYWNrQ2xpZW50LnByb3RvdHlwZS51cGRhdGVPcHRpb25zID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKCFkZXF1YWwodGhpcy5vcHRpb25zLCBvcHRpb25zKSkge1xuICAgICAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgICAgIHRoaXMudXBkYXRlU2FuZGJveCgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTYW5kcGFja0NsaWVudC5wcm90b3R5cGUudXBkYXRlU2FuZGJveCA9IGZ1bmN0aW9uIChfc2FuZGJveFNldHVwLCBfaXNJbml0aWFsaXphdGlvbkNvbXBpbGUpIHtcbiAgICAgICAgaWYgKF9zYW5kYm94U2V0dXAgPT09IHZvaWQgMCkgeyBfc2FuZGJveFNldHVwID0gdGhpcy5zYW5kYm94U2V0dXA7IH1cbiAgICAgICAgdGhyb3cgRXJyb3IoXCJNZXRob2Qgbm90IGltcGxlbWVudGVkXCIpO1xuICAgIH07XG4gICAgU2FuZHBhY2tDbGllbnQucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRocm93IEVycm9yKFwiTWV0aG9kIG5vdCBpbXBsZW1lbnRlZFwiKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEJ1bmRsZXIgY29tbXVuaWNhdGlvblxuICAgICAqL1xuICAgIFNhbmRwYWNrQ2xpZW50LnByb3RvdHlwZS5kaXNwYXRjaCA9IGZ1bmN0aW9uIChfbWVzc2FnZSkge1xuICAgICAgICB0aHJvdyBFcnJvcihcIk1ldGhvZCBub3QgaW1wbGVtZW50ZWRcIik7XG4gICAgfTtcbiAgICBTYW5kcGFja0NsaWVudC5wcm90b3R5cGUubGlzdGVuID0gZnVuY3Rpb24gKF9saXN0ZW5lcikge1xuICAgICAgICB0aHJvdyBFcnJvcihcIk1ldGhvZCBub3QgaW1wbGVtZW50ZWRcIik7XG4gICAgfTtcbiAgICByZXR1cm4gU2FuZHBhY2tDbGllbnQ7XG59KCkpO1xuXG5leHBvcnQgeyBTYW5kcGFja0NsaWVudCBhcyBTIH07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@codesandbox/sandpack-client/dist/base-80a1f760.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@codesandbox/sandpack-client/dist/clients/node/index.mjs":
/*!*******************************************************************************!*\
  !*** ./node_modules/@codesandbox/sandpack-client/dist/clients/node/index.mjs ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SandpackNode: () => (/* binding */ SandpackNode)\n/* harmony export */ });\n/* harmony import */ var _utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils-52664384.mjs */ \"(ssr)/./node_modules/@codesandbox/sandpack-client/dist/utils-52664384.mjs\");\n/* harmony import */ var _codesandbox_nodebox__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @codesandbox/nodebox */ \"(ssr)/./node_modules/@codesandbox/nodebox/build/index.mjs\");\n/* harmony import */ var _base_80a1f760_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../base-80a1f760.mjs */ \"(ssr)/./node_modules/@codesandbox/sandpack-client/dist/base-80a1f760.mjs\");\n/* harmony import */ var _consoleHook_59e792cb_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../consoleHook-59e792cb.mjs */ \"(ssr)/./node_modules/@codesandbox/sandpack-client/dist/consoleHook-59e792cb.mjs\");\n/* harmony import */ var outvariant__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! outvariant */ \"(ssr)/./node_modules/outvariant/lib/index.mjs\");\n/* harmony import */ var dequal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! dequal */ \"(ssr)/./node_modules/dequal/dist/index.mjs\");\n\n\n\n\n\n\n\nfunction loadPreviewIframe(iframe, url) {\n    return (0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__._)(this, void 0, void 0, function () {\n        var contentWindow, TIME_OUT, MAX_MANY_TIRES, tries, timeout;\n        return (0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__.a)(this, function (_a) {\n            contentWindow = iframe.contentWindow;\n            (0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__.n)(contentWindow, \"Failed to await preview iframe: no content window found\");\n            TIME_OUT = 90000;\n            MAX_MANY_TIRES = 20;\n            tries = 0;\n            return [2 /*return*/, new Promise(function (resolve, reject) {\n                    var triesToSetUrl = function () {\n                        var onLoadPage = function () {\n                            clearTimeout(timeout);\n                            tries = MAX_MANY_TIRES;\n                            resolve();\n                            iframe.removeEventListener(\"load\", onLoadPage);\n                        };\n                        if (tries >= MAX_MANY_TIRES) {\n                            reject((0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__.c)(\"Could not able to connect to preview.\"));\n                            return;\n                        }\n                        iframe.setAttribute(\"src\", url);\n                        timeout = setTimeout(function () {\n                            triesToSetUrl();\n                            iframe.removeEventListener(\"load\", onLoadPage);\n                        }, TIME_OUT);\n                        tries = tries + 1;\n                        iframe.addEventListener(\"load\", onLoadPage);\n                    };\n                    iframe.addEventListener(\"error\", function () { return reject(new Error(\"Iframe error\")); });\n                    iframe.addEventListener(\"abort\", function () { return reject(new Error(\"Aborted\")); });\n                    triesToSetUrl();\n                })];\n        });\n    });\n}\nvar setPreviewIframeProperties = function (iframe, options) {\n    iframe.style.border = \"0\";\n    iframe.style.width = options.width || \"100%\";\n    iframe.style.height = options.height || \"100%\";\n    iframe.style.overflow = \"hidden\";\n    iframe.allow = \"cross-origin-isolated\";\n};\n\n/* eslint-disable @typescript-eslint/ban-ts-comment, @typescript-eslint/explicit-function-return-type, no-restricted-globals, @typescript-eslint/no-explicit-any  */\nfunction setupHistoryListeners(_a) {\n    var scope = _a.scope;\n    // @ts-ignore\n    var origHistoryProto = window.history.__proto__;\n    var historyList = [];\n    var historyPosition = 0;\n    var dispatchMessage = function (url) {\n        parent.postMessage({\n            type: \"urlchange\",\n            url: url,\n            back: historyPosition > 0,\n            forward: historyPosition < historyList.length - 1,\n            channelId: scope.channelId,\n        }, \"*\");\n    };\n    function pushHistory(url, state) {\n        // remove \"future\" locations\n        historyList.splice(historyPosition + 1);\n        historyList.push({ url: url, state: state });\n        historyPosition = historyList.length - 1;\n    }\n    Object.assign(window.history, {\n        go: function (delta) {\n            var newPos = historyPosition + delta;\n            if (newPos >= 0 && newPos <= historyList.length - 1) {\n                historyPosition = newPos;\n                var _a = historyList[historyPosition], url = _a.url, state = _a.state;\n                origHistoryProto.replaceState.call(window.history, state, \"\", url);\n                var newURL = document.location.href;\n                dispatchMessage(newURL);\n                window.dispatchEvent(new PopStateEvent(\"popstate\", { state: state }));\n            }\n        },\n        back: function () {\n            window.history.go(-1);\n        },\n        forward: function () {\n            window.history.go(1);\n        },\n        pushState: function (state, title, url) {\n            origHistoryProto.replaceState.call(window.history, state, title, url);\n            pushHistory(url, state);\n            dispatchMessage(document.location.href);\n        },\n        replaceState: function (state, title, url) {\n            origHistoryProto.replaceState.call(window.history, state, title, url);\n            historyList[historyPosition] = { state: state, url: url };\n            dispatchMessage(document.location.href);\n        },\n    });\n    function handleMessage(_a) {\n        var data = _a.data;\n        if (data.type === \"urlback\") {\n            history.back();\n        }\n        else if (data.type === \"urlforward\") {\n            history.forward();\n        }\n        else if (data.type === \"refresh\") {\n            document.location.reload();\n        }\n    }\n    window.addEventListener(\"message\", handleMessage);\n}\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nfunction watchResize(_a) {\n    var scope = _a.scope;\n    var lastHeight = 0;\n    function getDocumentHeight() {\n        if (typeof window === \"undefined\")\n            return 0;\n        var body = document.body;\n        var html = document.documentElement;\n        return Math.max(body.scrollHeight, body.offsetHeight, html.offsetHeight);\n    }\n    function sendResizeEvent() {\n        var height = getDocumentHeight();\n        if (lastHeight !== height) {\n            window.parent.postMessage({\n                type: \"resize\",\n                height: height,\n                codesandbox: true,\n                channelId: scope.channelId,\n            }, \"*\");\n        }\n        lastHeight = height;\n    }\n    sendResizeEvent();\n    var throttle;\n    var observer = new MutationObserver(function () {\n        if (throttle === undefined) {\n            sendResizeEvent();\n            throttle = setTimeout(function () {\n                throttle = undefined;\n            }, 300);\n        }\n    });\n    observer.observe(document, {\n        attributes: true,\n        childList: true,\n        subtree: true,\n    });\n    /**\n     * Ideally we should only use a `MutationObserver` to trigger a resize event,\n     * however, we noted that it's not 100% reliable, so we went for polling strategy as well\n     */\n    setInterval(sendResizeEvent, 300);\n}\n\n/* eslint-disable @typescript-eslint/ban-ts-comment */\nvar scripts = [\n    { code: setupHistoryListeners.toString(), id: \"historyListener\" },\n    {\n        code: \"function consoleHook({ scope }) {\" + _consoleHook_59e792cb_mjs__WEBPACK_IMPORTED_MODULE_4__.c + \"\\n};\",\n        id: \"consoleHook\",\n    },\n    { code: watchResize.toString(), id: \"watchResize\" },\n];\nvar injectScriptToIframe = function (iframe, channelId) {\n    scripts.forEach(function (_a) {\n        var _b;\n        var code = _a.code, id = _a.id;\n        var message = {\n            uid: id,\n            type: _codesandbox_nodebox__WEBPACK_IMPORTED_MODULE_0__.INJECT_MESSAGE_TYPE,\n            code: \"exports.activate = \".concat(code),\n            scope: { channelId: channelId },\n        };\n        (_b = iframe.contentWindow) === null || _b === void 0 ? void 0 : _b.postMessage(message, \"*\");\n    });\n};\n\n/* eslint-disable no-console,@typescript-eslint/no-explicit-any,prefer-rest-params,@typescript-eslint/explicit-module-boundary-types */\nvar SandpackNode = /** @class */ (function (_super) {\n    (0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__.g)(SandpackNode, _super);\n    function SandpackNode(selector, sandboxInfo, options) {\n        if (options === void 0) { options = {}; }\n        var _this = _super.call(this, selector, sandboxInfo, (0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__.h)((0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__.h)({}, options), { bundlerURL: options.bundlerURL })) || this;\n        _this._modulesCache = new Map();\n        _this.messageChannelId = (0,_consoleHook_59e792cb_mjs__WEBPACK_IMPORTED_MODULE_4__.g)();\n        _this._initPromise = null;\n        _this.emitter = new _consoleHook_59e792cb_mjs__WEBPACK_IMPORTED_MODULE_4__.E();\n        // Assign iframes\n        _this.manageIframes(selector);\n        // Init emulator\n        _this.emulator = new _codesandbox_nodebox__WEBPACK_IMPORTED_MODULE_0__.Nodebox({\n            iframe: _this.emulatorIframe,\n            runtimeUrl: _this.options.bundlerURL,\n        });\n        // Trigger initial compile\n        _this.updateSandbox(sandboxInfo);\n        return _this;\n    }\n    // Initialize nodebox, should only ever be called once\n    SandpackNode.prototype._init = function (files) {\n        return (0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__._)(this, void 0, void 0, function () {\n            return (0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__.a)(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.emulator.connect()];\n                    case 1:\n                        _a.sent();\n                        // 2. Setup\n                        return [4 /*yield*/, this.emulator.fs.init(files)];\n                    case 2:\n                        // 2. Setup\n                        _a.sent();\n                        // 2.1 Other dependencies\n                        return [4 /*yield*/, this.globalListeners()];\n                    case 3:\n                        // 2.1 Other dependencies\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * It initializes the emulator and provide it with files, template and script to run\n     */\n    SandpackNode.prototype.compile = function (files) {\n        return (0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__._)(this, void 0, void 0, function () {\n            var shellId, err_1;\n            return (0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__.a)(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 5, , 6]);\n                        // 1. Init\n                        this.status = \"initializing\";\n                        this.dispatch({ type: \"start\", firstLoad: true });\n                        if (!this._initPromise) {\n                            this._initPromise = this._init(files);\n                        }\n                        return [4 /*yield*/, this._initPromise];\n                    case 1:\n                        _a.sent();\n                        this.dispatch({ type: \"connected\" });\n                        return [4 /*yield*/, this.createShellProcessFromTask(files)];\n                    case 2:\n                        shellId = (_a.sent()).id;\n                        // 4. Launch Preview\n                        return [4 /*yield*/, this.createPreviewURLFromId(shellId)];\n                    case 3:\n                        // 4. Launch Preview\n                        _a.sent();\n                        return [4 /*yield*/, this.setLocationURLIntoIFrame()];\n                    case 4:\n                        _a.sent();\n                        // 5. Returns to consumer\n                        this.dispatchDoneMessage();\n                        return [3 /*break*/, 6];\n                    case 5:\n                        err_1 = _a.sent();\n                        this.dispatch({\n                            type: \"action\",\n                            action: \"notification\",\n                            notificationType: \"error\",\n                            title: (0,_consoleHook_59e792cb_mjs__WEBPACK_IMPORTED_MODULE_4__.a)(err_1),\n                        });\n                        this.dispatch({ type: \"done\", compilatonError: true });\n                        return [3 /*break*/, 6];\n                    case 6: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * It creates a new shell and run the starting task\n     */\n    SandpackNode.prototype.createShellProcessFromTask = function (files) {\n        return (0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__._)(this, void 0, void 0, function () {\n            var packageJsonContent;\n            var _a;\n            var _this = this;\n            return (0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__.a)(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        packageJsonContent = (0,_consoleHook_59e792cb_mjs__WEBPACK_IMPORTED_MODULE_4__.r)(files[\"/package.json\"]);\n                        this.emulatorCommand = (0,_consoleHook_59e792cb_mjs__WEBPACK_IMPORTED_MODULE_4__.b)(packageJsonContent);\n                        this.emulatorShellProcess = this.emulator.shell.create();\n                        // Shell listeners\n                        return [4 /*yield*/, this.emulatorShellProcess.on(\"exit\", function (exitCode) {\n                                _this.dispatch({\n                                    type: \"action\",\n                                    action: \"notification\",\n                                    notificationType: \"error\",\n                                    title: (0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__.c)(\"Error: process.exit(\".concat(exitCode, \") called.\")),\n                                });\n                            })];\n                    case 1:\n                        // Shell listeners\n                        _b.sent();\n                        return [4 /*yield*/, this.emulatorShellProcess.on(\"progress\", function (data) {\n                                var _a, _b;\n                                if (data.state === \"command_running\" ||\n                                    data.state === \"starting_command\") {\n                                    _this.dispatch({\n                                        type: \"shell/progress\",\n                                        data: (0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__.h)((0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__.h)({}, data), { command: [\n                                                (_a = _this.emulatorCommand) === null || _a === void 0 ? void 0 : _a[0],\n                                                (_b = _this.emulatorCommand) === null || _b === void 0 ? void 0 : _b[1].join(\" \"),\n                                            ].join(\" \") }),\n                                    });\n                                    _this.status = \"installing-dependencies\";\n                                    return;\n                                }\n                                _this.dispatch({ type: \"shell/progress\", data: data });\n                            })];\n                    case 2:\n                        _b.sent();\n                        this.emulatorShellProcess.stdout.on(\"data\", function (data) {\n                            _this.dispatch({ type: \"stdout\", payload: { data: data, type: \"out\" } });\n                        });\n                        this.emulatorShellProcess.stderr.on(\"data\", function (data) {\n                            _this.dispatch({ type: \"stdout\", payload: { data: data, type: \"err\" } });\n                        });\n                        return [4 /*yield*/, (_a = this.emulatorShellProcess).runCommand.apply(_a, this.emulatorCommand)];\n                    case 3: return [2 /*return*/, _b.sent()];\n                }\n            });\n        });\n    };\n    SandpackNode.prototype.createPreviewURLFromId = function (id) {\n        var _a;\n        return (0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__._)(this, void 0, void 0, function () {\n            var url;\n            return (0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__.a)(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        this.iframePreviewUrl = undefined;\n                        return [4 /*yield*/, this.emulator.preview.getByShellId(id)];\n                    case 1:\n                        url = (_b.sent()).url;\n                        this.iframePreviewUrl = url + ((_a = this.options.startRoute) !== null && _a !== void 0 ? _a : \"\");\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Nodebox needs to handle two types of iframes at the same time:\n     *\n     * 1. Runtime iframe: where the emulator process runs, which is responsible\n     *    for creating the other iframes (hidden);\n     * 2. Preview iframes: any other node process that contains a PORT (public);\n     */\n    SandpackNode.prototype.manageIframes = function (selector) {\n        var _a;\n        /**\n         * Pick the preview iframe\n         */\n        if (typeof selector === \"string\") {\n            var element = document.querySelector(selector);\n            (0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__.n)(element, \"The element '\".concat(selector, \"' was not found\"));\n            this.iframe = document.createElement(\"iframe\");\n            element === null || element === void 0 ? void 0 : element.appendChild(this.iframe);\n        }\n        else {\n            this.iframe = selector;\n        }\n        // Set preview iframe styles\n        setPreviewIframeProperties(this.iframe, this.options);\n        (0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__.n)(this.iframe.parentNode, \"The given iframe does not have a parent.\");\n        /**\n         * Create the runtime iframe, which is hidden sibling\n         * from the preview one\n         */\n        this.emulatorIframe = document.createElement(\"iframe\");\n        this.emulatorIframe.classList.add(\"sp-bridge-frame\");\n        (_a = this.iframe.parentNode) === null || _a === void 0 ? void 0 : _a.appendChild(this.emulatorIframe);\n    };\n    SandpackNode.prototype.setLocationURLIntoIFrame = function () {\n        return (0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__._)(this, void 0, void 0, function () {\n            return (0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__.a)(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this.iframePreviewUrl) return [3 /*break*/, 2];\n                        return [4 /*yield*/, loadPreviewIframe(this.iframe, this.iframePreviewUrl)];\n                    case 1:\n                        _a.sent();\n                        _a.label = 2;\n                    case 2: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Send all messages and events to tell to the\n     * consumer that the bundler is ready without any error\n     */\n    SandpackNode.prototype.dispatchDoneMessage = function () {\n        this.status = \"done\";\n        this.dispatch({ type: \"done\", compilatonError: false });\n        if (this.iframePreviewUrl) {\n            this.dispatch({\n                type: \"urlchange\",\n                url: this.iframePreviewUrl,\n                back: false,\n                forward: false,\n            });\n        }\n    };\n    SandpackNode.prototype.globalListeners = function () {\n        return (0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__._)(this, void 0, void 0, function () {\n            var _this = this;\n            return (0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__.a)(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        window.addEventListener(\"message\", function (event) {\n                            if (event.data.type === _codesandbox_nodebox__WEBPACK_IMPORTED_MODULE_0__.PREVIEW_LOADED_MESSAGE_TYPE) {\n                                injectScriptToIframe(_this.iframe, _this.messageChannelId);\n                            }\n                            if (event.data.type === \"urlchange\" &&\n                                event.data.channelId === _this.messageChannelId) {\n                                _this.dispatch({\n                                    type: \"urlchange\",\n                                    url: event.data.url,\n                                    back: event.data.back,\n                                    forward: event.data.forward,\n                                });\n                            }\n                            else if (event.data.channelId === _this.messageChannelId) {\n                                _this.dispatch(event.data);\n                            }\n                        });\n                        return [4 /*yield*/, this.emulator.fs.watch([\"*\"], [\n                                \".next\",\n                                \"node_modules\",\n                                \"build\",\n                                \"dist\",\n                                \"vendor\",\n                                \".config\",\n                                \".vuepress\",\n                            ], function (message) { return (0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__._)(_this, void 0, void 0, function () {\n                                var event, path, type, _a, content, newContent, err_2;\n                                return (0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__.a)(this, function (_b) {\n                                    switch (_b.label) {\n                                        case 0:\n                                            if (!message)\n                                                return [2 /*return*/];\n                                            event = message;\n                                            path = \"newPath\" in event\n                                                ? event.newPath\n                                                : \"path\" in event\n                                                    ? event.path\n                                                    : \"\";\n                                            return [4 /*yield*/, this.emulator.fs.stat(path)];\n                                        case 1:\n                                            type = (_b.sent()).type;\n                                            if (type !== \"file\")\n                                                return [2 /*return*/, null];\n                                            _b.label = 2;\n                                        case 2:\n                                            _b.trys.push([2, 10, , 11]);\n                                            _a = event.type;\n                                            switch (_a) {\n                                                case \"change\": return [3 /*break*/, 3];\n                                                case \"create\": return [3 /*break*/, 3];\n                                                case \"remove\": return [3 /*break*/, 5];\n                                                case \"rename\": return [3 /*break*/, 6];\n                                                case \"close\": return [3 /*break*/, 8];\n                                            }\n                                            return [3 /*break*/, 9];\n                                        case 3: return [4 /*yield*/, this.emulator.fs.readFile(event.path, \"utf8\")];\n                                        case 4:\n                                            content = _b.sent();\n                                            this.dispatch({\n                                                type: \"fs/change\",\n                                                path: event.path,\n                                                content: content,\n                                            });\n                                            this._modulesCache.set(event.path, (0,_consoleHook_59e792cb_mjs__WEBPACK_IMPORTED_MODULE_4__.w)(content));\n                                            return [3 /*break*/, 9];\n                                        case 5:\n                                            this.dispatch({\n                                                type: \"fs/remove\",\n                                                path: event.path,\n                                            });\n                                            this._modulesCache.delete(event.path);\n                                            return [3 /*break*/, 9];\n                                        case 6:\n                                            this.dispatch({\n                                                type: \"fs/remove\",\n                                                path: event.oldPath,\n                                            });\n                                            this._modulesCache.delete(event.oldPath);\n                                            return [4 /*yield*/, this.emulator.fs.readFile(event.newPath, \"utf8\")];\n                                        case 7:\n                                            newContent = _b.sent();\n                                            this.dispatch({\n                                                type: \"fs/change\",\n                                                path: event.newPath,\n                                                content: newContent,\n                                            });\n                                            this._modulesCache.set(event.newPath, (0,_consoleHook_59e792cb_mjs__WEBPACK_IMPORTED_MODULE_4__.w)(newContent));\n                                            return [3 /*break*/, 9];\n                                        case 8: return [3 /*break*/, 9];\n                                        case 9: return [3 /*break*/, 11];\n                                        case 10:\n                                            err_2 = _b.sent();\n                                            this.dispatch({\n                                                type: \"action\",\n                                                action: \"notification\",\n                                                notificationType: \"error\",\n                                                title: (0,_consoleHook_59e792cb_mjs__WEBPACK_IMPORTED_MODULE_4__.a)(err_2),\n                                            });\n                                            return [3 /*break*/, 11];\n                                        case 11: return [2 /*return*/];\n                                    }\n                                });\n                            }); })];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * PUBLIC Methods\n     */\n    SandpackNode.prototype.restartShellProcess = function () {\n        var _a;\n        return (0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__._)(this, void 0, void 0, function () {\n            return (0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__.a)(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!(this.emulatorShellProcess && this.emulatorCommand)) return [3 /*break*/, 3];\n                        // 1. Set the loading state and clean the URL\n                        this.dispatch({ type: \"start\", firstLoad: true });\n                        this.status = \"initializing\";\n                        // 2. Exit shell\n                        return [4 /*yield*/, this.emulatorShellProcess.kill()];\n                    case 1:\n                        // 2. Exit shell\n                        _b.sent();\n                        (_a = this.iframe) === null || _a === void 0 ? void 0 : _a.removeAttribute(\"attr\");\n                        this.emulator.fs.rm(\"/node_modules/.vite\", {\n                            recursive: true,\n                            force: true,\n                        });\n                        // 3 Run command again\n                        return [4 /*yield*/, this.compile(Object.fromEntries(this._modulesCache))];\n                    case 2:\n                        // 3 Run command again\n                        _b.sent();\n                        _b.label = 3;\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    SandpackNode.prototype.updateSandbox = function (setup) {\n        var _this = this;\n        var _a;\n        var modules = (0,_consoleHook_59e792cb_mjs__WEBPACK_IMPORTED_MODULE_4__.f)(setup.files);\n        /**\n         * Update file changes\n         */\n        if (((_a = this.emulatorShellProcess) === null || _a === void 0 ? void 0 : _a.state) === \"running\") {\n            Object.entries(modules).forEach(function (_a) {\n                var key = _a[0], value = _a[1];\n                if (!_this._modulesCache.get(key) ||\n                    (0,_consoleHook_59e792cb_mjs__WEBPACK_IMPORTED_MODULE_4__.r)(value) !== (0,_consoleHook_59e792cb_mjs__WEBPACK_IMPORTED_MODULE_4__.r)(_this._modulesCache.get(key))) {\n                    _this.emulator.fs.writeFile(key, value, { recursive: true });\n                }\n            });\n            return;\n        }\n        /**\n         * Pass init files to the bundler\n         */\n        this.dispatch({\n            codesandbox: true,\n            modules: modules,\n            template: setup.template,\n            type: \"compile\",\n        });\n        /**\n         * Add modules to cache, this will ensure uniqueness changes\n         *\n         * Keep it after the compile action, in order to update the cache at the right moment\n         */\n        Object.entries(modules).forEach(function (_a) {\n            var key = _a[0], value = _a[1];\n            _this._modulesCache.set(key, (0,_consoleHook_59e792cb_mjs__WEBPACK_IMPORTED_MODULE_4__.w)(value));\n        });\n    };\n    SandpackNode.prototype.dispatch = function (message) {\n        var _a, _b;\n        return (0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__._)(this, void 0, void 0, function () {\n            var _c;\n            return (0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__.a)(this, function (_d) {\n                switch (_d.label) {\n                    case 0:\n                        _c = message.type;\n                        switch (_c) {\n                            case \"compile\": return [3 /*break*/, 1];\n                            case \"refresh\": return [3 /*break*/, 2];\n                            case \"urlback\": return [3 /*break*/, 4];\n                            case \"urlforward\": return [3 /*break*/, 4];\n                            case \"shell/restart\": return [3 /*break*/, 5];\n                            case \"shell/openPreview\": return [3 /*break*/, 6];\n                        }\n                        return [3 /*break*/, 7];\n                    case 1:\n                        this.compile(message.modules);\n                        return [3 /*break*/, 8];\n                    case 2: return [4 /*yield*/, this.setLocationURLIntoIFrame()];\n                    case 3:\n                        _d.sent();\n                        return [3 /*break*/, 8];\n                    case 4:\n                        (_b = (_a = this.iframe) === null || _a === void 0 ? void 0 : _a.contentWindow) === null || _b === void 0 ? void 0 : _b.postMessage(message, \"*\");\n                        return [3 /*break*/, 8];\n                    case 5:\n                        this.restartShellProcess();\n                        return [3 /*break*/, 8];\n                    case 6:\n                        window.open(this.iframePreviewUrl, \"_blank\");\n                        return [3 /*break*/, 8];\n                    case 7:\n                        this.emitter.dispatch(message);\n                        _d.label = 8;\n                    case 8: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    SandpackNode.prototype.listen = function (listener) {\n        return this.emitter.listener(listener);\n    };\n    SandpackNode.prototype.destroy = function () {\n        this.emulatorIframe.remove();\n        this.emitter.cleanup();\n    };\n    return SandpackNode;\n}(_base_80a1f760_mjs__WEBPACK_IMPORTED_MODULE_5__.S));\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@codesandbox/sandpack-client/dist/clients/node/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@codesandbox/sandpack-client/dist/clients/runtime/index.mjs":
/*!**********************************************************************************!*\
  !*** ./node_modules/@codesandbox/sandpack-client/dist/clients/runtime/index.mjs ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SandpackRuntime: () => (/* binding */ SandpackRuntime)\n/* harmony export */ });\n/* harmony import */ var _utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils-52664384.mjs */ \"(ssr)/./node_modules/@codesandbox/sandpack-client/dist/utils-52664384.mjs\");\n/* harmony import */ var dequal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dequal */ \"(ssr)/./node_modules/dequal/dist/index.mjs\");\n/* harmony import */ var _base_80a1f760_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../base-80a1f760.mjs */ \"(ssr)/./node_modules/@codesandbox/sandpack-client/dist/base-80a1f760.mjs\");\n/* harmony import */ var mime_db__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! mime-db */ \"(ssr)/./node_modules/mime-db/index.js\");\n/* harmony import */ var outvariant__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! outvariant */ \"(ssr)/./node_modules/outvariant/lib/index.mjs\");\n\n\n\n\n\n\n/**\n * This file is a copy of the resolver from the `codesandbox-api` package.\n * We wanted to avoid to reference codesandbox-api because of the code that runs on load in the package.\n * The plan is to take some time and refactor codesandbox-api into what it was supposed to be in the first place,\n * an abstraction over the actions that can be dispatched between the bundler and the iframe.\n */\nvar Protocol = /** @class */ (function () {\n    function Protocol(type, handleMessage, protocol) {\n        var _this = this;\n        this.type = type;\n        this.handleMessage = handleMessage;\n        this.protocol = protocol;\n        this._disposeMessageListener = this.protocol.channelListen(function (msg) { return (0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__._)(_this, void 0, void 0, function () {\n            var message, result, response, err_1, response;\n            return (0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__.a)(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!(msg.type === this.getTypeId() && msg.method)) return [3 /*break*/, 4];\n                        message = msg;\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 3, , 4]);\n                        return [4 /*yield*/, this.handleMessage(message)];\n                    case 2:\n                        result = _a.sent();\n                        response = {\n                            type: this.getTypeId(),\n                            msgId: message.msgId,\n                            result: result,\n                        };\n                        this.protocol.dispatch(response);\n                        return [3 /*break*/, 4];\n                    case 3:\n                        err_1 = _a.sent();\n                        response = {\n                            type: this.getTypeId(),\n                            msgId: message.msgId,\n                            error: {\n                                message: err_1.message,\n                            },\n                        };\n                        this.protocol.dispatch(response);\n                        return [3 /*break*/, 4];\n                    case 4: return [2 /*return*/];\n                }\n            });\n        }); });\n    }\n    Protocol.prototype.getTypeId = function () {\n        return \"protocol-\".concat(this.type);\n    };\n    Protocol.prototype.dispose = function () {\n        this._disposeMessageListener();\n    };\n    return Protocol;\n}());\n\nvar IFrameProtocol = /** @class */ (function () {\n    function IFrameProtocol(iframe, origin) {\n        // React to messages from any iframe\n        this.globalListeners = {};\n        this.globalListenersCount = 0;\n        // React to messages from the iframe owned by this instance\n        this.channelListeners = {};\n        this.channelListenersCount = 0;\n        // Random number to identify this instance of the client when messages are coming from multiple iframes\n        this.channelId = Math.floor(Math.random() * 1000000);\n        this.frameWindow = iframe.contentWindow;\n        this.origin = origin;\n        this.globalListeners = [];\n        this.channelListeners = [];\n        this.eventListener = this.eventListener.bind(this);\n        if (typeof window !== \"undefined\") {\n            window.addEventListener(\"message\", this.eventListener);\n        }\n    }\n    IFrameProtocol.prototype.cleanup = function () {\n        window.removeEventListener(\"message\", this.eventListener);\n        this.globalListeners = {};\n        this.channelListeners = {};\n        this.globalListenersCount = 0;\n        this.channelListenersCount = 0;\n    };\n    // Sends the channelId and triggers an iframeHandshake promise to resolve,\n    // so the iframe can start listening for messages (based on the id)\n    IFrameProtocol.prototype.register = function () {\n        if (!this.frameWindow) {\n            return;\n        }\n        this.frameWindow.postMessage({\n            type: \"register-frame\",\n            origin: document.location.origin,\n            id: this.channelId,\n        }, this.origin);\n    };\n    // Messages are dispatched from the client directly to the instance iframe\n    IFrameProtocol.prototype.dispatch = function (message) {\n        if (!this.frameWindow) {\n            return;\n        }\n        this.frameWindow.postMessage((0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__.h)({ $id: this.channelId, codesandbox: true }, message), this.origin);\n    };\n    // Add a listener that is called on any message coming from an iframe in the page\n    // This is needed for the `initialize` message which comes without a channelId\n    IFrameProtocol.prototype.globalListen = function (listener) {\n        var _this = this;\n        if (typeof listener !== \"function\") {\n            return function () {\n                return;\n            };\n        }\n        var listenerId = this.globalListenersCount;\n        this.globalListeners[listenerId] = listener;\n        this.globalListenersCount++;\n        return function () {\n            delete _this.globalListeners[listenerId];\n        };\n    };\n    // Add a listener that is called on any message coming from an iframe with the instance channelId\n    // All other messages (eg: from other iframes) are ignored\n    IFrameProtocol.prototype.channelListen = function (listener) {\n        var _this = this;\n        if (typeof listener !== \"function\") {\n            return function () {\n                return;\n            };\n        }\n        var listenerId = this.channelListenersCount;\n        this.channelListeners[listenerId] = listener;\n        this.channelListenersCount++;\n        return function () {\n            delete _this.channelListeners[listenerId];\n        };\n    };\n    // Handles message windows coming from iframes\n    IFrameProtocol.prototype.eventListener = function (evt) {\n        // skip events originating from different iframes\n        if (evt.source !== this.frameWindow) {\n            return;\n        }\n        var message = evt.data;\n        if (!message.codesandbox) {\n            return;\n        }\n        Object.values(this.globalListeners).forEach(function (listener) {\n            return listener(message);\n        });\n        if (message.$id !== this.channelId) {\n            return;\n        }\n        Object.values(this.channelListeners).forEach(function (listener) {\n            return listener(message);\n        });\n    };\n    return IFrameProtocol;\n}());\n\nvar extensionMap = new Map();\nvar entries = Object.entries(mime_db__WEBPACK_IMPORTED_MODULE_1__);\nfor (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {\n    var _a$1 = entries_1[_i], mimetype = _a$1[0], entry = _a$1[1];\n    // eslint-disable-next-line\n    // @ts-ignore\n    if (!entry.extensions) {\n        continue;\n    }\n    // eslint-disable-next-line\n    // @ts-ignore\n    var extensions = entry.extensions;\n    if (extensions.length) {\n        for (var _b = 0, extensions_1 = extensions; _b < extensions_1.length; _b++) {\n            var ext = extensions_1[_b];\n            extensionMap.set(ext, mimetype);\n        }\n    }\n}\nvar EXTENSIONS_MAP = extensionMap;\n\nvar CHANNEL_NAME = \"$CSB_RELAY\";\n\nvar MAX_CLIENT_DEPENDENCY_COUNT = 50;\nfunction getTemplate(pkg, \n/* eslint-disable @typescript-eslint/no-explicit-any */\nmodules) {\n    if (!pkg) {\n        return \"static\";\n    }\n    var _a = pkg.dependencies, dependencies = _a === void 0 ? {} : _a, _b = pkg.devDependencies, devDependencies = _b === void 0 ? {} : _b;\n    var totalDependencies = (0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__.i)((0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__.i)([], Object.keys(dependencies), true), Object.keys(devDependencies), true);\n    var moduleNames = Object.keys(modules);\n    var adonis = [\"@adonisjs/framework\", \"@adonisjs/core\"];\n    if (totalDependencies.some(function (dep) { return adonis.indexOf(dep) > -1; })) {\n        return \"adonis\";\n    }\n    var nuxt = [\"nuxt\", \"nuxt-edge\", \"nuxt-ts\", \"nuxt-ts-edge\", \"nuxt3\"];\n    if (totalDependencies.some(function (dep) { return nuxt.indexOf(dep) > -1; })) {\n        return \"nuxt\";\n    }\n    if (totalDependencies.indexOf(\"next\") > -1) {\n        return \"next\";\n    }\n    var apollo = [\n        \"apollo-server\",\n        \"apollo-server-express\",\n        \"apollo-server-hapi\",\n        \"apollo-server-koa\",\n        \"apollo-server-lambda\",\n        \"apollo-server-micro\",\n    ];\n    if (totalDependencies.some(function (dep) { return apollo.indexOf(dep) > -1; })) {\n        return \"apollo\";\n    }\n    if (totalDependencies.indexOf(\"mdx-deck\") > -1) {\n        return \"mdx-deck\";\n    }\n    if (totalDependencies.indexOf(\"gridsome\") > -1) {\n        return \"gridsome\";\n    }\n    if (totalDependencies.indexOf(\"vuepress\") > -1) {\n        return \"vuepress\";\n    }\n    if (totalDependencies.indexOf(\"ember-cli\") > -1) {\n        return \"ember\";\n    }\n    if (totalDependencies.indexOf(\"sapper\") > -1) {\n        return \"sapper\";\n    }\n    if (totalDependencies.indexOf(\"gatsby\") > -1) {\n        return \"gatsby\";\n    }\n    if (totalDependencies.indexOf(\"quasar\") > -1) {\n        return \"quasar\";\n    }\n    if (totalDependencies.indexOf(\"@docusaurus/core\") > -1) {\n        return \"docusaurus\";\n    }\n    if (totalDependencies.indexOf(\"remix\") > -1) {\n        return \"remix\";\n    }\n    if (totalDependencies.indexOf(\"astro\") > -1) {\n        return \"node\";\n    }\n    // CLIENT\n    if (moduleNames.some(function (m) { return m.endsWith(\".re\"); })) {\n        return \"reason\";\n    }\n    var parcel = [\"parcel-bundler\", \"parcel\"];\n    if (totalDependencies.some(function (dep) { return parcel.indexOf(dep) > -1; })) {\n        return \"parcel\";\n    }\n    var dojo = [\"@dojo/core\", \"@dojo/framework\"];\n    if (totalDependencies.some(function (dep) { return dojo.indexOf(dep) > -1; })) {\n        return \"@dojo/cli-create-app\";\n    }\n    if (totalDependencies.indexOf(\"@nestjs/core\") > -1 ||\n        totalDependencies.indexOf(\"@nestjs/common\") > -1) {\n        return \"nest\";\n    }\n    if (totalDependencies.indexOf(\"react-styleguidist\") > -1) {\n        return \"styleguidist\";\n    }\n    if (totalDependencies.indexOf(\"react-scripts\") > -1) {\n        return \"create-react-app\";\n    }\n    if (totalDependencies.indexOf(\"react-scripts-ts\") > -1) {\n        return \"create-react-app-typescript\";\n    }\n    if (totalDependencies.indexOf(\"@angular/core\") > -1) {\n        return \"angular-cli\";\n    }\n    if (totalDependencies.indexOf(\"preact-cli\") > -1) {\n        return \"preact-cli\";\n    }\n    if (totalDependencies.indexOf(\"@sveltech/routify\") > -1 ||\n        totalDependencies.indexOf(\"@roxi/routify\") > -1) {\n        return \"node\";\n    }\n    if (totalDependencies.indexOf(\"vite\") > -1) {\n        return \"node\";\n    }\n    if (totalDependencies.indexOf(\"@frontity/core\") > -1) {\n        return \"node\";\n    }\n    if (totalDependencies.indexOf(\"svelte\") > -1) {\n        return \"svelte\";\n    }\n    if (totalDependencies.indexOf(\"vue\") > -1) {\n        return \"vue-cli\";\n    }\n    if (totalDependencies.indexOf(\"cx\") > -1) {\n        return \"cxjs\";\n    }\n    var nodeDeps = [\n        \"express\",\n        \"koa\",\n        \"nodemon\",\n        \"ts-node\",\n        \"@tensorflow/tfjs-node\",\n        \"webpack-dev-server\",\n        \"snowpack\",\n    ];\n    if (totalDependencies.some(function (dep) { return nodeDeps.indexOf(dep) > -1; })) {\n        return \"node\";\n    }\n    if (Object.keys(dependencies).length >= MAX_CLIENT_DEPENDENCY_COUNT) {\n        // The dependencies are too much for client sandboxes to handle\n        return \"node\";\n    }\n    return undefined;\n}\nfunction getExtension(filepath) {\n    var parts = filepath.split(\".\");\n    if (parts.length <= 1) {\n        return \"\";\n    }\n    else {\n        var ext = parts[parts.length - 1];\n        return ext;\n    }\n}\n\nvar _a;\nvar SUFFIX_PLACEHOLDER = \"-{{suffix}}\";\nvar BUNDLER_URL = \"https://\".concat((_a = \"2.18.2\") === null || _a === void 0 ? void 0 : _a.replace(/\\./g, \"-\")).concat(SUFFIX_PLACEHOLDER, \"-sandpack.codesandbox.io/\");\nvar SandpackRuntime = /** @class */ (function (_super) {\n    (0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__.g)(SandpackRuntime, _super);\n    function SandpackRuntime(selector, sandboxSetup, options) {\n        if (options === void 0) { options = {}; }\n        var _this = _super.call(this, selector, sandboxSetup, options) || this;\n        _this.getTranspilerContext = function () {\n            return new Promise(function (resolve) {\n                var unsubscribe = _this.listen(function (message) {\n                    if (message.type === \"transpiler-context\") {\n                        resolve(message.data);\n                        unsubscribe();\n                    }\n                });\n                _this.dispatch({ type: \"get-transpiler-context\" });\n            });\n        };\n        _this.bundlerURL = _this.createBundlerURL();\n        _this.bundlerState = undefined;\n        _this.errors = [];\n        _this.status = \"initializing\";\n        if (typeof selector === \"string\") {\n            _this.selector = selector;\n            var element = document.querySelector(selector);\n            (0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__.n)(element, \"The element '\".concat(selector, \"' was not found\"));\n            _this.element = element;\n            _this.iframe = document.createElement(\"iframe\");\n            _this.initializeElement();\n        }\n        else {\n            _this.element = selector;\n            _this.iframe = selector;\n        }\n        if (!_this.iframe.getAttribute(\"sandbox\")) {\n            _this.iframe.setAttribute(\"sandbox\", \"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts allow-downloads allow-pointer-lock\");\n            _this.iframe.setAttribute(\"allow\", \"accelerometer; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; clipboard-read; clipboard-write;\");\n        }\n        _this.setLocationURLIntoIFrame();\n        _this.iframeProtocol = new IFrameProtocol(_this.iframe, _this.bundlerURL);\n        _this.unsubscribeGlobalListener = _this.iframeProtocol.globalListen(function (mes) {\n            if (mes.type !== \"initialized\" || !_this.iframe.contentWindow) {\n                return;\n            }\n            _this.iframeProtocol.register();\n            if (_this.options.fileResolver) {\n                _this.fileResolverProtocol = new Protocol(\"fs\", function (data) { return (0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__._)(_this, void 0, void 0, function () {\n                    return (0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__.a)(this, function (_a) {\n                        if (data.method === \"isFile\") {\n                            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                            return [2 /*return*/, this.options.fileResolver.isFile(data.params[0])];\n                        }\n                        else if (data.method === \"readFile\") {\n                            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                            return [2 /*return*/, this.options.fileResolver.readFile(data.params[0])];\n                        }\n                        else {\n                            throw new Error(\"Method not supported\");\n                        }\n                    });\n                }); }, _this.iframeProtocol);\n            }\n            _this.updateSandbox(_this.sandboxSetup, true);\n        });\n        _this.unsubscribeChannelListener = _this.iframeProtocol.channelListen(function (mes) {\n            switch (mes.type) {\n                case \"start\": {\n                    _this.errors = [];\n                    break;\n                }\n                case \"status\": {\n                    _this.status = mes.status;\n                    break;\n                }\n                case \"action\": {\n                    if (mes.action === \"show-error\") {\n                        _this.errors = (0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__.i)((0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__.i)([], _this.errors, true), [(0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__.e)(mes)], false);\n                    }\n                    break;\n                }\n                case \"done\": {\n                    _this.status = \"done\";\n                    break;\n                }\n                case \"state\": {\n                    _this.bundlerState = mes.state;\n                    break;\n                }\n            }\n        });\n        if (options.experimental_enableServiceWorker) {\n            _this.serviceWorkerHandshake();\n        }\n        return _this;\n    }\n    SandpackRuntime.prototype.createBundlerURL = function () {\n        var _a;\n        var bundlerURL = this.options.bundlerURL || BUNDLER_URL;\n        // if it's a custom, skip the rest\n        if (this.options.bundlerURL) {\n            return bundlerURL;\n        }\n        if (this.options.teamId) {\n            bundlerURL =\n                bundlerURL.replace(\"https://\", \"https://\" + this.options.teamId + \"-\") +\n                    \"?cache=\".concat(Date.now());\n        }\n        if (this.options.experimental_enableServiceWorker) {\n            var suffixes = [];\n            suffixes.push(Math.random().toString(36).slice(4));\n            bundlerURL = bundlerURL.replace(SUFFIX_PLACEHOLDER, \"-\".concat((_a = this.options.experimental_stableServiceWorkerId) !== null && _a !== void 0 ? _a : suffixes.join(\"-\")));\n        }\n        else {\n            bundlerURL = bundlerURL.replace(SUFFIX_PLACEHOLDER, \"\");\n        }\n        return bundlerURL;\n    };\n    SandpackRuntime.prototype.serviceWorkerHandshake = function () {\n        var _this = this;\n        var channel = new MessageChannel();\n        var iframeContentWindow = this.iframe.contentWindow;\n        if (!iframeContentWindow) {\n            throw new Error(\"Could not get iframe contentWindow\");\n        }\n        var port = channel.port1;\n        port.onmessage = function (evt) {\n            if (typeof evt.data === \"object\" && evt.data.$channel === CHANNEL_NAME) {\n                switch (evt.data.$type) {\n                    case \"preview/ready\":\n                        // no op for now\n                        break;\n                    case \"preview/request\":\n                        _this.handleWorkerRequest(evt.data, port);\n                        break;\n                }\n            }\n        };\n        var sendMessage = function () {\n            var initMsg = {\n                $channel: CHANNEL_NAME,\n                $type: \"preview/init\",\n            };\n            iframeContentWindow.postMessage(initMsg, \"*\", [channel.port2]);\n            _this.iframe.removeEventListener(\"load\", sendMessage);\n        };\n        this.iframe.addEventListener(\"load\", sendMessage);\n    };\n    SandpackRuntime.prototype.handleWorkerRequest = function (request, port) {\n        try {\n            var filepath = new URL(request.url, this.bundlerURL).pathname;\n            var headers = {};\n            var files = this.getFiles();\n            var body = files[filepath].code;\n            if (!headers[\"Content-Type\"]) {\n                var extension = getExtension(filepath);\n                var foundMimetype = EXTENSIONS_MAP.get(extension);\n                if (foundMimetype) {\n                    headers[\"Content-Type\"] = foundMimetype;\n                }\n            }\n            var responseMessage = {\n                $channel: CHANNEL_NAME,\n                $type: \"preview/response\",\n                id: request.id,\n                headers: headers,\n                status: 200,\n                body: body,\n            };\n            port.postMessage(responseMessage);\n        }\n        catch (err) {\n            var responseMessage = {\n                $channel: CHANNEL_NAME,\n                $type: \"preview/response\",\n                id: request.id,\n                headers: {\n                    \"Content-Type\": \"text/html; charset=utf-8\",\n                },\n                status: 404,\n                body: \"File not found\",\n            };\n            port.postMessage(responseMessage);\n        }\n    };\n    SandpackRuntime.prototype.setLocationURLIntoIFrame = function () {\n        var _a;\n        var urlSource = this.options.startRoute\n            ? new URL(this.options.startRoute, this.bundlerURL).toString()\n            : this.bundlerURL;\n        (_a = this.iframe.contentWindow) === null || _a === void 0 ? void 0 : _a.location.replace(urlSource);\n        this.iframe.src = urlSource;\n    };\n    SandpackRuntime.prototype.destroy = function () {\n        this.unsubscribeChannelListener();\n        this.unsubscribeGlobalListener();\n        this.iframeProtocol.cleanup();\n    };\n    SandpackRuntime.prototype.updateOptions = function (options) {\n        if (!(0,dequal__WEBPACK_IMPORTED_MODULE_0__.dequal)(this.options, options)) {\n            this.options = options;\n            this.updateSandbox();\n        }\n    };\n    SandpackRuntime.prototype.updateSandbox = function (sandboxSetup, isInitializationCompile) {\n        var _a, _b, _c, _d;\n        if (sandboxSetup === void 0) { sandboxSetup = this.sandboxSetup; }\n        this.sandboxSetup = (0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__.h)((0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__.h)({}, this.sandboxSetup), sandboxSetup);\n        var files = this.getFiles();\n        var modules = Object.keys(files).reduce(function (prev, next) {\n            var _a;\n            return ((0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__.h)((0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__.h)({}, prev), (_a = {}, _a[next] = {\n                code: files[next].code,\n                path: next,\n            }, _a)));\n        }, {});\n        var packageJSON = JSON.parse((0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__.b)(this.sandboxSetup.dependencies, this.sandboxSetup.devDependencies, this.sandboxSetup.entry));\n        try {\n            packageJSON = JSON.parse(files[\"/package.json\"].code);\n        }\n        catch (e) {\n            console.error((0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__.c)(\"could not parse package.json file: \" + e.message));\n        }\n        // TODO move this to a common format\n        var normalizedModules = Object.keys(files).reduce(function (prev, next) {\n            var _a;\n            return ((0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__.h)((0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__.h)({}, prev), (_a = {}, _a[next] = {\n                content: files[next].code,\n                path: next,\n            }, _a)));\n        }, {});\n        this.dispatch((0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__.h)((0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__.h)({}, this.options), { type: \"compile\", codesandbox: true, version: 3, isInitializationCompile: isInitializationCompile, modules: modules, reactDevTools: this.options.reactDevTools, externalResources: this.options.externalResources || [], hasFileResolver: Boolean(this.options.fileResolver), disableDependencyPreprocessing: this.sandboxSetup.disableDependencyPreprocessing, experimental_enableServiceWorker: this.options.experimental_enableServiceWorker, template: this.sandboxSetup.template ||\n                getTemplate(packageJSON, normalizedModules), showOpenInCodeSandbox: (_a = this.options.showOpenInCodeSandbox) !== null && _a !== void 0 ? _a : true, showErrorScreen: (_b = this.options.showErrorScreen) !== null && _b !== void 0 ? _b : true, showLoadingScreen: (_c = this.options.showLoadingScreen) !== null && _c !== void 0 ? _c : false, skipEval: this.options.skipEval || false, clearConsoleDisabled: !this.options.clearConsoleOnFirstCompile, logLevel: (_d = this.options.logLevel) !== null && _d !== void 0 ? _d : _utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__.S.Info, customNpmRegistries: this.options.customNpmRegistries, teamId: this.options.teamId, sandboxId: this.options.sandboxId }));\n    };\n    SandpackRuntime.prototype.dispatch = function (message) {\n        /**\n         * Intercept \"refresh\" dispatch: this will make sure\n         * that the iframe is still in the location it's supposed to be.\n         * External links inside the iframe will change the location and\n         * prevent the user from navigating back.\n         */\n        if (message.type === \"refresh\") {\n            this.setLocationURLIntoIFrame();\n            if (this.options.experimental_enableServiceWorker) {\n                this.serviceWorkerHandshake();\n            }\n        }\n        this.iframeProtocol.dispatch(message);\n    };\n    SandpackRuntime.prototype.listen = function (listener) {\n        return this.iframeProtocol.channelListen(listener);\n    };\n    /**\n     * Get the URL of the contents of the current sandbox\n     */\n    SandpackRuntime.prototype.getCodeSandboxURL = function () {\n        var files = this.getFiles();\n        var paramFiles = Object.keys(files).reduce(function (prev, next) {\n            var _a;\n            return ((0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__.h)((0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__.h)({}, prev), (_a = {}, _a[next.replace(\"/\", \"\")] = {\n                content: files[next].code,\n                isBinary: false,\n            }, _a)));\n        }, {});\n        return fetch(\"https://codesandbox.io/api/v1/sandboxes/define?json=1\", {\n            method: \"POST\",\n            body: JSON.stringify({ files: paramFiles }),\n            headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\",\n            },\n        })\n            .then(function (x) { return x.json(); })\n            .then(function (res) { return ({\n            sandboxId: res.sandbox_id,\n            editorUrl: \"https://codesandbox.io/s/\".concat(res.sandbox_id),\n            embedUrl: \"https://codesandbox.io/embed/\".concat(res.sandbox_id),\n        }); });\n    };\n    SandpackRuntime.prototype.getFiles = function () {\n        var sandboxSetup = this.sandboxSetup;\n        if (sandboxSetup.files[\"/package.json\"] === undefined) {\n            return (0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__.d)(sandboxSetup.files, sandboxSetup.dependencies, sandboxSetup.devDependencies, sandboxSetup.entry);\n        }\n        return this.sandboxSetup.files;\n    };\n    SandpackRuntime.prototype.initializeElement = function () {\n        this.iframe.style.border = \"0\";\n        this.iframe.style.width = this.options.width || \"100%\";\n        this.iframe.style.height = this.options.height || \"100%\";\n        this.iframe.style.overflow = \"hidden\";\n        (0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__.n)(this.element.parentNode, \"The given iframe does not have a parent.\");\n        this.element.parentNode.replaceChild(this.iframe, this.element);\n    };\n    return SandpackRuntime;\n}(_base_80a1f760_mjs__WEBPACK_IMPORTED_MODULE_4__.S));\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@codesandbox/sandpack-client/dist/clients/runtime/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@codesandbox/sandpack-client/dist/consoleHook-59e792cb.mjs":
/*!*********************************************************************************!*\
  !*** ./node_modules/@codesandbox/sandpack-client/dist/consoleHook-59e792cb.mjs ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   E: () => (/* binding */ EventEmitter),\n/* harmony export */   a: () => (/* binding */ getMessageFromError),\n/* harmony export */   b: () => (/* binding */ findStartScriptPackageJson),\n/* harmony export */   c: () => (/* binding */ consoleHook),\n/* harmony export */   f: () => (/* binding */ fromBundlerFilesToFS),\n/* harmony export */   g: () => (/* binding */ generateRandomId),\n/* harmony export */   r: () => (/* binding */ readBuffer),\n/* harmony export */   w: () => (/* binding */ writeBuffer)\n/* harmony export */ });\n/* harmony import */ var outvariant__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! outvariant */ \"(ssr)/./node_modules/outvariant/lib/index.mjs\");\n/* harmony import */ var _utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils-52664384.mjs */ \"(ssr)/./node_modules/@codesandbox/sandpack-client/dist/utils-52664384.mjs\");\n\n\n\nvar EventEmitter = /** @class */ (function () {\n    function EventEmitter() {\n        this.listeners = {};\n        this.listenersCount = 0;\n        this.channelId = Math.floor(Math.random() * 1000000);\n        this.listeners = [];\n    }\n    EventEmitter.prototype.cleanup = function () {\n        this.listeners = {};\n        this.listenersCount = 0;\n    };\n    EventEmitter.prototype.dispatch = function (message) {\n        Object.values(this.listeners).forEach(function (listener) { return listener(message); });\n    };\n    EventEmitter.prototype.listener = function (listener) {\n        var _this = this;\n        if (typeof listener !== \"function\") {\n            return function () {\n                return;\n            };\n        }\n        var listenerId = this.listenersCount;\n        this.listeners[listenerId] = listener;\n        this.listenersCount++;\n        return function () {\n            delete _this.listeners[listenerId];\n        };\n    };\n    return EventEmitter;\n}());\n\nfunction isCommand(char) {\n    return /[a-zA-Z.]/.test(char);\n}\nfunction isAlpha(char) {\n    return /[a-zA-Z]/.test(char);\n}\nfunction isWhitespace(char) {\n    return /\\s/.test(char);\n}\nfunction isOperator(char) {\n    return /[&|]/.test(char);\n}\nfunction isArgument(char) {\n    return /-/.test(char);\n}\nfunction isString(char) {\n    return /[\"']/.test(char);\n}\nfunction isEnvVar(char) {\n    return isAlpha(char) && char === char.toUpperCase();\n}\nvar TokenType;\n(function (TokenType) {\n    TokenType[\"OR\"] = \"OR\";\n    TokenType[\"AND\"] = \"AND\";\n    TokenType[\"PIPE\"] = \"PIPE\";\n    TokenType[\"Command\"] = \"Command\";\n    TokenType[\"Argument\"] = \"Argument\";\n    TokenType[\"String\"] = \"String\";\n    TokenType[\"EnvVar\"] = \"EnvVar\";\n})(TokenType || (TokenType = {}));\nvar operators = new Map([\n    [\"&&\", { type: TokenType.AND }],\n    [\"||\", { type: TokenType.OR }],\n    [\"|\", { type: TokenType.PIPE }],\n    [\"-\", { type: TokenType.Argument }],\n]);\nfunction tokenize(input) {\n    var current = 0;\n    var tokens = [];\n    function parseCommand() {\n        var value = \"\";\n        while (isCommand(input[current]) && current < input.length) {\n            value += input[current];\n            current++;\n        }\n        return { type: TokenType.Command, value: value };\n    }\n    function parseOperator() {\n        var value = \"\";\n        while (isOperator(input[current]) && current < input.length) {\n            value += input[current];\n            current++;\n        }\n        return operators.get(value);\n    }\n    function parseArgument() {\n        var value = \"\";\n        while ((isArgument(input[current]) || isAlpha(input[current])) &&\n            current < input.length) {\n            value += input[current];\n            current++;\n        }\n        return { type: TokenType.Argument, value: value };\n    }\n    function parseString() {\n        var openCloseQuote = input[current];\n        var value = input[current];\n        current++;\n        while (input[current] !== openCloseQuote && current < input.length) {\n            value += input[current];\n            current++;\n        }\n        value += input[current];\n        current++;\n        return { type: TokenType.String, value: value };\n    }\n    function parseEnvVars() {\n        var value = {};\n        var parseSingleEnv = function () {\n            var key = \"\";\n            var pair = \"\";\n            while (input[current] !== \"=\" && current < input.length) {\n                key += input[current];\n                current++;\n            }\n            // Skip equal\n            if (input[current] === \"=\") {\n                current++;\n            }\n            while (input[current] !== \" \" && current < input.length) {\n                pair += input[current];\n                current++;\n            }\n            value[key] = pair;\n        };\n        while (isEnvVar(input[current]) && current < input.length) {\n            parseSingleEnv();\n            current++;\n        }\n        return { type: TokenType.EnvVar, value: value };\n    }\n    while (current < input.length) {\n        var currentChar = input[current];\n        if (isWhitespace(currentChar)) {\n            current++;\n            continue;\n        }\n        switch (true) {\n            case isEnvVar(currentChar):\n                tokens.push(parseEnvVars());\n                break;\n            case isCommand(currentChar):\n                tokens.push(parseCommand());\n                break;\n            case isOperator(currentChar):\n                tokens.push(parseOperator());\n                break;\n            case isArgument(currentChar):\n                tokens.push(parseArgument());\n                break;\n            case isString(currentChar):\n                tokens.push(parseString());\n                break;\n            default:\n                throw new Error(\"Unknown character: \".concat(currentChar));\n        }\n    }\n    return tokens;\n}\n\nvar counter = 0;\nfunction generateRandomId() {\n    var now = Date.now();\n    var randomNumber = Math.round(Math.random() * 10000);\n    var count = (counter += 1);\n    return (+\"\".concat(now).concat(randomNumber).concat(count)).toString(16);\n}\nvar writeBuffer = function (content) {\n    if (typeof content === \"string\") {\n        return new TextEncoder().encode(content);\n    }\n    else {\n        return content;\n    }\n};\nvar readBuffer = function (content) {\n    if (typeof content === \"string\") {\n        return content;\n    }\n    else {\n        return new TextDecoder().decode(content);\n    }\n};\nvar fromBundlerFilesToFS = function (files) {\n    return Object.entries(files).reduce(function (acc, _a) {\n        var key = _a[0], value = _a[1];\n        acc[key] = writeBuffer(value.code);\n        return acc;\n    }, {});\n};\n/**\n * Figure out which script it must run to start a server\n */\nvar findStartScriptPackageJson = function (packageJson) {\n    var scripts = {};\n    // TODO: support postinstall\n    var possibleKeys = [\"dev\", \"start\"];\n    try {\n        scripts = JSON.parse(packageJson).scripts;\n    }\n    catch (e) {\n        throw (0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_1__.c)(\"Could not parse package.json file: \" + e.message);\n    }\n    (0,outvariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(scripts, \"Failed to start. Please provide a `start` or `dev` script on the package.json\");\n    var _loop_1 = function (index) {\n        if (possibleKeys[index] in scripts) {\n            var script = possibleKeys[index];\n            var candidate = scripts[script];\n            var env_1 = {};\n            var command_1 = \"\";\n            var args_1 = [];\n            tokenize(candidate).forEach(function (item) {\n                var commandNotFoundYet = command_1 === \"\";\n                if (item.type === TokenType.EnvVar) {\n                    env_1 = item.value;\n                }\n                if (item.type === TokenType.Command && commandNotFoundYet) {\n                    command_1 = item.value;\n                }\n                if (item.type === TokenType.Argument ||\n                    (!commandNotFoundYet && item.type === TokenType.Command)) {\n                    args_1.push(item.value);\n                }\n                // TODO: support TokenType.AND, TokenType.OR, TokenType.PIPE\n            });\n            return { value: [command_1, args_1, { env: env_1 }] };\n        }\n    };\n    for (var index = 0; index < possibleKeys.length; index++) {\n        var state_1 = _loop_1(index);\n        if (typeof state_1 === \"object\")\n            return state_1.value;\n    }\n    throw (0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_1__.c)(\"Failed to start. Please provide a `start` or `dev` script on the package.json\");\n};\nvar getMessageFromError = function (error) {\n    if (typeof error === \"string\")\n        return error;\n    if (typeof error === \"object\" && \"message\" in error) {\n        return error.message;\n    }\n    return (0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_1__.c)(\"The server could not be reached. Make sure that the node script is running and that a port has been started.\");\n};\n\nvar consoleHook = \"var t=\\\"undefined\\\"!=typeof globalThis?globalThis:\\\"undefined\\\"!=typeof window?window:\\\"undefined\\\"!=typeof globalThis?globalThis:\\\"undefined\\\"!=typeof self?self:{};function r(t){return t&&t.__esModule&&Object.prototype.hasOwnProperty.call(t,\\\"default\\\")?t.default:t}var e={},n={};!function(t){t.__esModule=!0,t.default=[\\\"log\\\",\\\"debug\\\",\\\"info\\\",\\\"warn\\\",\\\"error\\\",\\\"table\\\",\\\"clear\\\",\\\"time\\\",\\\"timeEnd\\\",\\\"count\\\",\\\"assert\\\",\\\"command\\\",\\\"result\\\"]}(n);var a,o={},i={};(a=i).__esModule=!0,a.default=function(){var t=function(){return(65536*(1+Math.random())|0).toString(16).substring(1)};return t()+t()+\\\"-\\\"+t()+\\\"-\\\"+t()+\\\"-\\\"+t()+\\\"-\\\"+t()+\\\"-\\\"+Date.now()};var u={},s={__esModule:!0};s.update=s.state=void 0,s.update=function(t){s.state=t};var f={},c={};!function(r){var e=t&&t.__assign||function(){return e=Object.assign||function(t){for(var r,e=1,n=arguments.length;e<n;e++)for(var a in r=arguments[e])Object.prototype.hasOwnProperty.call(r,a)&&(t[a]=r[a]);return t},e.apply(this,arguments)};r.__esModule=!0,r.initialState=void 0,r.initialState={timings:{},count:{}};var n=function(){return\\\"undefined\\\"!=typeof performance&&performance.now?performance.now():Date.now()};r.default=function(t,a){var o,i,u;switch(void 0===t&&(t=r.initialState),a.type){case\\\"COUNT\\\":var s=t.count[a.name]||0;return e(e({},t),{count:e(e({},t.count),(o={},o[a.name]=s+1,o))});case\\\"TIME_START\\\":return e(e({},t),{timings:e(e({},t.timings),(i={},i[a.name]={start:n()},i))});case\\\"TIME_END\\\":var f=t.timings[a.name],c=n(),l=c-f.start;return e(e({},t),{timings:e(e({},t.timings),(u={},u[a.name]=e(e({},f),{end:c,time:l}),u))});default:return t}}}(c),function(r){var e=t&&t.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};r.__esModule=!0;var n=e(c),a=s;r.default=function(t){a.update(n.default(a.state,t))}}(f);var l={__esModule:!0};l.timeEnd=l.timeStart=l.count=void 0,l.count=function(t){return{type:\\\"COUNT\\\",name:t}},l.timeStart=function(t){return{type:\\\"TIME_START\\\",name:t}},l.timeEnd=function(t){return{type:\\\"TIME_END\\\",name:t}};var d=t&&t.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};u.__esModule=!0,u.stop=u.start=void 0;var p=s,h=d(f),m=l;u.start=function(t){h.default(m.timeStart(t))},u.stop=function(t){var r=null===p.state||void 0===p.state?void 0:p.state.timings[t];return r&&!r.end?(h.default(m.timeEnd(t)),{method:\\\"log\\\",data:[t+\\\": \\\"+p.state.timings[t].time+\\\"ms\\\"]}):{method:\\\"warn\\\",data:[\\\"Timer '\\\"+t+\\\"' does not exist\\\"]}};var y={},v=t&&t.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};y.__esModule=!0,y.increment=void 0;var _=s,b=v(f),g=l;y.increment=function(t){return b.default(g.count(t)),{method:\\\"log\\\",data:[t+\\\": \\\"+_.state.count[t]]}};var M={},T=t&&t.__spreadArrays||function(){for(var t=0,r=0,e=arguments.length;r<e;r++)t+=arguments[r].length;var n=Array(t),a=0;for(r=0;r<e;r++)for(var o=arguments[r],i=0,u=o.length;i<u;i++,a++)n[a]=o[i];return n};M.__esModule=!0,M.test=void 0,M.test=function(t){for(var r=[],e=1;e<arguments.length;e++)r[e-1]=arguments[e];return!t&&(0===r.length&&r.push(\\\"console.assert\\\"),{method:\\\"error\\\",data:T([\\\"Assertion failed:\\\"],r)})},function(r){var e=t&&t.__assign||function(){return e=Object.assign||function(t){for(var r,e=1,n=arguments.length;e<n;e++)for(var a in r=arguments[e])Object.prototype.hasOwnProperty.call(r,a)&&(t[a]=r[a]);return t},e.apply(this,arguments)},n=t&&t.__createBinding||(Object.create?function(t,r,e,n){void 0===n&&(n=e),Object.defineProperty(t,n,{enumerable:!0,get:function(){return r[e]}})}:function(t,r,e,n){void 0===n&&(n=e),t[n]=r[e]}),a=t&&t.__setModuleDefault||(Object.create?function(t,r){Object.defineProperty(t,\\\"default\\\",{enumerable:!0,value:r})}:function(t,r){t.default=r}),o=t&&t.__importStar||function(t){if(t&&t.__esModule)return t;var r={};if(null!=t)for(var e in t)\\\"default\\\"!==e&&Object.prototype.hasOwnProperty.call(t,e)&&n(r,t,e);return a(r,t),r},s=t&&t.__spreadArrays||function(){for(var t=0,r=0,e=arguments.length;r<e;r++)t+=arguments[r].length;var n=Array(t),a=0;for(r=0;r<e;r++)for(var o=arguments[r],i=0,u=o.length;i<u;i++,a++)n[a]=o[i];return n},f=t&&t.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};r.__esModule=!0;var c=f(i),l=o(u),d=o(y),p=o(M);r.default=function(t,r,n){var a=n||c.default();switch(t){case\\\"clear\\\":return{method:t,id:a};case\\\"count\\\":return!!(o=\\\"string\\\"==typeof r[0]?r[0]:\\\"default\\\")&&e(e({},d.increment(o)),{id:a});case\\\"time\\\":case\\\"timeEnd\\\":var o;return!!(o=\\\"string\\\"==typeof r[0]?r[0]:\\\"default\\\")&&(\\\"time\\\"===t?(l.start(o),!1):e(e({},l.stop(o)),{id:a}));case\\\"assert\\\":if(0!==r.length){var i=p.test.apply(p,s([r[0]],r.slice(1)));if(i)return e(e({},i),{id:a})}return!1;case\\\"error\\\":return{method:t,id:a,data:r.map((function(t){try{return t.stack||t}catch(r){return t}}))};default:return{method:t,id:a,data:r}}}}(o);var S={},O={};!function(t){var r;t.__esModule=!0,function(t){t[t.infinity=0]=\\\"infinity\\\",t[t.minusInfinity=1]=\\\"minusInfinity\\\",t[t.minusZero=2]=\\\"minusZero\\\"}(r||(r={})),t.default={type:\\\"Arithmetic\\\",lookup:Number,shouldTransform:function(t,r){return\\\"number\\\"===t&&(r===1/0||r===-1/0||function(t){return 1/t==-1/0}(r))},toSerializable:function(t){return t===1/0?r.infinity:t===-1/0?r.minusInfinity:r.minusZero},fromSerializable:function(t){return t===r.infinity?1/0:t===r.minusInfinity?-1/0:t===r.minusZero?-0:t}}}(O);var w={};!function(t){t.__esModule=!0,t.default={type:\\\"Function\\\",lookup:Function,shouldTransform:function(t,r){return\\\"function\\\"==typeof r},toSerializable:function(t){var r=\\\"\\\";try{r=t.toString().substring(r.indexOf(\\\"{\\\")+1,r.lastIndexOf(\\\"}\\\"))}catch(t){}return{name:t.name,body:r,proto:Object.getPrototypeOf(t).constructor.name}},fromSerializable:function(t){try{var r=function(){};return\\\"string\\\"==typeof t.name&&Object.defineProperty(r,\\\"name\\\",{value:t.name,writable:!1}),\\\"string\\\"==typeof t.body&&Object.defineProperty(r,\\\"body\\\",{value:t.body,writable:!1}),\\\"string\\\"==typeof t.proto&&(r.constructor={name:t.proto}),r}catch(r){return t}}}}(w);var A={};!function(t){var r;function e(t){for(var r={},e=0,n=t.attributes;e<n.length;e++){var a=n[e];r[a.name]=a.value}return r}t.__esModule=!0,t.default={type:\\\"HTMLElement\\\",shouldTransform:function(t,r){return r&&r.children&&\\\"string\\\"==typeof r.innerHTML&&\\\"string\\\"==typeof r.tagName},toSerializable:function(t){return{tagName:t.tagName.toLowerCase(),attributes:e(t),innerHTML:t.innerHTML}},fromSerializable:function(t){try{var e=(r||(r=document.implementation.createHTMLDocument(\\\"sandbox\\\"))).createElement(t.tagName);e.innerHTML=t.innerHTML;for(var n=0,a=Object.keys(t.attributes);n<a.length;n++){var o=a[n];try{e.setAttribute(o,t.attributes[o])}catch(t){}}return e}catch(r){return t}}}}(A);var j={};!function(r){var e=t&&t.__assign||function(){return e=Object.assign||function(t){for(var r,e=1,n=arguments.length;e<n;e++)for(var a in r=arguments[e])Object.prototype.hasOwnProperty.call(r,a)&&(t[a]=r[a]);return t},e.apply(this,arguments)};r.__esModule=!0,r.default={type:\\\"Map\\\",shouldTransform:function(t,r){return r&&r.constructor&&\\\"Map\\\"===r.constructor.name},toSerializable:function(t){var r={};return t.forEach((function(t,e){var n=\\\"object\\\"==typeof e?JSON.stringify(e):e;r[n]=t})),{name:\\\"Map\\\",body:r,proto:Object.getPrototypeOf(t).constructor.name}},fromSerializable:function(t){var r=t.body,n=e({},r);return\\\"string\\\"==typeof t.proto&&(n.constructor={name:t.proto}),n}}}(j);var z={};!function(t){t.__esModule=!0;var r=\\\"@t\\\",e=/^#*@(t|r)$/,n=(0,eval)(\\\"this\\\"),a=\\\"function\\\"==typeof ArrayBuffer,o=\\\"function\\\"==typeof Map,i=\\\"function\\\"==typeof Set,u=[\\\"Int8Array\\\",\\\"Uint8Array\\\",\\\"Uint8ClampedArray\\\",\\\"Int16Array\\\",\\\"Uint16Array\\\",\\\"Int32Array\\\",\\\"Uint32Array\\\",\\\"Float32Array\\\",\\\"Float64Array\\\"],s=Array.prototype.slice,f={serialize:function(t){return JSON.stringify(t)},deserialize:function(t){return JSON.parse(t)}},c=function(){function t(t,r){this.references=t,this.transforms=r,this.transformsMap=this._makeTransformsMap(),this.circularCandidates=[],this.circularCandidatesDescrs=[],this.circularRefCount=0}return t._createRefMark=function(t){var r=Object.create(null);return r[\\\"@r\\\"]=t,r},t.prototype._createCircularCandidate=function(t,r,e){this.circularCandidates.push(t),this.circularCandidatesDescrs.push({parent:r,key:e,refIdx:-1})},t.prototype._applyTransform=function(t,e,n,a){var o=Object.create(null),i=a.toSerializable(t);return\\\"object\\\"==typeof i&&this._createCircularCandidate(t,e,n),o[r]=a.type,o.data=this._handleValue((function(){return i}),e,n),o},t.prototype._handleArray=function(t){for(var r=[],e=function(e){r[e]=n._handleValue((function(){return t[e]}),r,e)},n=this,a=0;a<t.length;a++)e(a);return r},t.prototype._handlePlainObject=function(t){var r,n,a=Object.create(null),o=function(r){if(Reflect.has(t,r)){var n=e.test(r)?\\\"#\\\"+r:r;a[n]=i._handleValue((function(){return t[r]}),a,n)}},i=this;for(var u in t)o(u);var s=null===(n=null===(r=null==t?void 0:t.__proto__)||void 0===r?void 0:r.constructor)||void 0===n?void 0:n.name;return s&&\\\"Object\\\"!==s&&(a.constructor={name:s}),a},t.prototype._handleObject=function(t,r,e){return this._createCircularCandidate(t,r,e),Array.isArray(t)?this._handleArray(t):this._handlePlainObject(t)},t.prototype._ensureCircularReference=function(r){var e=this.circularCandidates.indexOf(r);if(e>-1){var n=this.circularCandidatesDescrs[e];return-1===n.refIdx&&(n.refIdx=n.parent?++this.circularRefCount:0),t._createRefMark(n.refIdx)}return null},t.prototype._handleValue=function(t,r,e){try{var n=t(),a=typeof n,o=\\\"object\\\"===a&&null!==n;if(o){var i=this._ensureCircularReference(n);if(i)return i}var u=this._findTransform(a,n);return u?this._applyTransform(n,r,e,u):o?this._handleObject(n,r,e):n}catch(t){try{return this._handleValue((function(){return t instanceof Error?t:new Error(t)}),r,e)}catch(t){return null}}},t.prototype._makeTransformsMap=function(){if(o){var t=new Map;return this.transforms.forEach((function(r){r.lookup&&t.set(r.lookup,r)})),t}},t.prototype._findTransform=function(t,r){if(o&&r&&r.constructor&&(null==(a=this.transformsMap.get(r.constructor))?void 0:a.shouldTransform(t,r)))return a;for(var e=0,n=this.transforms;e<n.length;e++){var a;if((a=n[e]).shouldTransform(t,r))return a}},t.prototype.transform=function(){for(var r=this,e=[this._handleValue((function(){return r.references}),null,null)],n=0,a=this.circularCandidatesDescrs;n<a.length;n++){var o=a[n];o.refIdx>0&&(e[o.refIdx]=o.parent[o.key],o.parent[o.key]=t._createRefMark(o.refIdx))}return e},t}(),l=function(){function t(t,r){this.activeTransformsStack=[],this.visitedRefs=Object.create(null),this.references=t,this.transformMap=r}return t.prototype._handlePlainObject=function(t){var r=Object.create(null);for(var n in\\\"constructor\\\"in t&&(t.constructor&&\\\"string\\\"==typeof t.constructor.name||(t.constructor={name:\\\"Object\\\"})),t)t.hasOwnProperty(n)&&(this._handleValue(t[n],t,n),e.test(n)&&(r[n.substring(1)]=t[n],delete t[n]));for(var a in r)t[a]=r[a]},t.prototype._handleTransformedObject=function(t,e,n){var a=t[r],o=this.transformMap[a];if(!o)throw new Error(\\\"Can't find transform for \\\\\\\"\\\"+a+'\\\" type.');this.activeTransformsStack.push(t),this._handleValue(t.data,t,\\\"data\\\"),this.activeTransformsStack.pop(),e[n]=o.fromSerializable(t.data)},t.prototype._handleCircularSelfRefDuringTransform=function(t,r,e){var n=this.references;Object.defineProperty(r,e,{val:void 0,configurable:!0,enumerable:!0,get:function(){return void 0===this.val&&(this.val=n[t]),this.val},set:function(t){this.val=t}})},t.prototype._handleCircularRef=function(t,r,e){this.activeTransformsStack.includes(this.references[t])?this._handleCircularSelfRefDuringTransform(t,r,e):(this.visitedRefs[t]||(this.visitedRefs[t]=!0,this._handleValue(this.references[t],this.references,t)),r[e]=this.references[t])},t.prototype._handleValue=function(t,e,n){if(\\\"object\\\"==typeof t&&null!==t){var a=t[\\\"@r\\\"];if(void 0!==a)this._handleCircularRef(a,e,n);else if(t[r])this._handleTransformedObject(t,e,n);else if(Array.isArray(t))for(var o=0;o<t.length;o++)this._handleValue(t[o],t,o);else this._handlePlainObject(t)}},t.prototype.transform=function(){return this.visitedRefs[0]=!0,this._handleValue(this.references[0],this.references,0),this.references[0]},t}(),d=[{type:\\\"[[NaN]]\\\",shouldTransform:function(t,r){return\\\"number\\\"===t&&isNaN(r)},toSerializable:function(){return\\\"\\\"},fromSerializable:function(){return NaN}},{type:\\\"[[undefined]]\\\",shouldTransform:function(t){return\\\"undefined\\\"===t},toSerializable:function(){return\\\"\\\"},fromSerializable:function(){}},{type:\\\"[[Date]]\\\",lookup:Date,shouldTransform:function(t,r){return r instanceof Date},toSerializable:function(t){return t.getTime()},fromSerializable:function(t){var r=new Date;return r.setTime(t),r}},{type:\\\"[[RegExp]]\\\",lookup:RegExp,shouldTransform:function(t,r){return r instanceof RegExp},toSerializable:function(t){var r={src:t.source,flags:\\\"\\\"};return t.globalThis&&(r.flags+=\\\"g\\\"),t.ignoreCase&&(r.flags+=\\\"i\\\"),t.multiline&&(r.flags+=\\\"m\\\"),r},fromSerializable:function(t){return new RegExp(t.src,t.flags)}},{type:\\\"[[Error]]\\\",lookup:Error,shouldTransform:function(t,r){return r instanceof Error},toSerializable:function(t){var r,e;return t.stack||null===(e=(r=Error).captureStackTrace)||void 0===e||e.call(r,t),{name:t.name,message:t.message,stack:t.stack}},fromSerializable:function(t){var r=new(n[t.name]||Error)(t.message);return r.stack=t.stack,r}},{type:\\\"[[ArrayBuffer]]\\\",lookup:a&&ArrayBuffer,shouldTransform:function(t,r){return a&&r instanceof ArrayBuffer},toSerializable:function(t){var r=new Int8Array(t);return s.call(r)},fromSerializable:function(t){if(a){var r=new ArrayBuffer(t.length);return new Int8Array(r).set(t),r}return t}},{type:\\\"[[TypedArray]]\\\",shouldTransform:function(t,r){if(a)return ArrayBuffer.isView(r)&&!(r instanceof DataView);for(var e=0,o=u;e<o.length;e++){var i=o[e];if(\\\"function\\\"==typeof n[i]&&r instanceof n[i])return!0}return!1},toSerializable:function(t){return{ctorName:t.constructor.name,arr:s.call(t)}},fromSerializable:function(t){return\\\"function\\\"==typeof n[t.ctorName]?new n[t.ctorName](t.arr):t.arr}},{type:\\\"[[Map]]\\\",lookup:o&&Map,shouldTransform:function(t,r){return o&&r instanceof Map},toSerializable:function(t){var r=[];return t.forEach((function(t,e){r.push(e),r.push(t)})),r},fromSerializable:function(t){if(o){for(var r=new Map,e=0;e<t.length;e+=2)r.set(t[e],t[e+1]);return r}for(var n=[],a=0;a<t.length;a+=2)n.push([t[e],t[e+1]]);return n}},{type:\\\"[[Set]]\\\",lookup:i&&Set,shouldTransform:function(t,r){return i&&r instanceof Set},toSerializable:function(t){var r=[];return t.forEach((function(t){r.push(t)})),r},fromSerializable:function(t){if(i){for(var r=new Set,e=0;e<t.length;e++)r.add(t[e]);return r}return t}}],p=function(){function t(t){this.transforms=[],this.transformsMap=Object.create(null),this.serializer=t||f,this.addTransforms(d)}return t.prototype.addTransforms=function(t){for(var r=0,e=t=Array.isArray(t)?t:[t];r<e.length;r++){var n=e[r];if(this.transformsMap[n.type])throw new Error('Transform with type \\\"'+n.type+'\\\" was already added.');this.transforms.push(n),this.transformsMap[n.type]=n}return this},t.prototype.removeTransforms=function(t){for(var r=0,e=t=Array.isArray(t)?t:[t];r<e.length;r++){var n=e[r],a=this.transforms.indexOf(n);a>-1&&this.transforms.splice(a,1),delete this.transformsMap[n.type]}return this},t.prototype.encode=function(t){var r=new c(t,this.transforms).transform();return this.serializer.serialize(r)},t.prototype.decode=function(t){var r=this.serializer.deserialize(t);return new l(r,this.transformsMap).transform()},t}();t.default=p}(z);var E=t&&t.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};S.__esModule=!0,S.Decode=P=S.Encode=void 0;var k=E(O),C=E(w),D=E(A),I=E(j),N=E(z),R=[D.default,C.default,k.default,I.default],x=new N.default;x.addTransforms(R);var P=S.Encode=function(t){return JSON.parse(x.encode(t))};S.Decode=function(t){return x.decode(JSON.stringify(t))},function(r){var e=t&&t.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};r.__esModule=!0;var a=e(n),i=e(o),u=S;r.default=function(t,r,e){void 0===e&&(e=!0);for(var n=t,o={pointers:{},src:{npm:\\\"https://npmjs.com/package/console-feed\\\",github:\\\"https://github.com/samdenty99/console-feed\\\"}},s=function(t){var a=n[t];n[t]=function(){a.apply(this,arguments);var n=[].slice.call(arguments);setTimeout((function(){var a=i.default(t,n);if(a){var o=a;e&&(o=u.Encode(a)),r(o,a)}}))},o.pointers[t]=a},f=0,c=a.default;f<c.length;f++)s(c[f]);return n.feed=o,n}}(e),r(e)(window.console,(function(t){var r=P(t);parent.postMessage({type:\\\"console\\\",codesandbox:!0,log:Array.isArray(r)?r[0]:r,channelId:scope.channelId},\\\"*\\\")}));\\n\";\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@codesandbox/sandpack-client/dist/consoleHook-59e792cb.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@codesandbox/sandpack-client/dist/index-585bceb7.mjs":
/*!***************************************************************************!*\
  !*** ./node_modules/@codesandbox/sandpack-client/dist/index-585bceb7.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SandpackStatic: () => (/* binding */ SandpackStatic)\n/* harmony export */ });\n/* harmony import */ var _utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils-52664384.mjs */ \"(ssr)/./node_modules/@codesandbox/sandpack-client/dist/utils-52664384.mjs\");\n/* harmony import */ var static_browser_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! static-browser-server */ \"(ssr)/./node_modules/static-browser-server/out/lib/main.js\");\n/* harmony import */ var _consoleHook_59e792cb_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./consoleHook-59e792cb.mjs */ \"(ssr)/./node_modules/@codesandbox/sandpack-client/dist/consoleHook-59e792cb.mjs\");\n/* harmony import */ var _base_80a1f760_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./base-80a1f760.mjs */ \"(ssr)/./node_modules/@codesandbox/sandpack-client/dist/base-80a1f760.mjs\");\n/* harmony import */ var outvariant__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! outvariant */ \"(ssr)/./node_modules/outvariant/lib/index.mjs\");\n/* harmony import */ var dequal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! dequal */ \"(ssr)/./node_modules/dequal/dist/index.mjs\");\n\n\n\n\n\n\n\nvar insertHtmlAfterRegex = function (regex, content, insertable) {\n    var match = regex.exec(content);\n    if (match && match.length >= 1) {\n        var offset = match.index + match[0].length;\n        var prefix = content.substring(0, offset);\n        var suffix = content.substring(offset);\n        return prefix + insertable + suffix;\n    }\n};\nvar readBuffer = function (content) {\n    if (typeof content === \"string\") {\n        return content;\n    }\n    else {\n        return new TextDecoder().decode(content);\n    }\n};\nvar validateHtml = function (content) {\n    // Make it a string\n    var contentString = readBuffer(content);\n    var domParser = new DOMParser();\n    var doc = domParser.parseFromString(contentString, \"text/html\");\n    if (!doc.documentElement.getAttribute(\"lang\")) {\n        doc.documentElement.setAttribute(\"lang\", \"en\");\n    }\n    var html = doc.documentElement.outerHTML;\n    return \"<!DOCTYPE html>\\n\".concat(html);\n};\n\nvar SandpackStatic = /** @class */ (function (_super) {\n    (0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__.g)(SandpackStatic, _super);\n    function SandpackStatic(selector, sandboxSetup, options) {\n        if (options === void 0) { options = {}; }\n        var _a;\n        var _this = _super.call(this, selector, sandboxSetup, options) || this;\n        _this.files = new Map();\n        _this.status = \"initializing\";\n        _this.emitter = new _consoleHook_59e792cb_mjs__WEBPACK_IMPORTED_MODULE_4__.E();\n        _this.previewController = new static_browser_server__WEBPACK_IMPORTED_MODULE_0__.PreviewController({\n            baseUrl: (_a = options.bundlerURL) !== null && _a !== void 0 ? _a : \"https://preview.sandpack-static-server.codesandbox.io\",\n            // filepath is always normalized to start with / and not end with a slash\n            getFileContent: function (filepath) {\n                var content = _this.files.get(filepath);\n                if (!content) {\n                    throw new Error(\"File not found\");\n                }\n                if (filepath.endsWith(\".html\") || filepath.endsWith(\".htm\")) {\n                    try {\n                        content = validateHtml(content);\n                        content = _this.injectProtocolScript(content);\n                        content = _this.injectExternalResources(content, options.externalResources);\n                        content = _this.injectScriptIntoHead(content, {\n                            script: _consoleHook_59e792cb_mjs__WEBPACK_IMPORTED_MODULE_4__.c,\n                            scope: { channelId: (0,_consoleHook_59e792cb_mjs__WEBPACK_IMPORTED_MODULE_4__.g)() },\n                        });\n                    }\n                    catch (err) {\n                        console.error(\"Runtime injection failed\", err);\n                    }\n                }\n                return content;\n            },\n        });\n        if (typeof selector === \"string\") {\n            _this.selector = selector;\n            var element = document.querySelector(selector);\n            _this.element = element;\n            _this.iframe = document.createElement(\"iframe\");\n        }\n        else {\n            _this.element = selector;\n            _this.iframe = selector;\n        }\n        if (!_this.iframe.getAttribute(\"sandbox\")) {\n            _this.iframe.setAttribute(\"sandbox\", \"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts allow-downloads allow-pointer-lock\");\n            _this.iframe.setAttribute(\"allow\", \"accelerometer; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; clipboard-write;\");\n        }\n        _this.eventListener = _this.eventListener.bind(_this);\n        if (typeof window !== \"undefined\") {\n            window.addEventListener(\"message\", _this.eventListener);\n        }\n        // Dispatch very first compile action\n        _this.updateSandbox();\n        return _this;\n    }\n    SandpackStatic.prototype.injectContentIntoHead = function (content, contentToInsert) {\n        var _a;\n        // Make it a string\n        content = readBuffer(content);\n        // Inject script\n        content =\n            (_a = insertHtmlAfterRegex(/<head[^<>]*>/g, content, \"\\n\" + contentToInsert)) !== null && _a !== void 0 ? _a : contentToInsert + \"\\n\" + content;\n        return content;\n    };\n    SandpackStatic.prototype.injectProtocolScript = function (content) {\n        var scriptToInsert = \"<script>\\n  window.addEventListener(\\\"message\\\", (message) => {\\n    if(message.data.type === \\\"refresh\\\") {\\n      window.location.reload();\\n    }\\n  })\\n</script>\";\n        return this.injectContentIntoHead(content, scriptToInsert);\n    };\n    SandpackStatic.prototype.injectExternalResources = function (content, externalResources) {\n        if (externalResources === void 0) { externalResources = []; }\n        var tagsToInsert = externalResources\n            .map(function (resource) {\n            var match = resource.match(/\\.([^.]*)$/);\n            var fileType = match === null || match === void 0 ? void 0 : match[1];\n            if (fileType === \"css\" || resource.includes(\"fonts.googleapis\")) {\n                return \"<link rel=\\\"stylesheet\\\" href=\\\"\".concat(resource, \"\\\">\");\n            }\n            if (fileType === \"js\") {\n                return \"<script src=\\\"\".concat(resource, \"\\\"></script>\");\n            }\n            throw new Error(\"Unable to determine file type for external resource: \".concat(resource));\n        })\n            .join(\"\\n\");\n        return this.injectContentIntoHead(content, tagsToInsert);\n    };\n    SandpackStatic.prototype.injectScriptIntoHead = function (content, opts) {\n        var script = opts.script, _a = opts.scope, scope = _a === void 0 ? {} : _a;\n        var scriptToInsert = \"\\n    <script>\\n      const scope = \".concat(JSON.stringify(scope), \";\\n      \").concat(script, \"\\n    </script>\\n    \").trim();\n        return this.injectContentIntoHead(content, scriptToInsert);\n    };\n    SandpackStatic.prototype.updateSandbox = function (setup, _isInitializationCompile) {\n        if (setup === void 0) { setup = this.sandboxSetup; }\n        var modules = (0,_consoleHook_59e792cb_mjs__WEBPACK_IMPORTED_MODULE_4__.f)(setup.files);\n        /**\n         * Pass init files to the bundler\n         */\n        this.dispatch({\n            codesandbox: true,\n            modules: modules,\n            template: setup.template,\n            type: \"compile\",\n        });\n    };\n    SandpackStatic.prototype.compile = function (files) {\n        return (0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__._)(this, void 0, void 0, function () {\n            var previewUrl;\n            return (0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__.a)(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        this.files = new Map(Object.entries(files));\n                        return [4 /*yield*/, this.previewController.initPreview()];\n                    case 1:\n                        previewUrl = _a.sent();\n                        this.iframe.setAttribute(\"src\", previewUrl);\n                        this.status = \"done\";\n                        this.dispatch({ type: \"done\", compilatonError: false });\n                        this.dispatch({\n                            type: \"urlchange\",\n                            url: previewUrl,\n                            back: false,\n                            forward: false,\n                        });\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    // Handles message windows coming from iframes\n    SandpackStatic.prototype.eventListener = function (evt) {\n        // skip events originating from different iframes\n        if (evt.source !== this.iframe.contentWindow) {\n            return;\n        }\n        var message = evt.data;\n        if (!message.codesandbox) {\n            return;\n        }\n        this.dispatch(message);\n    };\n    /**\n     * Bundler communication\n     */\n    SandpackStatic.prototype.dispatch = function (message) {\n        var _a;\n        switch (message.type) {\n            case \"compile\":\n                this.compile(message.modules);\n                break;\n            default:\n                (_a = this.iframe.contentWindow) === null || _a === void 0 ? void 0 : _a.postMessage(message, \"*\");\n                this.emitter.dispatch(message);\n        }\n    };\n    SandpackStatic.prototype.listen = function (listener) {\n        return this.emitter.listener(listener);\n    };\n    SandpackStatic.prototype.destroy = function () {\n        this.emitter.cleanup();\n        if (typeof window !== \"undefined\") {\n            window.removeEventListener(\"message\", this.eventListener);\n        }\n    };\n    return SandpackStatic;\n}(_base_80a1f760_mjs__WEBPACK_IMPORTED_MODULE_5__.S));\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@codesandbox/sandpack-client/dist/index-585bceb7.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@codesandbox/sandpack-client/dist/index.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/@codesandbox/sandpack-client/dist/index.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SandpackLogLevel: () => (/* reexport safe */ _utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_0__.S),\n/* harmony export */   addPackageJSONIfNeeded: () => (/* reexport safe */ _utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_0__.d),\n/* harmony export */   createError: () => (/* reexport safe */ _utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_0__.c),\n/* harmony export */   createPackageJSON: () => (/* reexport safe */ _utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_0__.b),\n/* harmony export */   extractErrorDetails: () => (/* reexport safe */ _utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_0__.e),\n/* harmony export */   loadSandpackClient: () => (/* binding */ loadSandpackClient),\n/* harmony export */   normalizePath: () => (/* reexport safe */ _utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_0__.f),\n/* harmony export */   nullthrows: () => (/* reexport safe */ _utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_0__.n)\n/* harmony export */ });\n/* harmony import */ var _utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils-52664384.mjs */ \"(ssr)/./node_modules/@codesandbox/sandpack-client/dist/utils-52664384.mjs\");\n/* harmony import */ var outvariant__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! outvariant */ \"(ssr)/./node_modules/outvariant/lib/index.mjs\");\n\n\n\n\nfunction loadSandpackClient(iframeSelector, sandboxSetup, options) {\n    var _a;\n    if (options === void 0) { options = {}; }\n    return (0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_0__._)(this, void 0, void 0, function () {\n        var template, Client, _b;\n        return (0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_0__.a)(this, function (_c) {\n            switch (_c.label) {\n                case 0:\n                    template = (_a = sandboxSetup.template) !== null && _a !== void 0 ? _a : \"parcel\";\n                    _b = template;\n                    switch (_b) {\n                        case \"node\": return [3 /*break*/, 1];\n                        case \"static\": return [3 /*break*/, 3];\n                    }\n                    return [3 /*break*/, 5];\n                case 1: return [4 /*yield*/, __webpack_require__.e(/*! import() */ \"vendor-chunks/@codesandbox\").then(__webpack_require__.bind(__webpack_require__, /*! ./clients/node/index.mjs */ \"(ssr)/./node_modules/@codesandbox/sandpack-client/dist/clients/node/index.mjs\")).then(function (m) { return m.SandpackNode; })];\n                case 2:\n                    Client = _c.sent();\n                    return [3 /*break*/, 7];\n                case 3: return [4 /*yield*/, Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/@codesandbox\"), __webpack_require__.e(\"vendor-chunks/static-browser-server\")]).then(__webpack_require__.bind(__webpack_require__, /*! ./index-585bceb7.mjs */ \"(ssr)/./node_modules/@codesandbox/sandpack-client/dist/index-585bceb7.mjs\")).then(function (m) { return m.SandpackStatic; })];\n                case 4:\n                    Client = _c.sent();\n                    return [3 /*break*/, 7];\n                case 5: return [4 /*yield*/, Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/@codesandbox\"), __webpack_require__.e(\"vendor-chunks/mime-db\")]).then(__webpack_require__.bind(__webpack_require__, /*! ./clients/runtime/index.mjs */ \"(ssr)/./node_modules/@codesandbox/sandpack-client/dist/clients/runtime/index.mjs\")).then(function (m) { return m.SandpackRuntime; })];\n                case 6:\n                    Client = _c.sent();\n                    _c.label = 7;\n                case 7: return [2 /*return*/, new Client(iframeSelector, sandboxSetup, options)];\n            }\n        });\n    });\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvZGVzYW5kYm94L3NhbmRwYWNrLWNsaWVudC9kaXN0L2luZGV4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQXdFO0FBQzJIO0FBQy9LOztBQUVwQjtBQUNBO0FBQ0EsOEJBQThCO0FBQzlCLFdBQVcsc0RBQVM7QUFDcEI7QUFDQSxlQUFlLHNEQUFXO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZDQUE2Qyx3T0FBa0MscUJBQXFCLHdCQUF3QjtBQUM1SDtBQUNBO0FBQ0E7QUFDQSw2Q0FBNkMsNFNBQThCLHFCQUFxQiwwQkFBMEI7QUFDMUg7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDLDRTQUFxQyxxQkFBcUIsMkJBQTJCO0FBQ2xJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsS0FBSztBQUNMOztBQUU4QiIsInNvdXJjZXMiOlsid2VicGFjazovL2xsYW1hY29kZXItbmV3Ly4vbm9kZV9tb2R1bGVzL0Bjb2Rlc2FuZGJveC9zYW5kcGFjay1jbGllbnQvZGlzdC9pbmRleC5tanM/YzM1MSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBfIGFzIF9fYXdhaXRlciwgYSBhcyBfX2dlbmVyYXRvciB9IGZyb20gJy4vdXRpbHMtNTI2NjQzODQubWpzJztcbmV4cG9ydCB7IFMgYXMgU2FuZHBhY2tMb2dMZXZlbCwgZCBhcyBhZGRQYWNrYWdlSlNPTklmTmVlZGVkLCBjIGFzIGNyZWF0ZUVycm9yLCBiIGFzIGNyZWF0ZVBhY2thZ2VKU09OLCBlIGFzIGV4dHJhY3RFcnJvckRldGFpbHMsIGYgYXMgbm9ybWFsaXplUGF0aCwgbiBhcyBudWxsdGhyb3dzIH0gZnJvbSAnLi91dGlscy01MjY2NDM4NC5tanMnO1xuaW1wb3J0ICdvdXR2YXJpYW50JztcblxuZnVuY3Rpb24gbG9hZFNhbmRwYWNrQ2xpZW50KGlmcmFtZVNlbGVjdG9yLCBzYW5kYm94U2V0dXAsIG9wdGlvbnMpIHtcbiAgICB2YXIgX2E7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0ZW1wbGF0ZSwgQ2xpZW50LCBfYjtcbiAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYykge1xuICAgICAgICAgICAgc3dpdGNoIChfYy5sYWJlbCkge1xuICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGUgPSAoX2EgPSBzYW5kYm94U2V0dXAudGVtcGxhdGUpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IFwicGFyY2VsXCI7XG4gICAgICAgICAgICAgICAgICAgIF9iID0gdGVtcGxhdGU7XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoX2IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJub2RlXCI6IHJldHVybiBbMyAvKmJyZWFrKi8sIDFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcInN0YXRpY1wiOiByZXR1cm4gWzMgLypicmVhayovLCAzXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA1XTtcbiAgICAgICAgICAgICAgICBjYXNlIDE6IHJldHVybiBbNCAvKnlpZWxkKi8sIGltcG9ydCgnLi9jbGllbnRzL25vZGUvaW5kZXgubWpzJykudGhlbihmdW5jdGlvbiAobSkgeyByZXR1cm4gbS5TYW5kcGFja05vZGU7IH0pXTtcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIENsaWVudCA9IF9jLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgN107XG4gICAgICAgICAgICAgICAgY2FzZSAzOiByZXR1cm4gWzQgLyp5aWVsZCovLCBpbXBvcnQoJy4vaW5kZXgtNTg1YmNlYjcubWpzJykudGhlbihmdW5jdGlvbiAobSkgeyByZXR1cm4gbS5TYW5kcGFja1N0YXRpYzsgfSldO1xuICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgQ2xpZW50ID0gX2Muc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA3XTtcbiAgICAgICAgICAgICAgICBjYXNlIDU6IHJldHVybiBbNCAvKnlpZWxkKi8sIGltcG9ydCgnLi9jbGllbnRzL3J1bnRpbWUvaW5kZXgubWpzJykudGhlbihmdW5jdGlvbiAobSkgeyByZXR1cm4gbS5TYW5kcGFja1J1bnRpbWU7IH0pXTtcbiAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgIENsaWVudCA9IF9jLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgX2MubGFiZWwgPSA3O1xuICAgICAgICAgICAgICAgIGNhc2UgNzogcmV0dXJuIFsyIC8qcmV0dXJuKi8sIG5ldyBDbGllbnQoaWZyYW1lU2VsZWN0b3IsIHNhbmRib3hTZXR1cCwgb3B0aW9ucyldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9KTtcbn1cblxuZXhwb3J0IHsgbG9hZFNhbmRwYWNrQ2xpZW50IH07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@codesandbox/sandpack-client/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@codesandbox/sandpack-client/dist/utils-52664384.mjs":
/*!***************************************************************************!*\
  !*** ./node_modules/@codesandbox/sandpack-client/dist/utils-52664384.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   S: () => (/* binding */ SandpackLogLevel),\n/* harmony export */   _: () => (/* binding */ __awaiter),\n/* harmony export */   a: () => (/* binding */ __generator),\n/* harmony export */   b: () => (/* binding */ createPackageJSON),\n/* harmony export */   c: () => (/* binding */ createError),\n/* harmony export */   d: () => (/* binding */ addPackageJSONIfNeeded),\n/* harmony export */   e: () => (/* binding */ extractErrorDetails),\n/* harmony export */   f: () => (/* binding */ normalizePath),\n/* harmony export */   g: () => (/* binding */ __extends),\n/* harmony export */   h: () => (/* binding */ __assign),\n/* harmony export */   i: () => (/* binding */ __spreadArray),\n/* harmony export */   n: () => (/* binding */ nullthrows)\n/* harmony export */ });\n/* harmony import */ var outvariant__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! outvariant */ \"(ssr)/./node_modules/outvariant/lib/index.mjs\");\n\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* globalThis Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nvar __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nfunction __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nfunction __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\n\nvar SandpackLogLevel;\n(function (SandpackLogLevel) {\n    SandpackLogLevel[SandpackLogLevel[\"None\"] = 0] = \"None\";\n    SandpackLogLevel[SandpackLogLevel[\"Error\"] = 10] = \"Error\";\n    SandpackLogLevel[SandpackLogLevel[\"Warning\"] = 20] = \"Warning\";\n    SandpackLogLevel[SandpackLogLevel[\"Info\"] = 30] = \"Info\";\n    SandpackLogLevel[SandpackLogLevel[\"Debug\"] = 40] = \"Debug\";\n})(SandpackLogLevel || (SandpackLogLevel = {}));\n\nvar createError = function (message) {\n    return \"[sandpack-client]: \".concat(message);\n};\nfunction nullthrows(value, err) {\n    if (err === void 0) { err = \"Value is nullish\"; }\n    (0,outvariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(value != null, createError(err));\n    return value;\n}\nvar DEPENDENCY_ERROR_MESSAGE = \"\\\"dependencies\\\" was not specified - provide either a package.json or a \\\"dependencies\\\" value\";\nvar ENTRY_ERROR_MESSAGE = \"\\\"entry\\\" was not specified - provide either a package.json with the \\\"main\\\" field or an \\\"entry\\\" value\";\nfunction createPackageJSON(dependencies, devDependencies, entry) {\n    if (dependencies === void 0) { dependencies = {}; }\n    if (devDependencies === void 0) { devDependencies = {}; }\n    if (entry === void 0) { entry = \"/index.js\"; }\n    return JSON.stringify({\n        name: \"sandpack-project\",\n        main: entry,\n        dependencies: dependencies,\n        devDependencies: devDependencies,\n    }, null, 2);\n}\nfunction addPackageJSONIfNeeded(files, dependencies, devDependencies, entry) {\n    var _a, _b;\n    var normalizedFilesPath = normalizePath(files);\n    var packageJsonFile = normalizedFilesPath[\"/package.json\"];\n    /**\n     * Create a new package json\n     */\n    if (!packageJsonFile) {\n        nullthrows(dependencies, DEPENDENCY_ERROR_MESSAGE);\n        nullthrows(entry, ENTRY_ERROR_MESSAGE);\n        normalizedFilesPath[\"/package.json\"] = {\n            code: createPackageJSON(dependencies, devDependencies, entry),\n        };\n        return normalizedFilesPath;\n    }\n    /**\n     * Merge package json with custom setup\n     */\n    if (packageJsonFile) {\n        var packageJsonContent = JSON.parse(packageJsonFile.code);\n        nullthrows(!(!dependencies && !packageJsonContent.dependencies), ENTRY_ERROR_MESSAGE);\n        if (dependencies) {\n            packageJsonContent.dependencies = __assign(__assign({}, ((_a = packageJsonContent.dependencies) !== null && _a !== void 0 ? _a : {})), (dependencies !== null && dependencies !== void 0 ? dependencies : {}));\n        }\n        if (devDependencies) {\n            packageJsonContent.devDependencies = __assign(__assign({}, ((_b = packageJsonContent.devDependencies) !== null && _b !== void 0 ? _b : {})), (devDependencies !== null && devDependencies !== void 0 ? devDependencies : {}));\n        }\n        if (entry) {\n            packageJsonContent.main = entry;\n        }\n        normalizedFilesPath[\"/package.json\"] = {\n            code: JSON.stringify(packageJsonContent, null, 2),\n        };\n    }\n    return normalizedFilesPath;\n}\nfunction extractErrorDetails(msg) {\n    var _a;\n    if (msg.title === \"SyntaxError\") {\n        var title = msg.title, path = msg.path, message = msg.message, line = msg.line, column = msg.column;\n        return { title: title, path: path, message: message, line: line, column: column };\n    }\n    var relevantStackFrame = getRelevantStackFrame((_a = msg.payload) === null || _a === void 0 ? void 0 : _a.frames);\n    if (!relevantStackFrame) {\n        return { message: msg.message };\n    }\n    var errorInCode = getErrorInOriginalCode(relevantStackFrame);\n    var errorLocation = getErrorLocation(relevantStackFrame);\n    var errorMessage = formatErrorMessage(relevantStackFrame._originalFileName, msg.message, errorLocation, errorInCode);\n    return {\n        message: errorMessage,\n        title: msg.title,\n        path: relevantStackFrame._originalFileName,\n        line: relevantStackFrame._originalLineNumber,\n        column: relevantStackFrame._originalColumnNumber,\n    };\n}\nfunction getRelevantStackFrame(frames) {\n    if (!frames) {\n        return;\n    }\n    return frames.find(function (frame) { return !!frame._originalFileName; });\n}\nfunction getErrorLocation(errorFrame) {\n    return errorFrame\n        ? \" (\".concat(errorFrame._originalLineNumber, \":\").concat(errorFrame._originalColumnNumber, \")\")\n        : \"\";\n}\nfunction getErrorInOriginalCode(errorFrame) {\n    var lastScriptLine = errorFrame._originalScriptCode[errorFrame._originalScriptCode.length - 1];\n    var numberOfLineNumberCharacters = lastScriptLine.lineNumber.toString().length;\n    var leadingCharacterOffset = 2;\n    var barSeparatorCharacterOffset = 3;\n    var extraLineLeadingSpaces = leadingCharacterOffset +\n        numberOfLineNumberCharacters +\n        barSeparatorCharacterOffset +\n        errorFrame._originalColumnNumber;\n    return errorFrame._originalScriptCode.reduce(function (result, scriptLine) {\n        var leadingChar = scriptLine.highlight ? \">\" : \" \";\n        var lineNumber = scriptLine.lineNumber.toString().length === numberOfLineNumberCharacters\n            ? \"\".concat(scriptLine.lineNumber)\n            : \" \".concat(scriptLine.lineNumber);\n        var extraLine = scriptLine.highlight\n            ? \"\\n\" + \" \".repeat(extraLineLeadingSpaces) + \"^\"\n            : \"\";\n        return (result + // accumulator\n            \"\\n\" +\n            leadingChar + // > or \" \"\n            \" \" +\n            lineNumber + // line number on equal number of characters\n            \" | \" +\n            scriptLine.content + // code\n            extraLine // line under the highlighed line to show the column index\n        );\n    }, \"\");\n}\nfunction formatErrorMessage(filePath, message, location, errorInCode) {\n    return \"\".concat(filePath, \": \").concat(message).concat(location, \"\\n\").concat(errorInCode);\n}\n/* eslint-disable @typescript-eslint/no-explicit-any */\nvar normalizePath = function (path) {\n    if (typeof path === \"string\") {\n        return (path.startsWith(\"/\") ? path : \"/\".concat(path));\n    }\n    if (Array.isArray(path)) {\n        return path.map(function (p) { return (p.startsWith(\"/\") ? p : \"/\".concat(p)); });\n    }\n    if (typeof path === \"object\" && path !== null) {\n        return Object.entries(path).reduce(function (acc, _a) {\n            var key = _a[0], content = _a[1];\n            var fileName = key.startsWith(\"/\") ? key : \"/\".concat(key);\n            acc[fileName] = content;\n            return acc;\n        }, {});\n    }\n    return null;\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@codesandbox/sandpack-client/dist/utils-52664384.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@codesandbox/sandpack-react/dist/index.mjs":
/*!*****************************************************************!*\
  !*** ./node_modules/@codesandbox/sandpack-react/dist/index.mjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ANGULAR_TEMPLATE: () => (/* binding */ ANGULAR_TEMPLATE),\n/* harmony export */   ASTRO_TEMPLATE: () => (/* binding */ ASTRO_TEMPLATE),\n/* harmony export */   BackwardIcon: () => (/* binding */ BackwardIcon),\n/* harmony export */   CleanIcon: () => (/* binding */ CleanIcon),\n/* harmony export */   CloseIcon: () => (/* binding */ CloseIcon),\n/* harmony export */   CodeEditor: () => (/* binding */ CodeMirror),\n/* harmony export */   ConsoleIcon: () => (/* binding */ ConsoleIcon),\n/* harmony export */   DependenciesProgress: () => (/* binding */ DependenciesProgress),\n/* harmony export */   DirectoryIconClosed: () => (/* binding */ DirectoryIconClosed),\n/* harmony export */   DirectoryIconOpen: () => (/* binding */ DirectoryIconOpen),\n/* harmony export */   ErrorOverlay: () => (/* binding */ ErrorOverlay),\n/* harmony export */   ExportIcon: () => (/* binding */ ExportIcon),\n/* harmony export */   FADE_ANIMATION_DURATION: () => (/* binding */ FADE_ANIMATION_DURATION),\n/* harmony export */   FileIcon: () => (/* binding */ FileIcon),\n/* harmony export */   FileTabs: () => (/* binding */ FileTabs),\n/* harmony export */   ForwardIcon: () => (/* binding */ ForwardIcon),\n/* harmony export */   LoadingOverlay: () => (/* binding */ LoadingOverlay),\n/* harmony export */   Navigator: () => (/* binding */ Navigator),\n/* harmony export */   OpenInCodeSandboxButton: () => (/* binding */ OpenInCodeSandboxButton),\n/* harmony export */   REACT_TEMPLATE: () => (/* binding */ REACT_TEMPLATE),\n/* harmony export */   REACT_TYPESCRIPT_TEMPLATE: () => (/* binding */ REACT_TYPESCRIPT_TEMPLATE),\n/* harmony export */   RefreshIcon: () => (/* binding */ RefreshIcon),\n/* harmony export */   RestartIcon: () => (/* binding */ RestartIcon),\n/* harmony export */   RoundedButton: () => (/* binding */ RoundedButton),\n/* harmony export */   RunButton: () => (/* binding */ RunButton$1),\n/* harmony export */   RunIcon: () => (/* binding */ RunIcon),\n/* harmony export */   SANDBOX_TEMPLATES: () => (/* binding */ SANDBOX_TEMPLATES),\n/* harmony export */   SANDPACK_THEMES: () => (/* binding */ SANDPACK_THEMES),\n/* harmony export */   SOLID_TEMPLATE: () => (/* binding */ SOLID_TEMPLATE),\n/* harmony export */   SVELTE_TEMPLATE: () => (/* binding */ SVELTE_TEMPLATE),\n/* harmony export */   Sandpack: () => (/* binding */ Sandpack),\n/* harmony export */   SandpackCodeEditor: () => (/* binding */ SandpackCodeEditor),\n/* harmony export */   SandpackCodeViewer: () => (/* binding */ SandpackCodeViewer),\n/* harmony export */   SandpackConsole: () => (/* binding */ SandpackConsole),\n/* harmony export */   SandpackConsumer: () => (/* binding */ SandpackConsumer),\n/* harmony export */   SandpackFileExplorer: () => (/* binding */ SandpackFileExplorer),\n/* harmony export */   SandpackLayout: () => (/* binding */ SandpackLayout),\n/* harmony export */   SandpackPreview: () => (/* binding */ SandpackPreview),\n/* harmony export */   SandpackProvider: () => (/* binding */ SandpackProvider),\n/* harmony export */   SandpackReactContext: () => (/* binding */ Sandpack$1),\n/* harmony export */   SandpackStack: () => (/* binding */ SandpackStack),\n/* harmony export */   SandpackTests: () => (/* binding */ SandpackTests),\n/* harmony export */   SandpackThemeConsumer: () => (/* binding */ SandpackThemeConsumer),\n/* harmony export */   SandpackThemeContext: () => (/* binding */ SandpackThemeContext),\n/* harmony export */   SandpackThemeProvider: () => (/* binding */ SandpackThemeProvider),\n/* harmony export */   SandpackTranspiledCode: () => (/* binding */ SandpackTranspiledCode),\n/* harmony export */   SignInIcon: () => (/* binding */ SignInIcon),\n/* harmony export */   SignOutIcon: () => (/* binding */ SignOutIcon),\n/* harmony export */   TEST_TYPESCRIPT_TEMPLATE: () => (/* binding */ TEST_TYPESCRIPT_TEMPLATE),\n/* harmony export */   UnstyledOpenInCodeSandboxButton: () => (/* binding */ UnstyledOpenInCodeSandboxButton),\n/* harmony export */   VANILLA_TEMPLATE: () => (/* binding */ VANILLA_TEMPLATE),\n/* harmony export */   VANILLA_TYPESCRIPT_TEMPLATE: () => (/* binding */ VANILLA_TYPESCRIPT_TEMPLATE),\n/* harmony export */   VUE_TEMPLATE: () => (/* binding */ VUE_TEMPLATE),\n/* harmony export */   defaultDark: () => (/* binding */ defaultDark),\n/* harmony export */   defaultLight: () => (/* binding */ defaultLight),\n/* harmony export */   getSandpackCssText: () => (/* binding */ getCssText),\n/* harmony export */   layoutClassName: () => (/* binding */ layoutClassName),\n/* harmony export */   stackClassName: () => (/* binding */ stackClassName),\n/* harmony export */   tabButton: () => (/* binding */ tabButton),\n/* harmony export */   useActiveCode: () => (/* binding */ useActiveCode),\n/* harmony export */   useClassNames: () => (/* binding */ useClassNames),\n/* harmony export */   useErrorMessage: () => (/* binding */ useErrorMessage),\n/* harmony export */   useLoadingOverlayState: () => (/* binding */ useLoadingOverlayState),\n/* harmony export */   useSandpack: () => (/* binding */ useSandpack),\n/* harmony export */   useSandpackClient: () => (/* binding */ useSandpackClient),\n/* harmony export */   useSandpackConsole: () => (/* binding */ useSandpackConsole),\n/* harmony export */   useSandpackNavigation: () => (/* binding */ useSandpackNavigation),\n/* harmony export */   useSandpackPreviewProgress: () => (/* binding */ useSandpackPreviewProgress),\n/* harmony export */   useSandpackShell: () => (/* binding */ useSandpackShell),\n/* harmony export */   useSandpackShellStdout: () => (/* binding */ useSandpackShellStdout),\n/* harmony export */   useSandpackTheme: () => (/* binding */ useSandpackTheme),\n/* harmony export */   useTranspiledCode: () => (/* binding */ useTranspiledCode)\n/* harmony export */ });\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _stitches_core__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @stitches/core */ \"(ssr)/./node_modules/@stitches/core/dist/index.mjs\");\n/* harmony import */ var dequal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! dequal */ \"(ssr)/./node_modules/dequal/dist/index.mjs\");\n/* harmony import */ var _codesandbox_sandpack_client__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @codesandbox/sandpack-client */ \"(ssr)/./node_modules/@codesandbox/sandpack-client/dist/utils-52664384.mjs\");\n/* harmony import */ var _codesandbox_sandpack_client__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @codesandbox/sandpack-client */ \"(ssr)/./node_modules/@codesandbox/sandpack-client/dist/index.mjs\");\n/* harmony import */ var _codemirror_autocomplete__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @codemirror/autocomplete */ \"(ssr)/./node_modules/@codemirror/autocomplete/dist/index.js\");\n/* harmony import */ var _codemirror_commands__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @codemirror/commands */ \"(ssr)/./node_modules/@codemirror/commands/dist/index.js\");\n/* harmony import */ var _codemirror_language__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @codemirror/language */ \"(ssr)/./node_modules/@codemirror/language/dist/index.js\");\n/* harmony import */ var _codemirror_state__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @codemirror/state */ \"(ssr)/./node_modules/@codemirror/state/dist/index.js\");\n/* harmony import */ var _codemirror_view__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @codemirror/view */ \"(ssr)/./node_modules/@codemirror/view/dist/index.js\");\n/* harmony import */ var _react_hook_intersection_observer__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @react-hook/intersection-observer */ \"(ssr)/./node_modules/@react-hook/intersection-observer/dist/esm/index.mjs\");\n/* harmony import */ var _codemirror_lang_css__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @codemirror/lang-css */ \"(ssr)/./node_modules/@codemirror/lang-css/dist/index.js\");\n/* harmony import */ var _codemirror_lang_html__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @codemirror/lang-html */ \"(ssr)/./node_modules/@codemirror/lang-html/dist/index.js\");\n/* harmony import */ var _codemirror_lang_javascript__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @codemirror/lang-javascript */ \"(ssr)/./node_modules/@codemirror/lang-javascript/dist/index.js\");\n/* harmony import */ var _lezer_highlight__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @lezer/highlight */ \"(ssr)/./node_modules/@lezer/highlight/dist/index.js\");\n/* harmony import */ var anser__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! anser */ \"(ssr)/./node_modules/anser/lib/index.js\");\n/* harmony import */ var escape_carriage__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! escape-carriage */ \"(ssr)/./node_modules/escape-carriage/index.js\");\n/* harmony import */ var lz_string__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! lz-string */ \"(ssr)/./node_modules/lz-string/libs/lz-string.js\");\n/* harmony import */ var clean_set__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! clean-set */ \"(ssr)/./node_modules/clean-set/dist/clean-set.es.js\");\n/* __next_internal_client_entry_do_not_use__ ANGULAR_TEMPLATE,ASTRO_TEMPLATE,BackwardIcon,CleanIcon,CloseIcon,CodeEditor,ConsoleIcon,DependenciesProgress,DirectoryIconClosed,DirectoryIconOpen,ErrorOverlay,ExportIcon,FADE_ANIMATION_DURATION,FileIcon,FileTabs,ForwardIcon,LoadingOverlay,Navigator,OpenInCodeSandboxButton,REACT_TEMPLATE,REACT_TYPESCRIPT_TEMPLATE,RefreshIcon,RestartIcon,RoundedButton,RunButton,RunIcon,SANDBOX_TEMPLATES,SANDPACK_THEMES,SOLID_TEMPLATE,SVELTE_TEMPLATE,Sandpack,SandpackCodeEditor,SandpackCodeViewer,SandpackConsole,SandpackConsumer,SandpackFileExplorer,SandpackLayout,SandpackPreview,SandpackProvider,SandpackReactContext,SandpackStack,SandpackTests,SandpackThemeConsumer,SandpackThemeContext,SandpackThemeProvider,SandpackTranspiledCode,SignInIcon,SignOutIcon,TEST_TYPESCRIPT_TEMPLATE,UnstyledOpenInCodeSandboxButton,VANILLA_TEMPLATE,VANILLA_TYPESCRIPT_TEMPLATE,VUE_TEMPLATE,defaultDark,defaultLight,getSandpackCssText,layoutClassName,stackClassName,tabButton,useActiveCode,useClassNames,useErrorMessage,useLoadingOverlayState,useSandpack,useSandpackClient,useSandpackConsole,useSandpackNavigation,useSandpackPreviewProgress,useSandpackShell,useSandpackShellStdout,useSandpackTheme,useTranspiledCode auto */ \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */ var __assign = function() {\n    __assign = Object.assign || function __assign(t) {\n        for(var s, i = 1, n = arguments.length; i < n; i++){\n            s = arguments[i];\n            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nfunction __rest(s, e) {\n    var t = {};\n    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++){\n        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n    }\n    return t;\n}\nfunction __awaiter(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n}\nfunction __generator(thisArg, body) {\n    var _ = {\n        label: 0,\n        sent: function() {\n            if (t[0] & 1) throw t[1];\n            return t[1];\n        },\n        trys: [],\n        ops: []\n    }, f, y, t, g;\n    return g = {\n        next: verb(0),\n        \"throw\": verb(1),\n        \"return\": verb(2)\n    }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() {\n        return this;\n    }), g;\n    function verb(n) {\n        return function(v) {\n            return step([\n                n,\n                v\n            ]);\n        };\n    }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while(_)try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [\n                op[0] & 2,\n                t.value\n            ];\n            switch(op[0]){\n                case 0:\n                case 1:\n                    t = op;\n                    break;\n                case 4:\n                    _.label++;\n                    return {\n                        value: op[1],\n                        done: false\n                    };\n                case 5:\n                    _.label++;\n                    y = op[1];\n                    op = [\n                        0\n                    ];\n                    continue;\n                case 7:\n                    op = _.ops.pop();\n                    _.trys.pop();\n                    continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                        _ = 0;\n                        continue;\n                    }\n                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                        _.label = op[1];\n                        break;\n                    }\n                    if (op[0] === 6 && _.label < t[1]) {\n                        _.label = t[1];\n                        t = op;\n                        break;\n                    }\n                    if (t && _.label < t[2]) {\n                        _.label = t[2];\n                        _.ops.push(op);\n                        break;\n                    }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop();\n                    continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) {\n            op = [\n                6,\n                e\n            ];\n            y = 0;\n        } finally{\n            f = t = 0;\n        }\n        if (op[0] & 5) throw op[1];\n        return {\n            value: op[0] ? op[1] : void 0,\n            done: true\n        };\n    }\n}\nfunction __spreadArray(to, from, pack) {\n    if (pack || arguments.length === 2) for(var i = 0, l = from.length, ar; i < l; i++){\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n}\nvar SVG = function(props) {\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"svg\", __assign({\n        fill: \"currentColor\",\n        height: \"16\",\n        viewBox: \"0 0 16 16\",\n        width: \"16\",\n        xmlns: \"http://www.w3.org/2000/svg\"\n    }, props));\n};\nvar SignInIcon = function() {\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(SVG, {\n        viewBox: \"0 0 48 48\",\n        children: [\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"title\", {\n                children: \"Sign in\"\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", {\n                d: \"M9 42q-1.2 0-2.1-.9Q6 40.2 6 39V9q0-1.2.9-2.1Q7.8 6 9 6h14.55v3H9v30h14.55v3Zm24.3-9.25-2.15-2.15 5.1-5.1h-17.5v-3h17.4l-5.1-5.1 2.15-2.15 8.8 8.8Z\"\n            })\n        ]\n    });\n};\nvar SignOutIcon = function() {\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(SVG, {\n        viewBox: \"0 0 48 48\",\n        children: [\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"title\", {\n                children: \"Sign out\"\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", {\n                d: \"M9 42q-1.2 0-2.1-.9Q6 40.2 6 39V9q0-1.2.9-2.1Q7.8 6 9 6h14.55v3H9v30h14.55v3Zm24.3-9.25-2.15-2.15 5.1-5.1h-17.5v-3h17.4l-5.1-5.1 2.15-2.15 8.8 8.8Z\"\n            })\n        ]\n    });\n};\nvar RestartIcon = function() {\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(SVG, {\n        fill: \"none\",\n        stroke: \"currentColor\",\n        children: [\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"title\", {\n                children: \"Restart script\"\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", {\n                d: \"M8 2C4.68629 2 2 4.68629 2 8C2 10.0946 3.07333 11.9385 4.7 13.0118\",\n                strokeLinecap: \"round\"\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", {\n                d: \"M14.0005 7.9998C14.0005 5.82095 12.8391 3.91335 11.1016 2.8623\",\n                strokeLinecap: \"round\"\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", {\n                d: \"M14.0003 2.3335H11.167C10.8908 2.3335 10.667 2.55735 10.667 2.8335V5.66683\",\n                strokeLinecap: \"round\"\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", {\n                d: \"M1.99967 13.6665L4.83301 13.6665C5.10915 13.6665 5.33301 13.4426 5.33301 13.1665L5.33301 10.3332\",\n                strokeLinecap: \"round\"\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", {\n                d: \"M10 10L12 12L10 14\",\n                strokeLinecap: \"round\",\n                strokeLinejoin: \"round\"\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", {\n                d: \"M14.667 14L12.667 14\",\n                strokeLinecap: \"round\",\n                strokeLinejoin: \"round\"\n            })\n        ]\n    });\n};\nvar RunIcon = function() {\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(SVG, {\n        children: [\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"title\", {\n                children: \"Run sandbox\"\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", {\n                d: \"M11.0792 8.1078C11.2793 8.25007 11.27 8.55012 11.0616 8.67981L6.02535 11.8135C5.79638 11.956 5.5 11.7913 5.5 11.5216L5.5 8.40703L5.5 4.80661C5.5 4.52735 5.81537 4.36463 6.04296 4.52647L11.0792 8.1078Z\"\n            })\n        ]\n    });\n};\nvar BackwardIcon = function() {\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(SVG, {\n        children: [\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"title\", {\n                children: \"Click to go back\"\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", {\n                d: \"M9.64645 12.3536C9.84171 12.5488 10.1583 12.5488 10.3536 12.3536C10.5488 12.1583 10.5488 11.8417 10.3536 11.6464L9.64645 12.3536ZM10.3536 4.35355C10.5488 4.15829 10.5488 3.84171 10.3536 3.64644C10.1583 3.45118 9.84171 3.45118 9.64645 3.64644L10.3536 4.35355ZM6.07072 7.92929L5.71716 7.57573L6.07072 7.92929ZM10.3536 11.6464L6.42427 7.71716L5.71716 8.42426L9.64645 12.3536L10.3536 11.6464ZM6.42427 8.28284L10.3536 4.35355L9.64645 3.64644L5.71716 7.57573L6.42427 8.28284ZM6.42427 7.71716C6.58048 7.87337 6.58048 8.12663 6.42427 8.28284L5.71716 7.57573C5.48285 7.81005 5.48285 8.18995 5.71716 8.42426L6.42427 7.71716Z\"\n            })\n        ]\n    });\n};\nvar ForwardIcon = function() {\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(SVG, {\n        children: [\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"title\", {\n                children: \"Click to go forward\"\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", {\n                d: \"M6.35355 3.64645C6.15829 3.45118 5.84171 3.45118 5.64645 3.64645C5.45118 3.84171 5.45118 4.15829 5.64645 4.35355L6.35355 3.64645ZM5.64645 11.6464C5.45118 11.8417 5.45118 12.1583 5.64645 12.3536C5.84171 12.5488 6.15829 12.5488 6.35355 12.3536L5.64645 11.6464ZM9.92929 8.07071L10.2828 8.42426L9.92929 8.07071ZM5.64645 4.35355L9.57574 8.28284L10.2828 7.57574L6.35355 3.64645L5.64645 4.35355ZM9.57574 7.71716L5.64645 11.6464L6.35355 12.3536L10.2828 8.42426L9.57574 7.71716ZM9.57574 8.28284C9.41952 8.12663 9.41953 7.87337 9.57574 7.71716L10.2828 8.42426C10.5172 8.18995 10.5172 7.81005 10.2828 7.57574L9.57574 8.28284Z\"\n            })\n        ]\n    });\n};\nvar RefreshIcon = function() {\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(SVG, {\n        children: [\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"title\", {\n                children: \"Refresh preview\"\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", {\n                clipRule: \"evenodd\",\n                d: \"M3.83325 7.99992C3.83325 5.69867 5.69853 3.83325 7.99934 3.83325C9.81246 3.83325 11.3563 4.99195 11.9285 6.61097C11.9396 6.6425 11.9536 6.67221 11.97 6.69992H8.80005C8.52391 6.69992 8.30005 6.92378 8.30005 7.19992C8.30005 7.47606 8.52391 7.69992 8.80005 7.69992H12.5667C12.8981 7.69992 13.1667 7.43129 13.1667 7.09992V3.33325C13.1667 3.05711 12.9429 2.83325 12.6667 2.83325C12.3906 2.83325 12.1667 3.05711 12.1667 3.33325V4.94608C11.2268 3.66522 9.7106 2.83325 7.99934 2.83325C5.14613 2.83325 2.83325 5.14651 2.83325 7.99992C2.83325 10.8533 5.14613 13.1666 7.99934 13.1666C9.91218 13.1666 11.5815 12.1266 12.474 10.5836C12.6123 10.3446 12.5306 10.0387 12.2915 9.90044C12.0525 9.76218 11.7466 9.84387 11.6084 10.0829C10.8873 11.3296 9.54072 12.1666 7.99934 12.1666C5.69853 12.1666 3.83325 10.3012 3.83325 7.99992Z\",\n                fillRule: \"evenodd\"\n            })\n        ]\n    });\n};\nvar CleanIcon = function() {\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(SVG, {\n        fill: \"none\",\n        stroke: \"currentColor\",\n        children: [\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"title\", {\n                children: \"Clean\"\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"circle\", {\n                cx: \"7.99998\",\n                cy: \"8.00004\",\n                r: \"4.66667\",\n                strokeLinecap: \"round\"\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", {\n                d: \"M4.66669 4.66663L11.3334 11.3333\"\n            })\n        ]\n    });\n};\nvar ExportIcon = function() {\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(SVG, {\n        fill: \"none\",\n        stroke: \"currentColor\",\n        children: [\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"title\", {\n                children: \"Open on CodeSandbox\"\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", {\n                d: \"M6.66665 3.33337H4.33331C3.78103 3.33337 3.33331 3.78109 3.33331 4.33337V11.6667C3.33331 12.219 3.78103 12.6667 4.33331 12.6667H11.6666C12.2189 12.6667 12.6666 12.219 12.6666 11.6667V9.33337\",\n                strokeLinecap: \"round\"\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", {\n                d: \"M10 3.33337H12.5667C12.6219 3.33337 12.6667 3.37815 12.6667 3.43337V6.00004\",\n                strokeLinecap: \"round\"\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", {\n                d: \"M7.33331 8.66668L12.5333 3.46667\",\n                strokeLinecap: \"round\"\n            })\n        ]\n    });\n};\nvar DirectoryIconOpen = function() {\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(SVG, {\n        children: [\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"title\", {\n                children: \"Directory\"\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", {\n                d: \"M12.5526 12.6667H3.66675C3.2922 12.6667 2.96575 12.4608 2.79442 12.156L3.81072 8.0908C3.92201 7.64563 4.32199 7.33333 4.78086 7.33333H13.386C14.0365 7.33333 14.5139 7.94472 14.3561 8.57587L13.5228 11.9092C13.4115 12.3544 13.0115 12.6667 12.5526 12.6667Z\",\n                fill: \"currentColor\"\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", {\n                d: \"M13.3334 6.63333V6.33333C13.3334 5.78105 12.8857 5.33333 12.3334 5.33333H8.30286C8.10543 5.33333 7.91242 5.2749 7.74816 5.16538L6.25201 4.16795C6.08774 4.05844 5.89473 4 5.69731 4H3.66675C3.11446 4 2.66675 4.44772 2.66675 5L2.66675 11.6667C2.66675 12.219 3.11446 12.6667 3.66675 12.6667H12.5526C13.0115 12.6667 13.4115 12.3544 13.5228 11.9092L14.3561 8.57587C14.5139 7.94472 14.0365 7.33333 13.386 7.33333H4.78086C4.32199 7.33333 3.92201 7.64563 3.81072 8.0908L2.75008 12.3333\",\n                fill: \"none\",\n                stroke: \"currentColor\",\n                strokeLinecap: \"round\"\n            })\n        ]\n    });\n};\nvar DirectoryIconClosed = function() {\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(SVG, {\n        children: [\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"title\", {\n                children: \"Directory\"\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", {\n                d: \"M12.3334 12.6667H3.66675C3.11446 12.6667 2.66675 12.219 2.66675 11.6667V5C2.66675 4.44772 3.11446 4 3.66675 4H5.69731C5.89473 4 6.08774 4.05844 6.25201 4.16795L7.74816 5.16538C7.91242 5.2749 8.10543 5.33333 8.30286 5.33333H12.3334C12.8857 5.33333 13.3334 5.78105 13.3334 6.33333V11.6667C13.3334 12.219 12.8857 12.6667 12.3334 12.6667Z\",\n                fill: \"currentColor\",\n                stroke: \"currentColor\",\n                strokeLinecap: \"round\"\n            })\n        ]\n    });\n};\nvar FileIcon = function() {\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(SVG, {\n        fill: \"currentColor\",\n        children: [\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"title\", {\n                children: \"File\"\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", {\n                clipRule: \"evenodd\",\n                d: \"M4.5 4.33325C4.5 4.05711 4.72386 3.83325 5 3.83325H8.16675V6.56659C8.16675 6.89795 8.43538 7.16658 8.76675 7.16658H11.5V12.3333C11.5 12.6094 11.2761 12.8333 11 12.8333H5C4.72386 12.8333 4.5 12.6094 4.5 12.3333V4.33325ZM12.5 6.67568C12.5001 6.67265 12.5001 6.66962 12.5001 6.66658C12.5001 6.66355 12.5001 6.66052 12.5 6.65749V6.41413C12.5 6.01631 12.342 5.63478 12.0607 5.35347L9.97978 3.27259C9.69848 2.99129 9.31694 2.83325 8.91912 2.83325H8.66675H5C4.17157 2.83325 3.5 3.50483 3.5 4.33325V12.3333C3.5 13.1617 4.17157 13.8333 5 13.8333H11C11.8284 13.8333 12.5 13.1617 12.5 12.3333V6.67568ZM9.16675 3.89888C9.20518 3.92078 9.24085 3.94787 9.27267 3.9797L11.3536 6.06058C11.3854 6.09243 11.4125 6.12813 11.4344 6.16658H9.16675V3.89888Z\",\n                fillRule: \"evenodd\"\n            })\n        ]\n    });\n};\nvar CloseIcon = function() {\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(SVG, {\n        stroke: \"currentColor\",\n        children: [\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"title\", {\n                children: \"Close file\"\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", {\n                d: \"M12 4L4 12\",\n                strokeLinecap: \"round\"\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", {\n                d: \"M4 4L12 12\",\n                strokeLinecap: \"round\"\n            })\n        ]\n    });\n};\nvar ConsoleIcon = function() {\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(SVG, {\n        children: [\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"title\", {\n                children: \"Open browser console\"\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", {\n                d: \"M5.65871 3.62037C5.44905 3.44066 5.1334 3.46494 4.95368 3.6746C4.77397 3.88427 4.79825 4.19992 5.00792 4.37963L5.65871 3.62037ZM5.00792 11.6204C4.79825 11.8001 4.77397 12.1157 4.95368 12.3254C5.1334 12.5351 5.44905 12.5593 5.65871 12.3796L5.00792 11.6204ZM9.9114 7.92407L10.2368 7.54445L9.9114 7.92407ZM5.00792 4.37963L9.586 8.3037L10.2368 7.54445L5.65871 3.62037L5.00792 4.37963ZM9.586 7.6963L5.00792 11.6204L5.65871 12.3796L10.2368 8.45555L9.586 7.6963ZM9.586 8.3037C9.39976 8.14407 9.39976 7.85594 9.586 7.6963L10.2368 8.45555C10.5162 8.2161 10.5162 7.7839 10.2368 7.54445L9.586 8.3037Z\"\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", {\n                d: \"M10 11.5C9.72386 11.5 9.5 11.7239 9.5 12C9.5 12.2761 9.72386 12.5 10 12.5V11.5ZM14.6667 12.5C14.9428 12.5 15.1667 12.2761 15.1667 12C15.1667 11.7239 14.9428 11.5 14.6667 11.5V12.5ZM10 12.5H14.6667V11.5H10V12.5Z\"\n            })\n        ]\n    });\n};\nvar _a$a;\n/**\n * @category Theme\n */ var defaultLight = {\n    colors: {\n        surface1: \"#ffffff\",\n        surface2: \"#EFEFEF\",\n        surface3: \"#F3F3F3\",\n        disabled: \"#C5C5C5\",\n        base: \"#323232\",\n        clickable: \"#808080\",\n        hover: \"#4D4D4D\",\n        accent: \"#3973E0\",\n        error: \"#EA3323\",\n        errorSurface: \"#FCF1F0\",\n        warning: \"#6A4516\",\n        warningSurface: \"#FEF2C0\"\n    },\n    syntax: {\n        plain: \"#151515\",\n        comment: {\n            color: \"#999\",\n            fontStyle: \"italic\"\n        },\n        keyword: \"#7C5AE3\",\n        tag: \"#0971F1\",\n        punctuation: \"#3B3B3B\",\n        definition: \"#85A600\",\n        property: \"#3B3B3B\",\n        static: \"#3B3B3B\",\n        string: \"#2E6BD0\"\n    },\n    font: {\n        body: '-apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"',\n        mono: '\"Fira Mono\", \"DejaVu Sans Mono\", Menlo, Consolas, \"Liberation Mono\", Monaco, \"Lucida Console\", monospace',\n        size: \"13px\",\n        lineHeight: \"20px\"\n    }\n};\n/**\n * @category Theme\n */ var defaultDark = {\n    colors: {\n        surface1: \"#151515\",\n        surface2: \"#252525\",\n        surface3: \"#2F2F2F\",\n        disabled: \"#4D4D4D\",\n        base: \"#808080\",\n        clickable: \"#999999\",\n        hover: \"#C5C5C5\",\n        accent: \"#E5E5E5\",\n        error: \"#FFB4A6\",\n        errorSurface: \"#690000\",\n        warning: \"#E7C400\",\n        warningSurface: \"#3A3000\"\n    },\n    syntax: {\n        plain: \"#FFFFFF\",\n        comment: {\n            color: \"#757575\",\n            fontStyle: \"italic\"\n        },\n        keyword: \"#77B7D7\",\n        tag: \"#DFAB5C\",\n        punctuation: \"#ffffff\",\n        definition: \"#86D9CA\",\n        property: \"#77B7D7\",\n        static: \"#C64640\",\n        string: \"#977CDC\"\n    },\n    font: {\n        body: '-apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"',\n        mono: '\"Fira Mono\", \"DejaVu Sans Mono\", Menlo, Consolas, \"Liberation Mono\", Monaco, \"Lucida Console\", monospace',\n        size: \"13px\",\n        lineHeight: \"20px\"\n    }\n};\n/**\n * @category Theme\n */ var SANDPACK_THEMES = {\n    light: defaultLight,\n    dark: defaultDark,\n    auto:  false ? 0 : defaultLight\n};\nvar getFileName = function(filePath) {\n    var lastIndexOfSlash = filePath.lastIndexOf(\"/\");\n    return filePath.slice(lastIndexOfSlash + 1);\n};\nvar calculateNearestUniquePath = function(currentPath, otherPaths) {\n    var currentPathParts = (currentPath[0] === \"/\" ? currentPath.slice(1) : currentPath).split(\"/\");\n    var resultPathParts = [];\n    // If path is on root, there are no parts to loop through\n    if (currentPathParts.length === 1) {\n        resultPathParts.unshift(currentPathParts[0]);\n    } else {\n        // Loop over all other paths to find a unique path\n        for(var fileIndex = 0; fileIndex < otherPaths.length; fileIndex++){\n            // We go over each part of the path from end to start to find the closest unique directory\n            var otherPathParts = otherPaths[fileIndex].split(\"/\");\n            for(var partsFromEnd = 1; partsFromEnd <= currentPathParts.length; partsFromEnd++){\n                var currentPathPart = currentPathParts[currentPathParts.length - partsFromEnd];\n                var otherPathPart = otherPathParts[otherPathParts.length - partsFromEnd];\n                // If this part hasn't been added to the result path, we add it here\n                if (resultPathParts.length < partsFromEnd) {\n                    resultPathParts.unshift(currentPathPart);\n                }\n                // If this part is different between the current path and other path we break\n                // as from this moment the current path is unique compared to this other path\n                if (currentPathPart !== otherPathPart) {\n                    break;\n                }\n            }\n        }\n    }\n    // Add `..` if this is a relative path\n    if (resultPathParts.length < currentPathParts.length) {\n        resultPathParts.unshift(\"..\");\n    }\n    // Join the result path parts into a path string\n    return resultPathParts.join(\"/\");\n};\n// Checks both rgb and hex colors for contrast and returns true if the color is in the dark spectrum\nvar isDarkColor = function(color) {\n    var r = 0;\n    var g = 0;\n    var b = 0;\n    if (color.startsWith(\"#\")) {\n        if (color.length < 7) {\n            return true;\n        }\n        r = parseInt(color.substr(1, 2), 16);\n        g = parseInt(color.substr(3, 2), 16);\n        b = parseInt(color.substr(5, 2), 16);\n    } else {\n        var rgbValues = color.replace(\"rgb(\", \"\").replace(\"rgba(\", \"\").replace(\")\", \"\").split(\",\");\n        if (rgbValues.length < 3) {\n            return true;\n        }\n        r = parseInt(rgbValues[0], 10);\n        g = parseInt(rgbValues[1], 10);\n        b = parseInt(rgbValues[2], 10);\n    }\n    var yiq = (r * 299 + g * 587 + b * 114) / 1000;\n    return yiq < 128;\n};\n// Minimal cuid-like id\nvar lastCount = 0;\nvar generateRandomId = function() {\n    var random = +(Date.now().toString(10).substr(0, 4) + lastCount++);\n    return random.toString(16);\n};\nvar toString = function() {\n    return \"\";\n};\nvar defineProperty = Object.getOwnPropertyDescriptors({\n    toString: toString\n});\nObject.defineProperties(toString, defineProperty);\nvar _a$9;\n/**\n * @category Theme\n */ var THEME_PREFIX = \"sp\";\n/**\n * @category Theme\n */ // prettier-ignore\nvar createTheme = (_a$9 = (0,_stitches_core__WEBPACK_IMPORTED_MODULE_8__.createStitches)({\n    prefix: THEME_PREFIX\n}), _a$9.createTheme), css = _a$9.css, getCssText = _a$9.getCssText, keyframes = _a$9.keyframes;\nvar defaultVariables = {\n    space: new Array(11).fill(\" \").reduce(function(acc, _, index) {\n        var _a;\n        return __assign(__assign({}, acc), (_a = {}, _a[index + 1] = \"\".concat((index + 1) * 4, \"px\"), _a));\n    }, {}),\n    border: {\n        radius: \"4px\"\n    },\n    layout: {\n        height: \"300px\",\n        headerHeight: \"40px\"\n    },\n    transitions: {\n        default: \"150ms ease\"\n    },\n    zIndices: {\n        base: \"1\",\n        overlay: \"2\",\n        top: \"3\"\n    }\n};\n/**\n * @category Theme\n */ var standardizeStitchesTheme = function(theme) {\n    // Flat values\n    var syntaxEntries = Object.entries(theme.syntax);\n    var syntax = syntaxEntries.reduce(function(tokenAcc, _a) {\n        var _b;\n        var tokenName = _a[0], tokenValue = _a[1];\n        // Single property\n        var newValues = (_b = {}, _b[\"color-\".concat(tokenName)] = tokenValue, _b);\n        // Multiples properties\n        if (typeof tokenValue === \"object\") {\n            newValues = Object.entries(tokenValue).reduce(function(valueAcc, _a) {\n                var _b;\n                var styleProp = _a[0], styleValue = _a[1];\n                return __assign(__assign({}, valueAcc), (_b = {}, _b[\"\".concat(styleProp, \"-\").concat(tokenName)] = styleValue, _b));\n            }, {});\n        }\n        return __assign(__assign({}, tokenAcc), newValues);\n    }, {});\n    return __assign(__assign({}, defaultVariables), {\n        colors: theme.colors,\n        font: theme.font,\n        syntax: syntax\n    });\n};\n/**\n * @category Theme\n */ var standardizeTheme = function(inputTheme) {\n    var _a, _b, _c, _d, _e;\n    if (inputTheme === void 0) {\n        inputTheme = \"light\";\n    }\n    var defaultLightThemeKey = \"default\";\n    /**\n     * Set a local theme: dark or light\n     */ if (typeof inputTheme === \"string\") {\n        var predefinedTheme = SANDPACK_THEMES[inputTheme];\n        if (!predefinedTheme) {\n            throw new Error(\"[sandpack-react]: invalid theme '\".concat(inputTheme, \"' provided.\"));\n        }\n        return {\n            theme: predefinedTheme,\n            id: inputTheme,\n            mode: isDarkColor(predefinedTheme.colors.surface1) ? \"dark\" : \"light\"\n        };\n    }\n    /**\n     * Fullfill the colors key, in case it's missing any key\n     */ var mode = isDarkColor((_b = (_a = inputTheme === null || inputTheme === void 0 ? void 0 : inputTheme.colors) === null || _a === void 0 ? void 0 : _a.surface1) !== null && _b !== void 0 ? _b : defaultLight.colors.surface1) ? \"dark\" : \"light\";\n    /**\n     * Figure out what's the properly default colors it should be\n     * error, warning and success colors have different values between dark and light\n     */ var baseTheme = mode === \"dark\" ? defaultDark : defaultLight;\n    var colorsByMode = __assign(__assign({}, baseTheme.colors), (_c = inputTheme === null || inputTheme === void 0 ? void 0 : inputTheme.colors) !== null && _c !== void 0 ? _c : {});\n    var syntaxByMode = __assign(__assign({}, baseTheme.syntax), (_d = inputTheme === null || inputTheme === void 0 ? void 0 : inputTheme.syntax) !== null && _d !== void 0 ? _d : {});\n    var fontByMode = __assign(__assign({}, baseTheme.font), (_e = inputTheme === null || inputTheme === void 0 ? void 0 : inputTheme.font) !== null && _e !== void 0 ? _e : {});\n    var theme = {\n        colors: colorsByMode,\n        syntax: syntaxByMode,\n        font: fontByMode\n    };\n    var id = inputTheme ? simpleHashFunction(JSON.stringify(theme)) : defaultLightThemeKey;\n    return {\n        theme: theme,\n        id: \"sp-\".concat(id),\n        mode: mode\n    };\n};\nvar simpleHashFunction = function(str) {\n    var hash = 0;\n    for(var i = 0; i < str.length; hash &= hash){\n        hash = 31 * hash + str.charCodeAt(i++);\n    }\n    return Math.abs(hash);\n};\n/**\n * The fake `css` function used to match the real `css` function usage\n * We use this for the unstyled bundle which do not need real class names\n * `css` is a factory which return a className generator, but also it be used in scenarios which `toString` will be invoked\n * so we also need to add the `toString` method to it.\n */ var fakeCss = function() {\n    return \"\";\n};\nfakeCss.toString = fakeCss;\n/**\n * <ClassNamesContext classes={{\n *     \"sp-wrapper\": \"custom-wrapper\",\n *     \"sp-layout\": \"custom-layout\",\n *     \"sp-tab-button\": \"custom-tab\",\n *  }}>\n *  ...\n * </ClassNamesContext>\n */ var ClassNamesContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)({});\nvar ClassNamesProvider = function(_a) {\n    var children = _a.children, classes = _a.classes;\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ClassNamesContext.Provider, {\n        value: classes || {},\n        children: children\n    });\n};\nvar useClassNames = function() {\n    var contextClassNames = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(ClassNamesContext);\n    return function sandpackClassNames(customClassName, /* eslint-disable @typescript-eslint/no-explicit-any */ allClassNames) {\n        if (allClassNames === void 0) {\n            allClassNames = [];\n        }\n        var custom = \"\".concat(THEME_PREFIX, \"-\").concat(customClassName);\n        return joinClassNames.apply(void 0, __spreadArray(__spreadArray([], allClassNames, false), [\n            custom,\n            contextClassNames[custom]\n        ], false));\n    };\n};\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nvar joinClassNames = function() {\n    var args = [];\n    for(var _i = 0; _i < arguments.length; _i++){\n        args[_i] = arguments[_i];\n    }\n    return args.filter(Boolean).join(\" \");\n};\nvar wrapperClassName$3 = css({\n    all: \"initial\",\n    fontSize: \"$font$size\",\n    fontFamily: \"$font$body\",\n    display: \"block\",\n    boxSizing: \"border-box\",\n    textRendering: \"optimizeLegibility\",\n    WebkitTapHighlightColor: \"transparent\",\n    WebkitFontSmoothing: \"subpixel-antialiased\",\n    variants: {\n        variant: {\n            dark: {\n                colorScheme: \"dark\"\n            },\n            light: {\n                colorScheme: \"light\"\n            }\n        }\n    },\n    \"@media screen and (min-resolution: 2dppx)\": {\n        WebkitFontSmoothing: \"antialiased\",\n        MozOsxFontSmoothing: \"grayscale\"\n    },\n    \"*\": {\n        boxSizing: \"border-box\"\n    },\n    \".sp-wrapper:focus\": {\n        outline: \"0\"\n    }\n});\nvar SandpackThemeContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createContext({\n    theme: defaultLight,\n    id: \"light\",\n    mode: \"light\"\n});\n/**\n * @category Theme\n */ var SandpackThemeProvider = function(_a) {\n    var themeFromProps = _a.theme, children = _a.children, className = _a.className, props = __rest(_a, [\n        \"theme\",\n        \"children\",\n        \"className\"\n    ]);\n    var _b = react__WEBPACK_IMPORTED_MODULE_1__.useState(themeFromProps), prefferedTheme = _b[0], setPreferredTheme = _b[1];\n    var _c = standardizeTheme(prefferedTheme), theme = _c.theme, id = _c.id, mode = _c.mode;\n    var classNames = useClassNames();\n    var themeClassName = react__WEBPACK_IMPORTED_MODULE_1__.useMemo(function() {\n        return createTheme(id, standardizeStitchesTheme(theme));\n    }, [\n        theme,\n        id\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function() {\n        if (themeFromProps !== \"auto\") {\n            setPreferredTheme(themeFromProps);\n            return;\n        }\n        var colorSchemeChange = function(_a) {\n            var matches = _a.matches;\n            setPreferredTheme(matches ? \"dark\" : \"light\");\n        };\n        window.matchMedia(\"(prefers-color-scheme: dark)\").addEventListener(\"change\", colorSchemeChange);\n        return function() {\n            window.matchMedia(\"(prefers-color-scheme: dark)\").removeEventListener(\"change\", colorSchemeChange);\n        };\n    }, [\n        themeFromProps\n    ]);\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(SandpackThemeContext.Provider, {\n        value: {\n            theme: theme,\n            id: id,\n            mode: mode\n        },\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", __assign({\n            className: classNames(\"wrapper\", [\n                themeClassName,\n                wrapperClassName$3({\n                    variant: mode\n                }),\n                className\n            ])\n        }, props, {\n            children: children\n        }))\n    });\n};\nvar SandpackThemeConsumer = SandpackThemeContext.Consumer;\nvar commonFiles = {\n    \"/styles.css\": {\n        code: \"body {\\n  font-family: sans-serif;\\n  -webkit-font-smoothing: auto;\\n  -moz-font-smoothing: auto;\\n  -moz-osx-font-smoothing: grayscale;\\n  font-smoothing: auto;\\n  text-rendering: optimizeLegibility;\\n  font-smooth: always;\\n  -webkit-tap-highlight-color: transparent;\\n  -webkit-touch-callout: none;\\n}\\n\\nh1 {\\n  font-size: 1.5rem;\\n}\"\n    }\n};\n/**\n * @hidden\n */ var ASTRO_TEMPLATE = {\n    files: {\n        \"/src/styles.css\": commonFiles[\"/styles.css\"],\n        \"/src/pages/index.astro\": {\n            code: '---\\nimport \"../styles.css\";\\nconst data = \"world\";\\n---\\n\\n<h1>Hello {data}</h1>\\n\\n<style>\\n  h1 {\\n    font-size: 1.5rem;\\n  }\\n</style>'\n        },\n        \".env\": {\n            code: 'ASTRO_TELEMETRY_DISABLED=\"1\"'\n        },\n        \"/package.json\": {\n            code: JSON.stringify({\n                dependencies: {\n                    astro: \"^1.6.12\",\n                    \"esbuild-wasm\": \"^0.15.16\"\n                },\n                scripts: {\n                    dev: \"astro dev\",\n                    start: \"astro dev\",\n                    build: \"astro build\",\n                    preview: \"astro preview\",\n                    astro: \"astro\"\n                }\n            })\n        }\n    },\n    main: \"/src/pages/index.astro\",\n    environment: \"node\"\n};\nvar NEXTJS_TEMPLATE = {\n    files: __assign(__assign({}, commonFiles), {\n        \"/pages/_app.js\": {\n            code: \"import '../styles.css'\\n\\nexport default function MyApp({ Component, pageProps }) {\\n  return <Component {...pageProps} />\\n}\"\n        },\n        \"/pages/index.js\": {\n            code: 'export default function Home({ data }) {\\n  return (\\n    <div>\\n      <h1>Hello {data}</h1>\\n    </div>\\n  );\\n}\\n  \\nexport function getServerSideProps() {\\n  return {\\n    props: { data: \"world\" },\\n  }\\n}\\n'\n        },\n        \"/next.config.js\": {\n            code: \"/** @type {import('next').NextConfig} */\\nconst nextConfig = {\\n  reactStrictMode: true,\\n  swcMinify: true,\\n}\\n\\nmodule.exports = nextConfig\\n\"\n        },\n        \"/package.json\": {\n            code: JSON.stringify({\n                name: \"my-app\",\n                version: \"0.1.0\",\n                private: true,\n                scripts: {\n                    dev: \"NEXT_TELEMETRY_DISABLED=1 next dev\",\n                    build: \"next build\",\n                    start: \"next start\",\n                    lint: \"next lint\"\n                },\n                dependencies: {\n                    next: \"12.1.6\",\n                    react: \"18.2.0\",\n                    \"react-dom\": \"18.2.0\",\n                    \"@next/swc-wasm-nodejs\": \"12.1.6\"\n                }\n            })\n        }\n    }),\n    main: \"/pages/index.js\",\n    environment: \"node\"\n};\nvar NODE_TEMPLATE = {\n    files: {\n        \"/index.js\": {\n            code: \"const http = require('http');\\n\\nconst hostname = '127.0.0.1';\\nconst port = 3000;\\n\\nconst server = http.createServer((req, res) => {\\n  res.statusCode = 200;\\n  res.setHeader('Content-Type', 'text/html');\\n  res.end('Hello world');\\n});\\n\\nserver.listen(port, hostname, () => {\\n  console.log(`Server running at http://${hostname}:${port}/`);\\n});\"\n        },\n        \"/package.json\": {\n            code: JSON.stringify({\n                dependencies: {},\n                scripts: {\n                    start: \"node index.js\"\n                },\n                main: \"index.js\"\n            })\n        }\n    },\n    main: \"/index.js\",\n    environment: \"node\"\n};\nvar VITE_TEMPLATE = {\n    files: __assign(__assign({}, commonFiles), {\n        \"/index.js\": {\n            code: 'import \"./styles.css\";\\n\\ndocument.getElementById(\"app\").innerHTML = `\\n<h1>Hello world</h1>\\n`;\\n'\n        },\n        \"/index.html\": {\n            code: '<!DOCTYPE html>\\n<html lang=\"en\">\\n  <head>\\n    <meta charset=\"UTF-8\" />\\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\\n    <title>Vite App</title>\\n  </head>\\n  <body>\\n    <div id=\"app\"></div>\\n    <script type=\"module\" src=\"/index.js\"></script>\\n  </body>\\n</html>\\n'\n        },\n        \"/package.json\": {\n            code: JSON.stringify({\n                scripts: {\n                    dev: \"vite\",\n                    build: \"vite build\",\n                    preview: \"vite preview\"\n                },\n                devDependencies: {\n                    vite: \"4.1.4\",\n                    \"esbuild-wasm\": \"0.17.12\"\n                }\n            })\n        }\n    }),\n    main: \"/index.js\",\n    environment: \"node\"\n};\nvar VITE_PREACT_TEMPLATE = {\n    files: __assign(__assign({}, commonFiles), {\n        \"/App.jsx\": {\n            code: 'export default function App() {\\n  const data = \"world\"\\n\\n  return <h1>Hello {data}</h1>\\n}\\n'\n        },\n        \"/index.jsx\": {\n            code: 'import { render } from \"preact\";\\nimport \"./styles.css\";\\n\\nimport App from \"./App\";\\n\\nconst root = document.getElementById(\"root\");\\nrender(<App />, root);\\n'\n        },\n        \"/index.html\": {\n            code: '<!DOCTYPE html>\\n<html lang=\"en\">\\n  <head>\\n    <meta charset=\"UTF-8\" />\\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\\n    <title>Vite App</title>\\n  </head>\\n  <body>\\n    <div id=\"root\"></div>\\n    <script type=\"module\" src=\"/index.jsx\"></script>\\n  </body>\\n</html>\\n'\n        },\n        \"/package.json\": {\n            code: JSON.stringify({\n                scripts: {\n                    dev: \"vite\",\n                    build: \"vite build\",\n                    preview: \"vite preview\"\n                },\n                dependencies: {\n                    preact: \"^10.16.0\"\n                },\n                devDependencies: {\n                    \"@preact/preset-vite\": \"^2.5.0\",\n                    vite: \"4.1.4\",\n                    \"esbuild-wasm\": \"0.17.12\"\n                }\n            })\n        },\n        \"/vite.config.js\": {\n            code: \"import { defineConfig } from \\\"vite\\\";\\nimport preact from '@preact/preset-vite'\\n\\n// https://vitejs.dev/config/\\nexport default defineConfig({\\n  plugins: [preact()],\\n});\\n\"\n        }\n    }),\n    main: \"/App.jsx\",\n    environment: \"node\"\n};\nvar VITE_PREACT_TS_TEMPLATE = {\n    files: __assign(__assign({}, commonFiles), {\n        \"/App.tsx\": {\n            code: 'export default function App() {\\n  const data: string = \"world\"\\n\\n  return <h1>Hello {data}</h1>\\n}\\n'\n        },\n        \"/index.tsx\": {\n            code: 'import { render } from \"preact\";\\nimport \"./styles.css\";\\n\\nimport App from \"./App\";\\n\\nconst root = document.getElementById(\"root\") as HTMLElement;\\nrender(<App />, root);\\n'\n        },\n        \"/index.html\": {\n            code: '<!DOCTYPE html>\\n<html lang=\"en\">\\n  <head>\\n    <meta charset=\"UTF-8\" />\\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\\n    <title>Vite App</title>\\n  </head>\\n  <body>\\n    <div id=\"root\"></div>\\n    <script type=\"module\" src=\"/index.tsx\"></script>\\n  </body>\\n</html>\\n'\n        },\n        \"/tsconfig.json\": {\n            code: JSON.stringify({\n                compilerOptions: {\n                    target: \"ESNext\",\n                    useDefineForClassFields: true,\n                    lib: [\n                        \"DOM\",\n                        \"DOM.Iterable\",\n                        \"ESNext\"\n                    ],\n                    allowJs: false,\n                    skipLibCheck: true,\n                    esModuleInterop: false,\n                    allowSyntheticDefaultImports: true,\n                    strict: true,\n                    forceConsistentCasingInFileNames: true,\n                    module: \"ESNext\",\n                    moduleResolution: \"Node\",\n                    resolveJsonModule: true,\n                    isolatedModules: true,\n                    noEmit: true,\n                    jsx: \"react-jsx\",\n                    jsxImportSource: \"preact\"\n                },\n                include: [\n                    \"src\"\n                ],\n                references: [\n                    {\n                        path: \"./tsconfig.node.json\"\n                    }\n                ]\n            }, null, 2)\n        },\n        \"/tsconfig.node.json\": {\n            code: JSON.stringify({\n                compilerOptions: {\n                    composite: true,\n                    module: \"ESNext\",\n                    moduleResolution: \"Node\",\n                    allowSyntheticDefaultImports: true\n                },\n                include: [\n                    \"vite.config.ts\"\n                ]\n            }, null, 2)\n        },\n        \"/package.json\": {\n            code: JSON.stringify({\n                scripts: {\n                    dev: \"vite\",\n                    build: \"tsc && vite build\",\n                    preview: \"vite preview\"\n                },\n                dependencies: {\n                    preact: \"^10.16.0\"\n                },\n                devDependencies: {\n                    \"@preact/preset-vite\": \"^2.5.0\",\n                    typescript: \"^4.9.5\",\n                    vite: \"4.1.4\",\n                    \"esbuild-wasm\": \"^0.17.12\"\n                }\n            }, null, 2)\n        },\n        \"/vite-env.d.ts\": {\n            code: '/// <reference types=\"vite/client\" />'\n        },\n        \"/vite.config.ts\": {\n            code: \"import { defineConfig } from 'vite'\\nimport preact from '@preact/preset-vite'\\n\\n// https://vitejs.dev/config/\\nexport default defineConfig({\\n  plugins: [preact()],\\n})\\n\"\n        }\n    }),\n    main: \"/App.tsx\",\n    environment: \"node\"\n};\nvar VITE_REACT_TEMPLATE = {\n    files: __assign(__assign({}, commonFiles), {\n        \"/App.jsx\": {\n            code: 'export default function App() {\\n  const data = \"world\"\\n\\n  return <h1>Hello {data}</h1>\\n}\\n'\n        },\n        \"/index.jsx\": {\n            code: 'import { StrictMode } from \"react\";\\nimport { createRoot } from \"react-dom/client\";\\nimport \"./styles.css\";\\n\\nimport App from \"./App\";\\n\\nconst root = createRoot(document.getElementById(\"root\"));\\nroot.render(\\n  <StrictMode>\\n    <App />\\n  </StrictMode>\\n);'\n        },\n        \"/index.html\": {\n            code: '<!DOCTYPE html>\\n<html lang=\"en\">\\n  <head>\\n    <meta charset=\"UTF-8\" />\\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\\n    <title>Vite App</title>\\n  </head>\\n  <body>\\n    <div id=\"root\"></div>\\n    <script type=\"module\" src=\"/index.jsx\"></script>\\n  </body>\\n</html>\\n'\n        },\n        \"/package.json\": {\n            code: JSON.stringify({\n                scripts: {\n                    dev: \"vite\",\n                    build: \"vite build\",\n                    preview: \"vite preview\"\n                },\n                dependencies: {\n                    react: \"^18.2.0\",\n                    \"react-dom\": \"^18.2.0\"\n                },\n                devDependencies: {\n                    \"@vitejs/plugin-react\": \"3.1.0\",\n                    vite: \"4.1.4\",\n                    \"esbuild-wasm\": \"0.17.12\"\n                }\n            })\n        },\n        \"/vite.config.js\": {\n            code: 'import { defineConfig } from \"vite\";\\nimport react from \"@vitejs/plugin-react\";\\n\\n// https://vitejs.dev/config/\\nexport default defineConfig({\\n  plugins: [react()],\\n});\\n'\n        }\n    }),\n    main: \"/App.jsx\",\n    environment: \"node\"\n};\nvar VITE_REACT_TS_TEMPLATE = {\n    files: __assign(__assign({}, commonFiles), {\n        \"/App.tsx\": {\n            code: 'export default function App() {\\n  const data: string = \"world\"\\n\\n  return <h1>Hello {data}</h1>\\n}\\n'\n        },\n        \"/index.tsx\": {\n            code: 'import { StrictMode } from \"react\";\\nimport { createRoot } from \"react-dom/client\";\\nimport \"./styles.css\";\\n\\nimport App from \"./App\";\\nimport React from \"react\";\\n\\nconst root = createRoot(document.getElementById(\"root\") as HTMLElement);\\nroot.render(\\n  <StrictMode>\\n    <App />\\n  </StrictMode>\\n);\\n'\n        },\n        \"/index.html\": {\n            code: '<!DOCTYPE html>\\n<html lang=\"en\">\\n  <head>\\n    <meta charset=\"UTF-8\" />\\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\\n    <title>Vite App</title>\\n  </head>\\n  <body>\\n    <div id=\"root\"></div>\\n    <script type=\"module\" src=\"/index.tsx\"></script>\\n  </body>\\n</html>\\n'\n        },\n        \"/tsconfig.json\": {\n            code: JSON.stringify({\n                compilerOptions: {\n                    target: \"ESNext\",\n                    useDefineForClassFields: true,\n                    lib: [\n                        \"DOM\",\n                        \"DOM.Iterable\",\n                        \"ESNext\"\n                    ],\n                    allowJs: false,\n                    skipLibCheck: true,\n                    esModuleInterop: false,\n                    allowSyntheticDefaultImports: true,\n                    strict: true,\n                    forceConsistentCasingInFileNames: true,\n                    module: \"ESNext\",\n                    moduleResolution: \"Node\",\n                    resolveJsonModule: true,\n                    isolatedModules: true,\n                    noEmit: true,\n                    jsx: \"react-jsx\"\n                },\n                include: [\n                    \"src\"\n                ],\n                references: [\n                    {\n                        path: \"./tsconfig.node.json\"\n                    }\n                ]\n            }, null, 2)\n        },\n        \"/tsconfig.node.json\": {\n            code: JSON.stringify({\n                compilerOptions: {\n                    composite: true,\n                    module: \"ESNext\",\n                    moduleResolution: \"Node\",\n                    allowSyntheticDefaultImports: true\n                },\n                include: [\n                    \"vite.config.ts\"\n                ]\n            }, null, 2)\n        },\n        \"/package.json\": {\n            code: JSON.stringify({\n                scripts: {\n                    dev: \"vite\",\n                    build: \"tsc && vite build\",\n                    preview: \"vite preview\"\n                },\n                dependencies: {\n                    react: \"^18.2.0\",\n                    \"react-dom\": \"^18.2.0\"\n                },\n                devDependencies: {\n                    \"@types/react\": \"^18.0.28\",\n                    \"@types/react-dom\": \"^18.0.11\",\n                    \"@vitejs/plugin-react\": \"^3.1.0\",\n                    typescript: \"^4.9.5\",\n                    vite: \"4.1.4\",\n                    \"esbuild-wasm\": \"^0.17.12\"\n                }\n            }, null, 2)\n        },\n        \"/vite-env.d.ts\": {\n            code: '/// <reference types=\"vite/client\" />'\n        },\n        \"/vite.config.ts\": {\n            code: \"import { defineConfig } from 'vite'\\nimport react from '@vitejs/plugin-react'\\n\\n// https://vitejs.dev/config/\\nexport default defineConfig({\\n  plugins: [react()],\\n})\\n\"\n        }\n    }),\n    main: \"/App.tsx\",\n    environment: \"node\"\n};\nvar VITE_SVELTE_TEMPLATE = {\n    files: {\n        \"/src/styles.css\": commonFiles[\"/styles.css\"],\n        \"/src/App.svelte\": {\n            code: '<script>\\nconst data = \"world\";\\n</script>\\n\\n<h1>Hello {data}</h1>\\n\\n<style>\\nh1 {\\n  font-size: 1.5rem;\\n}\\n</style>'\n        },\n        \"/src/main.js\": {\n            code: \"import App from './App.svelte'\\nimport \\\"./styles.css\\\"\\n\\nconst app = new App({\\n  target: document.getElementById('app'),\\n})\\n\\nexport default app\"\n        },\n        \"/index.html\": {\n            code: '<!DOCTYPE html>\\n<html lang=\"en\">\\n  <head>\\n    <meta charset=\"UTF-8\" />\\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\\n    <title>Vite App</title>\\n  </head>\\n  <body>\\n    <div id=\"app\"></div>\\n    <script type=\"module\" src=\"/src/main.js\"></script>\\n  </body>\\n</html>\\n'\n        },\n        \"/vite.config.js\": {\n            code: \"import { defineConfig } from 'vite'\\nimport { svelte } from '@sveltejs/vite-plugin-svelte'\\n\\n// https://vitejs.dev/config/\\nexport default defineConfig({\\n  plugins: [svelte()],\\n})\"\n        },\n        \"/package.json\": {\n            code: JSON.stringify({\n                type: \"module\",\n                scripts: {\n                    dev: \"vite\"\n                },\n                devDependencies: {\n                    \"@sveltejs/vite-plugin-svelte\": \"^2.0.2\",\n                    svelte: \"^3.55.1\",\n                    vite: \"4.0.4\",\n                    \"esbuild-wasm\": \"^0.17.12\"\n                }\n            })\n        }\n    },\n    main: \"/src/App.svelte\",\n    environment: \"node\"\n};\nvar VITE_SVELTE_TS_TEMPLATE = {\n    files: {\n        \"/src/styles.css\": commonFiles[\"/styles.css\"],\n        \"/src/App.svelte\": {\n            code: '<script lang=\"ts\">\\nconst data: string = \"world\";\\n</script>\\n\\n<h1>Hello {data}</h1>\\n\\n<style>\\nh1 {\\n  font-size: 1.5rem;\\n}\\n</style>'\n        },\n        \"/src/main.ts\": {\n            code: \"import App from './App.svelte'\\nimport \\\"./styles.css\\\"\\n\\nconst app = new App({\\n  target: document.getElementById('app'),\\n})\\n\\nexport default app\"\n        },\n        \"/index.html\": {\n            code: '<!DOCTYPE html>\\n<html lang=\"en\">\\n  <head>\\n    <meta charset=\"UTF-8\" />\\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\\n    <title>Vite App</title>\\n  </head>\\n  <body>\\n    <div id=\"app\"></div>\\n    <script type=\"module\" src=\"/src/main.ts\"></script>\\n  </body>\\n</html>\\n'\n        },\n        \"/vite-env.d.ts\": {\n            code: '/// <reference types=\"svelte\" />\\n/// <reference types=\"vite/client\" />'\n        },\n        \"svelte.config.js\": {\n            code: \"import { vitePreprocess } from '@sveltejs/vite-plugin-svelte'\\n\\nexport default {\\n  // Consult https://svelte.dev/docs#compile-time-svelte-preprocess\\n  // for more information about preprocessors\\n  preprocess: vitePreprocess(),\\n}\\n\"\n        },\n        \"/vite.config.ts\": {\n            code: \"import { defineConfig } from 'vite'\\nimport { svelte } from '@sveltejs/vite-plugin-svelte'\\n\\n// https://vitejs.dev/config/\\nexport default defineConfig({\\n  plugins: [svelte()],\\n})\"\n        },\n        \"tsconfig.json\": {\n            code: JSON.stringify({\n                extends: \"@tsconfig/svelte/tsconfig.json\",\n                compilerOptions: {\n                    target: \"ESNext\",\n                    useDefineForClassFields: true,\n                    module: \"ESNext\",\n                    resolveJsonModule: true,\n                    allowJs: true,\n                    checkJs: true,\n                    isolatedModules: true\n                },\n                include: [\n                    \"src/**/*.d.ts\",\n                    \"src/**/*.ts\",\n                    \"src/**/*.js\",\n                    \"src/**/*.svelte\"\n                ],\n                references: [\n                    {\n                        path: \"./tsconfig.node.json\"\n                    }\n                ]\n            }, null, 2)\n        },\n        \"tsconfig.node.json\": {\n            code: JSON.stringify({\n                compilerOptions: {\n                    composite: true,\n                    module: \"ESNext\",\n                    moduleResolution: \"Node\"\n                },\n                include: [\n                    \"vite.config.ts\"\n                ]\n            }, null, 2)\n        },\n        \"/package.json\": {\n            code: JSON.stringify({\n                type: \"module\",\n                scripts: {\n                    dev: \"vite\"\n                },\n                devDependencies: {\n                    \"@sveltejs/vite-plugin-svelte\": \"^2.0.2\",\n                    \"@tsconfig/svelte\": \"^3.0.0\",\n                    svelte: \"^3.55.1\",\n                    \"svelte-check\": \"^2.10.3\",\n                    tslib: \"^2.5.0\",\n                    vite: \"4.1.4\",\n                    \"esbuild-wasm\": \"^0.17.12\"\n                }\n            }, null, 2)\n        }\n    },\n    main: \"/src/App.svelte\",\n    environment: \"node\"\n};\nvar VITE_VUE_TEMPLATE = {\n    files: {\n        \"/src/styles.css\": commonFiles[\"/styles.css\"],\n        \"/src/App.vue\": {\n            code: '<script setup>\\nimport { ref } from \"vue\";\\n\\nconst data = ref(\"world\");\\n</script>\\n\\n<template>\\n  <h1>Hello {{ data }}</h1>\\n</template>\\n\\n<style>\\nh1 {\\n  font-size: 1.5rem;\\n}\\n</style>'\n        },\n        \"/src/main.js\": {\n            code: \"import { createApp } from 'vue'\\nimport App from './App.vue'\\nimport \\\"./styles.css\\\"\\n            \\ncreateApp(App).mount('#app')            \\n\"\n        },\n        \"/index.html\": {\n            code: '<!DOCTYPE html>\\n<html lang=\"en\">\\n  <head>\\n    <meta charset=\"UTF-8\" />\\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\\n    <title>Vite App</title>\\n  </head>\\n  <body>\\n    <div id=\"app\"></div>\\n    <script type=\"module\" src=\"/src/main.js\"></script>\\n  </body>\\n</html>\\n'\n        },\n        \"/vite.config.js\": {\n            code: \"import { defineConfig } from 'vite'\\nimport vue from '@vitejs/plugin-vue'\\n\\n// https://vitejs.dev/config/\\nexport default defineConfig({\\n  plugins: [vue()]\\n})\\n\"\n        },\n        \"/package.json\": {\n            code: JSON.stringify({\n                scripts: {\n                    dev: \"vite\",\n                    build: \"vite build\",\n                    preview: \"vite preview\"\n                },\n                dependencies: {\n                    vue: \"^3.2.45\"\n                },\n                devDependencies: {\n                    \"@vitejs/plugin-vue\": \"3.2.0\",\n                    vite: \"4.1.4\",\n                    \"esbuild-wasm\": \"0.17.12\"\n                }\n            })\n        }\n    },\n    main: \"/src/App.vue\",\n    environment: \"node\"\n};\nvar VITE_VUE_TS_TEMPLATE = {\n    files: {\n        \"/src/styles.css\": commonFiles[\"/styles.css\"],\n        \"/src/App.vue\": {\n            code: '<script setup lang=\"ts\">\\nimport { ref } from \"vue\";\\n\\nconst data = ref<string>(\"world\");\\n</script>\\n\\n<template>\\n  <h1>Hello {{ data }}</h1>\\n</template>\\n\\n<style>\\nh1 {\\n  font-size: 1.5rem;\\n}\\n</style>'\n        },\n        \"/src/main.ts\": {\n            code: \"import { createApp } from 'vue'\\nimport App from './App.vue'\\nimport \\\"./styles.css\\\"\\n\\ncreateApp(App).mount('#app')\\n\"\n        },\n        \"/index.html\": {\n            code: '<!DOCTYPE html>\\n<html lang=\"en\">\\n  <head>\\n    <meta charset=\"UTF-8\" />\\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\\n    <title>Vite App</title>\\n  </head>\\n  <body>\\n    <div id=\"app\"></div>\\n    <script type=\"module\" src=\"/src/main.ts\"></script>\\n  </body>\\n</html>\\n'\n        },\n        \"/vite-env.d.ts\": {\n            code: '/// <reference types=\"vite/client\" />'\n        },\n        \"/vite.config.ts\": {\n            code: \"import { defineConfig } from 'vite'\\nimport vue from '@vitejs/plugin-vue'\\n\\n// https://vitejs.dev/config/\\nexport default defineConfig({\\n  plugins: [vue()]\\n})\\n\"\n        },\n        \"tsconfig.json\": {\n            code: JSON.stringify({\n                compilerOptions: {\n                    target: \"ESNext\",\n                    useDefineForClassFields: true,\n                    module: \"ESNext\",\n                    moduleResolution: \"Node\",\n                    strict: true,\n                    jsx: \"preserve\",\n                    resolveJsonModule: true,\n                    isolatedModules: true,\n                    esModuleInterop: true,\n                    lib: [\n                        \"ESNext\",\n                        \"DOM\"\n                    ],\n                    skipLibCheck: true,\n                    noEmit: true\n                },\n                include: [\n                    \"src/**/*.ts\",\n                    \"src/**/*.d.ts\",\n                    \"src/**/*.tsx\",\n                    \"src/**/*.vue\"\n                ],\n                references: [\n                    {\n                        path: \"./tsconfig.node.json\"\n                    }\n                ]\n            }, null, 2)\n        },\n        \"tsconfig.node.json\": {\n            code: JSON.stringify({\n                compilerOptions: {\n                    composite: true,\n                    module: \"ESNext\",\n                    moduleResolution: \"Node\",\n                    allowSyntheticDefaultImports: true\n                },\n                include: [\n                    \"vite.config.ts\"\n                ]\n            }, null, 2)\n        },\n        \"/package.json\": {\n            code: JSON.stringify({\n                scripts: {\n                    dev: \"vite\",\n                    build: \"tsc && vite build\",\n                    preview: \"vite preview\"\n                },\n                dependencies: {\n                    vue: \"^3.2.47\"\n                },\n                devDependencies: {\n                    \"@vitejs/plugin-vue\": \"^4.0.0\",\n                    vite: \"4.1.4\",\n                    \"vue-tsc\": \"^1.2.0\",\n                    typescript: \"^4.9.5\",\n                    \"esbuild-wasm\": \"^0.17.12\"\n                }\n            }, null, 2)\n        }\n    },\n    main: \"/src/App.vue\",\n    environment: \"node\"\n};\nvar ANGULAR_TEMPLATE = {\n    files: {\n        \"/src/app/app.component.css\": commonFiles[\"/styles.css\"],\n        \"/src/app/app.component.html\": {\n            code: \"<div>\\n<h1>{{ helloWorld }}</h1>\\n</div>     \\n\"\n        },\n        \"/src/app/app.component.ts\": {\n            code: 'import { Component } from \"@angular/core\";\\n\\n@Component({\\n  selector: \"app-root\",\\n  templateUrl: \"./app.component.html\",\\n  styleUrls: [\"./app.component.css\"]\\n})\\nexport class AppComponent {\\n  helloWorld = \"Hello world\";\\n}           \\n'\n        },\n        \"/src/app/app.module.ts\": {\n            code: 'import { BrowserModule } from \"@angular/platform-browser\";\\nimport { NgModule } from \"@angular/core\";\\n      \\nimport { AppComponent } from \"./app.component\";\\n      \\n@NgModule({\\n  declarations: [AppComponent],\\n  imports: [BrowserModule],\\n  providers: [],\\n  bootstrap: [AppComponent]\\n})\\nexport class AppModule {}       \\n'\n        },\n        \"/src/index.html\": {\n            code: '<!doctype html>\\n<html lang=\"en\">\\n      \\n<head>\\n  <meta charset=\"utf-8\">\\n  <title>Angular</title>\\n  <base href=\"/\">\\n      \\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n  <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\\n</head>\\n      \\n<body>\\n   <app-root></app-root>\\n</body>\\n      \\n</html>\\n'\n        },\n        \"/src/main.ts\": {\n            code: 'import { enableProdMode } from \"@angular/core\";\\nimport { platformBrowserDynamic } from \"@angular/platform-browser-dynamic\";\\n      \\nimport { AppModule } from \"./app/app.module\";      \\n\\nplatformBrowserDynamic()\\n  .bootstrapModule(AppModule)\\n  .catch(err => console.log(err));\\n      \\n'\n        },\n        \"/src/polyfills.ts\": {\n            code: 'import \"core-js/proposals/reflect-metadata\";   \\n      import \"zone.js/dist/zone\";\\n'\n        },\n        \"/package.json\": {\n            code: JSON.stringify({\n                dependencies: {\n                    \"@angular/core\": \"^11.2.0\",\n                    \"@angular/platform-browser\": \"^11.2.0\",\n                    \"@angular/platform-browser-dynamic\": \"^11.2.0\",\n                    \"@angular/common\": \"^11.2.0\",\n                    \"@angular/compiler\": \"^11.2.0\",\n                    \"zone.js\": \"0.11.3\",\n                    \"core-js\": \"3.8.3\",\n                    rxjs: \"6.6.3\"\n                },\n                main: \"/src/main.ts\"\n            })\n        }\n    },\n    main: \"/src/app/app.component.ts\",\n    environment: \"angular-cli\"\n};\nvar REACT_TEMPLATE = {\n    files: __assign(__assign({}, commonFiles), {\n        \"/App.js\": {\n            code: \"export default function App() {\\n  return <h1>Hello world</h1>\\n}\\n\"\n        },\n        \"/index.js\": {\n            code: 'import React, { StrictMode } from \"react\";\\nimport { createRoot } from \"react-dom/client\";\\nimport \"./styles.css\";\\n\\nimport App from \"./App\";\\n\\nconst root = createRoot(document.getElementById(\"root\"));\\nroot.render(\\n  <StrictMode>\\n    <App />\\n  </StrictMode>\\n);'\n        },\n        \"/public/index.html\": {\n            code: '<!DOCTYPE html>\\n<html lang=\"en\">\\n  <head>\\n    <meta charset=\"UTF-8\">\\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\\n    <title>Document</title>\\n  </head>\\n  <body>\\n    <div id=\"root\"></div>\\n  </body>\\n</html>'\n        },\n        \"/package.json\": {\n            code: JSON.stringify({\n                dependencies: {\n                    react: \"^18.0.0\",\n                    \"react-dom\": \"^18.0.0\",\n                    \"react-scripts\": \"^5.0.0\"\n                },\n                main: \"/index.js\"\n            })\n        }\n    }),\n    main: \"/App.js\",\n    environment: \"create-react-app\"\n};\nvar REACT_TYPESCRIPT_TEMPLATE = {\n    files: __assign(__assign({}, commonFiles), {\n        \"tsconfig.json\": {\n            code: '{\\n  \"include\": [\\n    \"./**/*\"\\n  ],\\n  \"compilerOptions\": {\\n    \"strict\": true,\\n    \"esModuleInterop\": true,\\n    \"lib\": [ \"dom\", \"es2015\" ],\\n    \"jsx\": \"react-jsx\"\\n  }\\n}'\n        },\n        \"/App.tsx\": {\n            code: \"export default function App(): JSX.Element {\\n  return <h1>Hello world</h1>\\n}\\n\"\n        },\n        \"/index.tsx\": {\n            code: 'import React, { StrictMode } from \"react\";\\nimport { createRoot } from \"react-dom/client\";\\nimport \"./styles.css\";\\n\\nimport App from \"./App\";\\n\\nconst root = createRoot(document.getElementById(\"root\"));\\nroot.render(\\n  <StrictMode>\\n    <App />\\n  </StrictMode>\\n);'\n        },\n        \"/public/index.html\": {\n            code: '<!DOCTYPE html>\\n<html lang=\"en\">\\n  <head>\\n    <meta charset=\"UTF-8\">\\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\\n    <title>Document</title>\\n  </head>\\n  <body>\\n    <div id=\"root\"></div>\\n  </body>\\n</html>'\n        },\n        \"/package.json\": {\n            code: JSON.stringify({\n                dependencies: {\n                    react: \"^18.0.0\",\n                    \"react-dom\": \"^18.0.0\",\n                    \"react-scripts\": \"^4.0.0\"\n                },\n                devDependencies: {\n                    \"@types/react\": \"^18.0.0\",\n                    \"@types/react-dom\": \"^18.0.0\",\n                    typescript: \"^4.0.0\"\n                },\n                main: \"/index.tsx\"\n            })\n        }\n    }),\n    main: \"/App.tsx\",\n    environment: \"create-react-app\"\n};\nvar SOLID_TEMPLATE = {\n    files: __assign(__assign({}, commonFiles), {\n        \"/App.tsx\": {\n            code: 'import { Component } from \"solid-js\";\\n\\nconst App: Component = () => {\\n  return <h1>Hello world</h1>\\n};\\n\\nexport default App;'\n        },\n        \"/index.tsx\": {\n            code: 'import { render } from \"solid-js/web\";\\nimport App from \"./App\";\\n\\nimport \"./styles.css\";\\n\\nrender(() => <App />, document.getElementById(\"app\"));'\n        },\n        \"/index.html\": {\n            code: '<html>\\n<head>\\n  <title>Parcel Sandbox</title>\\n  <meta charset=\"UTF-8\" />\\n</head>\\n<body>\\n  <div id=\"app\"></div>\\n  <script src=\"src/index.tsx\"></script>\\n</body>\\n</html>'\n        },\n        \"/package.json\": {\n            code: JSON.stringify({\n                dependencies: {\n                    \"solid-js\": \"1.3.15\"\n                },\n                main: \"/index.tsx\"\n            })\n        }\n    }),\n    main: \"/App.tsx\",\n    environment: \"solid\"\n};\nvar SVELTE_TEMPLATE = {\n    files: __assign(__assign({}, commonFiles), {\n        \"/App.svelte\": {\n            code: \"<style>\\n  h1 {\\n    font-size: 1.5rem;\\n  }\\n</style>\\n\\n<script>\\n  let name = 'world';\\n</script>\\n\\n<main>\\n  <h1>Hello {name}</h1>\\n</main>\"\n        },\n        \"/index.js\": {\n            code: 'import App from \"./App.svelte\";\\nimport \"./styles.css\";\\n\\nconst app = new App({\\n  target: document.body\\n});\\n\\nexport default app;\\n      '\n        },\n        \"/public/index.html\": {\n            code: '<!DOCTYPE html>\\n<html>\\n  <head>\\n    <meta charset=\"utf8\" />\\n    <meta name=\"viewport\" content=\"width=device-width\" />\\n\\n    <title>Svelte app</title>\\n\\n    <link rel=\"stylesheet\" href=\"public/bundle.css\" />\\n  </head>\\n\\n  <body>\\n    <script src=\"bundle.js\"></script>\\n  </body>\\n</html>'\n        },\n        \"/package.json\": {\n            code: JSON.stringify({\n                dependencies: {\n                    svelte: \"^3.0.0\"\n                },\n                main: \"/index.js\"\n            })\n        }\n    }),\n    main: \"/App.svelte\",\n    environment: \"svelte\"\n};\nvar TEST_TYPESCRIPT_TEMPLATE = {\n    files: {\n        \"tsconfig.json\": {\n            code: '{\\n  \"include\": [\\n    \"./**/*\"\\n  ],\\n  \"compilerOptions\": {\\n    \"strict\": true,\\n    \"esModuleInterop\": true,\\n    \"lib\": [ \"dom\", \"es2015\" ],\\n    \"jsx\": \"react-jsx\"\\n  }\\n}'\n        },\n        \"/add.ts\": {\n            code: \"export const add = (a: number, b: number): number => a + b;\"\n        },\n        \"/add.test.ts\": {\n            code: \"import { add } from './add';\\n\\ndescribe('add', () => {\\n  test('Commutative Law of Addition', () => {\\n    expect(add(1, 2)).toBe(add(2, 1));\\n  });\\n});\"\n        },\n        \"package.json\": {\n            code: JSON.stringify({\n                dependencies: {},\n                devDependencies: {\n                    typescript: \"^4.0.0\"\n                },\n                main: \"/add.ts\"\n            })\n        }\n    },\n    main: \"/add.test.ts\",\n    environment: \"parcel\",\n    mode: \"tests\"\n};\nvar VANILLA_TEMPLATE = {\n    files: __assign(__assign({}, commonFiles), {\n        \"/index.js\": {\n            code: 'import \"./styles.css\";\\n\\ndocument.getElementById(\"app\").innerHTML = `\\n<h1>Hello world</h1>\\n`;\\n'\n        },\n        \"/index.html\": {\n            code: '<!DOCTYPE html>\\n<html>\\n\\n<head>\\n  <title>Parcel Sandbox</title>\\n  <meta charset=\"UTF-8\" />\\n</head>\\n\\n<body>\\n  <div id=\"app\"></div>\\n\\n  <script src=\"index.js\">\\n  </script>\\n</body>\\n\\n</html>'\n        },\n        \"/package.json\": {\n            code: JSON.stringify({\n                dependencies: {},\n                main: \"/index.js\"\n            })\n        }\n    }),\n    main: \"/index.js\",\n    environment: \"parcel\"\n};\nvar VANILLA_TYPESCRIPT_TEMPLATE = {\n    files: __assign(__assign({}, commonFiles), {\n        \"tsconfig.json\": {\n            code: '{\\n  \"compilerOptions\": {\\n    \"strict\": true,\\n    \"module\": \"commonjs\",\\n    \"jsx\": \"preserve\",\\n    \"esModuleInterop\": true,\\n    \"sourceMap\": true,\\n    \"allowJs\": true,\\n    \"lib\": [\\n      \"es6\",\\n      \"dom\"\\n    ],\\n    \"rootDir\": \"src\",\\n    \"moduleResolution\": \"node\"\\n  }\\n}'\n        },\n        \"/index.ts\": {\n            code: 'import \"./styles.css\";\\n\\ndocument.getElementById(\"app\").innerHTML = `\\n<h1>Hello world</h1>\\n`;\\n'\n        },\n        \"/index.html\": {\n            code: '<!DOCTYPE html>\\n<html>\\n\\n<head>\\n  <title>Parcel Sandbox</title>\\n  <meta charset=\"UTF-8\" />\\n</head>\\n\\n<body>\\n  <div id=\"app\"></div>\\n\\n  <script src=\"index.ts\">\\n  </script>\\n</body>\\n\\n</html>'\n        },\n        \"/package.json\": {\n            code: JSON.stringify({\n                dependencies: {},\n                devDependencies: {\n                    typescript: \"^4.0.0\"\n                },\n                main: \"/index.ts\"\n            })\n        }\n    }),\n    main: \"/index.ts\",\n    environment: \"parcel\"\n};\nvar VUE_TEMPLATE = {\n    files: {\n        \"/src/styles.css\": commonFiles[\"/styles.css\"],\n        \"/src/App.vue\": {\n            code: \"<template>\\n  <h1>Hello {{ msg }}</h1>\\n</template>\\n\\n<script setup>\\nimport { ref } from 'vue';\\nconst msg = ref('world');\\n</script>\"\n        },\n        \"/src/main.js\": {\n            code: \"import { createApp } from 'vue'\\nimport App from './App.vue'\\nimport \\\"./styles.css\\\";\\n\\ncreateApp(App).mount('#app')\\n\"\n        },\n        \"/public/index.html\": {\n            code: '<!DOCTYPE html>\\n<html lang=\"en\">\\n  <head>\\n    <meta charset=\"utf-8\" />\\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\\n    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\" />\\n    <title>codesandbox</title>\\n  </head>\\n  <body>\\n    <noscript>\\n      <strong\\n        >We\\'re sorry but codesandbox doesn\\'t work properly without JavaScript\\n        enabled. Please enable it to continue.</strong\\n      >\\n    </noscript>\\n    <div id=\"app\"></div>\\n    <!-- built files will be auto injected -->\\n  </body>\\n</html>\\n'\n        },\n        \"/package.json\": {\n            code: JSON.stringify({\n                name: \"vue3\",\n                version: \"0.1.0\",\n                private: true,\n                main: \"/src/main.js\",\n                scripts: {\n                    serve: \"vue-cli-service serve\",\n                    build: \"vue-cli-service build\"\n                },\n                dependencies: {\n                    \"core-js\": \"^3.26.1\",\n                    vue: \"^3.2.45\"\n                },\n                devDependencies: {\n                    \"@vue/cli-plugin-babel\": \"^5.0.8\",\n                    \"@vue/cli-service\": \"^5.0.8\"\n                }\n            })\n        }\n    },\n    main: \"/src/App.vue\",\n    environment: \"vue-cli\"\n};\nvar VUE_TS_TEMPLATE = {\n    files: {\n        \"/src/styles.css\": commonFiles[\"/styles.css\"],\n        \"/src/App.vue\": {\n            code: \"<template>\\n  <h1>Hello {{ msg }}</h1>\\n</template>\\n\\n<script setup lang=\\\"ts\\\">\\nimport { ref } from 'vue';\\nconst msg = ref<string>('world');\\n</script>\"\n        },\n        \"/src/main.ts\": {\n            code: \"import { createApp } from 'vue'\\nimport App from './App.vue'\\nimport \\\"./styles.css\\\";\\n\\ncreateApp(App).mount('#app')\\n\"\n        },\n        \"/src/shims-vue.d.ts\": '/* eslint-disable */\\ndeclare module \"*.vue\" {\\n  import type { DefineComponent } from \"vue\";\\n  const component: DefineComponent<{}, {}, any>;\\n  export default component;\\n}',\n        \"/public/index.html\": {\n            code: '<!DOCTYPE html>\\n<html lang=\"en\">\\n  <head>\\n    <meta charset=\"utf-8\" />\\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\\n    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\" />\\n    <title>codesandbox</title>\\n  </head>\\n  <body>\\n    <noscript>\\n      <strong\\n        >We\\'re sorry but codesandbox doesn\\'t work properly without JavaScript\\n        enabled. Please enable it to continue.</strong\\n      >\\n    </noscript>\\n    <div id=\"app\"></div>\\n    <!-- built files will be auto injected -->\\n  </body>\\n</html>\\n'\n        },\n        \"/package.json\": {\n            code: JSON.stringify({\n                name: \"vue3-ts\",\n                version: \"0.1.0\",\n                private: true,\n                main: \"/src/main.ts\",\n                scripts: {\n                    serve: \"vue-cli-service serve\",\n                    build: \"vue-cli-service build\"\n                },\n                dependencies: {\n                    \"core-js\": \"^3.26.1\",\n                    vue: \"^3.2.45\"\n                },\n                devDependencies: {\n                    \"@vue/cli-plugin-babel\": \"^5.0.8\",\n                    \"@vue/cli-plugin-typescript\": \"^5.0.8\",\n                    \"@vue/cli-service\": \"^5.0.8\",\n                    typescript: \"^4.9.3\"\n                }\n            })\n        },\n        \"/tsconfig.json\": {\n            code: JSON.stringify({\n                compilerOptions: {\n                    target: \"esnext\",\n                    module: \"esnext\",\n                    strict: true,\n                    jsx: \"preserve\",\n                    moduleResolution: \"node\",\n                    experimentalDecorators: true,\n                    skipLibCheck: true,\n                    esModuleInterop: true,\n                    allowSyntheticDefaultImports: true,\n                    forceConsistentCasingInFileNames: true,\n                    useDefineForClassFields: true,\n                    sourceMap: false,\n                    baseUrl: \".\",\n                    types: [\n                        \"webpack-env\"\n                    ],\n                    paths: {\n                        \"@/*\": [\n                            \"src/*\"\n                        ]\n                    },\n                    lib: [\n                        \"esnext\",\n                        \"dom\",\n                        \"dom.iterable\",\n                        \"scripthost\"\n                    ]\n                },\n                include: [\n                    \"src/**/*.ts\",\n                    \"src/**/*.tsx\",\n                    \"src/**/*.vue\",\n                    \"tests/**/*.ts\",\n                    \"tests/**/*.tsx\"\n                ],\n                exclude: [\n                    \"node_modules\"\n                ]\n            })\n        }\n    },\n    main: \"/src/App.vue\",\n    environment: \"vue-cli\"\n};\nvar STATIC_TEMPLATE = {\n    files: __assign(__assign({}, commonFiles), {\n        \"/index.html\": {\n            code: '<!DOCTYPE html>\\n<html>\\n\\n<head>\\n  <title>Parcel Sandbox</title>\\n  <meta charset=\"UTF-8\" />\\n  <link rel=\"stylesheet\" href=\"/styles.css\" />\\n</head>\\n\\n<body>\\n  <h1>Hello world</h1>\\n</body>\\n\\n</html>'\n        },\n        \"/package.json\": {\n            code: JSON.stringify({\n                dependencies: {},\n                main: \"/index.html\"\n            })\n        }\n    }),\n    main: \"/index.html\",\n    environment: \"static\"\n};\nvar SANDBOX_TEMPLATES = {\n    static: STATIC_TEMPLATE,\n    angular: ANGULAR_TEMPLATE,\n    react: REACT_TEMPLATE,\n    \"react-ts\": REACT_TYPESCRIPT_TEMPLATE,\n    solid: SOLID_TEMPLATE,\n    svelte: SVELTE_TEMPLATE,\n    \"test-ts\": TEST_TYPESCRIPT_TEMPLATE,\n    \"vanilla-ts\": VANILLA_TYPESCRIPT_TEMPLATE,\n    vanilla: VANILLA_TEMPLATE,\n    vue: VUE_TEMPLATE,\n    \"vue-ts\": VUE_TS_TEMPLATE,\n    node: NODE_TEMPLATE,\n    nextjs: NEXTJS_TEMPLATE,\n    vite: VITE_TEMPLATE,\n    \"vite-react\": VITE_REACT_TEMPLATE,\n    \"vite-react-ts\": VITE_REACT_TS_TEMPLATE,\n    \"vite-preact\": VITE_PREACT_TEMPLATE,\n    \"vite-preact-ts\": VITE_PREACT_TS_TEMPLATE,\n    \"vite-vue\": VITE_VUE_TEMPLATE,\n    \"vite-vue-ts\": VITE_VUE_TS_TEMPLATE,\n    \"vite-svelte\": VITE_SVELTE_TEMPLATE,\n    \"vite-svelte-ts\": VITE_SVELTE_TS_TEMPLATE,\n    astro: ASTRO_TEMPLATE\n};\n/**\n * Creates a standard sandpack state given the setup,\n * options, and files props. Using this function is\n * the reliable way to ensure a consistent and predictable\n * sandpack-content throughout application\n */ var getSandpackStateFromProps = function(props) {\n    var _a, _b, _c, _d, _e, _f;\n    var normalizedFilesPath = (0,_codesandbox_sandpack_client__WEBPACK_IMPORTED_MODULE_9__.f)(props.files);\n    // Merge predefined template with custom setup\n    var projectSetup = combineTemplateFilesToSetup({\n        template: props.template,\n        customSetup: props.customSetup,\n        files: normalizedFilesPath\n    });\n    // visibleFiles and activeFile override the setup flags\n    var visibleFiles = (0,_codesandbox_sandpack_client__WEBPACK_IMPORTED_MODULE_9__.f)((_b = (_a = props.options) === null || _a === void 0 ? void 0 : _a.visibleFiles) !== null && _b !== void 0 ? _b : []);\n    var activeFile = ((_c = props.options) === null || _c === void 0 ? void 0 : _c.activeFile) ? resolveFile((_d = props.options) === null || _d === void 0 ? void 0 : _d.activeFile, projectSetup.files) : undefined;\n    if (visibleFiles.length === 0 && normalizedFilesPath) {\n        // extract open and active files from the custom input files\n        Object.keys(normalizedFilesPath).forEach(function(filePath) {\n            var file = normalizedFilesPath[filePath];\n            if (typeof file === \"string\") {\n                visibleFiles.push(filePath);\n                return;\n            }\n            if (!activeFile && file.active) {\n                activeFile = filePath;\n                if (file.hidden === true) {\n                    // active file needs to be available even if someone sets it as hidden by accident\n                    visibleFiles.push(filePath);\n                }\n            }\n            if (!file.hidden) {\n                visibleFiles.push(filePath);\n            }\n        });\n    }\n    if (visibleFiles.length === 0) {\n        // If no files are received, use the project setup / template\n        visibleFiles = [\n            projectSetup.main\n        ];\n    }\n    // Make sure it resolves the entry file\n    if (projectSetup.entry && !projectSetup.files[projectSetup.entry]) {\n        /* eslint-disable */ // @ts-ignore\n        projectSetup.entry = resolveFile(projectSetup.entry, projectSetup.files);\n    /* eslint-enable */ }\n    if (!activeFile && projectSetup.main) {\n        activeFile = projectSetup.main;\n    }\n    // If no activeFile is specified, use the first open file\n    if (!activeFile || !projectSetup.files[activeFile]) {\n        activeFile = visibleFiles[0];\n    }\n    // If for whatever reason the active path was not set as open, set it\n    if (!visibleFiles.includes(activeFile)) {\n        visibleFiles.push(activeFile);\n    }\n    var files = (0,_codesandbox_sandpack_client__WEBPACK_IMPORTED_MODULE_9__.d)(projectSetup.files, (_e = projectSetup.dependencies) !== null && _e !== void 0 ? _e : {}, (_f = projectSetup.devDependencies) !== null && _f !== void 0 ? _f : {}, projectSetup.entry);\n    var existOpenPath = visibleFiles.filter(function(path) {\n        return files[path];\n    });\n    return {\n        visibleFiles: existOpenPath,\n        /* eslint-disable-next-line @typescript-eslint/no-non-null-assertion */ activeFile: activeFile,\n        files: files,\n        environment: projectSetup.environment,\n        shouldUpdatePreview: true\n    };\n};\n/**\n * Given a file tree and a file, it uses a couple of rules\n * to tweak the filename to match with one of the inside of file tree\n *\n * - Adds the leading slash;\n * - Tries to find the same filename with different extensions (js only);\n * - Returns `null` if it doesn't satisfy any rule\n */ var resolveFile = function(path, files) {\n    var normalizedFilesPath = (0,_codesandbox_sandpack_client__WEBPACK_IMPORTED_MODULE_9__.f)(files);\n    var normalizedPath = (0,_codesandbox_sandpack_client__WEBPACK_IMPORTED_MODULE_9__.f)(path);\n    if (normalizedPath in normalizedFilesPath) {\n        return normalizedPath;\n    }\n    if (!path) {\n        return null;\n    }\n    var resolvedPath = null;\n    var index = 0;\n    var strategies = [\n        \".js\",\n        \".jsx\",\n        \".ts\",\n        \".tsx\"\n    ];\n    while(!resolvedPath && index < strategies.length){\n        var removeExtension = normalizedPath.split(\".\")[0];\n        var attemptPath = \"\".concat(removeExtension).concat(strategies[index]);\n        if (normalizedFilesPath[attemptPath] !== undefined) {\n            resolvedPath = attemptPath;\n        }\n        index++;\n    }\n    return resolvedPath;\n};\n/**\n * The template is predefined (eg: react, vue, vanilla)\n * The setup can overwrite anything from the template\n * (eg: files, dependencies, environment, etc.)\n */ var combineTemplateFilesToSetup = function(_a) {\n    var files = _a.files, template = _a.template, customSetup = _a.customSetup;\n    if (!template) {\n        // If not input, default to vanilla\n        if (!customSetup) {\n            var defaultTemplate = SANDBOX_TEMPLATES.vanilla;\n            return __assign(__assign({}, defaultTemplate), {\n                files: __assign(__assign({}, defaultTemplate.files), convertedFilesToBundlerFiles(files))\n            });\n        }\n        if (!files || Object.keys(files).length === 0) {\n            throw new Error(\"[sandpack-react]: without a template, you must pass at least one file\");\n        }\n        // If not template specified, use the setup entirely\n        return __assign(__assign({}, customSetup), {\n            files: convertedFilesToBundlerFiles(files)\n        });\n    }\n    var baseTemplate = SANDBOX_TEMPLATES[template];\n    if (!baseTemplate) {\n        throw new Error('[sandpack-react]: invalid template \"'.concat(template, '\" provided'));\n    }\n    // If no setup and not files, the template is used entirely\n    if (!customSetup && !files) {\n        return baseTemplate;\n    }\n    // Merge the setup on top of the template\n    return {\n        /**\n         * The input setup might have files in the simple form Record<string, string>\n         * so we convert them to the sandbox template format\n         */ files: convertedFilesToBundlerFiles(__assign(__assign({}, baseTemplate.files), files)),\n        /**\n         * Merge template dependencies and user custom dependencies.\n         * As a rule, the custom dependencies must overwrite the template ones.\n         */ dependencies: __assign(__assign({}, baseTemplate.dependencies), customSetup === null || customSetup === void 0 ? void 0 : customSetup.dependencies),\n        devDependencies: __assign(__assign({}, baseTemplate.devDependencies), customSetup === null || customSetup === void 0 ? void 0 : customSetup.devDependencies),\n        entry: (0,_codesandbox_sandpack_client__WEBPACK_IMPORTED_MODULE_9__.f)(customSetup === null || customSetup === void 0 ? void 0 : customSetup.entry),\n        main: baseTemplate.main,\n        environment: (customSetup === null || customSetup === void 0 ? void 0 : customSetup.environment) || baseTemplate.environment\n    };\n};\n/**\n * Transform an regular object, which contain files to\n * an object that sandpack-client can understand\n *\n * From: Record<string, string>\n * To: Record<string, { code: string }>\n */ var convertedFilesToBundlerFiles = function(files) {\n    if (!files) return {};\n    return Object.keys(files).reduce(function(acc, key) {\n        if (typeof files[key] === \"string\") {\n            acc[key] = {\n                code: files[key]\n            };\n        } else {\n            acc[key] = files[key];\n        }\n        return acc;\n    }, {});\n};\nvar useAppState = function(props, files) {\n    var _a = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        editorState: \"pristine\"\n    }), state = _a[0], setState = _a[1];\n    var originalStateFromProps = getSandpackStateFromProps(props);\n    var editorState = (0,dequal__WEBPACK_IMPORTED_MODULE_2__.dequal)(originalStateFromProps.files, files) ? \"pristine\" : \"dirty\";\n    if (editorState !== state.editorState) {\n        setState(function(prev) {\n            return __assign(__assign({}, prev), {\n                editorState: editorState\n            });\n        });\n    }\n    return state;\n};\n/**\n * This is a hard constraint to make URLs shorter.\n * For example, this id will be used to mount SW in the iframe\n * so, to keep the URL valid, this must be an 9 character long string\n */ var MAX_ID_LENGTH = 9;\nvar useAsyncSandpackId = function(files) {\n    if (typeof react__WEBPACK_IMPORTED_MODULE_1__.useId === \"function\") {\n        /* eslint-disable-next-line react-hooks/rules-of-hooks */ var reactDomId_1 = (0,react__WEBPACK_IMPORTED_MODULE_1__.useId)();\n        return function() {\n            return __awaiter(void 0, void 0, void 0, function() {\n                var allCode, sha;\n                return __generator(this, function(_a) {\n                    switch(_a.label){\n                        case 0:\n                            allCode = Object.entries(files).map(function(path, code) {\n                                return path + \"|\" + code;\n                            }).join(\"|||\");\n                            return [\n                                4 /*yield*/ ,\n                                generateShortId(allCode + reactDomId_1)\n                            ];\n                        case 1:\n                            sha = _a.sent();\n                            return [\n                                2 /*return*/ ,\n                                ensureLength(sha.replace(/:/g, \"sp\"), MAX_ID_LENGTH)\n                            ];\n                    }\n                });\n            });\n        };\n    } else {\n        return function() {\n            return ensureLength(generateRandomId(), MAX_ID_LENGTH);\n        };\n    }\n};\nfunction ensureLength(str, length) {\n    if (str.length > length) {\n        return str.slice(0, length);\n    } else {\n        return str.padEnd(length, \"s\");\n    }\n}\nfunction generateShortId(input) {\n    return __awaiter(this, void 0, void 0, function() {\n        var encoder, data, hashBuffer, hashArray;\n        return __generator(this, function(_a) {\n            switch(_a.label){\n                case 0:\n                    encoder = new TextEncoder();\n                    data = encoder.encode(input);\n                    return [\n                        4 /*yield*/ ,\n                        crypto.subtle.digest(\"SHA-256\", data)\n                    ];\n                case 1:\n                    hashBuffer = _a.sent();\n                    hashArray = Array.from(new Uint8Array(hashBuffer));\n                    return [\n                        2 /*return*/ ,\n                        btoa(String.fromCharCode.apply(String, hashArray))\n                    ];\n            }\n        });\n    });\n}\nvar BUNDLER_TIMEOUT = 40000;\nvar useClient = function(_a, filesState) {\n    var _b, _c, _d;\n    var options = _a.options, customSetup = _a.customSetup, teamId = _a.teamId, sandboxId = _a.sandboxId;\n    options !== null && options !== void 0 ? options : options = {};\n    customSetup !== null && customSetup !== void 0 ? customSetup : customSetup = {};\n    var initModeFromProps = (options === null || options === void 0 ? void 0 : options.initMode) || \"lazy\";\n    var _e = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        startRoute: options === null || options === void 0 ? void 0 : options.startRoute,\n        bundlerState: undefined,\n        error: null,\n        initMode: initModeFromProps,\n        reactDevTools: undefined,\n        status: ((_b = options === null || options === void 0 ? void 0 : options.autorun) !== null && _b !== void 0 ? _b : true) ? \"initial\" : \"idle\"\n    }), state = _e[0], setState = _e[1];\n    var intersectionObserverCallback = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)();\n    var intersectionObserver = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    var lazyAnchorRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    var registeredIframes = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)({});\n    var clients = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)({});\n    var timeoutHook = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    var unsubscribeClientListeners = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)({});\n    var unsubscribe = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)();\n    var queuedListeners = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)({\n        global: {}\n    });\n    var debounceHook = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)();\n    var prevEnvironment = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(filesState.environment);\n    var experimental_stableServiceWorkerId = useAsyncSandpackId(filesState.files);\n    /**\n     * Callbacks\n     */ var createClient = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(function(iframe, clientId, clientPropsOverride) {\n        return __awaiter(void 0, void 0, void 0, function() {\n            var timeOut, shouldSetTimeout, client, _a, _b, _c, globalListeners;\n            var _d;\n            var _e, _f, _g;\n            return __generator(this, function(_h) {\n                switch(_h.label){\n                    case 0:\n                        // Clean up any existing clients that\n                        // have been created with the given id\n                        if (clients.current[clientId]) {\n                            clients.current[clientId].destroy();\n                        }\n                        options !== null && options !== void 0 ? options : options = {};\n                        customSetup !== null && customSetup !== void 0 ? customSetup : customSetup = {};\n                        timeOut = (_e = options === null || options === void 0 ? void 0 : options.bundlerTimeOut) !== null && _e !== void 0 ? _e : BUNDLER_TIMEOUT;\n                        if (timeoutHook.current) {\n                            clearTimeout(timeoutHook.current);\n                        }\n                        shouldSetTimeout = typeof unsubscribe.current !== \"function\";\n                        if (shouldSetTimeout) {\n                            timeoutHook.current = setTimeout(function() {\n                                unregisterAllClients();\n                                setState(function(prev) {\n                                    return __assign(__assign({}, prev), {\n                                        status: \"timeout\"\n                                    });\n                                });\n                            }, timeOut);\n                        }\n                        _a = _codesandbox_sandpack_client__WEBPACK_IMPORTED_MODULE_10__.loadSandpackClient;\n                        _b = [\n                            iframe,\n                            {\n                                files: filesState.files,\n                                template: filesState.environment\n                            }\n                        ];\n                        _d = {\n                            externalResources: options.externalResources,\n                            bundlerURL: options.bundlerURL,\n                            startRoute: (_f = clientPropsOverride === null || clientPropsOverride === void 0 ? void 0 : clientPropsOverride.startRoute) !== null && _f !== void 0 ? _f : options.startRoute,\n                            fileResolver: options.fileResolver,\n                            skipEval: (_g = options.skipEval) !== null && _g !== void 0 ? _g : false,\n                            logLevel: options.logLevel,\n                            showOpenInCodeSandbox: false,\n                            showErrorScreen: true,\n                            showLoadingScreen: false,\n                            reactDevTools: state.reactDevTools,\n                            customNpmRegistries: customSetup === null || customSetup === void 0 ? void 0 : customSetup.npmRegistries,\n                            teamId: teamId,\n                            experimental_enableServiceWorker: !!(options === null || options === void 0 ? void 0 : options.experimental_enableServiceWorker)\n                        };\n                        if (!(options === null || options === void 0 ? void 0 : options.experimental_enableStableServiceWorkerId)) return [\n                            3 /*break*/ ,\n                            2\n                        ];\n                        return [\n                            4 /*yield*/ ,\n                            experimental_stableServiceWorkerId()\n                        ];\n                    case 1:\n                        _c = _h.sent();\n                        return [\n                            3 /*break*/ ,\n                            3\n                        ];\n                    case 2:\n                        _c = undefined;\n                        _h.label = 3;\n                    case 3:\n                        return [\n                            4 /*yield*/ ,\n                            _a.apply(void 0, _b.concat([\n                                (_d.experimental_stableServiceWorkerId = _c, _d.sandboxId = sandboxId, _d)\n                            ]))\n                        ];\n                    case 4:\n                        client = _h.sent();\n                        if (typeof unsubscribe.current !== \"function\") {\n                            unsubscribe.current = client.listen(handleMessage);\n                        }\n                        unsubscribeClientListeners.current[clientId] = unsubscribeClientListeners.current[clientId] || {};\n                        /**\n                     * Register any potential listeners that subscribed before sandpack ran\n                     */ if (queuedListeners.current[clientId]) {\n                            Object.keys(queuedListeners.current[clientId]).forEach(function(listenerId) {\n                                var listener = queuedListeners.current[clientId][listenerId];\n                                var unsubscribe = client.listen(listener);\n                                unsubscribeClientListeners.current[clientId][listenerId] = unsubscribe;\n                            });\n                            // Clear the queued listeners after they were registered\n                            queuedListeners.current[clientId] = {};\n                        }\n                        globalListeners = Object.entries(queuedListeners.current.global);\n                        globalListeners.forEach(function(_a) {\n                            var listenerId = _a[0], listener = _a[1];\n                            var unsubscribe = client.listen(listener);\n                            unsubscribeClientListeners.current[clientId][listenerId] = unsubscribe;\n                        /**\n                         * Important: Do not clean the global queue\n                         * Instead of cleaning the queue, keep it there for the\n                         * following clients that might be created\n                         */ });\n                        clients.current[clientId] = client;\n                        return [\n                            2 /*return*/ \n                        ];\n                }\n            });\n        });\n    }, [\n        filesState.environment,\n        filesState.files,\n        state.reactDevTools\n    ]);\n    var unregisterAllClients = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(function() {\n        Object.keys(clients.current).map(unregisterBundler);\n        if (typeof unsubscribe.current === \"function\") {\n            unsubscribe.current();\n            unsubscribe.current = undefined;\n        }\n    }, []);\n    var runSandpack = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(function() {\n        return __awaiter(void 0, void 0, void 0, function() {\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        return [\n                            4 /*yield*/ ,\n                            Promise.all(Object.entries(registeredIframes.current).map(function(_a) {\n                                var clientId = _a[0], _b = _a[1], iframe = _b.iframe, _c = _b.clientPropsOverride, clientPropsOverride = _c === void 0 ? {} : _c;\n                                return __awaiter(void 0, void 0, void 0, function() {\n                                    return __generator(this, function(_d) {\n                                        switch(_d.label){\n                                            case 0:\n                                                return [\n                                                    4 /*yield*/ ,\n                                                    createClient(iframe, clientId, clientPropsOverride)\n                                                ];\n                                            case 1:\n                                                _d.sent();\n                                                return [\n                                                    2 /*return*/ \n                                                ];\n                                        }\n                                    });\n                                });\n                            }))\n                        ];\n                    case 1:\n                        _a.sent();\n                        setState(function(prev) {\n                            return __assign(__assign({}, prev), {\n                                error: null,\n                                status: \"running\"\n                            });\n                        });\n                        return [\n                            2 /*return*/ \n                        ];\n                }\n            });\n        });\n    }, [\n        createClient\n    ]);\n    intersectionObserverCallback.current = function(entries) {\n        if (entries.some(function(entry) {\n            return entry.isIntersecting;\n        })) {\n            runSandpack();\n        } else {\n            unregisterAllClients();\n        }\n    };\n    var initializeSandpackIframe = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(function() {\n        var _a, _b, _c;\n        var autorun = (_a = options === null || options === void 0 ? void 0 : options.autorun) !== null && _a !== void 0 ? _a : true;\n        if (!autorun) {\n            return;\n        }\n        var observerOptions = (_b = options === null || options === void 0 ? void 0 : options.initModeObserverOptions) !== null && _b !== void 0 ? _b : {\n            rootMargin: \"1000px 0px\"\n        };\n        if (intersectionObserver.current && lazyAnchorRef.current) {\n            (_c = intersectionObserver.current) === null || _c === void 0 ? void 0 : _c.unobserve(lazyAnchorRef.current);\n        }\n        if (lazyAnchorRef.current && state.initMode === \"lazy\") {\n            // If any component registered a lazy anchor ref component, use that for the intersection observer\n            intersectionObserver.current = new IntersectionObserver(function(entries) {\n                var _a, _b;\n                if (entries.some(function(entry) {\n                    return entry.isIntersecting;\n                })) {\n                    // Trigger it once\n                    if (entries.some(function(entry) {\n                        return entry.isIntersecting;\n                    }) && lazyAnchorRef.current) {\n                        (_a = intersectionObserverCallback.current) === null || _a === void 0 ? void 0 : _a.call(intersectionObserverCallback, entries);\n                        (_b = intersectionObserver.current) === null || _b === void 0 ? void 0 : _b.unobserve(lazyAnchorRef.current);\n                    }\n                }\n            }, observerOptions);\n            intersectionObserver.current.observe(lazyAnchorRef.current);\n        } else if (lazyAnchorRef.current && state.initMode === \"user-visible\") {\n            intersectionObserver.current = new IntersectionObserver(function(entries) {\n                var _a;\n                (_a = intersectionObserverCallback.current) === null || _a === void 0 ? void 0 : _a.call(intersectionObserverCallback, entries);\n            }, observerOptions);\n            intersectionObserver.current.observe(lazyAnchorRef.current);\n        } else {\n            runSandpack();\n        }\n    }, [\n        options === null || options === void 0 ? void 0 : options.autorun,\n        options === null || options === void 0 ? void 0 : options.initModeObserverOptions,\n        runSandpack,\n        state.initMode,\n        unregisterAllClients\n    ]);\n    var registerBundler = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(function(iframe, clientId, clientPropsOverride) {\n        return __awaiter(void 0, void 0, void 0, function() {\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        // Store the iframe info so it can be\n                        // used later to manually run sandpack\n                        registeredIframes.current[clientId] = {\n                            iframe: iframe,\n                            clientPropsOverride: clientPropsOverride\n                        };\n                        if (!(state.status === \"running\")) return [\n                            3 /*break*/ ,\n                            2\n                        ];\n                        return [\n                            4 /*yield*/ ,\n                            createClient(iframe, clientId, clientPropsOverride)\n                        ];\n                    case 1:\n                        _a.sent();\n                        _a.label = 2;\n                    case 2:\n                        return [\n                            2 /*return*/ \n                        ];\n                }\n            });\n        });\n    }, [\n        createClient,\n        state.status\n    ]);\n    var unregisterBundler = function(clientId) {\n        var _a, _b;\n        var client = clients.current[clientId];\n        if (client) {\n            client.destroy();\n            (_a = client.iframe.contentWindow) === null || _a === void 0 ? void 0 : _a.location.replace(\"about:blank\");\n            client.iframe.removeAttribute(\"src\");\n            delete clients.current[clientId];\n        } else {\n            delete registeredIframes.current[clientId];\n        }\n        if (timeoutHook.current) {\n            clearTimeout(timeoutHook.current);\n        }\n        var unsubscribeQueuedClients = Object.values((_b = unsubscribeClientListeners.current[clientId]) !== null && _b !== void 0 ? _b : {});\n        // Unsubscribing all listener registered\n        unsubscribeQueuedClients.forEach(function(listenerOfClient) {\n            var listenerFunctions = Object.values(listenerOfClient);\n            listenerFunctions.forEach(function(unsubscribe) {\n                return unsubscribe();\n            });\n        });\n        // Keep running if it still have clients\n        var status = Object.keys(clients.current).length > 0 ? \"running\" : \"idle\";\n        setState(function(prev) {\n            return __assign(__assign({}, prev), {\n                status: status\n            });\n        });\n    };\n    var handleMessage = function(msg) {\n        if (msg.type === \"start\") {\n            setState(function(prev) {\n                return __assign(__assign({}, prev), {\n                    error: null\n                });\n            });\n        } else if (msg.type === \"state\") {\n            setState(function(prev) {\n                return __assign(__assign({}, prev), {\n                    bundlerState: msg.state\n                });\n            });\n        } else if (msg.type === \"done\" && !msg.compilatonError || msg.type === \"connected\") {\n            if (timeoutHook.current) {\n                clearTimeout(timeoutHook.current);\n            }\n            setState(function(prev) {\n                return __assign(__assign({}, prev), {\n                    error: null\n                });\n            });\n        } else if (msg.type === \"action\" && msg.action === \"show-error\") {\n            if (timeoutHook.current) {\n                clearTimeout(timeoutHook.current);\n            }\n            setState(function(prev) {\n                return __assign(__assign({}, prev), {\n                    error: (0,_codesandbox_sandpack_client__WEBPACK_IMPORTED_MODULE_9__.e)(msg)\n                });\n            });\n        } else if (msg.type === \"action\" && msg.action === \"notification\" && msg.notificationType === \"error\") {\n            setState(function(prev) {\n                return __assign(__assign({}, prev), {\n                    error: {\n                        message: msg.title\n                    }\n                });\n            });\n        }\n    };\n    var registerReactDevTools = function(value) {\n        setState(function(prev) {\n            return __assign(__assign({}, prev), {\n                reactDevTools: value\n            });\n        });\n    };\n    var recompileMode = (_c = options === null || options === void 0 ? void 0 : options.recompileMode) !== null && _c !== void 0 ? _c : \"delayed\";\n    var recompileDelay = (_d = options === null || options === void 0 ? void 0 : options.recompileDelay) !== null && _d !== void 0 ? _d : 200;\n    var dispatchMessage = function(message, clientId) {\n        if (state.status !== \"running\") {\n            console.warn(\"[sandpack-react]: dispatch cannot be called while in idle mode\");\n            return;\n        }\n        if (clientId) {\n            clients.current[clientId].dispatch(message);\n        } else {\n            Object.values(clients.current).forEach(function(client) {\n                client.dispatch(message);\n            });\n        }\n    };\n    var addListener = function(listener, clientId) {\n        if (clientId) {\n            if (clients.current[clientId]) {\n                var unsubscribeListener = clients.current[clientId].listen(listener);\n                return unsubscribeListener;\n            } else {\n                /**\n                 * When listeners are added before the client is instantiated, they are stored with an unique id\n                 * When the client is eventually instantiated, the listeners are registered on the spot\n                 * Their unsubscribe functions are stored in unsubscribeClientListeners for future cleanup\n                 */ var listenerId_1 = generateRandomId();\n                queuedListeners.current[clientId] = queuedListeners.current[clientId] || {};\n                unsubscribeClientListeners.current[clientId] = unsubscribeClientListeners.current[clientId] || {};\n                queuedListeners.current[clientId][listenerId_1] = listener;\n                var unsubscribeListener = function() {\n                    if (queuedListeners.current[clientId][listenerId_1]) {\n                        /**\n                         * Unsubscribe was called before the client was instantiated\n                         * common example - a component with autorun=false that unmounted\n                         */ delete queuedListeners.current[clientId][listenerId_1];\n                    } else if (unsubscribeClientListeners.current[clientId][listenerId_1]) {\n                        /**\n                         * unsubscribe was called for a listener that got added before the client was instantiated\n                         * call the unsubscribe function and remove it from memory\n                         */ unsubscribeClientListeners.current[clientId][listenerId_1]();\n                        delete unsubscribeClientListeners.current[clientId][listenerId_1];\n                    }\n                };\n                return unsubscribeListener;\n            }\n        } else {\n            // Push to the **global** queue\n            var listenerId_2 = generateRandomId();\n            queuedListeners.current.global[listenerId_2] = listener;\n            // Add to the current clients\n            var clientsList = Object.values(clients.current);\n            var currentClientUnsubscribeListeners_1 = clientsList.map(function(client) {\n                return client.listen(listener);\n            });\n            var unsubscribeListener = function() {\n                // Unsubscribing from the clients already created\n                currentClientUnsubscribeListeners_1.forEach(function(unsubscribe) {\n                    return unsubscribe();\n                });\n                delete queuedListeners.current.global[listenerId_2];\n                // Unsubscribe in case it was added later from `global`\n                Object.values(unsubscribeClientListeners.current).forEach(function(client) {\n                    var _a;\n                    (_a = client === null || client === void 0 ? void 0 : client[listenerId_2]) === null || _a === void 0 ? void 0 : _a.call(client);\n                });\n            };\n            return unsubscribeListener;\n        }\n    };\n    /**\n     * Effects\n     */ (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(function watchFileChanges() {\n        if (state.status !== \"running\" || !filesState.shouldUpdatePreview) {\n            return;\n        }\n        /**\n         * When the environment changes, Sandpack needs to make sure\n         * to create a new client and the proper bundler\n         */ if (prevEnvironment.current !== filesState.environment) {\n            prevEnvironment.current = filesState.environment;\n            Object.entries(clients.current).forEach(function(_a) {\n                var key = _a[0], client = _a[1];\n                registerBundler(client.iframe, key);\n            });\n        }\n        if (recompileMode === \"immediate\") {\n            Object.values(clients.current).forEach(function(client) {\n                /**\n                 * Avoid concurrency\n                 */ if (client.status === \"done\") {\n                    client.updateSandbox({\n                        files: filesState.files,\n                        template: filesState.environment\n                    });\n                }\n            });\n        }\n        if (recompileMode === \"delayed\") {\n            if (true) return;\n            window.clearTimeout(debounceHook.current);\n            debounceHook.current = window.setTimeout(function() {\n                Object.values(clients.current).forEach(function(client) {\n                    /**\n                     * Avoid concurrency\n                     */ if (client.status === \"done\") {\n                        client.updateSandbox({\n                            files: filesState.files,\n                            template: filesState.environment\n                        });\n                    }\n                });\n            }, recompileDelay);\n        }\n        return function() {\n            window.clearTimeout(debounceHook.current);\n        };\n    }, [\n        filesState.files,\n        filesState.environment,\n        filesState.shouldUpdatePreview,\n        recompileDelay,\n        recompileMode,\n        registerBundler,\n        state.status\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(function watchInitMode() {\n        if (initModeFromProps !== state.initMode) {\n            setState(function(prev) {\n                return __assign(__assign({}, prev), {\n                    initMode: initModeFromProps\n                });\n            });\n            initializeSandpackIframe();\n        }\n    }, [\n        initModeFromProps,\n        initializeSandpackIframe,\n        state.initMode\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(function() {\n        return function unmountClient() {\n            if (typeof unsubscribe.current === \"function\") {\n                unsubscribe.current();\n            }\n            if (timeoutHook.current) {\n                clearTimeout(timeoutHook.current);\n            }\n            if (debounceHook.current) {\n                clearTimeout(debounceHook.current);\n            }\n            if (intersectionObserver.current) {\n                intersectionObserver.current.disconnect();\n            }\n        };\n    }, []);\n    return [\n        state,\n        {\n            clients: clients.current,\n            initializeSandpackIframe: initializeSandpackIframe,\n            runSandpack: runSandpack,\n            registerBundler: registerBundler,\n            unregisterBundler: unregisterBundler,\n            registerReactDevTools: registerReactDevTools,\n            addListener: addListener,\n            dispatchMessage: dispatchMessage,\n            lazyAnchorRef: lazyAnchorRef,\n            unsubscribeClientListenersRef: unsubscribeClientListeners,\n            queuedListenersRef: queuedListeners\n        }\n    ];\n};\nvar useFiles = function(props) {\n    var originalStateFromProps = getSandpackStateFromProps(props);\n    var _a = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(originalStateFromProps), state = _a[0], setState = _a[1];\n    var isMountedRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(false);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(function() {\n        if (isMountedRef.current) {\n            setState(getSandpackStateFromProps(props));\n        } else {\n            isMountedRef.current = true;\n        }\n    }, [\n        props.files,\n        props.customSetup,\n        props.template\n    ]);\n    var updateFile = function(pathOrFiles, code, shouldUpdatePreview) {\n        if (shouldUpdatePreview === void 0) {\n            shouldUpdatePreview = true;\n        }\n        setState(function(prev) {\n            var _a;\n            var files = prev.files;\n            if (typeof pathOrFiles === \"string\" && typeof code === \"string\") {\n                files = __assign(__assign({}, files), (_a = {}, _a[pathOrFiles] = __assign(__assign({}, files[pathOrFiles]), {\n                    code: code\n                }), _a));\n            } else if (typeof pathOrFiles === \"object\") {\n                files = __assign(__assign({}, files), convertedFilesToBundlerFiles(pathOrFiles));\n            }\n            return __assign(__assign({}, prev), {\n                files: (0,_codesandbox_sandpack_client__WEBPACK_IMPORTED_MODULE_9__.f)(files),\n                shouldUpdatePreview: shouldUpdatePreview\n            });\n        });\n    };\n    var operations = {\n        openFile: function(path) {\n            setState(function(_a) {\n                var visibleFiles = _a.visibleFiles, rest = __rest(_a, [\n                    \"visibleFiles\"\n                ]);\n                var newPaths = visibleFiles.includes(path) ? visibleFiles : __spreadArray(__spreadArray([], visibleFiles, true), [\n                    path\n                ], false);\n                return __assign(__assign({}, rest), {\n                    activeFile: path,\n                    visibleFiles: newPaths\n                });\n            });\n        },\n        resetFile: function(path) {\n            setState(function(prevState) {\n                var _a;\n                return __assign(__assign({}, prevState), {\n                    files: __assign(__assign({}, prevState.files), (_a = {}, _a[path] = originalStateFromProps.files[path], _a))\n                });\n            });\n        },\n        resetAllFiles: function() {\n            setState(function(prev) {\n                return __assign(__assign({}, prev), {\n                    files: originalStateFromProps.files\n                });\n            });\n        },\n        setActiveFile: function(activeFile) {\n            if (state.files[activeFile]) {\n                setState(function(prev) {\n                    return __assign(__assign({}, prev), {\n                        activeFile: activeFile\n                    });\n                });\n            }\n        },\n        updateCurrentFile: function(code, shouldUpdatePreview) {\n            if (shouldUpdatePreview === void 0) {\n                shouldUpdatePreview = true;\n            }\n            updateFile(state.activeFile, code, shouldUpdatePreview);\n        },\n        updateFile: updateFile,\n        addFile: updateFile,\n        closeFile: function(path) {\n            if (state.visibleFiles.length === 1) {\n                return;\n            }\n            setState(function(_a) {\n                var visibleFiles = _a.visibleFiles, activeFile = _a.activeFile, prev = __rest(_a, [\n                    \"visibleFiles\",\n                    \"activeFile\"\n                ]);\n                var indexOfRemovedPath = visibleFiles.indexOf(path);\n                var newPaths = visibleFiles.filter(function(openPath) {\n                    return openPath !== path;\n                });\n                return __assign(__assign({}, prev), {\n                    activeFile: path === activeFile ? indexOfRemovedPath === 0 ? visibleFiles[1] : visibleFiles[indexOfRemovedPath - 1] : activeFile,\n                    visibleFiles: newPaths\n                });\n            });\n        },\n        deleteFile: function(path, shouldUpdatePreview) {\n            if (shouldUpdatePreview === void 0) {\n                shouldUpdatePreview = true;\n            }\n            setState(function(_a) {\n                var visibleFiles = _a.visibleFiles, files = _a.files, activeFile = _a.activeFile, rest = __rest(_a, [\n                    \"visibleFiles\",\n                    \"files\",\n                    \"activeFile\"\n                ]);\n                var newFiles = __assign({}, files);\n                delete newFiles[path];\n                var remainingVisibleFiles = visibleFiles.filter(function(openPath) {\n                    return openPath !== path;\n                });\n                var deletedLastVisibleFile = remainingVisibleFiles.length === 0;\n                if (deletedLastVisibleFile) {\n                    var nextFile = Object.keys(files)[Object.keys(files).length - 1];\n                    return __assign(__assign({}, rest), {\n                        visibleFiles: [\n                            nextFile\n                        ],\n                        activeFile: nextFile,\n                        files: newFiles,\n                        shouldUpdatePreview: shouldUpdatePreview\n                    });\n                }\n                return __assign(__assign({}, rest), {\n                    visibleFiles: remainingVisibleFiles,\n                    activeFile: path === activeFile ? remainingVisibleFiles[remainingVisibleFiles.length - 1] : activeFile,\n                    files: newFiles,\n                    shouldUpdatePreview: shouldUpdatePreview\n                });\n            });\n        }\n    };\n    return [\n        __assign(__assign({}, state), {\n            visibleFilesFromProps: originalStateFromProps.visibleFiles\n        }),\n        operations\n    ];\n};\nvar Sandpack$1 = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createContext(null);\nvar SandpackProvider = function(props) {\n    var _a, _b, _c;\n    var children = props.children, options = props.options, style = props.style, className = props.className, theme = props.theme;\n    var _d = useFiles(props), fileState = _d[0], fileOperations = _d[1];\n    var _e = useClient(props, fileState), clientState = _e[0], _f = _e[1], dispatchMessage = _f.dispatchMessage, addListener = _f.addListener, clientOperations = __rest(_f, [\n        \"dispatchMessage\",\n        \"addListener\"\n    ]);\n    var appState = useAppState(props, fileState.files);\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function() {\n        clientOperations.initializeSandpackIframe();\n    }, []);\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Sandpack$1.Provider, {\n        value: __assign(__assign(__assign(__assign(__assign(__assign({}, fileState), clientState), appState), fileOperations), clientOperations), {\n            autoReload: (_b = (_a = props.options) === null || _a === void 0 ? void 0 : _a.autoReload) !== null && _b !== void 0 ? _b : true,\n            teamId: props === null || props === void 0 ? void 0 : props.teamId,\n            exportOptions: (_c = props === null || props === void 0 ? void 0 : props.customSetup) === null || _c === void 0 ? void 0 : _c.exportOptions,\n            listen: addListener,\n            dispatch: dispatchMessage\n        }),\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ClassNamesProvider, {\n            classes: options === null || options === void 0 ? void 0 : options.classes,\n            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(SandpackThemeProvider, {\n                className: className,\n                style: style,\n                theme: theme,\n                children: children\n            })\n        })\n    });\n};\n/**\n * @category Provider\n */ var SandpackConsumer = Sandpack$1.Consumer;\n/**\n * @category Hooks\n */ function useSandpack() {\n    var sandpack = react__WEBPACK_IMPORTED_MODULE_1__.useContext(Sandpack$1);\n    if (sandpack === null) {\n        throw new Error('[sandpack-react]: \"useSandpack\" must be wrapped by a \"SandpackProvider\"');\n    }\n    var dispatch = sandpack.dispatch, listen = sandpack.listen, rest = __rest(sandpack, [\n        \"dispatch\",\n        \"listen\"\n    ]);\n    return {\n        sandpack: __assign({}, rest),\n        dispatch: dispatch,\n        listen: listen\n    };\n}\n/**\n * This returns the current state of the active file\n * and a method to update its content.\n *\n * @category Hooks\n */ var useActiveCode = function() {\n    var _a, _b, _c;\n    var sandpack = useSandpack().sandpack;\n    return {\n        code: (_a = sandpack.files[sandpack.activeFile]) === null || _a === void 0 ? void 0 : _a.code,\n        readOnly: (_c = (_b = sandpack.files[sandpack.activeFile]) === null || _b === void 0 ? void 0 : _b.readOnly) !== null && _c !== void 0 ? _c : false,\n        updateCode: sandpack.updateCurrentFile\n    };\n};\nvar _a$8, _b$2, _c;\nvar iconStandaloneClassName = css({\n    svg: {\n        margin: \"auto\"\n    }\n});\nvar buttonClassName = css((_a$8 = {\n    appearance: \"none\",\n    outline: \"none\",\n    display: \"flex\",\n    alignItems: \"center\",\n    fontSize: \"inherit\",\n    fontFamily: \"inherit\",\n    backgroundColor: \"transparent\",\n    transition: \"color $default, background $default\",\n    cursor: \"pointer\",\n    color: \"$colors$clickable\",\n    border: 0,\n    textDecoration: \"none\",\n    \"&:disabled\": {\n        color: \"$colors$disabled\"\n    },\n    \"&:hover:not(:disabled,[data-active='true'])\": {\n        color: \"$colors$hover\"\n    },\n    '&[data-active=\"true\"]': {\n        color: \"$colors$accent\"\n    },\n    svg: {\n        minWidth: \"$space$4\",\n        width: \"$space$4\",\n        height: \"$space$4\"\n    }\n}, _a$8[\"&.\".concat(iconStandaloneClassName)] = {\n    padding: \"$space$1\",\n    height: \"$space$7\",\n    display: \"flex\"\n}, // If there's a children besides the icon\n_a$8[\"&.\".concat(iconStandaloneClassName, \"&:not(:has(span))\")] = {\n    width: \"$space$7\"\n}, _a$8[\"&.\".concat(iconStandaloneClassName, \"&:has(svg + span)\")] = {\n    paddingRight: \"$space$3\",\n    paddingLeft: \"$space$2\",\n    gap: \"$space$1\"\n}, _a$8));\nvar roundedButtonClassName = css({\n    backgroundColor: \"$colors$surface2\",\n    borderRadius: \"99999px\",\n    border: \"1px solid $colors$surface3\",\n    '&[data-active=\"true\"]': {\n        color: \"$colors$surface1\",\n        background: \"$colors$accent\"\n    },\n    \"&:hover:not(:disabled,[data-active='true'])\": {\n        backgroundColor: \"$colors$surface3\"\n    }\n});\nvar iconClassName = css({\n    padding: 0\n});\nvar fadeIn = keyframes({\n    \"0%\": {\n        opacity: 0\n    },\n    \"100%\": {\n        opacity: 1\n    }\n});\nvar absoluteClassName = css({\n    position: \"absolute\",\n    bottom: \"0\",\n    left: \"0\",\n    right: \"0\",\n    top: \"0\",\n    margin: \"0\",\n    overflow: \"auto\",\n    height: \"100%\",\n    zIndex: \"$top\"\n});\nvar errorClassName = css((_b$2 = {\n    whiteSpace: \"pre-wrap\",\n    padding: \"$space$10\",\n    backgroundColor: \"$colors$surface1\",\n    display: \"flex\",\n    gap: \"$space$2\",\n    flexDirection: \"column\"\n}, _b$2[\".\".concat(buttonClassName)] = {\n    width: \"auto\",\n    gap: \"$space$2\",\n    padding: \"0 $space$3 0 $space$2\",\n    marginTop: \"$space$1\"\n}, _b$2.variants = {\n    solidBg: {\n        true: {\n            backgroundColor: \"$colors$errorSurface\"\n        }\n    }\n}, _b$2));\nvar errorBundlerClassName = css((_c = {\n    padding: \"$space$10\",\n    backgroundColor: \"$colors$surface1\"\n}, _c[\".\".concat(buttonClassName)] = {\n    marginTop: \"$space$6\",\n    width: \"auto\",\n    gap: \"$space$2\",\n    padding: \"0 $space$3 0 $space$2\"\n}, _c));\nvar errorMessageClassName = css({\n    animation: \"\".concat(fadeIn, \" 150ms ease\"),\n    color: \"$colors$error\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    gap: \"$space$3\",\n    variants: {\n        errorCode: {\n            true: {\n                fontFamily: \"$font$mono\"\n            }\n        }\n    },\n    a: {\n        color: \"inherit\"\n    },\n    p: {\n        margin: 0\n    }\n});\nvar _a$7;\nvar tabsClassName = css({\n    borderBottom: \"1px solid $colors$surface2\",\n    background: \"$colors$surface1\"\n});\nvar tabsScrollableClassName = css({\n    padding: \"0 $space$2\",\n    overflow: \"auto\",\n    display: \"flex\",\n    flexWrap: \"nowrap\",\n    alignItems: \"stretch\",\n    minHeight: \"40px\",\n    marginBottom: \"-1px\"\n});\nvar closeButtonClassName = css({\n    padding: \"0 $space$1 0 $space$1\",\n    borderRadius: \"$border$radius\",\n    marginLeft: \"$space$1\",\n    width: \"$space$5\",\n    visibility: \"hidden\",\n    svg: {\n        width: \"$space$3\",\n        height: \"$space$3\",\n        display: \"block\",\n        position: \"relative\",\n        top: 1\n    }\n});\nvar tabButton = css((_a$7 = {\n    padding: \"0 $space$2\",\n    height: \"$layout$headerHeight\",\n    whiteSpace: \"nowrap\",\n    \"&:focus\": {\n        outline: \"none\"\n    }\n}, _a$7[\"&:hover > .\".concat(closeButtonClassName)] = {\n    visibility: \"unset\"\n}, _a$7));\n/**\n * FileTabs is a list of all open files, the active file, and its state.\n */ var FileTabs = function(_a) {\n    var closableTabs = _a.closableTabs, className = _a.className, props = __rest(_a, [\n        \"closableTabs\",\n        \"className\"\n    ]);\n    var sandpack = useSandpack().sandpack;\n    var classNames = useClassNames();\n    var activeFile = sandpack.activeFile, visibleFiles = sandpack.visibleFiles, setActiveFile = sandpack.setActiveFile;\n    var handleCloseFile = function(ev) {\n        ev.stopPropagation();\n        var tabElm = ev.target.closest(\"[data-active]\");\n        var pathToClose = tabElm === null || tabElm === void 0 ? void 0 : tabElm.getAttribute(\"title\");\n        if (!pathToClose) {\n            return;\n        }\n        sandpack.closeFile(pathToClose);\n    };\n    var getTriggerText = function(currentPath) {\n        var documentFileName = getFileName(currentPath);\n        var pathsWithDuplicateFileNames = visibleFiles.reduce(function(prev, curr) {\n            if (curr === currentPath) {\n                return prev;\n            }\n            var fileName = getFileName(curr);\n            if (fileName === documentFileName) {\n                prev.push(curr);\n                return prev;\n            }\n            return prev;\n        }, []);\n        if (pathsWithDuplicateFileNames.length === 0) {\n            return documentFileName;\n        } else {\n            return calculateNearestUniquePath(currentPath, pathsWithDuplicateFileNames);\n        }\n    };\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", __assign({\n        className: classNames(\"tabs\", [\n            tabsClassName,\n            className\n        ]),\n        translate: \"no\"\n    }, props, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n            \"aria-label\": \"Select active file\",\n            className: classNames(\"tabs-scrollable-container\", [\n                tabsScrollableClassName\n            ]),\n            role: \"tablist\",\n            children: visibleFiles.map(function(filePath) {\n                return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"button\", {\n                    \"aria-selected\": filePath === activeFile,\n                    className: classNames(\"tab-button\", [\n                        buttonClassName,\n                        tabButton\n                    ]),\n                    \"data-active\": filePath === activeFile,\n                    onClick: function() {\n                        return setActiveFile(filePath);\n                    },\n                    role: \"tab\",\n                    title: filePath,\n                    type: \"button\",\n                    children: [\n                        getTriggerText(filePath),\n                        closableTabs && visibleFiles.length > 1 && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n                            className: classNames(\"close-button\", [\n                                closeButtonClassName\n                            ]),\n                            onClick: handleCloseFile,\n                            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(CloseIcon, {})\n                        })\n                    ]\n                }, filePath);\n            })\n        })\n    }));\n};\nvar RoundedButton = function(_a) {\n    var onClick = _a.onClick, className = _a.className, children = _a.children;\n    var classNames = useClassNames();\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"button\", {\n        className: classNames(\"button\", [\n            classNames(\"icon-standalone\"),\n            buttonClassName,\n            iconStandaloneClassName,\n            roundedButtonClassName,\n            className\n        ]),\n        onClick: onClick,\n        type: \"button\",\n        children: children\n    });\n};\nvar runButtonClassName = css({\n    position: \"absolute\",\n    bottom: \"$space$2\",\n    right: \"$space$2\",\n    paddingRight: \"$space$3\"\n});\nvar RunButton$1 = function(_a) {\n    _a.className;\n    var onClick = _a.onClick, props = __rest(_a, [\n        \"className\",\n        \"onClick\"\n    ]);\n    var sandpack = useSandpack().sandpack;\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(RoundedButton, __assign({\n        className: runButtonClassName.toString(),\n        onClick: function(event) {\n            sandpack.runSandpack();\n            onClick === null || onClick === void 0 ? void 0 : onClick(event);\n        }\n    }, props, {\n        children: [\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(RunIcon, {}),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n                children: \"Run\"\n            })\n        ]\n    }));\n};\nvar _a$6;\nvar stackClassName = css((_a$6 = {\n    display: \"flex\",\n    flexDirection: \"column\",\n    width: \"100%\",\n    position: \"relative\",\n    backgroundColor: \"$colors$surface1\",\n    gap: 1\n}, _a$6[\"&:has(.\".concat(THEME_PREFIX, \"-stack)\")] = {\n    backgroundColor: \"$colors$surface2\"\n}, _a$6));\nvar SandpackStack = function(_a) {\n    var className = _a.className, props = __rest(_a, [\n        \"className\"\n    ]);\n    var classNames = useClassNames();\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", __assign({\n        className: classNames(\"stack\", [\n            stackClassName,\n            className\n        ])\n    }, props));\n};\n/**\n * @category Hooks\n */ var useSandpackTheme = function() {\n    var _a = react__WEBPACK_IMPORTED_MODULE_1__.useContext(SandpackThemeContext), theme = _a.theme, id = _a.id, mode = _a.mode;\n    return {\n        theme: theme,\n        themeId: id,\n        themeMode: mode\n    };\n};\n/* eslint-disable @typescript-eslint/no-explicit-any */ var shallowEqual = function(a, b) {\n    if (a.length !== b.length) return false;\n    var result = true;\n    for(var index = 0; index < a.length; index++){\n        if (a[index] !== b[index]) {\n            result = false;\n            break;\n        }\n    }\n    return result;\n};\nvar getCodeMirrorPosition = function(doc, _a) {\n    var line = _a.line, column = _a.column;\n    return doc.line(line).from + (column !== null && column !== void 0 ? column : 0) - 1;\n};\nvar getEditorTheme = function() {\n    return _codemirror_view__WEBPACK_IMPORTED_MODULE_11__.EditorView.theme({\n        \"&\": {\n            backgroundColor: \"var(--\".concat(THEME_PREFIX, \"-colors-surface1)\"),\n            color: \"var(--\".concat(THEME_PREFIX, \"-syntax-color-plain)\"),\n            height: \"100%\"\n        },\n        \".cm-matchingBracket, .cm-nonmatchingBracket, &.cm-focused .cm-matchingBracket, &.cm-focused .cm-nonmatchingBracket\": {\n            color: \"inherit\",\n            backgroundColor: \"rgba(128,128,128,.25)\",\n            backgroundBlendMode: \"difference\"\n        },\n        \"&.cm-editor.cm-focused\": {\n            outline: \"none\"\n        },\n        \".cm-activeLine\": {\n            backgroundColor: \"var(--\".concat(THEME_PREFIX, \"-colors-surface3)\"),\n            borderRadius: \"var(--\".concat(THEME_PREFIX, \"-border-radius)\")\n        },\n        \".cm-errorLine\": {\n            backgroundColor: \"var(--\".concat(THEME_PREFIX, \"-colors-errorSurface)\"),\n            borderRadius: \"var(--\".concat(THEME_PREFIX, \"-border-radius)\")\n        },\n        \".cm-content\": {\n            caretColor: \"var(--\".concat(THEME_PREFIX, \"-colors-accent)\"),\n            padding: \"0 var(--\".concat(THEME_PREFIX, \"-space-4)\")\n        },\n        \".cm-scroller\": {\n            fontFamily: \"var(--\".concat(THEME_PREFIX, \"-font-mono)\"),\n            lineHeight: \"var(--\".concat(THEME_PREFIX, \"-font-lineHeight)\")\n        },\n        \".cm-gutters\": {\n            backgroundColor: \"var(--\".concat(THEME_PREFIX, \"-colors-surface1)\"),\n            color: \"var(--\".concat(THEME_PREFIX, \"-colors-disabled)\"),\n            border: \"none\",\n            paddingLeft: \"var(--\".concat(THEME_PREFIX, \"-space-1)\")\n        },\n        \".cm-gutter.cm-lineNumbers\": {\n            fontSize: \".6em\"\n        },\n        \".cm-lineNumbers .cm-gutterElement\": {\n            lineHeight: \"var(--\".concat(THEME_PREFIX, \"-font-lineHeight)\"),\n            minWidth: \"var(--\".concat(THEME_PREFIX, \"-space-5)\")\n        },\n        \".cm-content .cm-line\": {\n            paddingLeft: \"var(--\".concat(THEME_PREFIX, \"-space-1)\")\n        },\n        \".cm-content.cm-readonly .cm-line\": {\n            paddingLeft: 0\n        }\n    });\n};\nvar classNameToken = function(name) {\n    return \"\".concat(THEME_PREFIX, \"-syntax-\").concat(name);\n};\nvar styleTokens = function() {\n    var syntaxHighLightTokens = [\n        \"string\",\n        \"plain\",\n        \"comment\",\n        \"keyword\",\n        \"definition\",\n        \"punctuation\",\n        \"property\",\n        \"tag\",\n        \"static\"\n    ];\n    return syntaxHighLightTokens.reduce(function(acc, token) {\n        var _a;\n        return __assign(__assign({}, acc), (_a = {}, _a[\".\".concat(classNameToken(token))] = {\n            color: \"$syntax$color$\".concat(token),\n            fontStyle: \"$syntax$fontStyle$\".concat(token)\n        }, _a));\n    }, {});\n};\nvar getSyntaxHighlight = function(theme) {\n    return _codemirror_language__WEBPACK_IMPORTED_MODULE_12__.HighlightStyle.define([\n        {\n            tag: _lezer_highlight__WEBPACK_IMPORTED_MODULE_3__.tags.link,\n            textDecoration: \"underline\"\n        },\n        {\n            tag: _lezer_highlight__WEBPACK_IMPORTED_MODULE_3__.tags.emphasis,\n            fontStyle: \"italic\"\n        },\n        {\n            tag: _lezer_highlight__WEBPACK_IMPORTED_MODULE_3__.tags.strong,\n            fontWeight: \"bold\"\n        },\n        {\n            tag: _lezer_highlight__WEBPACK_IMPORTED_MODULE_3__.tags.keyword,\n            class: classNameToken(\"keyword\")\n        },\n        {\n            tag: [\n                _lezer_highlight__WEBPACK_IMPORTED_MODULE_3__.tags.atom,\n                _lezer_highlight__WEBPACK_IMPORTED_MODULE_3__.tags.number,\n                _lezer_highlight__WEBPACK_IMPORTED_MODULE_3__.tags.bool\n            ],\n            class: classNameToken(\"static\")\n        },\n        {\n            tag: _lezer_highlight__WEBPACK_IMPORTED_MODULE_3__.tags.variableName,\n            class: classNameToken(\"plain\")\n        },\n        {\n            // Standard tags, e.g <h1 />\n            tag: _lezer_highlight__WEBPACK_IMPORTED_MODULE_3__.tags.standard(_lezer_highlight__WEBPACK_IMPORTED_MODULE_3__.tags.tagName),\n            class: classNameToken(\"tag\")\n        },\n        {\n            tag: [\n                // Highlight function call\n                _lezer_highlight__WEBPACK_IMPORTED_MODULE_3__.tags.function(_lezer_highlight__WEBPACK_IMPORTED_MODULE_3__.tags.variableName),\n                // Highlight function definition differently (eg: functional component def in React)\n                _lezer_highlight__WEBPACK_IMPORTED_MODULE_3__.tags.definition(_lezer_highlight__WEBPACK_IMPORTED_MODULE_3__.tags.function(_lezer_highlight__WEBPACK_IMPORTED_MODULE_3__.tags.variableName)),\n                // \"Custom tags\", meaning React component\n                _lezer_highlight__WEBPACK_IMPORTED_MODULE_3__.tags.tagName\n            ],\n            class: classNameToken(\"definition\")\n        },\n        {\n            tag: _lezer_highlight__WEBPACK_IMPORTED_MODULE_3__.tags.propertyName,\n            class: classNameToken(\"property\")\n        },\n        {\n            tag: [\n                _lezer_highlight__WEBPACK_IMPORTED_MODULE_3__.tags.literal,\n                _lezer_highlight__WEBPACK_IMPORTED_MODULE_3__.tags.inserted\n            ],\n            class: classNameToken(theme.syntax.string ? \"string\" : \"static\")\n        },\n        {\n            tag: _lezer_highlight__WEBPACK_IMPORTED_MODULE_3__.tags.punctuation,\n            class: classNameToken(\"punctuation\")\n        },\n        {\n            tag: [\n                _lezer_highlight__WEBPACK_IMPORTED_MODULE_3__.tags.comment,\n                _lezer_highlight__WEBPACK_IMPORTED_MODULE_3__.tags.quote\n            ],\n            class: classNameToken(\"comment\")\n        }\n    ]);\n};\nvar getLanguageFromFile = function(filePath, fileType, additionalLanguages) {\n    if (!filePath && !fileType) return \"javascript\";\n    var extension = fileType;\n    if (!extension && filePath) {\n        var extensionDotIndex = filePath.lastIndexOf(\".\");\n        extension = filePath.slice(extensionDotIndex + 1);\n    }\n    for(var _i = 0, additionalLanguages_1 = additionalLanguages; _i < additionalLanguages_1.length; _i++){\n        var additionalLanguage = additionalLanguages_1[_i];\n        if (extension === additionalLanguage.name || additionalLanguage.extensions.includes(extension || \"\")) {\n            return additionalLanguage.name;\n        }\n    }\n    switch(extension){\n        case \"ts\":\n        case \"tsx\":\n            return \"typescript\";\n        case \"html\":\n        case \"svelte\":\n        case \"vue\":\n        case \"astro\":\n            return \"html\";\n        case \"css\":\n        case \"less\":\n        case \"scss\":\n            return \"css\";\n        case \"js\":\n        case \"jsx\":\n        case \"json\":\n        default:\n            return \"javascript\";\n    }\n};\nvar getCodeMirrorLanguage = function(extension, additionalLanguages) {\n    var options = {\n        javascript: (0,_codemirror_lang_javascript__WEBPACK_IMPORTED_MODULE_13__.javascript)({\n            jsx: true,\n            typescript: false\n        }),\n        typescript: (0,_codemirror_lang_javascript__WEBPACK_IMPORTED_MODULE_13__.javascript)({\n            jsx: true,\n            typescript: true\n        }),\n        html: (0,_codemirror_lang_html__WEBPACK_IMPORTED_MODULE_14__.html)(),\n        css: (0,_codemirror_lang_css__WEBPACK_IMPORTED_MODULE_15__.css)()\n    };\n    for(var _i = 0, additionalLanguages_2 = additionalLanguages; _i < additionalLanguages_2.length; _i++){\n        var additionalLanguage = additionalLanguages_2[_i];\n        if (extension === additionalLanguage.name) {\n            return additionalLanguage.language;\n        }\n    }\n    return options[extension];\n};\nvar useCombinedRefs = function() {\n    var refs = [];\n    for(var _i = 0; _i < arguments.length; _i++){\n        refs[_i] = arguments[_i];\n    }\n    return react__WEBPACK_IMPORTED_MODULE_1__.useCallback(function(element) {\n        return refs.forEach(function(ref) {\n            if (!ref) {\n                return;\n            }\n            // Ref can have two types - a function or an object. We treat each case.\n            if (typeof ref === \"function\") {\n                return ref(element);\n            }\n            // As per https://github.com/facebook/react/issues/13029\n            // it should be fine to set current this way.\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            ref.current = element;\n        });\n    }, // eslint-disable-next-line react-hooks/exhaustive-deps\n    refs);\n};\nfunction highlightDecorators(positions) {\n    return _codemirror_view__WEBPACK_IMPORTED_MODULE_11__.ViewPlugin.fromClass(/** @class */ function() {\n        function class_1(view) {\n            this.decorations = this.getDecoration(view);\n        }\n        class_1.prototype.update = function(update) {\n            return;\n        };\n        class_1.prototype.getDecoration = function(view) {\n            if (!positions) return _codemirror_view__WEBPACK_IMPORTED_MODULE_11__.Decoration.none;\n            var rangesDecorators = positions.map(function(item) {\n                var _a, _b, _c;\n                var lineDeco = _codemirror_view__WEBPACK_IMPORTED_MODULE_11__.Decoration.line({\n                    attributes: {\n                        class: (_a = item.className) !== null && _a !== void 0 ? _a : \"\"\n                    }\n                });\n                var markDeco = _codemirror_view__WEBPACK_IMPORTED_MODULE_11__.Decoration.mark({\n                    class: (_b = item.className) !== null && _b !== void 0 ? _b : \"\",\n                    attributes: (_c = item.elementAttributes) !== null && _c !== void 0 ? _c : undefined\n                });\n                var positionLineStart = getCodeMirrorPosition(view.state.doc, {\n                    line: item.line,\n                    column: item.startColumn\n                }) + 1;\n                if (item.startColumn && item.endColumn) {\n                    var positionLineEnd = getCodeMirrorPosition(view.state.doc, {\n                        line: item.line,\n                        column: item.endColumn\n                    }) + 1;\n                    return markDeco.range(positionLineStart, positionLineEnd);\n                }\n                return lineDeco.range(positionLineStart);\n            });\n            return _codemirror_view__WEBPACK_IMPORTED_MODULE_11__.Decoration.set(rangesDecorators);\n        };\n        return class_1;\n    }(), {\n        decorations: function(v) {\n            return v.decorations;\n        }\n    });\n}\nfunction highlightInlineError() {\n    return activeLineHighlighter;\n}\nvar lineDeco = _codemirror_view__WEBPACK_IMPORTED_MODULE_11__.Decoration.line({\n    attributes: {\n        class: \"cm-errorLine\"\n    }\n});\nvar activeLineHighlighter = _codemirror_view__WEBPACK_IMPORTED_MODULE_11__.ViewPlugin.fromClass(/** @class */ function() {\n    function class_1() {\n        this.decorations = _codemirror_view__WEBPACK_IMPORTED_MODULE_11__.Decoration.none;\n    }\n    class_1.prototype.update = function(update) {\n        var _this = this;\n        update.transactions.forEach(function(trans) {\n            // @ts-ignore\n            var errorValue = trans.annotation(\"show-error\");\n            if (errorValue !== undefined) {\n                var position = getCodeMirrorPosition(update.view.state.doc, {\n                    line: errorValue\n                }) + 1;\n                _this.decorations = _codemirror_view__WEBPACK_IMPORTED_MODULE_11__.Decoration.set([\n                    lineDeco.range(position)\n                ]);\n            // @ts-ignore\n            } else if (trans.annotation(\"remove-errors\")) {\n                _this.decorations = _codemirror_view__WEBPACK_IMPORTED_MODULE_11__.Decoration.none;\n            }\n        });\n    };\n    return class_1;\n}(), {\n    decorations: function(v) {\n        return v.decorations;\n    }\n});\nvar _a$5, _b$1;\nvar placeholderClassName = css({\n    margin: \"0\",\n    display: \"block\",\n    fontFamily: \"$font$mono\",\n    fontSize: \"$font$size\",\n    color: \"$syntax$color$plain\",\n    lineHeight: \"$font$lineHeight\"\n});\nvar tokensClassName = css(styleTokens());\nvar editorClassName = css((_a$5 = {\n    flex: 1,\n    position: \"relative\",\n    overflow: \"auto\",\n    background: \"$colors$surface1\",\n    \".cm-scroller\": {\n        padding: \"$space$4 0\"\n    }\n}, _a$5[\".\".concat(placeholderClassName)] = {\n    padding: \"$space$4 0\"\n}, /**\n     * For iOS: prevent browser zoom when clicking on sandbox.\n     * Does NOT apply to code blocks.\n     */ _a$5[\"@media screen and (max-width: 768px)\"] = {\n    \"@supports (-webkit-overflow-scrolling: touch)\": {\n        \".cm-content\": {\n            fontSize: \"16px\"\n        }\n    }\n}, _a$5));\nvar cmClassName = css({\n    margin: \"0\",\n    outline: \"none\",\n    height: \"100%\"\n});\nvar readOnlyClassName = css((_b$1 = {\n    fontFamily: \"$font$mono\",\n    fontSize: \"0.8em\",\n    position: \"absolute\",\n    right: \"$space$2\",\n    bottom: \"$space$2\",\n    zIndex: \"$top\",\n    color: \"$colors$clickable\",\n    backgroundColor: \"$colors$surface2\",\n    borderRadius: \"99999px\",\n    padding: \"calc($space$1 / 2) $space$2\"\n}, _b$1[\"& + .\".concat(buttonClassName)] = {\n    right: \"calc($space$11 * 2)\"\n}, _b$1));\nvar useSyntaxHighlight = function(_a) {\n    var langSupport = _a.langSupport, highlightTheme = _a.highlightTheme, _b = _a.code, code = _b === void 0 ? \"\" : _b;\n    var tree = langSupport.language.parser.parse(code);\n    var offSet = 0;\n    var codeElementsRender = [];\n    var addElement = function(to, className) {\n        if (to > offSet) {\n            var children = code.slice(offSet, to);\n            codeElementsRender.push(className ? /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"span\", {\n                children: children,\n                className: className,\n                key: \"\".concat(to).concat(offSet)\n            }) : children);\n            offSet = to;\n        }\n    };\n    (0,_lezer_highlight__WEBPACK_IMPORTED_MODULE_3__.highlightTree)(tree, highlightTheme, function(from, to, className) {\n        addElement(from, \"\");\n        addElement(to, className);\n    });\n    /**\n     * The language parse doesn't look consistent.\n     * The final syntax highlight used by CodeMirror\n     * includes an end empty line, and the parse here doesn't,\n     * so let's add it manually.\n     */ if (offSet < code.length && (code === null || code === void 0 ? void 0 : code.includes(\"\\n\"))) {\n        codeElementsRender.push(\"\\n\\n\");\n    }\n    return codeElementsRender;\n};\nvar CodeMirror = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(function(_a, ref) {\n    var _b = _a.code, code = _b === void 0 ? \"\" : _b, filePath = _a.filePath, fileType = _a.fileType, onCodeUpdate = _a.onCodeUpdate, _c = _a.showLineNumbers, showLineNumbers = _c === void 0 ? false : _c, _d = _a.showInlineErrors, showInlineErrors = _d === void 0 ? false : _d, _e = _a.wrapContent, wrapContent = _e === void 0 ? false : _e, _f = _a.editorState, editorState = _f === void 0 ? \"pristine\" : _f, _g = _a.readOnly, readOnly = _g === void 0 ? false : _g, _h = _a.showReadOnly, showReadOnly = _h === void 0 ? true : _h, decorators = _a.decorators, _j = _a.initMode, initMode = _j === void 0 ? \"lazy\" : _j, _k = _a.extensions, extensions = _k === void 0 ? [] : _k, _l = _a.extensionsKeymap, extensionsKeymap = _l === void 0 ? [] : _l, _m = _a.additionalLanguages, additionalLanguages = _m === void 0 ? [] : _m;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    var wrapper = react__WEBPACK_IMPORTED_MODULE_1__.useRef(null);\n    var combinedRef = useCombinedRefs(wrapper, ref);\n    var cmView = react__WEBPACK_IMPORTED_MODULE_1__.useRef();\n    var _o = useSandpackTheme(), theme = _o.theme, themeId = _o.themeId;\n    var _p = react__WEBPACK_IMPORTED_MODULE_1__.useState(code), internalCode = _p[0], setInternalCode = _p[1];\n    var _q = react__WEBPACK_IMPORTED_MODULE_1__.useState(initMode === \"immediate\"), shouldInitEditor = _q[0], setShouldInitEditor = _q[1];\n    var classNames = useClassNames();\n    var _r = useSandpack(), listen = _r.listen, autoReload = _r.sandpack.autoReload;\n    var prevExtension = react__WEBPACK_IMPORTED_MODULE_1__.useRef([]);\n    var prevExtensionKeymap = react__WEBPACK_IMPORTED_MODULE_1__.useRef([]);\n    var isIntersecting = (0,_react_hook_intersection_observer__WEBPACK_IMPORTED_MODULE_16__[\"default\"])(wrapper, {\n        rootMargin: \"600px 0px\",\n        threshold: 0.2\n    }).isIntersecting;\n    react__WEBPACK_IMPORTED_MODULE_1__.useImperativeHandle(ref, function() {\n        return {\n            getCodemirror: function() {\n                return cmView.current;\n            }\n        };\n    });\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function() {\n        var mode = initMode === \"lazy\" || initMode === \"user-visible\";\n        if (mode && isIntersecting) {\n            setShouldInitEditor(true);\n        }\n    }, [\n        initMode,\n        isIntersecting\n    ]);\n    var languageExtension = getLanguageFromFile(filePath, fileType, additionalLanguages);\n    var langSupport = getCodeMirrorLanguage(languageExtension, additionalLanguages);\n    var highlightTheme = getSyntaxHighlight(theme);\n    var syntaxHighlightRender = useSyntaxHighlight({\n        langSupport: langSupport,\n        highlightTheme: highlightTheme,\n        code: code\n    });\n    // decorators need to be sorted by `line`, otherwise it will throw error\n    // see https://github.com/codesandbox/sandpack/issues/383\n    var sortedDecorators = react__WEBPACK_IMPORTED_MODULE_1__.useMemo(function() {\n        return decorators ? decorators.sort(function(d1, d2) {\n            return d1.line - d2.line;\n        }) : decorators;\n    }, [\n        decorators\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function() {\n        if (!wrapper.current || !shouldInitEditor) return;\n        var parentDiv = wrapper.current;\n        var existingPlaceholder = parentDiv.querySelector(\".sp-pre-placeholder\");\n        if (existingPlaceholder) {\n            parentDiv.removeChild(existingPlaceholder);\n        }\n        var view = new _codemirror_view__WEBPACK_IMPORTED_MODULE_11__.EditorView({\n            doc: code,\n            extensions: [],\n            parent: parentDiv,\n            dispatch: function(tr) {\n                view.update([\n                    tr\n                ]);\n                if (tr.docChanged) {\n                    var newCode = tr.newDoc.sliceString(0, tr.newDoc.length);\n                    setInternalCode(newCode);\n                    onCodeUpdate === null || onCodeUpdate === void 0 ? void 0 : onCodeUpdate(newCode);\n                }\n            }\n        });\n        view.contentDOM.setAttribute(\"data-gramm\", \"false\");\n        view.contentDOM.setAttribute(\"data-lt-active\", \"false\");\n        view.contentDOM.setAttribute(\"aria-label\", filePath ? \"Code Editor for \".concat(getFileName(filePath)) : \"Code Editor\");\n        if (readOnly) {\n            view.contentDOM.classList.add(\"cm-readonly\");\n        } else {\n            view.contentDOM.setAttribute(\"tabIndex\", \"-1\");\n        }\n        cmView.current = view;\n        return function() {\n            var _a;\n            (_a = cmView.current) === null || _a === void 0 ? void 0 : _a.destroy();\n        };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [\n        shouldInitEditor\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function() {\n        if (cmView.current) {\n            var customCommandsKeymap = [\n                {\n                    key: \"Tab\",\n                    run: function(view) {\n                        var _a, _b;\n                        (0,_codemirror_commands__WEBPACK_IMPORTED_MODULE_17__.indentMore)(view);\n                        var customKey = extensionsKeymap.find(function(_a) {\n                            var key = _a.key;\n                            return key === \"Tab\";\n                        });\n                        return (_b = (_a = customKey === null || customKey === void 0 ? void 0 : customKey.run) === null || _a === void 0 ? void 0 : _a.call(customKey, view)) !== null && _b !== void 0 ? _b : true;\n                    }\n                },\n                {\n                    key: \"Shift-Tab\",\n                    run: function(view) {\n                        var _a, _b;\n                        (0,_codemirror_commands__WEBPACK_IMPORTED_MODULE_17__.indentLess)({\n                            state: view.state,\n                            dispatch: view.dispatch\n                        });\n                        var customKey = extensionsKeymap.find(function(_a) {\n                            var key = _a.key;\n                            return key === \"Shift-Tab\";\n                        });\n                        return (_b = (_a = customKey === null || customKey === void 0 ? void 0 : customKey.run) === null || _a === void 0 ? void 0 : _a.call(customKey, view)) !== null && _b !== void 0 ? _b : true;\n                    }\n                },\n                {\n                    key: \"Escape\",\n                    run: function() {\n                        if (readOnly) return true;\n                        if (wrapper.current) {\n                            wrapper.current.focus();\n                        }\n                        return true;\n                    }\n                },\n                {\n                    key: \"mod-Backspace\",\n                    run: _codemirror_commands__WEBPACK_IMPORTED_MODULE_17__.deleteGroupBackward\n                }\n            ];\n            var extensionList = __spreadArray(__spreadArray([\n                (0,_codemirror_view__WEBPACK_IMPORTED_MODULE_11__.highlightSpecialChars)(),\n                (0,_codemirror_commands__WEBPACK_IMPORTED_MODULE_17__.history)(),\n                (0,_codemirror_autocomplete__WEBPACK_IMPORTED_MODULE_18__.closeBrackets)()\n            ], extensions, true), [\n                _codemirror_view__WEBPACK_IMPORTED_MODULE_11__.keymap.of(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray([], _codemirror_autocomplete__WEBPACK_IMPORTED_MODULE_18__.closeBracketsKeymap, true), _codemirror_commands__WEBPACK_IMPORTED_MODULE_17__.defaultKeymap, true), _codemirror_commands__WEBPACK_IMPORTED_MODULE_17__.historyKeymap, true), customCommandsKeymap, true), extensionsKeymap, true)),\n                langSupport,\n                getEditorTheme(),\n                (0,_codemirror_language__WEBPACK_IMPORTED_MODULE_12__.syntaxHighlighting)(highlightTheme)\n            ], false);\n            if (readOnly) {\n                extensionList.push(_codemirror_state__WEBPACK_IMPORTED_MODULE_19__.EditorState.readOnly.of(true));\n                extensionList.push(_codemirror_view__WEBPACK_IMPORTED_MODULE_11__.EditorView.editable.of(false));\n            } else {\n                extensionList.push((0,_codemirror_language__WEBPACK_IMPORTED_MODULE_12__.bracketMatching)());\n                extensionList.push((0,_codemirror_view__WEBPACK_IMPORTED_MODULE_11__.highlightActiveLine)());\n            }\n            if (sortedDecorators) {\n                extensionList.push(highlightDecorators(sortedDecorators));\n            }\n            if (wrapContent) {\n                extensionList.push(_codemirror_view__WEBPACK_IMPORTED_MODULE_11__.EditorView.lineWrapping);\n            }\n            if (showLineNumbers) {\n                extensionList.push((0,_codemirror_view__WEBPACK_IMPORTED_MODULE_11__.lineNumbers)());\n            }\n            if (showInlineErrors) {\n                extensionList.push(highlightInlineError());\n            }\n            // Add new hightlight decorators\n            cmView.current.dispatch({\n                effects: _codemirror_state__WEBPACK_IMPORTED_MODULE_19__.StateEffect.reconfigure.of(extensionList)\n            });\n        }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [\n        shouldInitEditor,\n        sortedDecorators,\n        showLineNumbers,\n        wrapContent,\n        themeId,\n        readOnly,\n        autoReload\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function applyExtensions() {\n        var view = cmView.current;\n        var dependenciesAreDiff = !shallowEqual(extensions, prevExtension.current) || !shallowEqual(extensionsKeymap, prevExtensionKeymap.current);\n        if (view && dependenciesAreDiff) {\n            view.dispatch({\n                effects: _codemirror_state__WEBPACK_IMPORTED_MODULE_19__.StateEffect.appendConfig.of(extensions)\n            });\n            view.dispatch({\n                effects: _codemirror_state__WEBPACK_IMPORTED_MODULE_19__.StateEffect.appendConfig.of(_codemirror_view__WEBPACK_IMPORTED_MODULE_11__.keymap.of(__spreadArray([], extensionsKeymap, true)))\n            });\n            prevExtension.current = extensions;\n            prevExtensionKeymap.current = extensionsKeymap;\n        }\n    }, [\n        extensions,\n        extensionsKeymap\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function() {\n        // When the user clicks on a tab button on a larger screen\n        // Avoid autofocus on mobile as it leads to a bad experience and an unexpected layout shift\n        if (cmView.current && editorState === \"dirty\" && window.matchMedia(\"(min-width: 768px)\").matches) {\n            cmView.current.contentDOM.focus();\n        }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n    // Update editor when code passed as prop from outside sandpack changes\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function() {\n        if (cmView.current && typeof code === \"string\" && code !== internalCode) {\n            var view = cmView.current;\n            var selection = view.state.selection.ranges.some(function(_a) {\n                var to = _a.to, from = _a.from;\n                return to > code.length || from > code.length;\n            }) ? _codemirror_state__WEBPACK_IMPORTED_MODULE_19__.EditorSelection.cursor(code.length) : view.state.selection;\n            var changes = {\n                from: 0,\n                to: view.state.doc.length,\n                insert: code\n            };\n            view.dispatch({\n                changes: changes,\n                selection: selection\n            });\n        }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [\n        code\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function messageToInlineError() {\n        if (!showInlineErrors) return;\n        var unsubscribe = listen(function(message) {\n            var view = cmView.current;\n            if (message.type === \"success\") {\n                view === null || view === void 0 ? void 0 : view.dispatch({\n                    // @ts-ignore\n                    annotations: [\n                        new _codemirror_state__WEBPACK_IMPORTED_MODULE_19__.Annotation(\"remove-errors\", true)\n                    ]\n                });\n            } else if (message.type === \"action\" && message.action === \"show-error\" && message.path === filePath && message.line) {\n                view === null || view === void 0 ? void 0 : view.dispatch({\n                    // @ts-ignore\n                    annotations: [\n                        new _codemirror_state__WEBPACK_IMPORTED_MODULE_19__.Annotation(\"show-error\", message.line)\n                    ]\n                });\n            }\n        });\n        return function() {\n            return unsubscribe();\n        };\n    }, [\n        listen,\n        showInlineErrors\n    ]);\n    var handleContainerKeyDown = function(evt) {\n        if (evt.key === \"Enter\" && cmView.current) {\n            evt.preventDefault();\n            cmView.current.contentDOM.focus();\n        }\n    };\n    var gutterLineOffset = function() {\n        // padding-left\n        var offset = 4;\n        if (showLineNumbers) {\n            // line-number-gutter-width + gutter-padding\n            offset += 6;\n        }\n        // line-padding\n        if (!readOnly) {\n            offset += 1;\n        }\n        return \"var(--\".concat(THEME_PREFIX, \"-space-\").concat(offset, \")\");\n    };\n    if (readOnly) {\n        return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n            children: [\n                (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"pre\", {\n                    ref: combinedRef,\n                    className: classNames(\"cm\", [\n                        classNames(editorState),\n                        classNames(languageExtension),\n                        cmClassName,\n                        tokensClassName\n                    ]),\n                    translate: \"no\",\n                    children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"code\", {\n                        className: classNames(\"pre-placeholder\", [\n                            placeholderClassName\n                        ]),\n                        style: {\n                            marginLeft: gutterLineOffset()\n                        },\n                        children: syntaxHighlightRender\n                    })\n                }),\n                readOnly && showReadOnly && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", __assign({\n                    className: classNames(\"read-only\", [\n                        readOnlyClassName\n                    ])\n                }, {}, {\n                    children: \"Read-only\"\n                }))\n            ]\n        });\n    }\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n        ref: combinedRef,\n        \"aria-autocomplete\": \"list\",\n        \"aria-label\": filePath ? \"Code Editor for \".concat(getFileName(filePath)) : \"Code Editor\",\n        \"aria-multiline\": \"true\",\n        className: classNames(\"cm\", [\n            classNames(editorState),\n            classNames(languageExtension),\n            cmClassName,\n            tokensClassName\n        ]),\n        onKeyDown: handleContainerKeyDown,\n        role: \"textbox\",\n        tabIndex: 0,\n        translate: \"no\",\n        suppressHydrationWarning: true,\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"pre\", {\n            className: classNames(\"pre-placeholder\", [\n                placeholderClassName\n            ]),\n            style: {\n                marginLeft: gutterLineOffset()\n            },\n            children: syntaxHighlightRender\n        })\n    });\n});\nvar SandpackCodeEditor = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.forwardRef)(function(_a, ref) {\n    var showTabs = _a.showTabs, _b = _a.showLineNumbers, showLineNumbers = _b === void 0 ? false : _b, _c = _a.showInlineErrors, showInlineErrors = _c === void 0 ? false : _c, _d = _a.showRunButton, showRunButton = _d === void 0 ? true : _d, _e = _a.wrapContent, wrapContent = _e === void 0 ? false : _e, _f = _a.closableTabs, closableTabs = _f === void 0 ? false : _f, initMode = _a.initMode, extensions = _a.extensions, extensionsKeymap = _a.extensionsKeymap, readOnly = _a.readOnly, showReadOnly = _a.showReadOnly, additionalLanguages = _a.additionalLanguages, className = _a.className, props = __rest(_a, [\n        \"showTabs\",\n        \"showLineNumbers\",\n        \"showInlineErrors\",\n        \"showRunButton\",\n        \"wrapContent\",\n        \"closableTabs\",\n        \"initMode\",\n        \"extensions\",\n        \"extensionsKeymap\",\n        \"readOnly\",\n        \"showReadOnly\",\n        \"additionalLanguages\",\n        \"className\"\n    ]);\n    var sandpack = useSandpack().sandpack;\n    var _g = useActiveCode(), code = _g.code, updateCode = _g.updateCode, readOnlyFile = _g.readOnly;\n    var activeFile = sandpack.activeFile, status = sandpack.status, editorState = sandpack.editorState;\n    var shouldShowTabs = showTabs !== null && showTabs !== void 0 ? showTabs : sandpack.visibleFiles.length > 1;\n    var classNames = useClassNames();\n    var handleCodeUpdate = function(newCode, shouldUpdatePreview) {\n        if (shouldUpdatePreview === void 0) {\n            shouldUpdatePreview = true;\n        }\n        updateCode(newCode, shouldUpdatePreview);\n    };\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(SandpackStack, __assign({\n        className: classNames(\"editor\", [\n            className\n        ])\n    }, props, {\n        children: [\n            shouldShowTabs && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(FileTabs, {\n                closableTabs: closableTabs\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n                className: classNames(\"code-editor\", [\n                    editorClassName\n                ]),\n                children: [\n                    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(CodeMirror, {\n                        ref: ref,\n                        additionalLanguages: additionalLanguages,\n                        code: code,\n                        editorState: editorState,\n                        extensions: extensions,\n                        extensionsKeymap: extensionsKeymap,\n                        filePath: activeFile,\n                        initMode: initMode || sandpack.initMode,\n                        onCodeUpdate: function(newCode) {\n                            var _a;\n                            return handleCodeUpdate(newCode, (_a = sandpack.autoReload) !== null && _a !== void 0 ? _a : true);\n                        },\n                        readOnly: readOnly || readOnlyFile,\n                        showInlineErrors: showInlineErrors,\n                        showLineNumbers: showLineNumbers,\n                        showReadOnly: showReadOnly,\n                        wrapContent: wrapContent\n                    }, activeFile),\n                    showRunButton && (!sandpack.autoReload || status === \"idle\") ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(RunButton$1, {}) : null\n                ]\n            })\n        ]\n    }));\n});\nvar SandpackCodeViewer = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(function(_a, ref) {\n    var showTabs = _a.showTabs, showLineNumbers = _a.showLineNumbers, decorators = _a.decorators, propCode = _a.code, initMode = _a.initMode, wrapContent = _a.wrapContent, additionalLanguages = _a.additionalLanguages, props = __rest(_a, [\n        \"showTabs\",\n        \"showLineNumbers\",\n        \"decorators\",\n        \"code\",\n        \"initMode\",\n        \"wrapContent\",\n        \"additionalLanguages\"\n    ]);\n    var sandpack = useSandpack().sandpack;\n    var code = useActiveCode().code;\n    var classNames = useClassNames();\n    var shouldShowTabs = showTabs !== null && showTabs !== void 0 ? showTabs : sandpack.visibleFiles.length > 1;\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(SandpackStack, __assign({\n        className: classNames(\"editor-viewer\")\n    }, props, {\n        children: [\n            shouldShowTabs ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(FileTabs, {}) : null,\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                className: classNames(\"code-editor\", [\n                    editorClassName\n                ]),\n                children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(CodeMirror, {\n                    ref: ref,\n                    additionalLanguages: additionalLanguages,\n                    code: propCode !== null && propCode !== void 0 ? propCode : code,\n                    decorators: decorators,\n                    filePath: sandpack.activeFile,\n                    initMode: initMode || sandpack.initMode,\n                    showLineNumbers: showLineNumbers,\n                    showReadOnly: false,\n                    wrapContent: wrapContent,\n                    readOnly: true\n                })\n            }),\n            sandpack.status === \"idle\" ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(RunButton$1, {}) : null\n        ]\n    }));\n});\nvar _a$4, _b;\nvar layoutClassName = css((_a$4 = {\n    border: \"1px solid $colors$surface2\",\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    alignItems: \"stretch\",\n    borderRadius: \"$border$radius\",\n    overflow: \"hidden\",\n    position: \"relative\",\n    backgroundColor: \"$colors$surface2\",\n    gap: 1\n}, _a$4[\"> .\".concat(stackClassName)] = {\n    flexGrow: 1,\n    flexShrink: 1,\n    flexBasis: \"0\",\n    height: \"$layout$height\",\n    overflow: \"hidden\",\n    \"@media print\": {\n        height: \"auto\",\n        display: \"block\"\n    },\n    \"@media screen and (max-width: 768px)\": (_b = {}, _b[\"&:not(.\".concat(THEME_PREFIX, \"-preview, .\").concat(THEME_PREFIX, \"-editor, .\").concat(THEME_PREFIX, \"-preset-column)\")] = {\n        height: \"calc($layout$height / 2)\"\n    }, /* triggers the layout break at the 768px breakpoint, not when the component is less then 700px */ _b.minWidth = \"100%;\", _b)\n}, _a$4[\"> .\".concat(THEME_PREFIX, \"-file-explorer\")] = {\n    flex: 0.2,\n    minWidth: 200,\n    \"@media screen and (max-width: 768px)\": {\n        flex: 1\n    }\n}, _a$4));\nvar SandpackLayout = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(function(_a, ref) {\n    var children = _a.children, className = _a.className, props = __rest(_a, [\n        \"children\",\n        \"className\"\n    ]);\n    var sandpack = useSandpack().sandpack;\n    var classNames = useClassNames();\n    var combinedRef = useCombinedRefs(sandpack.lazyAnchorRef, ref);\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", __assign({\n        ref: combinedRef,\n        className: classNames(\"layout\", [\n            layoutClassName,\n            className\n        ])\n    }, props, {\n        children: children\n    }));\n});\n/**\n * @category Hooks\n */ var useErrorMessage = function() {\n    var _a;\n    var sandpack = useSandpack().sandpack;\n    var error = sandpack.error;\n    return (_a = error === null || error === void 0 ? void 0 : error.message) !== null && _a !== void 0 ? _a : null;\n};\nvar FADE_ANIMATION_DURATION = 200;\n/**\n * @category Hooks\n */ var useLoadingOverlayState = function(clientId, externalLoading) {\n    var _a = useSandpack(), sandpack = _a.sandpack, listen = _a.listen;\n    var _b = react__WEBPACK_IMPORTED_MODULE_1__.useState(\"LOADING\"), state = _b[0], setState = _b[1];\n    /**\n     * Sandpack listener\n     */ react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function() {\n        var unsubscribe = listen(function(message) {\n            if (message.type === \"start\" && message.firstLoad === true) {\n                setState(\"LOADING\");\n            }\n            if (message.type === \"done\") {\n                setState(function(prev) {\n                    return prev === \"LOADING\" ? \"PRE_FADING\" : \"HIDDEN\";\n                });\n            }\n        }, clientId);\n        return function() {\n            unsubscribe();\n        };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [\n        clientId,\n        sandpack.status === \"idle\"\n    ]);\n    /**\n     * Fading transient state\n     */ react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function() {\n        var fadeTimeout;\n        if (state === \"PRE_FADING\" && !externalLoading) {\n            setState(\"FADING\");\n        } else if (state === \"FADING\") {\n            fadeTimeout = setTimeout(function() {\n                return setState(\"HIDDEN\");\n            }, FADE_ANIMATION_DURATION);\n        }\n        return function() {\n            clearTimeout(fadeTimeout);\n        };\n    }, [\n        state,\n        externalLoading\n    ]);\n    if (sandpack.status === \"timeout\") {\n        return \"TIMEOUT\";\n    }\n    if (sandpack.status !== \"running\") {\n        return \"HIDDEN\";\n    }\n    return state;\n};\n/**\n * @category Hooks\n */ var useSandpackNavigation = function(clientId) {\n    var dispatch = useSandpack().dispatch;\n    return {\n        refresh: function() {\n            return dispatch({\n                type: \"refresh\"\n            }, clientId);\n        },\n        back: function() {\n            return dispatch({\n                type: \"urlback\"\n            }, clientId);\n        },\n        forward: function() {\n            return dispatch({\n                type: \"urlforward\"\n            }, clientId);\n        }\n    };\n};\nfunction getTranspiledCode(sandpack) {\n    var _a, _b;\n    var activeFile = sandpack.activeFile, bundlerState = sandpack.bundlerState;\n    if (bundlerState == null) {\n        return null;\n    }\n    var tModule = bundlerState.transpiledModules[activeFile + \":\"];\n    return (_b = (_a = tModule === null || tModule === void 0 ? void 0 : tModule.source) === null || _a === void 0 ? void 0 : _a.compiledCode) !== null && _b !== void 0 ? _b : null;\n}\n/**\n * @category Hooks\n */ var useTranspiledCode = function() {\n    var sandpack = useSandpack().sandpack;\n    if (sandpack.status !== \"running\") {\n        return null;\n    }\n    return getTranspiledCode(sandpack);\n};\n/**\n * It registers a new sandpack client and returns its instance,\n * listeners, and dispatch function. Using it when creating a custom\n * component to interact directly with the client is recommended.\n * For other cases, use `useSandpack` instead.\n *\n * @category Hooks\n */ var useSandpackClient = function(clientPropsOverride) {\n    var _a = useSandpack(), sandpack = _a.sandpack, listen = _a.listen, dispatch = _a.dispatch;\n    var iframeRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(null);\n    var clientId = react__WEBPACK_IMPORTED_MODULE_1__.useRef(generateRandomId());\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function() {\n        var iframeElement = iframeRef.current;\n        var clientIdValue = clientId.current;\n        if (iframeElement !== null) {\n            sandpack.registerBundler(iframeElement, clientIdValue, clientPropsOverride);\n        }\n        return function() {\n            return sandpack.unregisterBundler(clientIdValue);\n        };\n    }, []);\n    var getClient = function() {\n        return sandpack.clients[clientId.current] || null;\n    };\n    return {\n        sandpack: sandpack,\n        getClient: getClient,\n        clientId: clientId.current,\n        iframe: iframeRef,\n        listen: function(listener) {\n            return listen(listener, clientId.current);\n        },\n        dispatch: function(message) {\n            return dispatch(message, clientId.current);\n        }\n    };\n};\n/**\n * @category Hooks\n */ var useSandpackShell = function(clientId) {\n    var dispatch = useSandpack().dispatch;\n    return {\n        restart: function() {\n            return dispatch({\n                type: \"shell/restart\"\n            }, clientId);\n        },\n        openPreview: function() {\n            return dispatch({\n                type: \"shell/openPreview\"\n            }, clientId);\n        }\n    };\n};\nvar mapProgressMessage = function(originalMessage, firstTotalPending) {\n    var _a;\n    switch(originalMessage.state){\n        case \"downloading_manifest\":\n            return \"[1/3] Downloading manifest\";\n        case \"downloaded_module\":\n            return \"[2/3] Downloaded \".concat(originalMessage.name, \" (\").concat(firstTotalPending - originalMessage.totalPending, \"/\").concat(firstTotalPending, \")\");\n        case \"starting_command\":\n            return \"[3/3] Starting command\";\n        case \"command_running\":\n            return '[3/3] Running \"'.concat((_a = originalMessage.command) === null || _a === void 0 ? void 0 : _a.trim(), '\"');\n    }\n};\nvar useSandpackPreviewProgress = function(props) {\n    var _a = react__WEBPACK_IMPORTED_MODULE_1__.useState(false), isReady = _a[0], setIsReady = _a[1];\n    var _b = react__WEBPACK_IMPORTED_MODULE_1__.useState(), totalDependencies = _b[0], setTotalDependencies = _b[1];\n    var _c = react__WEBPACK_IMPORTED_MODULE_1__.useState(null), loadingMessage = _c[0], setLoadingMessage = _c[1];\n    var timeout = props === null || props === void 0 ? void 0 : props.timeout;\n    var clientId = props === null || props === void 0 ? void 0 : props.clientId;\n    var listen = useSandpack().listen;\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function() {\n        var timer;\n        var unsubscribe = listen(function(message) {\n            if (message.type === \"start\" && message.firstLoad) {\n                setIsReady(false);\n            }\n            if (timeout) {\n                timer = setTimeout(function() {\n                    setLoadingMessage(null);\n                }, timeout);\n            }\n            if (message.type === \"dependencies\") {\n                setLoadingMessage(function() {\n                    switch(message.data.state){\n                        case \"downloading_manifest\":\n                            return \"[1/3] Downloading manifest\";\n                        case \"downloaded_module\":\n                            return \"[2/3] Downloaded \".concat(message.data.name, \" (\").concat(message.data.progress, \"/\").concat(message.data.total, \")\");\n                        case \"starting\":\n                            return \"[3/3] Starting\";\n                    }\n                    return null;\n                });\n            } else if (message.type === \"shell/progress\" && !isReady) {\n                if (!totalDependencies && message.data.state === \"downloaded_module\") {\n                    setTotalDependencies(message.data.totalPending);\n                }\n                if (totalDependencies !== undefined) {\n                    setLoadingMessage(mapProgressMessage(message.data, totalDependencies));\n                }\n            }\n            if (message.type === \"done\" && message.compilatonError === false) {\n                setLoadingMessage(null);\n                setIsReady(true);\n                clearTimeout(timer);\n            }\n        }, clientId);\n        return function() {\n            if (timer) {\n                clearTimeout(timer);\n            }\n            unsubscribe();\n        };\n    }, [\n        clientId,\n        isReady,\n        totalDependencies,\n        timeout\n    ]);\n    return loadingMessage;\n};\nvar MAX_MESSAGE_COUNT$1 = 400 * 2;\nvar useSandpackShellStdout = function(_a) {\n    var clientId = _a.clientId, _b = _a.maxMessageCount, maxMessageCount = _b === void 0 ? MAX_MESSAGE_COUNT$1 : _b;\n    _a.resetOnPreviewRestart;\n    var _d = react__WEBPACK_IMPORTED_MODULE_1__.useState([]), logs = _d[0], setLogs = _d[1];\n    var listen = useSandpack().listen;\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function() {\n        var unsubscribe = listen(function(message) {\n            if (message.type === \"start\") {\n                setLogs([]);\n            } else if (message.type === \"stdout\" && message.payload.data && Boolean(message.payload.data.trim())) {\n                setLogs(function(prev) {\n                    var messages = __spreadArray(__spreadArray([], prev, true), [\n                        {\n                            data: message.payload.data,\n                            id: generateRandomId()\n                        }\n                    ], false);\n                    while(messages.length > maxMessageCount){\n                        messages.shift();\n                    }\n                    return messages;\n                });\n            }\n        }, clientId);\n        return unsubscribe;\n    }, [\n        maxMessageCount,\n        clientId\n    ]);\n    return {\n        logs: logs,\n        reset: function() {\n            return setLogs([]);\n        }\n    };\n};\nvar mapBundlerErrors = function(originalMessage) {\n    var errorMessage = originalMessage.replace(\"[sandpack-client]: \", \"\");\n    if (/process.exit/.test(errorMessage)) {\n        var exitCode = errorMessage.match(/process.exit\\((\\d+)\\)/);\n        if (!exitCode) return errorMessage;\n        // Crash\n        if (Number(exitCode[1]) === 0) {\n            return \"Server is not running, would you like to start it again?\";\n        }\n        return \"Server has crashed with status code \".concat(exitCode[1], \", would you like to restart the server?\");\n    }\n    return errorMessage;\n};\nvar ErrorOverlay = function(props) {\n    var children = props.children, className = props.className, otherProps = __rest(props, [\n        \"children\",\n        \"className\"\n    ]);\n    var errorMessage = useErrorMessage();\n    var restart = useSandpackShell().restart;\n    var classNames = useClassNames();\n    var _a = useSandpack().sandpack, runSandpack = _a.runSandpack, teamId = _a.teamId;\n    var dispatch = useSandpack().dispatch;\n    if (!errorMessage && !children) {\n        return null;\n    }\n    var isSandpackBundlerError = errorMessage === null || errorMessage === void 0 ? void 0 : errorMessage.startsWith(\"[sandpack-client]\");\n    var privateDependencyError = errorMessage === null || errorMessage === void 0 ? void 0 : errorMessage.includes(\"NPM_REGISTRY_UNAUTHENTICATED_REQUEST\");\n    var onSignIn = function() {\n        if (teamId) {\n            dispatch({\n                type: \"sign-in\",\n                teamId: teamId\n            });\n        }\n    };\n    if (privateDependencyError) {\n        return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", __assign({\n            className: classNames(\"overlay\", [\n                classNames(\"error\"),\n                absoluteClassName,\n                errorBundlerClassName,\n                className\n            ])\n        }, props, {\n            children: [\n                (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", {\n                    className: classNames(\"error-message\", [\n                        errorMessageClassName\n                    ]),\n                    children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"strong\", {\n                        children: \"Unable to fetch required dependency.\"\n                    })\n                }),\n                (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                    className: classNames(\"error-message\", [\n                        errorMessageClassName\n                    ]),\n                    children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"p\", {\n                        children: [\n                            \"Authentication required. Please sign in to your account (make sure to allow pop-ups to this page) and try again. If the issue persists, contact\",\n                            \" \",\n                            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"a\", {\n                                href: \"mailto:hello@codesandbox.io?subject=Sandpack Timeout Error\",\n                                children: \"support\"\n                            }),\n                            \" \",\n                            \"for further assistance.\"\n                        ]\n                    })\n                }),\n                (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                    children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"button\", {\n                        className: classNames(\"button\", [\n                            buttonClassName,\n                            iconStandaloneClassName,\n                            roundedButtonClassName\n                        ]),\n                        onClick: onSignIn,\n                        children: [\n                            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(SignInIcon, {}),\n                            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n                                children: \"Sign in\"\n                            })\n                        ]\n                    })\n                })\n            ]\n        }));\n    }\n    if (isSandpackBundlerError && errorMessage) {\n        return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", __assign({\n            className: classNames(\"overlay\", [\n                classNames(\"error\"),\n                absoluteClassName,\n                errorBundlerClassName,\n                className\n            ])\n        }, otherProps, {\n            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n                className: classNames(\"error-message\", [\n                    errorMessageClassName\n                ]),\n                children: [\n                    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", {\n                        className: classNames(\"error-title\", [\n                            css({\n                                fontWeight: \"bold\"\n                            })\n                        ]),\n                        children: \"Couldn't connect to server\"\n                    }),\n                    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", {\n                        children: mapBundlerErrors(errorMessage)\n                    }),\n                    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"button\", {\n                            className: classNames(\"button\", [\n                                classNames(\"icon-standalone\"),\n                                buttonClassName,\n                                iconStandaloneClassName,\n                                roundedButtonClassName\n                            ]),\n                            onClick: function() {\n                                restart();\n                                runSandpack();\n                            },\n                            title: \"Restart script\",\n                            type: \"button\",\n                            children: [\n                                (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(RestartIcon, {}),\n                                \" \",\n                                (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n                                    children: \"Restart\"\n                                })\n                            ]\n                        })\n                    })\n                ]\n            })\n        }));\n    }\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", __assign({\n        className: classNames(\"overlay\", [\n            classNames(\"error\"),\n            absoluteClassName,\n            errorClassName({\n                solidBg: true\n            }),\n            className\n        ]),\n        translate: \"no\"\n    }, otherProps, {\n        children: [\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", {\n                className: classNames(\"error-message\", [\n                    errorMessageClassName\n                ]),\n                children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"strong\", {\n                    children: \"Something went wrong\"\n                })\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", {\n                className: classNames(\"error-message\", [\n                    errorMessageClassName({\n                        errorCode: true\n                    })\n                ]),\n                children: errorMessage || children\n            })\n        ]\n    }));\n};\n/**\n * Stole from https://github.com/nteract/ansi-to-react/blob/master/src/index.ts\n */ /**\n * Converts ANSI strings into JSON output.\n * @name ansiToJSON\n * @function\n * @param {String} input The input string.\n * @param {boolean} use_classes If `true`, HTML classes will be appended\n *                              to the HTML output.\n * @return {Array} The parsed input.\n */ function ansiToJSON(input, use_classes) {\n    if (use_classes === void 0) {\n        use_classes = false;\n    }\n    input = (0,escape_carriage__WEBPACK_IMPORTED_MODULE_5__.escapeCarriageReturn)(fixBackspace(input));\n    return anser__WEBPACK_IMPORTED_MODULE_4__.ansiToJson(input, {\n        json: true,\n        remove_empty: true,\n        use_classes: use_classes\n    });\n}\n/**\n * Create a class string.\n * @name createClass\n * @function\n * @param {AnserJsonEntry} bundle\n * @return {String} class name(s)\n */ function createClass(bundle) {\n    var classNames = \"\";\n    if (bundle.bg) {\n        classNames += \"\".concat(bundle.bg, \"-bg \");\n    }\n    if (bundle.fg) {\n        classNames += \"\".concat(bundle.fg, \"-fg \");\n    }\n    if (bundle.decoration) {\n        classNames += \"ansi-\".concat(bundle.decoration, \" \");\n    }\n    if (classNames === \"\") {\n        return null;\n    }\n    classNames = classNames.substring(0, classNames.length - 1);\n    return classNames;\n}\n/**\n * Create the style attribute.\n * @name createStyle\n * @function\n * @param {AnserJsonEntry} bundle\n * @return {Object} returns the style object\n */ function createStyle(bundle) {\n    var style = {};\n    if (bundle.bg) {\n        style.backgroundColor = \"rgb(\".concat(bundle.bg, \")\");\n    }\n    if (bundle.fg) {\n        style.color = \"rgb(\".concat(bundle.fg, \")\");\n    }\n    switch(bundle.decoration){\n        case \"bold\":\n            style.fontWeight = \"bold\";\n            break;\n        case \"dim\":\n            style.opacity = \"0.5\";\n            break;\n        case \"italic\":\n            style.fontStyle = \"italic\";\n            break;\n        case \"hidden\":\n            style.visibility = \"hidden\";\n            break;\n        case \"strikethrough\":\n            style.textDecoration = \"line-through\";\n            break;\n        case \"underline\":\n            style.textDecoration = \"underline\";\n            break;\n        case \"blink\":\n            style.textDecoration = \"blink\";\n            break;\n    }\n    return style;\n}\n/**\n * Converts an Anser bundle into a React Node.\n * @param linkify whether links should be converting into clickable anchor tags.\n * @param useClasses should render the span with a class instead of style.\n * @param bundle Anser output.\n * @param key\n */ function convertBundleIntoReact(linkify, useClasses, bundle, key) {\n    var style = useClasses ? null : createStyle(bundle);\n    var className = useClasses ? createClass(bundle) : null;\n    if (!linkify) {\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"span\", {\n            style: style,\n            key: key,\n            className: className\n        }, bundle.content);\n    }\n    var content = [];\n    var linkRegex = /(\\s|^)(https?:\\/\\/(?:www\\.|(?!www))[^\\s.]+\\.[^\\s]{2,}|www\\.[^\\s]+\\.[^\\s]{2,})/g;\n    var index = 0;\n    var match;\n    while((match = linkRegex.exec(bundle.content)) !== null){\n        var pre = match[1], url = match[2];\n        var startIndex = match.index + pre.length;\n        if (startIndex > index) {\n            content.push(bundle.content.substring(index, startIndex));\n        }\n        // Make sure the href we generate from the link is fully qualified. We assume http\n        // if it starts with a www because many sites don't support https\n        var href = url.startsWith(\"www.\") ? \"http://\".concat(url) : url;\n        content.push(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"a\", {\n            key: index,\n            href: href,\n            target: \"_blank\"\n        }, \"\".concat(url)));\n        index = linkRegex.lastIndex;\n    }\n    if (index < bundle.content.length) {\n        content.push(bundle.content.substring(index));\n    }\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"span\", {\n        style: style,\n        key: key,\n        className: className\n    }, content);\n}\nfunction Ansi(props) {\n    var className = props.className, useClasses = props.useClasses, children = props.children, linkify = props.linkify;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"code\", {\n        className: className\n    }, ansiToJSON(children !== null && children !== void 0 ? children : \"\", useClasses !== null && useClasses !== void 0 ? useClasses : false).map(convertBundleIntoReact.bind(null, linkify !== null && linkify !== void 0 ? linkify : false, useClasses !== null && useClasses !== void 0 ? useClasses : false)));\n}\n// This is copied from the Jupyter Classic source code\n// notebook/static/base/js/utils.js to handle \\b in a way\n// that is **compatible with Jupyter classic**.   One can\n// argue that this behavior is questionable:\n//   https://stackoverflow.com/questions/55440152/multiple-b-doesnt-work-as-expected-in-jupyter#\nfunction fixBackspace(txt) {\n    var tmp = txt;\n    do {\n        txt = tmp;\n        // Cancel out anything-but-newline followed by backspace\n        // eslint-disable-next-line no-control-regex\n        tmp = txt.replace(/[^\\n]\\x08/gm, \"\");\n    }while (tmp.length < txt.length);\n    return txt;\n}\nvar StdoutList = function(_a) {\n    var data = _a.data;\n    var classNames = useClassNames();\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n        children: data.map(function(_a) {\n            var data = _a.data, id = _a.id;\n            return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                className: classNames(\"console-item\", [\n                    consoleItemClassName$1\n                ]),\n                children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Ansi, {\n                    children: data\n                })\n            }, id);\n        })\n    });\n};\nvar consoleItemClassName$1 = css({\n    width: \"100%\",\n    padding: \"$space$3 $space$2\",\n    fontSize: \".85em\",\n    position: \"relative\",\n    whiteSpace: \"pre\",\n    \"&:not(:first-child):after\": {\n        content: \"\",\n        position: \"absolute\",\n        top: 0,\n        left: 0,\n        right: 0,\n        height: 1,\n        background: \"$colors$surface3\"\n    }\n});\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nvar getParameters = function(parameters) {\n    return lz_string__WEBPACK_IMPORTED_MODULE_6__.compressToBase64(JSON.stringify(parameters)).replace(/\\+/g, \"-\") // Convert '+' to '-'\n    .replace(/\\//g, \"_\") // Convert '/' to '_'\n    .replace(/=+$/, \"\");\n}; /* Remove ending '='*/ \nvar CSB_URL = \"https://codesandbox.io/api/v1/sandboxes/define\";\nvar getFileParameters = function(files, environment) {\n    var normalizedFiles = Object.keys(files).reduce(function(prev, next) {\n        var _a;\n        var fileName = next.replace(\"/\", \"\");\n        var value = {\n            content: files[next].code,\n            isBinary: false\n        };\n        return __assign(__assign({}, prev), (_a = {}, _a[fileName] = value, _a));\n    }, {});\n    return getParameters(__assign({\n        files: normalizedFiles\n    }, environment ? {\n        template: environment\n    } : null));\n};\nvar UnstyledOpenInCodeSandboxButton = function(props) {\n    var sandpack = useSandpack().sandpack;\n    if (sandpack.exportOptions) {\n        return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ExportToWorkspaceButton, __assign({\n            state: sandpack\n        }, props));\n    }\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(RegularExportButton, __assign({\n        state: sandpack\n    }, props));\n};\nvar ExportToWorkspaceButton = function(_a) {\n    var children = _a.children, state = _a.state, props = __rest(_a, [\n        \"children\",\n        \"state\"\n    ]);\n    var submit = function() {\n        return __awaiter(void 0, void 0, void 0, function() {\n            var normalizedFiles, response, data;\n            var _a;\n            return __generator(this, function(_b) {\n                switch(_b.label){\n                    case 0:\n                        if (!((_a = state.exportOptions) === null || _a === void 0 ? void 0 : _a.apiToken)) {\n                            throw new Error(\"Missing `apiToken` property\");\n                        }\n                        normalizedFiles = Object.keys(state.files).reduce(function(prev, next) {\n                            var _a;\n                            var fileName = next.replace(\"/\", \"\");\n                            return __assign(__assign({}, prev), (_a = {}, _a[fileName] = state.files[next], _a));\n                        }, {});\n                        return [\n                            4 /*yield*/ ,\n                            fetch(\"https://api.codesandbox.io/sandbox\", {\n                                method: \"POST\",\n                                body: JSON.stringify({\n                                    template: state.environment,\n                                    files: normalizedFiles,\n                                    privacy: state.exportOptions.privacy === \"public\" ? 0 : 2\n                                }),\n                                headers: {\n                                    Authorization: \"Bearer \".concat(state.exportOptions.apiToken),\n                                    \"Content-Type\": \"application/json\",\n                                    \"X-CSB-API-Version\": \"2023-07-01\"\n                                }\n                            })\n                        ];\n                    case 1:\n                        response = _b.sent();\n                        return [\n                            4 /*yield*/ ,\n                            response.json()\n                        ];\n                    case 2:\n                        data = _b.sent();\n                        window.open(\"https://codesandbox.io/p/sandbox/\".concat(data.data.alias, \"?file=/\").concat(state.activeFile, \"&utm-source=storybook-addon\"), \"_blank\");\n                        return [\n                            2 /*return*/ \n                        ];\n                }\n            });\n        });\n    };\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"button\", __assign({\n        onClick: submit,\n        title: \"Export to workspace in CodeSandbox\",\n        type: \"button\"\n    }, props, {\n        children: children\n    }));\n};\nvar RegularExportButton = function(_a) {\n    var _b, _c, _d;\n    var children = _a.children, state = _a.state, props = __rest(_a, [\n        \"children\",\n        \"state\"\n    ]);\n    var formRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(null);\n    var _e = react__WEBPACK_IMPORTED_MODULE_1__.useState(), paramsValues = _e[0], setParamsValues = _e[1];\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function debounce() {\n        var timer = setTimeout(function() {\n            var params = getFileParameters(state.files, state.environment);\n            var searchParams = new URLSearchParams({\n                parameters: params,\n                query: new URLSearchParams({\n                    file: state.activeFile,\n                    utm_medium: \"sandpack\"\n                }).toString()\n            });\n            setParamsValues(searchParams);\n        }, 600);\n        return function() {\n            clearTimeout(timer);\n        };\n    }, [\n        state.activeFile,\n        state.environment,\n        state.files\n    ]);\n    /**\n     * This is a safe limit to avoid too long requests (401),\n     * as all parameters are attached in the URL\n     */ if (((_d = (_c = (_b = paramsValues === null || paramsValues === void 0 ? void 0 : paramsValues.get) === null || _b === void 0 ? void 0 : _b.call(paramsValues, \"parameters\")) === null || _c === void 0 ? void 0 : _c.length) !== null && _d !== void 0 ? _d : 0) > 1500) {\n        return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"button\", __assign({\n            onClick: function() {\n                var _a;\n                return (_a = formRef.current) === null || _a === void 0 ? void 0 : _a.submit();\n            },\n            title: \"Open in CodeSandbox\",\n            type: \"button\"\n        }, props, {\n            children: [\n                (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"form\", {\n                    ref: formRef,\n                    action: CSB_URL,\n                    method: \"POST\",\n                    style: {\n                        visibility: \"hidden\"\n                    },\n                    target: \"_blank\",\n                    children: [\n                        (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"input\", {\n                            name: \"environment\",\n                            type: \"hidden\",\n                            value: state.environment === \"node\" ? \"server\" : state.environment\n                        }),\n                        Array.from(paramsValues, function(_a) {\n                            var key = _a[0], value = _a[1];\n                            return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"input\", {\n                                name: key,\n                                type: \"hidden\",\n                                value: value\n                            }, key);\n                        })\n                    ]\n                }),\n                children\n            ]\n        }));\n    }\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"a\", __assign({\n        href: \"\".concat(CSB_URL, \"?\").concat(paramsValues === null || paramsValues === void 0 ? void 0 : paramsValues.toString(), \"&environment=\").concat(state.environment === \"node\" ? \"server\" : state.environment),\n        rel: \"noreferrer noopener\",\n        target: \"_blank\",\n        title: \"Open in CodeSandbox\"\n    }, props, {\n        children: children\n    }));\n};\nvar OpenInCodeSandboxButton = function() {\n    var classNames = useClassNames();\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(UnstyledOpenInCodeSandboxButton, {\n        className: classNames(\"button\", [\n            classNames(\"icon-standalone\"),\n            buttonClassName,\n            iconStandaloneClassName,\n            roundedButtonClassName\n        ]),\n        children: [\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ExportIcon, {}),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n                children: \"Open Sandbox\"\n            })\n        ]\n    });\n};\nvar _a$3;\nvar cubeClassName = css({\n    transform: \"translate(-4px, 9px) scale(0.13, 0.13)\",\n    \"*\": {\n        position: \"absolute\",\n        width: \"96px\",\n        height: \"96px\"\n    }\n});\nvar wrapperClassName$2 = css((_a$3 = {\n    position: \"absolute\",\n    right: \"$space$2\",\n    bottom: \"$space$2\",\n    zIndex: \"$top\",\n    width: \"32px\",\n    height: \"32px\",\n    borderRadius: \"$border$radius\"\n}, _a$3[\".\".concat(cubeClassName)] = {\n    display: \"flex\"\n}, _a$3[\".sp-button.\".concat(buttonClassName)] = {\n    display: \"none\"\n}, _a$3[\"&:hover .sp-button.\".concat(buttonClassName)] = {\n    display: \"flex\"\n}, _a$3[\"&:hover .sp-button.\".concat(buttonClassName, \" > span\")] = {\n    display: \"none\"\n}, _a$3[\"&:hover .\".concat(cubeClassName)] = {\n    display: \"none\"\n}, _a$3));\nvar cubeRotate = keyframes({\n    \"0%\": {\n        transform: \"rotateX(-25.5deg) rotateY(45deg)\"\n    },\n    \"100%\": {\n        transform: \"rotateX(-25.5deg) rotateY(405deg)\"\n    }\n});\nvar sidesClassNames = css({\n    animation: \"\".concat(cubeRotate, \" 1s linear infinite\"),\n    animationFillMode: \"forwards\",\n    transformStyle: \"preserve-3d\",\n    transform: \"rotateX(-25.5deg) rotateY(45deg)\",\n    \"*\": {\n        border: \"10px solid $colors$clickable\",\n        borderRadius: \"8px\",\n        background: \"$colors$surface1\"\n    },\n    \".top\": {\n        transform: \"rotateX(90deg) translateZ(44px)\",\n        transformOrigin: \"50% 50%\"\n    },\n    \".bottom\": {\n        transform: \"rotateX(-90deg) translateZ(44px)\",\n        transformOrigin: \"50% 50%\"\n    },\n    \".front\": {\n        transform: \"rotateY(0deg) translateZ(44px)\",\n        transformOrigin: \"50% 50%\"\n    },\n    \".back\": {\n        transform: \"rotateY(-180deg) translateZ(44px)\",\n        transformOrigin: \"50% 50%\"\n    },\n    \".left\": {\n        transform: \"rotateY(-90deg) translateZ(44px)\",\n        transformOrigin: \"50% 50%\"\n    },\n    \".right\": {\n        transform: \"rotateY(90deg) translateZ(44px)\",\n        transformOrigin: \"50% 50%\"\n    }\n});\nvar Loading = function(_a) {\n    var className = _a.className, showOpenInCodeSandbox = _a.showOpenInCodeSandbox, props = __rest(_a, [\n        \"className\",\n        \"showOpenInCodeSandbox\"\n    ]);\n    var classNames = useClassNames();\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", __assign({\n        className: classNames(\"cube-wrapper\", [\n            wrapperClassName$2,\n            className\n        ]),\n        title: \"Open in CodeSandbox\"\n    }, props, {\n        children: [\n            showOpenInCodeSandbox && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(OpenInCodeSandboxButton, {}),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                className: classNames(\"cube\", [\n                    cubeClassName\n                ]),\n                children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n                    className: classNames(\"sides\", [\n                        sidesClassNames\n                    ]),\n                    children: [\n                        (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                            className: \"top\"\n                        }),\n                        (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                            className: \"right\"\n                        }),\n                        (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                            className: \"bottom\"\n                        }),\n                        (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                            className: \"left\"\n                        }),\n                        (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                            className: \"front\"\n                        }),\n                        (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                            className: \"back\"\n                        })\n                    ]\n                })\n            })\n        ]\n    }));\n};\nvar loadingClassName = css({\n    backgroundColor: \"$colors$surface1\"\n});\nvar LoadingOverlay = function(_a) {\n    var clientId = _a.clientId, loading = _a.loading, className = _a.className, style = _a.style, showOpenInCodeSandbox = _a.showOpenInCodeSandbox, props = __rest(_a, [\n        \"clientId\",\n        \"loading\",\n        \"className\",\n        \"style\",\n        \"showOpenInCodeSandbox\"\n    ]);\n    var classNames = useClassNames();\n    var _b = useSandpack().sandpack, runSandpack = _b.runSandpack, environment = _b.environment;\n    var _c = react__WEBPACK_IMPORTED_MODULE_1__.useState(false), shouldShowStdout = _c[0], setShouldShowStdout = _c[1];\n    var loadingOverlayState = useLoadingOverlayState(clientId, loading);\n    var progressMessage = useSandpackPreviewProgress({\n        clientId: clientId\n    });\n    var stdoutData = useSandpackShellStdout({\n        clientId: clientId\n    }).logs;\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function() {\n        var timer;\n        if (progressMessage === null || progressMessage === void 0 ? void 0 : progressMessage.includes(\"Running\")) {\n            timer = setTimeout(function() {\n                setShouldShowStdout(true);\n            }, 3000);\n        }\n        return function() {\n            if (timer) {\n                clearTimeout(timer);\n            }\n        };\n    }, [\n        progressMessage\n    ]);\n    if (loadingOverlayState === \"HIDDEN\") {\n        return null;\n    }\n    if (loadingOverlayState === \"TIMEOUT\") {\n        return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", __assign({\n            className: classNames(\"overlay\", [\n                classNames(\"error\"),\n                absoluteClassName,\n                errorClassName,\n                errorBundlerClassName,\n                className\n            ])\n        }, props, {\n            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n                className: classNames(\"error-message\", [\n                    errorMessageClassName\n                ]),\n                children: [\n                    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", {\n                        className: classNames(\"error-title\", [\n                            css({\n                                fontWeight: \"bold\"\n                            })\n                        ]),\n                        children: \"Couldn't connect to server\"\n                    }),\n                    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                        className: classNames(\"error-message\", [\n                            errorMessageClassName\n                        ]),\n                        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"p\", {\n                            children: [\n                                \"This means sandpack cannot connect to the runtime or your network is having some issues. Please check the network tab in your browser and try again. If the problem persists, report it via\",\n                                \" \",\n                                (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"a\", {\n                                    href: \"mailto:hello@codesandbox.io?subject=Sandpack Timeout Error\",\n                                    children: \"email\"\n                                }),\n                                \" \",\n                                \"or submit an issue on\",\n                                \" \",\n                                (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"a\", {\n                                    href: \"https://github.com/codesandbox/sandpack/issues\",\n                                    rel: \"noreferrer noopener\",\n                                    target: \"_blank\",\n                                    children: \"GitHub.\"\n                                })\n                            ]\n                        })\n                    }),\n                    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"p\", {\n                        className: classNames(\"error-message\", [\n                            errorMessageClassName({\n                                errorCode: true\n                            })\n                        ]),\n                        children: [\n                            \"ENV: \",\n                            environment,\n                            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"br\", {}),\n                            \"ERROR: TIME_OUT\"\n                        ]\n                    }),\n                    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"button\", {\n                            className: classNames(\"button\", [\n                                classNames(\"icon-standalone\"),\n                                buttonClassName,\n                                iconStandaloneClassName,\n                                roundedButtonClassName\n                            ]),\n                            onClick: runSandpack,\n                            title: \"Restart script\",\n                            type: \"button\",\n                            children: [\n                                (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(RestartIcon, {}),\n                                \" \",\n                                (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n                                    children: \"Try again\"\n                                })\n                            ]\n                        })\n                    })\n                ]\n            })\n        }));\n    }\n    var stillLoading = loadingOverlayState === \"LOADING\" || loadingOverlayState === \"PRE_FADING\";\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n        children: [\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", __assign({\n                className: classNames(\"overlay\", [\n                    classNames(\"loading\"),\n                    absoluteClassName,\n                    loadingClassName,\n                    className\n                ]),\n                style: __assign(__assign({}, style), {\n                    opacity: stillLoading ? 1 : 0,\n                    transition: \"opacity \".concat(FADE_ANIMATION_DURATION, \"ms ease-out\")\n                })\n            }, props, {\n                children: [\n                    shouldShowStdout && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                        className: stdoutPreview.toString(),\n                        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(StdoutList, {\n                            data: stdoutData\n                        })\n                    }),\n                    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Loading, {\n                        showOpenInCodeSandbox: showOpenInCodeSandbox\n                    })\n                ]\n            })),\n            progressMessage && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                className: progressClassName$1.toString(),\n                children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", {\n                    children: progressMessage\n                })\n            })\n        ]\n    });\n};\nvar stdoutPreview = css({\n    position: \"absolute\",\n    left: 0,\n    right: 0,\n    bottom: \"$space$8\",\n    overflow: \"auto\",\n    opacity: 0.5,\n    overflowX: \"hidden\"\n});\nvar progressClassName$1 = css({\n    position: \"absolute\",\n    left: \"$space$5\",\n    bottom: \"$space$4\",\n    zIndex: \"$top\",\n    color: \"$colors$clickable\",\n    animation: \"\".concat(fadeIn, \" 150ms ease\"),\n    fontFamily: \"$font$mono\",\n    fontSize: \".8em\",\n    width: \"75%\",\n    p: {\n        whiteSpace: \"nowrap\",\n        margin: 0,\n        textOverflow: \"ellipsis\",\n        overflow: \"hidden\"\n    }\n});\nvar DependenciesProgress = function(_a) {\n    var clientId = _a.clientId;\n    var progressMessage = useSandpackPreviewProgress({\n        timeout: 3000,\n        clientId: clientId\n    });\n    if (!progressMessage) {\n        return null;\n    }\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n        className: progressClassName.toString(),\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", {\n            children: progressMessage\n        })\n    });\n};\nvar progressClassName = css({\n    position: \"absolute\",\n    left: \"$space$5\",\n    bottom: \"$space$4\",\n    zIndex: \"$top\",\n    color: \"$colors$clickable\",\n    animation: \"\".concat(fadeIn, \" 150ms ease\"),\n    fontFamily: \"$font$mono\",\n    fontSize: \".8em\",\n    width: \"75%\",\n    p: {\n        whiteSpace: \"nowrap\",\n        margin: 0,\n        textOverflow: \"ellipsis\",\n        overflow: \"hidden\"\n    }\n});\nvar explorerClassName = css({\n    borderRadius: \"0\",\n    width: \"100%\",\n    padding: 0,\n    marginBottom: \"$space$2\",\n    span: {\n        textOverflow: \"ellipsis\",\n        whiteSpace: \"nowrap\",\n        overflow: \"hidden\"\n    },\n    svg: {\n        marginRight: \"$space$1\"\n    }\n});\nvar File = function(_a) {\n    var selectFile = _a.selectFile, path = _a.path, active = _a.active, onClick = _a.onClick, depth = _a.depth, isDirOpen = _a.isDirOpen;\n    var classNames = useClassNames();\n    var onClickButton = function(event) {\n        if (selectFile) {\n            selectFile(path);\n        }\n        onClick === null || onClick === void 0 ? void 0 : onClick(event);\n    };\n    var fileName = path.split(\"/\").filter(Boolean).pop();\n    var getIcon = function() {\n        if (selectFile) return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(FileIcon, {});\n        return isDirOpen ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(DirectoryIconOpen, {}) : (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(DirectoryIconClosed, {});\n    };\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"button\", {\n        className: classNames(\"button\", [\n            classNames(\"explorer\"),\n            buttonClassName,\n            explorerClassName\n        ]),\n        \"data-active\": active,\n        onClick: onClickButton,\n        style: {\n            paddingLeft: 18 * depth + \"px\"\n        },\n        title: fileName,\n        type: \"button\",\n        children: [\n            getIcon(),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n                children: fileName\n            })\n        ]\n    });\n};\nvar Directory = function(_a) {\n    var prefixedPath = _a.prefixedPath, files = _a.files, selectFile = _a.selectFile, activeFile = _a.activeFile, depth = _a.depth, autoHiddenFiles = _a.autoHiddenFiles, visibleFiles = _a.visibleFiles, initialCollapsedFolder = _a.initialCollapsedFolder;\n    var _b = react__WEBPACK_IMPORTED_MODULE_1__.useState(!(initialCollapsedFolder === null || initialCollapsedFolder === void 0 ? void 0 : initialCollapsedFolder.includes(prefixedPath))), open = _b[0], setOpen = _b[1];\n    var toggle = function() {\n        return setOpen(function(prev) {\n            return !prev;\n        });\n    };\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n        children: [\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(File, {\n                depth: depth,\n                isDirOpen: open,\n                onClick: toggle,\n                path: prefixedPath + \"/\"\n            }),\n            open && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ModuleList, {\n                activeFile: activeFile,\n                autoHiddenFiles: autoHiddenFiles,\n                depth: depth + 1,\n                files: files,\n                initialCollapsedFolder: initialCollapsedFolder,\n                prefixedPath: prefixedPath,\n                selectFile: selectFile,\n                visibleFiles: visibleFiles\n            })\n        ]\n    }, prefixedPath);\n};\nvar fromPropsToModules = function(_a) {\n    var autoHiddenFiles = _a.autoHiddenFiles, visibleFiles = _a.visibleFiles, files = _a.files, prefixedPath = _a.prefixedPath;\n    var hasVisibleFilesOption = visibleFiles.length > 0;\n    /**\n     * When visibleFiles or activeFile are set, the hidden and active flags on the files prop are ignored.\n     */ var filterByHiddenProperty = autoHiddenFiles && !hasVisibleFilesOption;\n    var filterByVisibleFilesOption = autoHiddenFiles && !!hasVisibleFilesOption;\n    var fileListWithoutPrefix = Object.keys(files).filter(function(filePath) {\n        var _a;\n        var isValidatedPath = filePath.startsWith(prefixedPath);\n        if (filterByVisibleFilesOption) {\n            return isValidatedPath && visibleFiles.includes(filePath);\n        }\n        if (filterByHiddenProperty) {\n            return isValidatedPath && !((_a = files[filePath]) === null || _a === void 0 ? void 0 : _a.hidden);\n        }\n        return isValidatedPath;\n    }).map(function(file) {\n        return file.substring(prefixedPath.length);\n    });\n    var directories = new Set(fileListWithoutPrefix.filter(function(file) {\n        return file.includes(\"/\");\n    }).map(function(file) {\n        return \"\".concat(prefixedPath).concat(file.split(\"/\")[0], \"/\");\n    }));\n    var modules = fileListWithoutPrefix.filter(function(file) {\n        return !file.includes(\"/\");\n    }).map(function(file) {\n        return \"\".concat(prefixedPath).concat(file);\n    });\n    return {\n        directories: Array.from(directories),\n        modules: modules\n    };\n};\nvar ModuleList = function(_a) {\n    var _b = _a.depth, depth = _b === void 0 ? 0 : _b, activeFile = _a.activeFile, selectFile = _a.selectFile, prefixedPath = _a.prefixedPath, files = _a.files, autoHiddenFiles = _a.autoHiddenFiles, visibleFiles = _a.visibleFiles, initialCollapsedFolder = _a.initialCollapsedFolder;\n    var _c = fromPropsToModules({\n        visibleFiles: visibleFiles,\n        autoHiddenFiles: autoHiddenFiles,\n        prefixedPath: prefixedPath,\n        files: files\n    }), directories = _c.directories, modules = _c.modules;\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n        children: [\n            directories.map(function(dir) {\n                return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Directory, {\n                    activeFile: activeFile,\n                    autoHiddenFiles: autoHiddenFiles,\n                    depth: depth,\n                    files: files,\n                    initialCollapsedFolder: initialCollapsedFolder,\n                    prefixedPath: dir,\n                    selectFile: selectFile,\n                    visibleFiles: visibleFiles\n                }, dir);\n            }),\n            modules.map(function(file) {\n                return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(File, {\n                    active: activeFile === file,\n                    depth: depth,\n                    path: file,\n                    selectFile: selectFile\n                }, file);\n            })\n        ]\n    });\n};\nvar fileExplorerClassName = css({\n    padding: \"$space$3\",\n    overflow: \"auto\",\n    height: \"100%\"\n});\nvar SandpackFileExplorer = function(_a) {\n    var className = _a.className, _b = _a.autoHiddenFiles, autoHiddenFiles = _b === void 0 ? false : _b, _c = _a.initialCollapsedFolder, initialCollapsedFolder = _c === void 0 ? [] : _c, props = __rest(_a, [\n        \"className\",\n        \"autoHiddenFiles\",\n        \"initialCollapsedFolder\"\n    ]);\n    var _d = useSandpack(), _e = _d.sandpack, status = _e.status, updateFile = _e.updateFile, deleteFile = _e.deleteFile, activeFile = _e.activeFile, files = _e.files, openFile = _e.openFile, visibleFilesFromProps = _e.visibleFilesFromProps, listen = _d.listen;\n    var classNames = useClassNames();\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function watchFSFilesChanges() {\n        if (status !== \"running\") return;\n        var unsubscribe = listen(function(message) {\n            if (message.type === \"fs/change\") {\n                updateFile(message.path, message.content, false);\n            }\n            if (message.type === \"fs/remove\") {\n                deleteFile(message.path, false);\n            }\n        });\n        return unsubscribe;\n    }, [\n        status\n    ]);\n    var orderedFiles = Object.keys(files).sort().reduce(function(obj, key) {\n        obj[key] = files[key];\n        return obj;\n    }, {});\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", __assign({\n        className: classNames(\"file-explorer\", [\n            stackClassName,\n            className\n        ])\n    }, props, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n            className: classNames(\"file-explorer-list\", [\n                fileExplorerClassName\n            ]),\n            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ModuleList, {\n                activeFile: activeFile,\n                autoHiddenFiles: autoHiddenFiles,\n                files: orderedFiles,\n                initialCollapsedFolder: initialCollapsedFolder,\n                prefixedPath: \"/\",\n                selectFile: openFile,\n                visibleFiles: visibleFilesFromProps\n            })\n        })\n    }));\n};\nvar splitUrl = function(url) {\n    var match = url.match(/(https?:\\/\\/.*?)\\//);\n    if (match && match[1]) {\n        return [\n            match[1],\n            url.replace(match[1], \"\")\n        ];\n    }\n    return [\n        url,\n        \"/\"\n    ];\n};\nvar navigatorClassName = css({\n    display: \"flex\",\n    alignItems: \"center\",\n    height: \"$layout$headerHeight\",\n    borderBottom: \"1px solid $colors$surface2\",\n    padding: \"$space$3 $space$2\",\n    background: \"$colors$surface1\"\n});\nvar inputClassName = css({\n    backgroundColor: \"$colors$surface2\",\n    color: \"$colors$clickable\",\n    padding: \"$space$1 $space$3\",\n    borderRadius: \"99999px\",\n    border: \"1px solid $colors$surface2\",\n    height: \"24px\",\n    lineHeight: \"24px\",\n    fontSize: \"inherit\",\n    outline: \"none\",\n    flex: 1,\n    marginLeft: \"$space$4\",\n    width: \"0\",\n    transition: \"background $transitions$default\",\n    \"&:hover\": {\n        backgroundColor: \"$colors$surface3\"\n    },\n    \"&:focus\": {\n        backgroundColor: \"$surface1\",\n        border: \"1px solid $colors$accent\",\n        color: \"$colors$base\"\n    }\n});\nvar Navigator = function(_a) {\n    var _b;\n    var clientId = _a.clientId, onURLChange = _a.onURLChange, className = _a.className, startRoute = _a.startRoute, props = __rest(_a, [\n        \"clientId\",\n        \"onURLChange\",\n        \"className\",\n        \"startRoute\"\n    ]);\n    var _c = react__WEBPACK_IMPORTED_MODULE_1__.useState(\"\"), baseUrl = _c[0], setBaseUrl = _c[1];\n    var _d = useSandpack(), sandpack = _d.sandpack, dispatch = _d.dispatch, listen = _d.listen;\n    var _e = react__WEBPACK_IMPORTED_MODULE_1__.useState((_b = startRoute !== null && startRoute !== void 0 ? startRoute : sandpack.startRoute) !== null && _b !== void 0 ? _b : \"/\"), relativeUrl = _e[0], setRelativeUrl = _e[1];\n    var _f = react__WEBPACK_IMPORTED_MODULE_1__.useState(false), backEnabled = _f[0], setBackEnabled = _f[1];\n    var _g = react__WEBPACK_IMPORTED_MODULE_1__.useState(false), forwardEnabled = _g[0], setForwardEnabled = _g[1];\n    var classNames = useClassNames();\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function() {\n        var unsub = listen(function(message) {\n            if (message.type === \"urlchange\") {\n                var url = message.url, back = message.back, forward = message.forward;\n                var _a = splitUrl(url), newBaseUrl = _a[0], newRelativeUrl = _a[1];\n                setBaseUrl(newBaseUrl);\n                setRelativeUrl(newRelativeUrl);\n                setBackEnabled(back);\n                setForwardEnabled(forward);\n            }\n        }, clientId);\n        return function() {\n            return unsub();\n        };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n    var handleInputChange = function(e) {\n        var path = e.target.value.startsWith(\"/\") ? e.target.value : \"/\".concat(e.target.value);\n        setRelativeUrl(path);\n    };\n    var handleKeyDown = function(e) {\n        if (e.code === \"Enter\") {\n            //  Enter\n            e.preventDefault();\n            e.stopPropagation();\n            if (typeof onURLChange === \"function\") {\n                onURLChange(baseUrl + e.currentTarget.value);\n            }\n        }\n    };\n    var handleRefresh = function() {\n        dispatch({\n            type: \"refresh\"\n        });\n    };\n    var handleBack = function() {\n        dispatch({\n            type: \"urlback\"\n        });\n    };\n    var handleForward = function() {\n        dispatch({\n            type: \"urlforward\"\n        });\n    };\n    var buttonsClassNames = classNames(\"button\", [\n        classNames(\"icon\"),\n        buttonClassName,\n        iconClassName,\n        css({\n            minWidth: \"$space$6\",\n            justifyContent: \"center\"\n        })\n    ]);\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", __assign({\n        className: classNames(\"navigator\", [\n            navigatorClassName,\n            className\n        ])\n    }, props, {\n        children: [\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"button\", {\n                \"aria-label\": \"Go back one page\",\n                className: buttonsClassNames,\n                disabled: !backEnabled,\n                onClick: handleBack,\n                type: \"button\",\n                children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(BackwardIcon, {})\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"button\", {\n                \"aria-label\": \"Go forward one page\",\n                className: buttonsClassNames,\n                disabled: !forwardEnabled,\n                onClick: handleForward,\n                type: \"button\",\n                children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ForwardIcon, {})\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"button\", {\n                \"aria-label\": \"Refresh page\",\n                className: buttonsClassNames,\n                onClick: handleRefresh,\n                type: \"button\",\n                children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(RefreshIcon, {})\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"input\", {\n                \"aria-label\": \"Current Sandpack URL\",\n                className: classNames(\"input\", [\n                    inputClassName\n                ]),\n                name: \"Current Sandpack URL\",\n                onChange: handleInputChange,\n                onKeyDown: handleKeyDown,\n                type: \"text\",\n                value: relativeUrl\n            })\n        ]\n    }));\n};\nvar _a$2;\nvar previewClassName = css((_a$2 = {\n    flex: 1,\n    display: \"flex\",\n    flexDirection: \"column\",\n    background: \"white\",\n    overflow: \"auto\",\n    position: \"relative\"\n}, _a$2[\".\".concat(THEME_PREFIX, \"-bridge-frame\")] = {\n    border: 0,\n    position: \"absolute\",\n    left: \"$space$2\",\n    bottom: \"$space$2\",\n    zIndex: \"$top\",\n    height: 12,\n    width: \"30%\",\n    mixBlendMode: \"multiply\",\n    pointerEvents: \"none\"\n}, _a$2));\nvar previewIframe = css({\n    border: \"0\",\n    outline: \"0\",\n    width: \"100%\",\n    height: \"100%\",\n    minHeight: \"160px\",\n    maxHeight: \"2000px\",\n    flex: 1\n});\nvar previewActionsClassName$1 = css({\n    display: \"flex\",\n    position: \"absolute\",\n    bottom: \"$space$2\",\n    right: \"$space$2\",\n    zIndex: \"$overlay\",\n    gap: \"$space$2\"\n});\nvar SandpackPreview = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(function(_a, ref) {\n    var _b = _a.showNavigator, showNavigator = _b === void 0 ? false : _b, _c = _a.showRefreshButton, showRefreshButton = _c === void 0 ? true : _c, _d = _a.showOpenInCodeSandbox, showOpenInCodeSandbox = _d === void 0 ? true : _d, _e = _a.showSandpackErrorOverlay, showSandpackErrorOverlay = _e === void 0 ? true : _e;\n    _a.showOpenNewtab;\n    var _g = _a.showRestartButton, showRestartButton = _g === void 0 ? true : _g, _h = _a.actionsChildren, actionsChildren = _h === void 0 ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {}) : _h, children = _a.children, className = _a.className, _j = _a.startRoute, startRoute = _j === void 0 ? \"/\" : _j, props = __rest(_a, [\n        \"showNavigator\",\n        \"showRefreshButton\",\n        \"showOpenInCodeSandbox\",\n        \"showSandpackErrorOverlay\",\n        \"showOpenNewtab\",\n        \"showRestartButton\",\n        \"actionsChildren\",\n        \"children\",\n        \"className\",\n        \"startRoute\"\n    ]);\n    var _k = useSandpackClient({\n        startRoute: startRoute\n    }), sandpack = _k.sandpack, listen = _k.listen, iframe = _k.iframe, getClient = _k.getClient, clientId = _k.clientId, dispatch = _k.dispatch;\n    var _l = react__WEBPACK_IMPORTED_MODULE_1__.useState(null), iframeComputedHeight = _l[0], setComputedAutoHeight = _l[1];\n    var status = sandpack.status;\n    var refresh = useSandpackNavigation(clientId).refresh;\n    var restart = useSandpackShell(clientId).restart;\n    var classNames = useClassNames();\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function() {\n        var unsubscribe = listen(function(message) {\n            if (message.type === \"resize\") {\n                setComputedAutoHeight(message.height);\n            }\n        });\n        return unsubscribe;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n    react__WEBPACK_IMPORTED_MODULE_1__.useImperativeHandle(ref, function() {\n        return {\n            clientId: clientId,\n            getClient: getClient\n        };\n    }, [\n        getClient,\n        clientId\n    ]);\n    var handleNewURL = function(newUrl) {\n        if (!iframe.current) {\n            return;\n        }\n        iframe.current.src = newUrl;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    };\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(SandpackStack, __assign({\n        className: classNames(\"preview\", [\n            className\n        ])\n    }, props, {\n        children: [\n            showNavigator && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Navigator, {\n                clientId: clientId,\n                onURLChange: handleNewURL,\n                startRoute: startRoute\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n                className: classNames(\"preview-container\", [\n                    previewClassName\n                ]),\n                children: [\n                    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"iframe\", {\n                        ref: iframe,\n                        className: classNames(\"preview-iframe\", [\n                            previewIframe\n                        ]),\n                        style: {\n                            // set height based on the content only in auto mode\n                            // and when the computed height was returned by the bundler\n                            height: iframeComputedHeight ? iframeComputedHeight : undefined\n                        },\n                        title: \"Sandpack Preview\"\n                    }),\n                    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n                        className: classNames(\"preview-actions\", [\n                            previewActionsClassName$1\n                        ]),\n                        children: [\n                            actionsChildren,\n                            showRestartButton && sandpack.environment === \"node\" && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(RoundedButton, {\n                                onClick: restart,\n                                children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(RestartIcon, {})\n                            }),\n                            !showNavigator && showRefreshButton && status === \"running\" && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(RoundedButton, {\n                                onClick: refresh,\n                                children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(RefreshIcon, {})\n                            }),\n                            sandpack.teamId && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"button\", {\n                                className: classNames(\"button\", [\n                                    classNames(\"icon-standalone\"),\n                                    buttonClassName,\n                                    iconStandaloneClassName,\n                                    roundedButtonClassName\n                                ]),\n                                onClick: function() {\n                                    return dispatch({\n                                        type: \"sign-out\"\n                                    });\n                                },\n                                title: \"Sign out\",\n                                type: \"button\",\n                                children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(SignOutIcon, {})\n                            }),\n                            showOpenInCodeSandbox && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(OpenInCodeSandboxButton, {})\n                        ]\n                    }),\n                    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(LoadingOverlay, {\n                        clientId: clientId,\n                        showOpenInCodeSandbox: showOpenInCodeSandbox\n                    }),\n                    showSandpackErrorOverlay && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ErrorOverlay, {}),\n                    children\n                ]\n            })\n        ]\n    }));\n});\nvar _a$1;\nvar transpiledCodeClassName = css((_a$1 = {\n    display: \"flex\",\n    flexDirection: \"column\",\n    width: \"100%\",\n    position: \"relative\",\n    overflow: \"auto\",\n    minHeight: \"160px\",\n    flex: 1\n}, _a$1[\".\".concat(THEME_PREFIX, \"-stack\")] = {\n    height: \"100%\"\n}, _a$1));\nvar SandpackTranspiledCode = function(_a) {\n    var className = _a.className, props = __rest(_a, [\n        \"className\"\n    ]);\n    var sandpack = useSandpack().sandpack;\n    var transpiledCode = useTranspiledCode();\n    var classNames = useClassNames();\n    var hiddenIframeRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(null);\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function() {\n        var hiddenIframe = hiddenIframeRef.current;\n        if (hiddenIframe) {\n            sandpack.registerBundler(hiddenIframe, \"hidden\");\n        }\n        return function() {\n            sandpack.unregisterBundler(\"hidden\");\n        };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", __assign({\n        className: classNames(\"transpiled-code\", [\n            stackClassName,\n            transpiledCodeClassName,\n            className\n        ])\n    }, props, {\n        children: [\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(SandpackCodeViewer, __assign({\n                code: transpiledCode !== null && transpiledCode !== void 0 ? transpiledCode : \"\",\n                initMode: sandpack.initMode\n            }, props)),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"iframe\", {\n                ref: hiddenIframeRef,\n                style: {\n                    display: \"none\"\n                },\n                title: \"transpiled sandpack code\"\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ErrorOverlay, {}),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(LoadingOverlay, {\n                clientId: \"hidden\",\n                showOpenInCodeSandbox: false\n            })\n        ]\n    }));\n};\nvar wrapperClassName$1 = css({\n    justifyContent: \"space-between\",\n    borderBottom: \"1px solid $colors$surface2\",\n    padding: \"0 $space$2\",\n    fontFamily: \"$font$mono\",\n    height: \"$layout$headerHeight\",\n    minHeight: \"$layout$headerHeight\",\n    overflowX: \"auto\",\n    whiteSpace: \"nowrap\"\n});\nvar flexClassName$1 = css({\n    display: \"flex\",\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    gap: \"$space$2\"\n});\nvar Header$1 = function(_a) {\n    var status = _a.status, suiteOnly = _a.suiteOnly, setSuiteOnly = _a.setSuiteOnly, setVerbose = _a.setVerbose, verbose = _a.verbose, watchMode = _a.watchMode, setWatchMode = _a.setWatchMode, showSuitesOnly = _a.showSuitesOnly, showWatchButton = _a.showWatchButton, showVerboseButton = _a.showVerboseButton, hideTestsAndSupressLogs = _a.hideTestsAndSupressLogs;\n    var classNames = useClassNames();\n    var buttonsClassName = classNames(\"test-header-button\", [\n        buttonClassName,\n        roundedButtonClassName,\n        css({\n            padding: \"$space$1 $space$3\"\n        })\n    ]);\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n        className: classNames(\"test-header\", [\n            wrapperClassName$1,\n            flexClassName$1\n        ]),\n        children: [\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                className: classNames(\"test-header-wrapper\", [\n                    flexClassName$1\n                ]),\n                children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"p\", {\n                    className: classNames(\"test-header-title\", [\n                        css({\n                            lineHeight: 1,\n                            margin: 0,\n                            color: \"$colors$base\",\n                            fontSize: \"$font$size\",\n                            display: \"flex\",\n                            alignItems: \"center\",\n                            gap: \"$space$2\"\n                        })\n                    ]),\n                    children: [\n                        (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ConsoleIcon, {}),\n                        \"Tests\"\n                    ]\n                })\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n                className: classNames(\"test-header-actions\", [\n                    flexClassName$1\n                ]),\n                children: [\n                    showSuitesOnly && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"button\", {\n                        className: buttonsClassName,\n                        \"data-active\": suiteOnly,\n                        disabled: status === \"initialising\",\n                        onClick: setSuiteOnly,\n                        type: \"button\",\n                        children: \"Suite only\"\n                    }),\n                    showVerboseButton && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"button\", {\n                        className: buttonsClassName,\n                        \"data-active\": verbose,\n                        disabled: status === \"initialising\" || hideTestsAndSupressLogs,\n                        onClick: setVerbose,\n                        type: \"button\",\n                        children: \"Verbose\"\n                    }),\n                    showWatchButton && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"button\", {\n                        className: buttonsClassName,\n                        \"data-active\": watchMode,\n                        disabled: status === \"initialising\",\n                        onClick: setWatchMode,\n                        type: \"button\",\n                        children: \"Watch\"\n                    })\n                ]\n            })\n        ]\n    });\n};\nvar RunButton = function(_a) {\n    var onClick = _a.onClick;\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(RoundedButton, {\n        onClick: onClick,\n        title: \"Run tests\",\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(RunIcon, {})\n    });\n};\nvar setTestTheme = function(isDark) {\n    return {\n        \"--test-pass\": isDark ? \"#18df16\" : \"#15c213\",\n        \"--test-fail\": isDark ? \"#df162b\" : \"#c21325\",\n        \"--test-skip\": isDark ? \"#eace2b\" : \"#c2a813\",\n        \"--test-run\": isDark ? \"#eace2b\" : \"#c2a813\",\n        \"--test-title\": isDark ? \"#3fbabe\" : \"#256c6f\"\n    };\n};\nvar color = css({\n    variants: {\n        status: {\n            pass: {\n                color: \"var(--test-pass)\"\n            },\n            fail: {\n                color: \"var(--test-fail)\"\n            },\n            skip: {\n                color: \"var(--test-skip)\"\n            },\n            title: {\n                color: \"var(--test-title)\"\n            }\n        }\n    }\n});\nvar passTextClassName = color({\n    status: \"pass\"\n});\nvar failTextClassName = color({\n    status: \"fail\"\n});\nvar skipTextClassName = color({\n    status: \"skip\"\n});\nvar titleTextClassName = color({\n    status: \"title\"\n});\nvar background = css({\n    variants: {\n        status: {\n            pass: {\n                background: \"var(--test-pass)\",\n                color: \"$colors$surface1\"\n            },\n            fail: {\n                background: \"var(--test-fail)\",\n                color: \"$colors$surface1\"\n            },\n            run: {\n                background: \"var(--test-run)\",\n                color: \"$colors$surface1\"\n            }\n        }\n    }\n});\nvar runBackgroundClassName = background({\n    status: \"run\"\n});\nvar passBackgroundClassName = background({\n    status: \"pass\"\n});\nvar failBackgroundClassName = background({\n    status: \"fail\"\n});\nvar testContainerClassName = css({\n    marginLeft: \"$space$4\"\n});\nvar containerClassName$4 = css({\n    marginBottom: \"$space$2\",\n    color: \"$colors$clickable\"\n});\nvar testClassName = css({\n    marginBottom: \"$space$2\",\n    color: \"$colors$hover\"\n});\nvar durationClassName = css({\n    marginLeft: \"$space$2\"\n});\nvar gapRightClassName = css({\n    marginRight: \"$space$2\"\n});\nvar Tests = function(_a) {\n    var tests = _a.tests;\n    _a.style;\n    var classNames = useClassNames();\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n        className: classNames(\"test\", [\n            testContainerClassName\n        ]),\n        children: tests.map(function(test) {\n            return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n                className: classNames(\"test-result\", [\n                    containerClassName$4\n                ]),\n                children: [\n                    test.status === \"pass\" && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n                        className: classNames(\"test-pass-text\", [\n                            passTextClassName,\n                            gapRightClassName\n                        ]),\n                        children: \"✓\"\n                    }),\n                    test.status === \"fail\" && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n                        className: classNames(\"test-fail-text\", [\n                            failTextClassName,\n                            gapRightClassName\n                        ]),\n                        children: \"✕\"\n                    }),\n                    test.status === \"idle\" && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n                        className: classNames(\"test-idle-text\", [\n                            skipTextClassName,\n                            gapRightClassName\n                        ]),\n                        children: \"○\"\n                    }),\n                    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n                        className: classNames(\"test-name-text\", [\n                            testClassName\n                        ]),\n                        children: test.name\n                    }),\n                    test.duration !== undefined && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"span\", {\n                        className: classNames(\"test-duration-text\", [\n                            durationClassName\n                        ]),\n                        children: [\n                            \"(\",\n                            test.duration,\n                            \" ms)\"\n                        ]\n                    })\n                ]\n            }, test.name);\n        })\n    });\n};\nvar getTests = function(block) {\n    var _a;\n    var _b, _c;\n    return (_a = Object.values((_b = block.tests) !== null && _b !== void 0 ? _b : {})).concat.apply(_a, Object.values((_c = block.describes) !== null && _c !== void 0 ? _c : {}).map(getTests));\n};\nvar getFailingTests = function(block) {\n    return getTests(block).filter(function(t) {\n        return t.status === \"fail\";\n    });\n};\nvar getAllTestResults = function(specs) {\n    return specs.map(getSpecTestResults).reduce(function(acc, stats) {\n        return {\n            pass: acc.pass + stats.pass,\n            fail: acc.fail + stats.fail,\n            skip: acc.skip + stats.skip,\n            total: acc.total + stats.total\n        };\n    }, {\n        pass: 0,\n        skip: 0,\n        fail: 0,\n        total: 0\n    });\n};\nvar getSpecTestResults = function(spec) {\n    return getTests(spec).reduce(function(acc, test) {\n        return {\n            pass: test.status === \"pass\" ? acc.pass + 1 : acc.pass,\n            fail: test.status === \"fail\" ? acc.fail + 1 : acc.fail,\n            skip: test.status === \"idle\" || test.status === \"running\" ? acc.skip + 1 : acc.skip,\n            total: acc.total + 1\n        };\n    }, {\n        pass: 0,\n        fail: 0,\n        skip: 0,\n        total: 0\n    });\n};\nvar getAllSuiteResults = function(specs) {\n    return specs.filter(function(spec) {\n        var _a, _b;\n        return Object.values((_a = spec.describes) !== null && _a !== void 0 ? _a : {}).length > 0 || Object.values((_b = spec.tests) !== null && _b !== void 0 ? _b : {}).length > 0;\n    }).map(getSpecTestResults).reduce(function(acc, stats) {\n        return {\n            pass: acc.pass + (stats.fail === 0 ? 1 : 0),\n            fail: acc.fail + (stats.fail > 0 ? 1 : 0),\n            total: acc.total + 1\n        };\n    }, {\n        pass: 0,\n        fail: 0,\n        total: 0\n    });\n};\nvar getDuration = function(specs) {\n    return flatMap(specs, getTests).reduce(function(acc, test) {\n        return acc + (test.duration || 0);\n    }, 0);\n};\nvar isEmpty = function(block) {\n    var _a, _b;\n    return Object.values((_a = block.describes) !== null && _a !== void 0 ? _a : {}).length === 0 && Object.values((_b = block.tests) !== null && _b !== void 0 ? _b : {}).length === 0;\n};\nvar splitTail = function(as) {\n    var lastIndex = as.length - 1;\n    var head = as.slice(0, lastIndex);\n    var tail = as[lastIndex];\n    return [\n        head,\n        tail\n    ];\n};\nvar flatMap = function(as, f) {\n    return as.map(f).reduce(function(acc, next) {\n        return acc.concat(next);\n    }, []);\n};\nvar set = function(path, value) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function(object) {\n        return (0,clean_set__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(object, path, value);\n    };\n};\nvar nameClassName = css({\n    color: \"$colors$hover\",\n    marginBottom: \"$space$2\"\n});\nvar containerClassName$3 = css({\n    marginLeft: \"$space$4\"\n});\nvar Describes = function(_a) {\n    var describes = _a.describes;\n    var classNames = useClassNames();\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n        children: describes.map(function(describe) {\n            var _a, _b;\n            if (isEmpty(describe)) {\n                return null;\n            }\n            var tests = Object.values((_a = describe.tests) !== null && _a !== void 0 ? _a : {});\n            var describes = Object.values((_b = describe.describes) !== null && _b !== void 0 ? _b : {});\n            return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n                className: classNames(\"test-describe\", [\n                    containerClassName$3\n                ]),\n                children: [\n                    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                        className: classNames(\"test-name\", [\n                            nameClassName\n                        ]),\n                        children: describe.name\n                    }),\n                    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Tests, {\n                        tests: tests\n                    }),\n                    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Describes, {\n                        describes: describes\n                    })\n                ]\n            }, describe.name);\n        })\n    });\n};\nvar containerClassName$2 = css({\n    color: \"$colors$hover\",\n    fontSize: \"$font$size\",\n    padding: \"$space$2\",\n    whiteSpace: \"pre-wrap\"\n});\nvar FormattedError = function(_a) {\n    var error = _a.error, path = _a.path;\n    var classNames = useClassNames();\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n        className: classNames(\"test-error\", [\n            containerClassName$2\n        ]),\n        dangerouslySetInnerHTML: {\n            __html: formatDiffMessage(error, path)\n        }\n    });\n};\nvar escapeHtml = function(unsafe) {\n    return unsafe.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\").replace(/\"/g, \"&quot;\").replace(/'/g, \"&#039;\");\n};\nvar formatDiffMessage = function(error, path) {\n    var finalMessage = \"\";\n    if (error.matcherResult) {\n        finalMessage = \"<span>\".concat(escapeHtml(error.message).replace(/(expected)/m, '<span class=\"'.concat(passTextClassName, '\">$1</span>')).replace(/(received)/m, '<span class=\"'.concat(failTextClassName, '\">$1</span>')).replace(/(Difference:)/m, \"<span>$1</span>\").replace(/(Expected:)(.*)/m, '<span>$1</span><span class=\"'.concat(passTextClassName, '\">$2</span>')).replace(/(Received:)(.*)/m, '<span>$1</span><span class=\"'.concat(failTextClassName, '\">$2</span>')).replace(/^(-.*)/gm, '<span class=\"'.concat(failTextClassName, '\">$1</span>')).replace(/^(\\+.*)/gm, '<span class=\"'.concat(passTextClassName, '\">$1</span>')), \"</span>\");\n    } else {\n        finalMessage = escapeHtml(error.message);\n    }\n    if (error.mappedErrors && error.mappedErrors[0] && error.mappedErrors[0].fileName.endsWith(path) && error.mappedErrors[0]._originalScriptCode) {\n        var mappedError = error.mappedErrors[0];\n        var _originalScriptCode = mappedError._originalScriptCode || [];\n        var widestNumber_1 = Math.max.apply(Math, _originalScriptCode.map(function(code) {\n            return (code.lineNumber + \"\").length;\n        })) + 2;\n        var margin_1 = Array.from({\n            length: widestNumber_1\n        }).map(function() {\n            return \" \";\n        });\n        finalMessage += \"<br />\";\n        finalMessage += \"<br />\";\n        finalMessage += \"<div>\";\n        _originalScriptCode.filter(function(s) {\n            return s.content.trim();\n        }).forEach(function(code) {\n            var currentLineMargin = (code.lineNumber + \"\").length;\n            var newMargin = __spreadArray([], margin_1, true);\n            newMargin.length -= currentLineMargin;\n            if (code.highlight) {\n                newMargin.length -= 2;\n            }\n            var toBeIndex = code.content.indexOf(\".to\");\n            var toBeMargin = Array.from({\n                length: margin_1.length + toBeIndex - (widestNumber_1 - 1)\n            }, function() {\n                return \" \";\n            });\n            var content = escapeHtml(code.content).replace(/(describe|test|it)(\\()(&#039;|&quot;|`)(.*)(&#039;|&quot;|`)/m, '<span>$1$2$3</span><span class=\"'.concat(titleTextClassName, '\">$4</span><span>$5</span>')).replace(/(expect\\()(.*)(\\)\\..*)(to[\\w\\d]*)(\\()(.*)(\\))/m, '<span>$1</span><span class=\"'.concat(failTextClassName, '\">$2</span><span>$3</span><span style=\"text-decoration: underline; font-weight: 900\">$4</span><span>$5</span><span class=\"').concat(passTextClassName, '\">$6</span><span>$7</span>'));\n            finalMessage += \"<div \".concat(code.highlight ? 'style=\"font-weight:200;\"' : \"\", \">\") + (code.highlight ? '<span class=\"'.concat(failTextClassName, '\">></span> ') : \"\") + newMargin.join(\"\") + escapeHtml(\"\" + code.lineNumber) + \" | \" + content + \"</div>\" + (code.highlight ? \"<div>\" + margin_1.join(\"\") + \" | \" + toBeMargin.join(\"\") + '<span class=\"'.concat(failTextClassName, '\">^</span>') + \"</div>\" : \"\");\n        });\n        finalMessage += \"</div>\";\n    }\n    return finalMessage.replace(/(?:\\r\\n|\\r|\\n)/g, \"<br />\");\n};\nvar fileContainer = css({\n    display: \"flex\",\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    marginBottom: \"$space$2\"\n});\nvar gapBottomClassName$1 = css({\n    marginBottom: \"$space$2\"\n});\nvar failTestClassName = css({\n    fontWeight: \"bold\"\n});\nvar labelClassName$1 = css({\n    borderRadius: \"calc($border$radius / 2)\"\n});\nvar specLabelClassName = css({\n    padding: \"$space$1 $space$2\",\n    fontFamily: \"$font$mono\",\n    textTransform: \"uppercase\",\n    marginRight: \"$space$2\"\n});\nvar filePathButtonClassName = css({\n    fontFamily: \"$font$mono\",\n    cursor: \"pointer\",\n    display: \"inline-block\"\n});\nvar filePathClassName = css({\n    color: \"$colors$clickable\",\n    textDecorationStyle: \"dotted\",\n    textDecorationLine: \"underline\"\n});\nvar fileNameClassName = css({\n    color: \"$colors$hover\",\n    fontWeight: \"bold\",\n    textDecorationStyle: \"dotted\",\n    textDecorationLine: \"underline\"\n});\nvar Specs = function(_a) {\n    var specs = _a.specs, openSpec = _a.openSpec, status = _a.status, verbose = _a.verbose, hideTestsAndSupressLogs = _a.hideTestsAndSupressLogs;\n    var classNames = useClassNames();\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n        children: specs.map(function(spec) {\n            if (spec.error) {\n                return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n                    className: classNames(\"test-spec\", [\n                        gapBottomClassName$1\n                    ]),\n                    children: [\n                        (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(SpecLabel, {\n                            className: classNames(\"test-spec-error\", [\n                                labelClassName$1,\n                                failBackgroundClassName\n                            ]),\n                            children: \"Error\"\n                        }),\n                        (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(FilePath, {\n                            onClick: function() {\n                                return openSpec(spec.name);\n                            },\n                            path: spec.name\n                        }),\n                        (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(FormattedError, {\n                            error: spec.error,\n                            path: spec.name\n                        })\n                    ]\n                }, spec.name);\n            }\n            if (isEmpty(spec)) {\n                return null;\n            }\n            var tests = Object.values(spec.tests);\n            var describes = Object.values(spec.describes);\n            var stats = getSpecTestResults(spec);\n            return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n                className: classNames(\"test-spec-name\", [\n                    gapBottomClassName$1\n                ]),\n                children: [\n                    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n                        className: classNames(\"test-spec-name-container\", [\n                            fileContainer\n                        ]),\n                        children: [\n                            status === \"complete\" ? stats.fail > 0 ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(SpecLabel, {\n                                className: classNames(\"test-spec-complete\", [\n                                    labelClassName$1,\n                                    failBackgroundClassName\n                                ]),\n                                children: \"Fail\"\n                            }) : (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(SpecLabel, {\n                                className: classNames(\"test-spec-pass\", [\n                                    labelClassName$1,\n                                    passBackgroundClassName\n                                ]),\n                                children: \"Pass\"\n                            }) : (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(SpecLabel, {\n                                className: classNames(\"test-spec-run\", [\n                                    labelClassName$1,\n                                    runBackgroundClassName\n                                ]),\n                                children: \"Run\"\n                            }),\n                            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(FilePath, {\n                                onClick: function() {\n                                    if (!hideTestsAndSupressLogs) {\n                                        openSpec(spec.name);\n                                    }\n                                },\n                                path: spec.name\n                            })\n                        ]\n                    }),\n                    verbose && !hideTestsAndSupressLogs && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Tests, {\n                        tests: tests\n                    }),\n                    verbose && !hideTestsAndSupressLogs && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Describes, {\n                        describes: describes\n                    }),\n                    !hideTestsAndSupressLogs && getFailingTests(spec).map(function(test) {\n                        return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n                            className: classNames(\"test-spec-error\", [\n                                gapBottomClassName$1\n                            ]),\n                            children: [\n                                (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n                                    className: classNames(\"test-spec-error-text\", [\n                                        failTestClassName,\n                                        failTextClassName\n                                    ]),\n                                    children: [\n                                        \"● \",\n                                        test.blocks.join(\" › \"),\n                                        \" › \",\n                                        test.name\n                                    ]\n                                }),\n                                test.errors.map(function(e) {\n                                    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(FormattedError, {\n                                        error: e,\n                                        path: test.path\n                                    }, \"failing-\".concat(test.name, \"-error\"));\n                                })\n                            ]\n                        }, \"failing-\".concat(test.name));\n                    })\n                ]\n            }, spec.name);\n        })\n    });\n};\nvar SpecLabel = function(_a) {\n    var children = _a.children, className = _a.className;\n    var classNames = useClassNames();\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n        className: classNames(\"test-spec-label\", [\n            specLabelClassName,\n            className\n        ]),\n        children: children\n    });\n};\nvar FilePath = function(_a) {\n    var onClick = _a.onClick, path = _a.path;\n    var parts = path.split(\"/\");\n    var basePath = parts.slice(0, parts.length - 1).join(\"/\") + \"/\";\n    var fileName = parts[parts.length - 1];\n    var classNames = useClassNames();\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"button\", {\n        className: classNames(\"test-filename\", [\n            buttonClassName,\n            filePathButtonClassName\n        ]),\n        onClick: onClick,\n        type: \"button\",\n        children: [\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n                className: classNames(\"test-filename-base\", [\n                    filePathClassName\n                ]),\n                children: basePath\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n                className: classNames(\"test-filename-file\", [\n                    fileNameClassName\n                ]),\n                children: fileName\n            })\n        ]\n    });\n};\nvar gapBottomClassName = css({\n    marginBottom: \"$space$2\"\n});\nvar labelClassName = css({\n    fontWeight: \"bold\",\n    color: \"$colors$hover\",\n    whiteSpace: \"pre-wrap\"\n});\nvar containerClassName$1 = css({\n    fontWeight: \"bold\",\n    color: \"$colors$clickable\"\n});\nvar Summary = function(_a) {\n    var suites = _a.suites, tests = _a.tests, duration = _a.duration;\n    var widestLabel = \"Test suites: \";\n    var withMargin = function(label) {\n        var difference = widestLabel.length - label.length;\n        var margin = Array.from({\n            length: difference\n        }, function() {\n            return \" \";\n        }).join(\"\");\n        return label + margin;\n    };\n    var classNames = useClassNames();\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n        className: classNames(\"test-summary\", [\n            containerClassName$1\n        ]),\n        children: [\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n                className: classNames(\"test-summary\", [\n                    gapBottomClassName\n                ]),\n                children: [\n                    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n                        className: classNames(\"test-summary-suites-label\", [\n                            labelClassName\n                        ]),\n                        children: widestLabel\n                    }),\n                    suites.fail > 0 && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"span\", {\n                        className: classNames(\"test-summary-suites-fail\", [\n                            failTextClassName\n                        ]),\n                        children: [\n                            suites.fail,\n                            \" failed,\",\n                            \" \"\n                        ]\n                    }),\n                    suites.pass > 0 && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"span\", {\n                        className: classNames(\"test-summary-suites-pass\", [\n                            passTextClassName\n                        ]),\n                        children: [\n                            suites.pass,\n                            \" passed,\",\n                            \" \"\n                        ]\n                    }),\n                    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"span\", {\n                        children: [\n                            suites.total,\n                            \" total\"\n                        ]\n                    })\n                ]\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n                className: classNames(\"test-summary\", [\n                    gapBottomClassName\n                ]),\n                children: [\n                    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n                        className: classNames(\"test-summary-label\", [\n                            labelClassName\n                        ]),\n                        children: withMargin(\"Tests:\")\n                    }),\n                    tests.fail > 0 && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"span\", {\n                        className: classNames(\"test-summary-fail\", [\n                            failTextClassName\n                        ]),\n                        children: [\n                            tests.fail,\n                            \" failed,\",\n                            \" \"\n                        ]\n                    }),\n                    tests.skip > 0 && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"span\", {\n                        className: classNames(\"test-summary-skip\", [\n                            skipTextClassName\n                        ]),\n                        children: [\n                            tests.skip,\n                            \" skipped,\",\n                            \" \"\n                        ]\n                    }),\n                    tests.pass > 0 && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"span\", {\n                        className: classNames(\"test-summary-pass\", [\n                            passTextClassName\n                        ]),\n                        children: [\n                            tests.pass,\n                            \" passed,\",\n                            \" \"\n                        ]\n                    }),\n                    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"span\", {\n                        children: [\n                            tests.total,\n                            \" total\"\n                        ]\n                    })\n                ]\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n                className: classNames(\"test-summary-curation\", [\n                    labelClassName\n                ]),\n                children: [\n                    withMargin(\"Time:\"),\n                    duration / 1000,\n                    \"s\"\n                ]\n            })\n        ]\n    });\n};\nvar previewActionsClassName = css({\n    display: \"flex\",\n    position: \"absolute\",\n    bottom: \"$space$2\",\n    right: \"$space$2\",\n    zIndex: \"$overlay\",\n    \"> *\": {\n        marginLeft: \"$space$2\"\n    }\n});\nvar INITIAL_STATE = {\n    specs: {},\n    status: \"initialising\",\n    verbose: false,\n    watchMode: true,\n    suiteOnly: false,\n    specsCount: 0\n};\nvar SandpackTests = function(_a) {\n    var _b = _a.verbose, verbose = _b === void 0 ? false : _b, _c = _a.watchMode, watchMode = _c === void 0 ? true : _c, style = _a.style, className = _a.className, onComplete = _a.onComplete, actionsChildren = _a.actionsChildren, _d = _a.showVerboseButton, showVerboseButton = _d === void 0 ? true : _d, _e = _a.showWatchButton, showWatchButton = _e === void 0 ? true : _e, _f = _a.hideTestsAndSupressLogs, hideTestsAndSupressLogs = _f === void 0 ? false : _f, props = __rest(_a, [\n        \"verbose\",\n        \"watchMode\",\n        \"style\",\n        \"className\",\n        \"onComplete\",\n        \"actionsChildren\",\n        \"showVerboseButton\",\n        \"showWatchButton\",\n        \"hideTestsAndSupressLogs\"\n    ]);\n    var theme = useSandpackTheme();\n    var _g = useSandpackClient(), getClient = _g.getClient, iframe = _g.iframe, listen = _g.listen, sandpack = _g.sandpack;\n    var _h = react__WEBPACK_IMPORTED_MODULE_1__.useState(__assign(__assign({}, INITIAL_STATE), {\n        verbose: verbose,\n        watchMode: watchMode\n    })), state = _h[0], setState = _h[1];\n    var runAllTests = react__WEBPACK_IMPORTED_MODULE_1__.useCallback(function() {\n        setState(function(oldState) {\n            return __assign(__assign({}, oldState), {\n                status: \"running\",\n                specs: {}\n            });\n        });\n        var client = getClient();\n        if (client) {\n            client.dispatch({\n                type: \"run-all-tests\"\n            });\n        }\n    }, [\n        getClient\n    ]);\n    var runSpec = react__WEBPACK_IMPORTED_MODULE_1__.useCallback(function() {\n        setState(function(oldState) {\n            return __assign(__assign({}, oldState), {\n                status: \"running\",\n                specs: {}\n            });\n        });\n        var client = getClient();\n        if (client) {\n            client.dispatch({\n                type: \"run-tests\",\n                path: sandpack.activeFile\n            });\n        }\n    }, [\n        getClient,\n        sandpack.activeFile\n    ]);\n    var testFileRegex = /.*\\.(test|spec)\\.[tj]sx?$/;\n    var isSpecOpen = sandpack.activeFile.match(testFileRegex) !== null;\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function() {\n        var currentDescribeBlocks = [];\n        var currentSpec = \"\";\n        var unsubscribe = listen(function(data) {\n            // Note: short-circuit if message isn't for the currently active spec when `suiteOnly` is true\n            if (state.suiteOnly && (\"path\" in data && data.path !== sandpack.activeFile || \"test\" in data && \"path\" in data.test && data.test.path !== sandpack.activeFile)) {\n                return;\n            }\n            if (data.type === \"action\" && data.action === \"clear-errors\" && data.source === \"jest\") {\n                currentSpec = data.path;\n                return;\n            }\n            if (data.type === \"test\") {\n                if (data.event === \"initialize_tests\") {\n                    currentDescribeBlocks = [];\n                    currentSpec = \"\";\n                    if (state.watchMode) {\n                        return runAllTests();\n                    } else {\n                        return setState(function(oldState) {\n                            return __assign(__assign({}, oldState), {\n                                status: \"idle\",\n                                specs: {}\n                            });\n                        });\n                    }\n                }\n                if (data.event === \"test_count\") {\n                    return setState(function(oldState) {\n                        return __assign(__assign({}, oldState), {\n                            specsCount: data.count\n                        });\n                    });\n                }\n                if (data.event === \"total_test_start\") {\n                    currentDescribeBlocks = [];\n                    return setState(function(oldState) {\n                        return __assign(__assign({}, oldState), {\n                            status: \"running\"\n                        });\n                    });\n                }\n                if (data.event === \"total_test_end\") {\n                    return setState(function(oldState) {\n                        if (onComplete !== undefined) {\n                            onComplete(oldState.specs);\n                        }\n                        return __assign(__assign({}, oldState), {\n                            status: \"complete\"\n                        });\n                    });\n                }\n                if (data.event === \"add_file\") {\n                    return setState(set([\n                        \"specs\",\n                        data.path\n                    ], {\n                        describes: {},\n                        tests: {},\n                        name: data.path\n                    }));\n                }\n                if (data.event === \"remove_file\") {\n                    return setState(function(oldState) {\n                        var specs = Object.entries(oldState.specs).reduce(function(acc, _a) {\n                            var _b;\n                            var key = _a[0], value = _a[1];\n                            if (key === data.path) {\n                                return acc;\n                            } else {\n                                return __assign(__assign({}, acc), (_b = {}, _b[key] = value, _b));\n                            }\n                        }, {});\n                        return __assign(__assign({}, oldState), {\n                            specs: specs\n                        });\n                    });\n                }\n                if (data.event === \"file_error\") {\n                    return setState(set([\n                        \"specs\",\n                        data.path,\n                        \"error\"\n                    ], data.error));\n                }\n                if (data.event === \"describe_start\") {\n                    currentDescribeBlocks.push(data.blockName);\n                    var _a = splitTail(currentDescribeBlocks), describePath = _a[0], currentDescribe = _a[1];\n                    var spec = currentSpec;\n                    if (currentDescribe === undefined) {\n                        return;\n                    }\n                    return setState(set(__spreadArray(__spreadArray([\n                        \"specs\",\n                        spec,\n                        \"describes\"\n                    ], flatMap(describePath, function(name) {\n                        return [\n                            name,\n                            \"describes\"\n                        ];\n                    }), true), [\n                        currentDescribe\n                    ], false), {\n                        name: data.blockName,\n                        tests: {},\n                        describes: {}\n                    }));\n                }\n                if (data.event === \"describe_end\") {\n                    currentDescribeBlocks.pop();\n                    return;\n                }\n                if (data.event === \"add_test\") {\n                    var _b = splitTail(currentDescribeBlocks), describePath = _b[0], currentDescribe = _b[1];\n                    var test_1 = {\n                        status: \"idle\",\n                        errors: [],\n                        name: data.testName,\n                        blocks: __spreadArray([], currentDescribeBlocks, true),\n                        path: data.path\n                    };\n                    if (currentDescribe === undefined) {\n                        return setState(set([\n                            \"specs\",\n                            data.path,\n                            \"tests\",\n                            data.testName\n                        ], test_1));\n                    } else {\n                        return setState(set(__spreadArray(__spreadArray([\n                            \"specs\",\n                            data.path,\n                            \"describes\"\n                        ], flatMap(describePath, function(name) {\n                            return [\n                                name,\n                                \"describes\"\n                            ];\n                        }), true), [\n                            currentDescribe,\n                            \"tests\",\n                            data.testName\n                        ], false), test_1));\n                    }\n                }\n                if (data.event === \"test_start\") {\n                    var test_2 = data.test;\n                    var _c = splitTail(test_2.blocks), describePath = _c[0], currentDescribe = _c[1];\n                    var startedTest = {\n                        status: \"running\",\n                        name: test_2.name,\n                        blocks: test_2.blocks,\n                        path: test_2.path,\n                        errors: []\n                    };\n                    if (currentDescribe === undefined) {\n                        return setState(set([\n                            \"specs\",\n                            test_2.path,\n                            \"tests\",\n                            test_2.name\n                        ], startedTest));\n                    } else {\n                        return setState(set(__spreadArray(__spreadArray([\n                            \"specs\",\n                            test_2.path,\n                            \"describes\"\n                        ], flatMap(describePath, function(name) {\n                            return [\n                                name,\n                                \"describes\"\n                            ];\n                        }), true), [\n                            currentDescribe,\n                            \"tests\",\n                            test_2.name\n                        ], false), startedTest));\n                    }\n                }\n                if (data.event === \"test_end\") {\n                    var test_3 = data.test;\n                    var _d = splitTail(test_3.blocks), describePath = _d[0], currentDescribe = _d[1];\n                    var endedTest = {\n                        status: test_3.status,\n                        errors: test_3.errors,\n                        duration: test_3.duration,\n                        name: test_3.name,\n                        blocks: test_3.blocks,\n                        path: test_3.path\n                    };\n                    if (currentDescribe === undefined) {\n                        return setState(set([\n                            \"specs\",\n                            test_3.path,\n                            \"tests\",\n                            test_3.name\n                        ], endedTest));\n                    } else {\n                        return setState(set(__spreadArray(__spreadArray([\n                            \"specs\",\n                            test_3.path,\n                            \"describes\"\n                        ], flatMap(describePath, function(name) {\n                            return [\n                                name,\n                                \"describes\"\n                            ];\n                        }), true), [\n                            currentDescribe,\n                            \"tests\",\n                            test_3.name\n                        ], false), endedTest));\n                    }\n                }\n            }\n        });\n        return unsubscribe;\n    }, [\n        state.suiteOnly,\n        state.watchMode,\n        sandpack.activeFile\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function watchMode() {\n        var unsunscribe = listen(function(_a) {\n            var type = _a.type;\n            if (type === \"done\" && state.watchMode) {\n                if (isSpecOpen) {\n                    runSpec();\n                } else {\n                    runAllTests();\n                }\n            }\n        });\n        return unsunscribe;\n    }, [\n        runSpec,\n        runAllTests,\n        state.watchMode,\n        isSpecOpen\n    ]);\n    var openSpec = function(file) {\n        sandpack.setActiveFile(file);\n    };\n    var specs = Object.values(state.specs);\n    var duration = getDuration(specs);\n    var testResults = getAllTestResults(specs);\n    var suiteResults = getAllSuiteResults(specs);\n    var classNames = useClassNames();\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(SandpackStack, __assign({\n        className: classNames(\"tests\", [\n            className\n        ]),\n        style: __assign(__assign({}, setTestTheme(theme.themeMode === \"dark\")), style)\n    }, props, {\n        children: [\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"iframe\", {\n                ref: iframe,\n                style: {\n                    display: \"none\"\n                },\n                title: \"Sandpack Tests\"\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Header$1, {\n                hideTestsAndSupressLogs: hideTestsAndSupressLogs,\n                setSuiteOnly: function() {\n                    return setState(function(s) {\n                        return __assign(__assign({}, s), {\n                            suiteOnly: !s.suiteOnly\n                        });\n                    });\n                },\n                setVerbose: function() {\n                    return setState(function(s) {\n                        return __assign(__assign({}, s), {\n                            verbose: !s.verbose\n                        });\n                    });\n                },\n                setWatchMode: function() {\n                    setState(function(s) {\n                        return __assign(__assign({}, s), {\n                            watchMode: !s.watchMode\n                        });\n                    });\n                },\n                showSuitesOnly: state.specsCount > 1,\n                showVerboseButton: showVerboseButton,\n                showWatchButton: showWatchButton,\n                status: state.status,\n                suiteOnly: state.suiteOnly,\n                verbose: state.verbose,\n                watchMode: state.watchMode\n            }),\n            state.status === \"running\" || state.status === \"initialising\" ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Loading, {\n                showOpenInCodeSandbox: false\n            }) : (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n                className: previewActionsClassName.toString(),\n                children: [\n                    actionsChildren,\n                    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(RunButton, {\n                        onClick: state.suiteOnly ? runSpec : runAllTests\n                    })\n                ]\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                className: containerClassName.toString(),\n                children: specs.length === 0 && state.status === \"complete\" ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n                    className: fileErrorContainerClassName.toString(),\n                    children: [\n                        (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", {\n                            children: \"No test files found.\"\n                        }),\n                        (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"p\", {\n                            children: [\n                                \"Test match:\",\n                                \" \",\n                                (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n                                    className: failTextClassName.toString(),\n                                    children: testFileRegex.toString()\n                                })\n                            ]\n                        })\n                    ]\n                }) : (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n                    children: [\n                        (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Specs, {\n                            hideTestsAndSupressLogs: hideTestsAndSupressLogs,\n                            openSpec: openSpec,\n                            specs: specs,\n                            status: state.status,\n                            verbose: state.verbose\n                        }),\n                        state.status === \"complete\" && testResults.total > 0 && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Summary, {\n                            duration: duration,\n                            suites: suiteResults,\n                            tests: testResults\n                        })\n                    ]\n                })\n            })\n        ]\n    }));\n};\nvar containerClassName = css({\n    padding: \"$space$4\",\n    height: \"100%\",\n    overflow: \"auto\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    position: \"relative\",\n    fontFamily: \"$font$mono\"\n});\nvar fileErrorContainerClassName = css({\n    fontWeight: \"bold\",\n    color: \"$colors$base\"\n});\nvar SYNTAX_ERROR_PATTERN = [\n    \"SyntaxError: \",\n    \"Error in sandbox:\"\n];\nvar CLEAR_LOG = {\n    id: \"random\",\n    method: \"clear\",\n    data: [\n        \"Console was cleared\"\n    ]\n};\nvar TRANSFORMED_TYPE_KEY = \"@t\";\nvar TRANSFORMED_TYPE_KEY_ALTERNATE = \"#@t\";\nvar CIRCULAR_REF_KEY = \"@r\";\nvar MAX_LENGTH_STRING = 10000;\nvar MAX_NEST_LEVEL = 2;\nvar MAX_KEYS = 400;\nvar MAX_MESSAGE_COUNT = MAX_KEYS * 2;\n/* eslint-disable @typescript-eslint/ban-ts-comment */ /* eslint-disable @typescript-eslint/no-empty-function */ /* eslint-disable @typescript-eslint/explicit-function-return-type */ /* eslint-disable @typescript-eslint/no-explicit-any */ // Const\nvar GLOBAL = function getGlobal() {\n    // NOTE: see http://www.ecma-international.org/ecma-262/6.0/index.html#sec-performeval step 10\n    var savedEval = eval;\n    return savedEval(\"this\");\n}();\nvar ARRAY_BUFFER_SUPPORTED = typeof ArrayBuffer === \"function\";\nvar MAP_SUPPORTED = typeof Map === \"function\";\nvar SET_SUPPORTED = typeof Set === \"function\";\nvar Arithmetic;\n(function(Arithmetic) {\n    Arithmetic[Arithmetic[\"infinity\"] = 0] = \"infinity\";\n    Arithmetic[Arithmetic[\"minusInfinity\"] = 1] = \"minusInfinity\";\n    Arithmetic[Arithmetic[\"minusZero\"] = 2] = \"minusZero\";\n})(Arithmetic || (Arithmetic = {}));\nvar transformers = {\n    Arithmetic: function(data) {\n        if (data === Arithmetic.infinity) return Infinity;\n        if (data === Arithmetic.minusInfinity) return -Infinity;\n        if (data === Arithmetic.minusZero) return -0;\n        return data;\n    },\n    HTMLElement: function(data) {\n        var sandbox = document.implementation.createHTMLDocument(\"sandbox\");\n        try {\n            var element = sandbox.createElement(data.tagName);\n            element.innerHTML = data.innerHTML;\n            for(var _i = 0, _a = Object.keys(data.attributes); _i < _a.length; _i++){\n                var attribute = _a[_i];\n                try {\n                    element.setAttribute(attribute, data.attributes[attribute]);\n                } catch (_b) {\n                //\n                }\n            }\n            return element;\n        } catch (e) {\n            return data;\n        }\n    },\n    Function: function(data) {\n        var tempFun = function() {};\n        Object.defineProperty(tempFun, \"toString\", {\n            value: function() {\n                return \"function \".concat(data.name, \"() {\").concat(data.body, \"}\");\n            }\n        });\n        return tempFun;\n    },\n    \"[[NaN]]\": function() {\n        return NaN;\n    },\n    \"[[undefined]]\": function() {\n        return void 0;\n    },\n    \"[[Date]]\": function(val) {\n        var date = new Date();\n        date.setTime(val);\n        return date;\n    },\n    \"[[RegExp]]\": function(val) {\n        return new RegExp(val.src, val.flags);\n    },\n    \"[[Error]]\": function(val) {\n        var Ctor = GLOBAL[val.name] || Error;\n        var err = new Ctor(val.message);\n        err.stack = val.stack;\n        return err;\n    },\n    \"[[ArrayBuffer]]\": function(val) {\n        if (ARRAY_BUFFER_SUPPORTED) {\n            var buffer = new ArrayBuffer(val.length);\n            var view = new Int8Array(buffer);\n            view.set(val);\n            return buffer;\n        }\n        return val;\n    },\n    \"[[TypedArray]]\": function(val) {\n        return typeof GLOBAL[val.ctorName] === \"function\" ? new GLOBAL[val.ctorName](val.arr) : val.arr;\n    },\n    \"[[Map]]\": function(val) {\n        if (MAP_SUPPORTED) {\n            // NOTE: new Map(iterable) is not supported by all browsers\n            var map = new Map();\n            for(var i = 0; i < val.length; i += 2)map.set(val[i], val[i + 1]);\n            return map;\n        }\n        var kvArr = [];\n        // @ts-ignore\n        for(var j = 0; j < val.length; j += 2)kvArr.push([\n            val[i],\n            val[i + 1]\n        ]);\n        return kvArr;\n    },\n    \"[[Set]]\": function(val) {\n        if (SET_SUPPORTED) {\n            // NOTE: new Set(iterable) is not supported by all browsers\n            var set = new Set();\n            for(var i = 0; i < val.length; i++)set.add(val[i]);\n            return set;\n        }\n        return val;\n    }\n};\n/* eslint-disable @typescript-eslint/array-type */ var formatSymbols = function(message) {\n    var _a;\n    if (typeof message === \"string\" || typeof message === \"number\" || message === null) {\n        return message;\n    } else if (Array.isArray(message)) {\n        return message.map(formatSymbols);\n    } else if (typeof message == \"object\" && TRANSFORMED_TYPE_KEY in message) {\n        var type = message[TRANSFORMED_TYPE_KEY];\n        var transform = transformers[type];\n        return transform(message.data);\n    } else if (typeof message == \"object\" && TRANSFORMED_TYPE_KEY_ALTERNATE in message) {\n        var type = message[TRANSFORMED_TYPE_KEY_ALTERNATE];\n        var transform = transformers[type];\n        return transform(message.data);\n    } else if (typeof message == \"object\" && ((_a = message.constructor) === null || _a === void 0 ? void 0 : _a.name) === \"NodeList\") {\n        var NodeList_1 = {};\n        Object.entries(message).forEach(function(_a) {\n            var key = _a[0], value = _a[1];\n            // @ts-ignore\n            NodeList_1[key] = formatSymbols(value);\n        });\n        return NodeList_1;\n    }\n    return message;\n};\nvar arrayToString = function(output, references, level) {\n    var mergeArray = output.reduce(function(acc, curr, index) {\n        return \"\".concat(acc).concat(index ? \", \" : \"\").concat(fromConsoleToString(curr, references, level));\n    }, \"\");\n    return \"[\".concat(mergeArray, \"]\");\n};\nvar objectToString = function(output, references, level) {\n    var constructorName = output.constructor.name !== \"Object\" ? \"\".concat(output.constructor.name, \" \") : \"\";\n    if (level > MAX_NEST_LEVEL) {\n        return constructorName;\n    }\n    var entries = Object.entries(output);\n    var formattedObject = Object.entries(output).reduce(function(acc, _a, index) {\n        var key = _a[0], value = _a[1];\n        var comma = index === 0 ? \"\" : \", \";\n        var breakLine = entries.length > 10 ? \"\\n  \" : \"\";\n        var formatted = fromConsoleToString(value, references, level);\n        if (index === MAX_KEYS) {\n            return acc + breakLine + \"...\";\n        } else if (index > MAX_KEYS) {\n            return acc;\n        }\n        return acc + \"\".concat(comma).concat(breakLine).concat(key, \": \") + formatted;\n    }, \"\");\n    return \"\".concat(constructorName, \"{ \").concat(formattedObject).concat(entries.length > 10 ? \"\\n\" : \" \", \"}\");\n};\nvar fromConsoleToString = function(message, references, level) {\n    var _a;\n    if (level === void 0) {\n        level = 0;\n    }\n    try {\n        var output_1 = formatSymbols(message);\n        if (Array.isArray(output_1)) {\n            return arrayToString(output_1, references, level + 1);\n        }\n        switch(typeof output_1){\n            case \"string\":\n                return '\"'.concat(output_1, '\"').slice(0, MAX_LENGTH_STRING);\n            case \"number\":\n            case \"function\":\n            case \"symbol\":\n                return output_1.toString();\n            case \"boolean\":\n                return String(output_1);\n            case \"undefined\":\n                return \"undefined\";\n            case \"object\":\n            default:\n                if (output_1 instanceof RegExp || output_1 instanceof Error || output_1 instanceof Date) {\n                    return output_1.toString();\n                }\n                if (output_1 === null) {\n                    return String(null);\n                }\n                if (output_1 instanceof HTMLElement) {\n                    return output_1.outerHTML.slice(0, MAX_LENGTH_STRING);\n                }\n                if (Object.entries(output_1).length === 0) {\n                    return \"{}\";\n                }\n                if (CIRCULAR_REF_KEY in output_1) {\n                    if (level > MAX_NEST_LEVEL) {\n                        return \"Unable to print information\";\n                    }\n                    var newMessage = references[output_1[CIRCULAR_REF_KEY]];\n                    return fromConsoleToString(newMessage, references, level + 1);\n                }\n                if (((_a = output_1.constructor) === null || _a === void 0 ? void 0 : _a.name) === \"NodeList\") {\n                    var length_1 = output_1.length;\n                    var nodes = new Array(length_1).fill(null).map(function(_, index) {\n                        return fromConsoleToString(output_1[index], references);\n                    });\n                    return \"NodeList(\".concat(output_1.length, \")[\").concat(nodes, \"]\");\n                }\n                return objectToString(output_1, references, level + 1);\n        }\n    } catch (_b) {\n        return \"Unable to print information\";\n    }\n};\nvar getType = function(message) {\n    switch(message){\n        case \"warn\":\n            return \"warning\";\n        case \"clear\":\n            return \"clear\";\n        case \"error\":\n            return \"error\";\n        case \"log\":\n        case \"info\":\n        default:\n            return \"info\";\n    }\n};\nvar _a;\nvar ConsoleList = function(_a) {\n    var data = _a.data;\n    var classNames = useClassNames();\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n        children: data.map(function(_a, logIndex, references) {\n            var data = _a.data, id = _a.id, method = _a.method;\n            if (!data) return null;\n            if (Array.isArray(data)) {\n                return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, {\n                    children: data.map(function(msg, msgIndex) {\n                        var fixReferences = references.slice(logIndex, references.length);\n                        return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                            className: classNames(\"console-item\", [\n                                consoleItemClassName({\n                                    variant: getType(method)\n                                })\n                            ]),\n                            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(CodeMirror, {\n                                code: method === \"clear\" ? msg : fromConsoleToString(msg, fixReferences),\n                                fileType: \"js\",\n                                initMode: \"user-visible\",\n                                showReadOnly: false,\n                                readOnly: true,\n                                wrapContent: true\n                            })\n                        }, \"\".concat(id, \"-\").concat(msgIndex));\n                    })\n                }, id);\n            }\n            return null;\n        })\n    });\n};\nvar consoleItemClassName = css((_a = {\n    width: \"100%\",\n    padding: \"$space$3 $space$2\",\n    fontSize: \".8em\",\n    position: \"relative\",\n    \"&:not(:first-child):after\": {\n        content: \"\",\n        position: \"absolute\",\n        top: 0,\n        left: 0,\n        right: 0,\n        height: 1,\n        background: \"$colors$surface3\"\n    },\n    /**\n         * Editor reset\n         */ \".sp-cm\": {\n        padding: 0\n    },\n    \".cm-editor\": {\n        background: \"none\"\n    },\n    \".cm-content\": {\n        padding: 0\n    }\n}, _a[\".\".concat(THEME_PREFIX, \"-pre-placeholder\")] = {\n    margin: \"0 !important\",\n    fontSize: \"1em\"\n}, _a.variants = {\n    variant: {\n        error: {\n            color: \"$colors$error\",\n            background: \"$colors$errorSurface\",\n            \"&:not(:first-child):after\": {\n                background: \"$colors$error\",\n                opacity: 0.07\n            }\n        },\n        warning: {\n            color: \"$colors$warning\",\n            background: \"$colors$warningSurface\",\n            \"&:not(:first-child):after\": {\n                background: \"$colors$warning\",\n                opacity: 0.07\n            }\n        },\n        clear: {\n            fontStyle: \"italic\"\n        },\n        info: {}\n    }\n}, _a));\nvar wrapperClassName = css({\n    justifyContent: \"space-between\",\n    borderBottom: \"1px solid $colors$surface2\",\n    padding: \"0 $space$2\",\n    fontFamily: \"$font$mono\",\n    height: \"$layout$headerHeight\",\n    minHeight: \"$layout$headerHeight\",\n    overflowX: \"auto\",\n    whiteSpace: \"nowrap\"\n});\nvar flexClassName = css({\n    display: \"flex\",\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    gap: \"$space$2\"\n});\nvar Header = function(_a) {\n    var currentTab = _a.currentTab, setCurrentTab = _a.setCurrentTab, node = _a.node;\n    var classNames = useClassNames();\n    var buttonsClassName = classNames(\"console-header-button\", [\n        buttonClassName,\n        roundedButtonClassName,\n        css({\n            padding: \"$space$1 $space$3\"\n        })\n    ]);\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n        className: classNames(\"console-header\", [\n            wrapperClassName,\n            flexClassName\n        ]),\n        children: [\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"p\", {\n                className: classNames(\"console-header-title\", [\n                    css({\n                        lineHeight: 1,\n                        margin: 0,\n                        color: \"$colors$base\",\n                        fontSize: \"$font$size\",\n                        display: \"flex\",\n                        alignItems: \"center\",\n                        gap: \"$space$2\"\n                    })\n                ]),\n                children: [\n                    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ConsoleIcon, {}),\n                    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n                        children: \"Terminal\"\n                    })\n                ]\n            }),\n            node && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n                className: classNames(\"console-header-actions\", [\n                    flexClassName\n                ]),\n                children: [\n                    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"button\", {\n                        className: buttonsClassName,\n                        \"data-active\": currentTab === \"server\",\n                        onClick: function() {\n                            return setCurrentTab(\"server\");\n                        },\n                        type: \"button\",\n                        children: \"Server\"\n                    }),\n                    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"button\", {\n                        className: buttonsClassName,\n                        \"data-active\": currentTab === \"client\",\n                        onClick: function() {\n                            return setCurrentTab(\"client\");\n                        },\n                        type: \"button\",\n                        children: \"Client\"\n                    })\n                ]\n            })\n        ]\n    });\n};\n/**\n * It provides an interface to consume the logs from a sandpack client.\n *\n * @category Hooks\n */ var useSandpackConsole = function(_a) {\n    var clientId = _a.clientId, _b = _a.maxMessageCount, maxMessageCount = _b === void 0 ? MAX_MESSAGE_COUNT : _b, _c = _a.showSyntaxError, showSyntaxError = _c === void 0 ? false : _c, _d = _a.resetOnPreviewRestart, resetOnPreviewRestart = _d === void 0 ? false : _d;\n    var _e = react__WEBPACK_IMPORTED_MODULE_1__.useState([]), logs = _e[0], setLogs = _e[1];\n    var listen = useSandpack().listen;\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function() {\n        var unsubscribe = listen(function(message) {\n            if (resetOnPreviewRestart && message.type === \"start\") {\n                setLogs([]);\n            } else if (message.type === \"console\" && message.codesandbox) {\n                var payloadLog = Array.isArray(message.log) ? message.log : [\n                    message.log\n                ];\n                if (payloadLog.find(function(_a) {\n                    var method = _a.method;\n                    return method === \"clear\";\n                })) {\n                    return setLogs([\n                        CLEAR_LOG\n                    ]);\n                }\n                var logsMessages_1 = showSyntaxError ? payloadLog : payloadLog.filter(function(messageItem) {\n                    var _a, _b, _c;\n                    var messagesWithoutSyntaxErrors = (_c = (_b = (_a = messageItem === null || messageItem === void 0 ? void 0 : messageItem.data) === null || _a === void 0 ? void 0 : _a.filter) === null || _b === void 0 ? void 0 : _b.call(_a, function(dataItem) {\n                        if (typeof dataItem !== \"string\") return true;\n                        var matches = SYNTAX_ERROR_PATTERN.filter(function(lookFor) {\n                            return dataItem.startsWith(lookFor);\n                        });\n                        return matches.length === 0;\n                    })) !== null && _c !== void 0 ? _c : [];\n                    return messagesWithoutSyntaxErrors.length > 0;\n                });\n                if (!logsMessages_1) return;\n                setLogs(function(prev) {\n                    var messages = __spreadArray(__spreadArray([], prev, true), logsMessages_1, true).filter(function(value, index, self) {\n                        return index === self.findIndex(function(s) {\n                            return s.id === value.id;\n                        });\n                    });\n                    while(messages.length > maxMessageCount){\n                        messages.shift();\n                    }\n                    return messages;\n                });\n            }\n        }, clientId);\n        return unsubscribe;\n    }, [\n        showSyntaxError,\n        maxMessageCount,\n        clientId,\n        resetOnPreviewRestart\n    ]);\n    return {\n        logs: logs,\n        reset: function() {\n            return setLogs([]);\n        }\n    };\n};\n/**\n * `SandpackConsole` is a Sandpack devtool that allows printing\n * the console logs from a Sandpack client. It is designed to be\n * a light version of a browser console, which means that it's\n * limited to a set of common use cases you may encounter when coding.\n */ var SandpackConsole = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(function(_a, ref) {\n    var _b;\n    var _c = _a.showHeader, showHeader = _c === void 0 ? true : _c, _d = _a.showSyntaxError, showSyntaxError = _d === void 0 ? false : _d, maxMessageCount = _a.maxMessageCount, onLogsChange = _a.onLogsChange, className = _a.className;\n    _a.showSetupProgress;\n    var _f = _a.showResetConsoleButton, showResetConsoleButton = _f === void 0 ? true : _f, _g = _a.showRestartButton, showRestartButton = _g === void 0 ? true : _g, _h = _a.resetOnPreviewRestart, resetOnPreviewRestart = _h === void 0 ? false : _h, _j = _a.actionsChildren, actionsChildren = _j === void 0 ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {}) : _j, _k = _a.standalone, standalone = _k === void 0 ? false : _k, props = __rest(_a, [\n        \"showHeader\",\n        \"showSyntaxError\",\n        \"maxMessageCount\",\n        \"onLogsChange\",\n        \"className\",\n        \"showSetupProgress\",\n        \"showResetConsoleButton\",\n        \"showRestartButton\",\n        \"resetOnPreviewRestart\",\n        \"actionsChildren\",\n        \"standalone\"\n    ]);\n    var environment = useSandpack().sandpack.environment;\n    var _l = useSandpackClient(), iframe = _l.iframe, internalClientId = _l.clientId;\n    var restart = useSandpackShell().restart;\n    var _m = react__WEBPACK_IMPORTED_MODULE_1__.useState(environment === \"node\" ? \"server\" : \"client\"), currentTab = _m[0], setCurrentTab = _m[1];\n    var clientId = standalone ? internalClientId : undefined;\n    var _o = useSandpackConsole({\n        maxMessageCount: maxMessageCount,\n        showSyntaxError: showSyntaxError,\n        resetOnPreviewRestart: resetOnPreviewRestart,\n        clientId: clientId\n    }), consoleData = _o.logs, resetConsole = _o.reset;\n    var _p = useSandpackShellStdout({\n        maxMessageCount: maxMessageCount,\n        resetOnPreviewRestart: resetOnPreviewRestart,\n        clientId: clientId\n    }), stdoutData = _p.logs, resetStdout = _p.reset;\n    var wrapperRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(null);\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function() {\n        onLogsChange === null || onLogsChange === void 0 ? void 0 : onLogsChange(consoleData);\n        if (wrapperRef.current) {\n            wrapperRef.current.scrollTop = wrapperRef.current.scrollHeight;\n        }\n    }, [\n        onLogsChange,\n        consoleData,\n        stdoutData,\n        currentTab\n    ]);\n    var isServerTab = currentTab === \"server\";\n    var isNodeEnvironment = environment === \"node\";\n    react__WEBPACK_IMPORTED_MODULE_1__.useImperativeHandle(ref, function() {\n        return {\n            reset: function() {\n                resetConsole();\n                resetStdout();\n            }\n        };\n    });\n    var classNames = useClassNames();\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(SandpackStack, __assign({\n        className: classNames(\"console\", [\n            css((_b = {\n                height: \"100%\",\n                background: \"$surface1\",\n                iframe: {\n                    display: \"none\"\n                }\n            }, _b[\".\".concat(THEME_PREFIX, \"-bridge-frame\")] = {\n                display: \"block\",\n                border: 0,\n                position: \"absolute\",\n                left: \"$space$2\",\n                bottom: \"$space$2\",\n                zIndex: \"$top\",\n                height: 12,\n                width: \"30%\",\n                mixBlendMode: \"multiply\",\n                pointerEvents: \"none\"\n            }, _b)),\n            className\n        ])\n    }, props, {\n        children: [\n            showHeader && isNodeEnvironment && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Header, {\n                currentTab: currentTab,\n                node: isNodeEnvironment,\n                setCurrentTab: setCurrentTab\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                ref: wrapperRef,\n                className: classNames(\"console-list\", [\n                    css({\n                        overflow: \"auto\",\n                        scrollBehavior: \"smooth\"\n                    })\n                ]),\n                children: isServerTab ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(StdoutList, {\n                    data: stdoutData\n                }) : (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ConsoleList, {\n                    data: consoleData\n                })\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n                className: classNames(\"console-actions\", [\n                    css({\n                        position: \"absolute\",\n                        bottom: \"$space$2\",\n                        right: \"$space$2\",\n                        display: \"flex\",\n                        gap: \"$space$2\"\n                    })\n                ]),\n                children: [\n                    actionsChildren,\n                    showRestartButton && isServerTab && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(RoundedButton, {\n                        onClick: function() {\n                            restart();\n                            resetConsole();\n                            resetStdout();\n                        },\n                        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(RestartIcon, {})\n                    }),\n                    showResetConsoleButton && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(RoundedButton, {\n                        onClick: function() {\n                            if (currentTab === \"client\") {\n                                resetConsole();\n                            } else {\n                                resetStdout();\n                            }\n                        },\n                        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(CleanIcon, {})\n                    })\n                ]\n            }),\n            standalone && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n                children: [\n                    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(DependenciesProgress, {\n                        clientId: clientId\n                    }),\n                    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"iframe\", {\n                        ref: iframe\n                    })\n                ]\n            })\n        ]\n    }));\n});\nvar Sandpack = function(_a) {\n    var _b, _c, _d, _e, _f, _g, _h, _j;\n    var options = _a.options, template = _a.template, customSetup = _a.customSetup, files = _a.files, theme = _a.theme, props = __rest(_a, [\n        \"options\",\n        \"template\",\n        \"customSetup\",\n        \"files\",\n        \"theme\"\n    ]);\n    options !== null && options !== void 0 ? options : options = {};\n    (_b = options.resizablePanels) !== null && _b !== void 0 ? _b : options.resizablePanels = true;\n    (_c = options.editorWidthPercentage) !== null && _c !== void 0 ? _c : options.editorWidthPercentage = 50;\n    (_d = options.showConsole) !== null && _d !== void 0 ? _d : options.showConsole = false;\n    var rtlLayout = (_e = options === null || options === void 0 ? void 0 : options.rtl) !== null && _e !== void 0 ? _e : false;\n    var codeEditorOptions = {\n        showTabs: options.showTabs,\n        showLineNumbers: options.showLineNumbers,\n        showInlineErrors: options.showInlineErrors,\n        wrapContent: options.wrapContent,\n        closableTabs: options.closableTabs,\n        initMode: options.initMode,\n        extensions: (_f = options.codeEditor) === null || _f === void 0 ? void 0 : _f.extensions,\n        extensionsKeymap: (_g = options.codeEditor) === null || _g === void 0 ? void 0 : _g.extensionsKeymap,\n        readOnly: options.readOnly,\n        showReadOnly: options.showReadOnly,\n        additionalLanguages: (_h = options.codeEditor) === null || _h === void 0 ? void 0 : _h.additionalLanguages\n    };\n    var providerOptions = {\n        /**\n         * TS-why: Type 'string | number | symbol' is not assignable to type 'string'\n         */ activeFile: options.activeFile,\n        visibleFiles: options.visibleFiles,\n        recompileMode: options.recompileMode,\n        recompileDelay: options.recompileDelay,\n        autorun: options.autorun,\n        autoReload: options.autoReload,\n        bundlerURL: options.bundlerURL,\n        startRoute: options.startRoute,\n        skipEval: options.skipEval,\n        fileResolver: options.fileResolver,\n        initMode: options.initMode,\n        initModeObserverOptions: options.initModeObserverOptions,\n        externalResources: options.externalResources,\n        logLevel: options.logLevel,\n        classes: options.classes,\n        experimental_enableServiceWorker: options.experimental_enableServiceWorker,\n        experimental_enableStableServiceWorkerId: options.experimental_enableStableServiceWorkerId\n    };\n    /**\n     * Console\n     */ var _k = react__WEBPACK_IMPORTED_MODULE_1__.useState(options.showConsole), consoleVisibility = _k[0], setConsoleVisibility = _k[1];\n    var _l = react__WEBPACK_IMPORTED_MODULE_1__.useState(0), counter = _l[0], setCounter = _l[1];\n    var hasRightColumn = options.showConsole || options.showConsoleButton;\n    /* eslint-disable-next-line @typescript-eslint/no-non-null-assertion */ var templateFiles = (_j = SANDBOX_TEMPLATES[template]) !== null && _j !== void 0 ? _j : {};\n    var mode = (options === null || options === void 0 ? void 0 : options.layout) ? options === null || options === void 0 ? void 0 : options.layout : \"mode\" in templateFiles ? templateFiles.mode : \"preview\";\n    var actionsChildren = options.showConsoleButton ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ConsoleCounterButton, {\n        counter: counter,\n        onClick: function() {\n            return setConsoleVisibility(function(prev) {\n                return !prev;\n            });\n        }\n    }) : undefined;\n    /**\n     * Resizable\n     */ /* eslint-disable @typescript-eslint/no-explicit-any */ var dragEventTargetRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(null);\n    var _m = react__WEBPACK_IMPORTED_MODULE_1__.useState(options.editorWidthPercentage), horizontalSize = _m[0], setHorizontalSize = _m[1];\n    var _o = react__WEBPACK_IMPORTED_MODULE_1__.useState(70), verticalSize = _o[0], setVerticalSize = _o[1];\n    var RightColumn = hasRightColumn ? SandpackStack : react__WEBPACK_IMPORTED_MODULE_1__.Fragment;\n    var rightColumnStyle = {\n        flexGrow: 100 - horizontalSize,\n        flexShrink: 100 - horizontalSize,\n        flexBasis: 0,\n        width: 100 - horizontalSize + \"%\",\n        gap: consoleVisibility ? 1 : 0,\n        height: options.editorHeight\n    };\n    var topRowStyle = hasRightColumn ? {\n        flexGrow: verticalSize,\n        flexShrink: verticalSize,\n        flexBasis: 0,\n        overflow: \"hidden\"\n    } : rightColumnStyle;\n    var onDragMove = function(event) {\n        if (!dragEventTargetRef.current) return;\n        var container = dragEventTargetRef.current.parentElement;\n        if (!container) return;\n        var direction = dragEventTargetRef.current.dataset.direction;\n        var isHorizontal = direction === \"horizontal\";\n        var _a = container.getBoundingClientRect(), left = _a.left, top = _a.top, height = _a.height, width = _a.width;\n        var offset = isHorizontal ? (event.clientX - left) / width * 100 : (event.clientY - top) / height * 100;\n        var boundaries = Math.min(Math.max(offset, 25), 75);\n        if (isHorizontal) {\n            setHorizontalSize(rtlLayout ? 100 - boundaries : boundaries);\n        } else {\n            setVerticalSize(boundaries);\n        }\n        container.querySelectorAll(\".\".concat(THEME_PREFIX, \"-stack\")).forEach(function(item) {\n            item.style.pointerEvents = \"none\";\n        });\n    };\n    var stopDragging = function() {\n        var _a;\n        var container = (_a = dragEventTargetRef.current) === null || _a === void 0 ? void 0 : _a.parentElement;\n        if (!container) return;\n        container.querySelectorAll(\".\".concat(THEME_PREFIX, \"-stack\")).forEach(function(item) {\n            item.style.pointerEvents = \"\";\n        });\n        dragEventTargetRef.current = null;\n    };\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function() {\n        if (!(options === null || options === void 0 ? void 0 : options.resizablePanels)) return;\n        document.body.addEventListener(\"mousemove\", onDragMove);\n        document.body.addEventListener(\"mouseup\", stopDragging);\n        return function() {\n            document.body.removeEventListener(\"mousemove\", onDragMove);\n            document.body.removeEventListener(\"mouseup\", stopDragging);\n        };\n    }, [\n        options\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function() {\n        var _a;\n        setConsoleVisibility((_a = options === null || options === void 0 ? void 0 : options.showConsole) !== null && _a !== void 0 ? _a : false);\n    }, [\n        options.showConsole\n    ]);\n    var rightColumnProps = hasRightColumn ? {\n        className: THEME_PREFIX + \"-preset-column\",\n        style: rightColumnStyle\n    } : {};\n    var classNames = useClassNames();\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(SandpackProvider, __assign({\n        customSetup: customSetup,\n        files: files,\n        options: providerOptions,\n        template: template,\n        theme: theme\n    }, props, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(SandpackLayout, {\n            className: rtlLayout ? classNames(\"rtl-layout\", [\n                rtlLayoutClassName\n            ]) : \"\",\n            children: [\n                (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(SandpackCodeEditor, __assign({}, codeEditorOptions, {\n                    style: {\n                        height: options.editorHeight,\n                        flexGrow: horizontalSize,\n                        flexShrink: horizontalSize,\n                        flexBasis: 0,\n                        overflow: \"hidden\"\n                    }\n                })),\n                options.resizablePanels && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                    className: classNames(\"resize-handler\", [\n                        dragHandler({\n                            direction: \"horizontal\"\n                        })\n                    ]),\n                    \"data-direction\": \"horizontal\",\n                    onMouseDown: function(event) {\n                        dragEventTargetRef.current = event.target;\n                    },\n                    style: {\n                        left: \"calc(\".concat(rtlLayout ? 100 - horizontalSize : horizontalSize, \"% - 5px)\")\n                    }\n                }),\n                (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(RightColumn, __assign({}, rightColumnProps, {\n                    children: [\n                        mode === \"preview\" && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(SandpackPreview, {\n                            actionsChildren: actionsChildren,\n                            showNavigator: options.showNavigator,\n                            showRefreshButton: options.showRefreshButton,\n                            style: topRowStyle\n                        }),\n                        mode === \"tests\" && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(SandpackTests, {\n                            actionsChildren: actionsChildren,\n                            style: topRowStyle\n                        }),\n                        mode === \"console\" && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(SandpackConsole, {\n                            actionsChildren: actionsChildren,\n                            style: topRowStyle,\n                            standalone: true\n                        }),\n                        (options.showConsoleButton || consoleVisibility) && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n                            children: [\n                                options.resizablePanels && consoleVisibility && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                                    className: classNames(\"resize-handler\", [\n                                        dragHandler({\n                                            direction: \"vertical\"\n                                        })\n                                    ]),\n                                    \"data-direction\": \"vertical\",\n                                    onMouseDown: function(event) {\n                                        dragEventTargetRef.current = event.target;\n                                    },\n                                    style: {\n                                        top: \"calc(\".concat(verticalSize, \"% - 5px)\")\n                                    }\n                                }),\n                                (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                                    className: classNames(\"console-wrapper\", [\n                                        consoleWrapper\n                                    ]),\n                                    style: {\n                                        flexGrow: consoleVisibility ? 100 - verticalSize : 0,\n                                        flexShrink: consoleVisibility ? 100 - verticalSize : 0,\n                                        flexBasis: 0\n                                    },\n                                    children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(SandpackConsole, {\n                                        onLogsChange: function(logs) {\n                                            return setCounter(logs.length);\n                                        },\n                                        showHeader: false\n                                    })\n                                })\n                            ]\n                        })\n                    ]\n                }))\n            ]\n        })\n    }), template);\n};\nvar dragHandler = css({\n    position: \"absolute\",\n    zIndex: \"$top\",\n    variants: {\n        direction: {\n            vertical: {\n                right: 0,\n                left: 0,\n                height: 10,\n                cursor: \"ns-resize\"\n            },\n            horizontal: {\n                top: 0,\n                bottom: 0,\n                width: 10,\n                cursor: \"ew-resize\"\n            }\n        }\n    },\n    \"@media screen and (max-width: 768px)\": {\n        display: \"none\"\n    }\n});\nvar ConsoleCounterButton = function(_a) {\n    var onClick = _a.onClick, counter = _a.counter;\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(RoundedButton, {\n        className: buttonCounter.toString(),\n        onClick: onClick,\n        children: [\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ConsoleIcon, {}),\n            counter > 0 && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"strong\", {\n                children: counter\n            })\n        ]\n    });\n};\nvar buttonCounter = css({\n    position: \"relative\",\n    strong: {\n        background: \"$colors$clickable\",\n        color: \"$colors$surface1\",\n        minWidth: 12,\n        height: 12,\n        padding: \"0 2px\",\n        borderRadius: 12,\n        fontSize: 8,\n        lineHeight: \"12px\",\n        position: \"absolute\",\n        top: 0,\n        right: 0,\n        fontWeight: \"normal\"\n    }\n});\nvar consoleWrapper = css({\n    width: \"100%\",\n    overflow: \"hidden\"\n});\nvar rtlLayoutClassName = css({\n    flexDirection: \"row-reverse\",\n    \"@media screen and (max-width: 768px)\": {\n        flexFlow: \"wrap-reverse !important\",\n        flexDirection: \"initial\"\n    }\n});\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@codesandbox/sandpack-react/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@codesandbox/sandpack-react/dist/unstyled/index.mjs":
/*!**************************************************************************!*\
  !*** ./node_modules/@codesandbox/sandpack-react/dist/unstyled/index.mjs ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ANGULAR_TEMPLATE: () => (/* binding */ ANGULAR_TEMPLATE),\n/* harmony export */   ASTRO_TEMPLATE: () => (/* binding */ ASTRO_TEMPLATE),\n/* harmony export */   BackwardIcon: () => (/* binding */ BackwardIcon),\n/* harmony export */   CleanIcon: () => (/* binding */ CleanIcon),\n/* harmony export */   CloseIcon: () => (/* binding */ CloseIcon),\n/* harmony export */   CodeEditor: () => (/* binding */ CodeMirror),\n/* harmony export */   ConsoleIcon: () => (/* binding */ ConsoleIcon),\n/* harmony export */   DependenciesProgress: () => (/* binding */ DependenciesProgress),\n/* harmony export */   DirectoryIconClosed: () => (/* binding */ DirectoryIconClosed),\n/* harmony export */   DirectoryIconOpen: () => (/* binding */ DirectoryIconOpen),\n/* harmony export */   ErrorOverlay: () => (/* binding */ ErrorOverlay),\n/* harmony export */   ExportIcon: () => (/* binding */ ExportIcon),\n/* harmony export */   FADE_ANIMATION_DURATION: () => (/* binding */ FADE_ANIMATION_DURATION),\n/* harmony export */   FileIcon: () => (/* binding */ FileIcon),\n/* harmony export */   FileTabs: () => (/* binding */ FileTabs),\n/* harmony export */   ForwardIcon: () => (/* binding */ ForwardIcon),\n/* harmony export */   LoadingOverlay: () => (/* binding */ LoadingOverlay),\n/* harmony export */   Navigator: () => (/* binding */ Navigator),\n/* harmony export */   OpenInCodeSandboxButton: () => (/* binding */ OpenInCodeSandboxButton),\n/* harmony export */   REACT_TEMPLATE: () => (/* binding */ REACT_TEMPLATE),\n/* harmony export */   REACT_TYPESCRIPT_TEMPLATE: () => (/* binding */ REACT_TYPESCRIPT_TEMPLATE),\n/* harmony export */   RefreshIcon: () => (/* binding */ RefreshIcon),\n/* harmony export */   RestartIcon: () => (/* binding */ RestartIcon),\n/* harmony export */   RoundedButton: () => (/* binding */ RoundedButton),\n/* harmony export */   RunButton: () => (/* binding */ RunButton$1),\n/* harmony export */   RunIcon: () => (/* binding */ RunIcon),\n/* harmony export */   SANDBOX_TEMPLATES: () => (/* binding */ SANDBOX_TEMPLATES),\n/* harmony export */   SANDPACK_THEMES: () => (/* binding */ SANDPACK_THEMES),\n/* harmony export */   SOLID_TEMPLATE: () => (/* binding */ SOLID_TEMPLATE),\n/* harmony export */   SVELTE_TEMPLATE: () => (/* binding */ SVELTE_TEMPLATE),\n/* harmony export */   Sandpack: () => (/* binding */ Sandpack),\n/* harmony export */   SandpackCodeEditor: () => (/* binding */ SandpackCodeEditor),\n/* harmony export */   SandpackCodeViewer: () => (/* binding */ SandpackCodeViewer),\n/* harmony export */   SandpackConsole: () => (/* binding */ SandpackConsole),\n/* harmony export */   SandpackConsumer: () => (/* binding */ SandpackConsumer),\n/* harmony export */   SandpackFileExplorer: () => (/* binding */ SandpackFileExplorer),\n/* harmony export */   SandpackLayout: () => (/* binding */ SandpackLayout),\n/* harmony export */   SandpackPreview: () => (/* binding */ SandpackPreview),\n/* harmony export */   SandpackProvider: () => (/* binding */ SandpackProvider),\n/* harmony export */   SandpackReactContext: () => (/* binding */ Sandpack$1),\n/* harmony export */   SandpackStack: () => (/* binding */ SandpackStack),\n/* harmony export */   SandpackTests: () => (/* binding */ SandpackTests),\n/* harmony export */   SandpackThemeConsumer: () => (/* binding */ SandpackThemeConsumer),\n/* harmony export */   SandpackThemeContext: () => (/* binding */ SandpackThemeContext),\n/* harmony export */   SandpackThemeProvider: () => (/* binding */ SandpackThemeProvider),\n/* harmony export */   SandpackTranspiledCode: () => (/* binding */ SandpackTranspiledCode),\n/* harmony export */   SignInIcon: () => (/* binding */ SignInIcon),\n/* harmony export */   SignOutIcon: () => (/* binding */ SignOutIcon),\n/* harmony export */   TEST_TYPESCRIPT_TEMPLATE: () => (/* binding */ TEST_TYPESCRIPT_TEMPLATE),\n/* harmony export */   UnstyledOpenInCodeSandboxButton: () => (/* binding */ UnstyledOpenInCodeSandboxButton),\n/* harmony export */   VANILLA_TEMPLATE: () => (/* binding */ VANILLA_TEMPLATE),\n/* harmony export */   VANILLA_TYPESCRIPT_TEMPLATE: () => (/* binding */ VANILLA_TYPESCRIPT_TEMPLATE),\n/* harmony export */   VUE_TEMPLATE: () => (/* binding */ VUE_TEMPLATE),\n/* harmony export */   defaultDark: () => (/* binding */ defaultDark),\n/* harmony export */   defaultLight: () => (/* binding */ defaultLight),\n/* harmony export */   getSandpackCssText: () => (/* binding */ getCssText),\n/* harmony export */   layoutClassName: () => (/* binding */ layoutClassName),\n/* harmony export */   stackClassName: () => (/* binding */ stackClassName),\n/* harmony export */   tabButton: () => (/* binding */ tabButton),\n/* harmony export */   useActiveCode: () => (/* binding */ useActiveCode),\n/* harmony export */   useClassNames: () => (/* binding */ useClassNames),\n/* harmony export */   useErrorMessage: () => (/* binding */ useErrorMessage),\n/* harmony export */   useLoadingOverlayState: () => (/* binding */ useLoadingOverlayState),\n/* harmony export */   useSandpack: () => (/* binding */ useSandpack),\n/* harmony export */   useSandpackClient: () => (/* binding */ useSandpackClient),\n/* harmony export */   useSandpackConsole: () => (/* binding */ useSandpackConsole),\n/* harmony export */   useSandpackNavigation: () => (/* binding */ useSandpackNavigation),\n/* harmony export */   useSandpackPreviewProgress: () => (/* binding */ useSandpackPreviewProgress),\n/* harmony export */   useSandpackShell: () => (/* binding */ useSandpackShell),\n/* harmony export */   useSandpackShellStdout: () => (/* binding */ useSandpackShellStdout),\n/* harmony export */   useSandpackTheme: () => (/* binding */ useSandpackTheme),\n/* harmony export */   useTranspiledCode: () => (/* binding */ useTranspiledCode)\n/* harmony export */ });\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var dequal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! dequal */ \"(ssr)/./node_modules/dequal/dist/index.mjs\");\n/* harmony import */ var _codesandbox_sandpack_client__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @codesandbox/sandpack-client */ \"(ssr)/./node_modules/@codesandbox/sandpack-client/dist/utils-52664384.mjs\");\n/* harmony import */ var _codesandbox_sandpack_client__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @codesandbox/sandpack-client */ \"(ssr)/./node_modules/@codesandbox/sandpack-client/dist/index.mjs\");\n/* harmony import */ var _codemirror_autocomplete__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @codemirror/autocomplete */ \"(ssr)/./node_modules/@codemirror/autocomplete/dist/index.js\");\n/* harmony import */ var _codemirror_commands__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @codemirror/commands */ \"(ssr)/./node_modules/@codemirror/commands/dist/index.js\");\n/* harmony import */ var _codemirror_language__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @codemirror/language */ \"(ssr)/./node_modules/@codemirror/language/dist/index.js\");\n/* harmony import */ var _codemirror_state__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @codemirror/state */ \"(ssr)/./node_modules/@codemirror/state/dist/index.js\");\n/* harmony import */ var _codemirror_view__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @codemirror/view */ \"(ssr)/./node_modules/@codemirror/view/dist/index.js\");\n/* harmony import */ var _react_hook_intersection_observer__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @react-hook/intersection-observer */ \"(ssr)/./node_modules/@react-hook/intersection-observer/dist/esm/index.mjs\");\n/* harmony import */ var _codemirror_lang_css__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @codemirror/lang-css */ \"(ssr)/./node_modules/@codemirror/lang-css/dist/index.js\");\n/* harmony import */ var _codemirror_lang_html__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @codemirror/lang-html */ \"(ssr)/./node_modules/@codemirror/lang-html/dist/index.js\");\n/* harmony import */ var _codemirror_lang_javascript__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @codemirror/lang-javascript */ \"(ssr)/./node_modules/@codemirror/lang-javascript/dist/index.js\");\n/* harmony import */ var _lezer_highlight__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @lezer/highlight */ \"(ssr)/./node_modules/@lezer/highlight/dist/index.js\");\n/* harmony import */ var anser__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! anser */ \"(ssr)/./node_modules/anser/lib/index.js\");\n/* harmony import */ var escape_carriage__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! escape-carriage */ \"(ssr)/./node_modules/escape-carriage/index.js\");\n/* harmony import */ var lz_string__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! lz-string */ \"(ssr)/./node_modules/lz-string/libs/lz-string.js\");\n/* harmony import */ var clean_set__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! clean-set */ \"(ssr)/./node_modules/clean-set/dist/clean-set.es.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar __assign = function () {\n  __assign = Object.assign || (function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  });\n  return __assign.apply(this, arguments);\n};\nfunction __rest(s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}\nfunction __awaiter(thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n}\nfunction __generator(thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  }, f, y, t, g;\n  return (g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g);\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if ((f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)) return t;\n      if ((y = 0, t)) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n}\nfunction __spreadArray(to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !((i in from))) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n}\n\nvar SVG = function (props) {\n  return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"svg\", __assign({\n    fill: \"currentColor\",\n    height: \"16\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\",\n    xmlns: \"http://www.w3.org/2000/svg\"\n  }, props));\n};\nvar SignInIcon = function () {\n  return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(SVG, {\n    viewBox: \"0 0 48 48\",\n    children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"title\", {\n      children: \"Sign in\"\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", {\n      d: \"M9 42q-1.2 0-2.1-.9Q6 40.2 6 39V9q0-1.2.9-2.1Q7.8 6 9 6h14.55v3H9v30h14.55v3Zm24.3-9.25-2.15-2.15 5.1-5.1h-17.5v-3h17.4l-5.1-5.1 2.15-2.15 8.8 8.8Z\"\n    })]\n  });\n};\nvar SignOutIcon = function () {\n  return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(SVG, {\n    viewBox: \"0 0 48 48\",\n    children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"title\", {\n      children: \"Sign out\"\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", {\n      d: \"M9 42q-1.2 0-2.1-.9Q6 40.2 6 39V9q0-1.2.9-2.1Q7.8 6 9 6h14.55v3H9v30h14.55v3Zm24.3-9.25-2.15-2.15 5.1-5.1h-17.5v-3h17.4l-5.1-5.1 2.15-2.15 8.8 8.8Z\"\n    })]\n  });\n};\nvar RestartIcon = function () {\n  return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(SVG, {\n    fill: \"none\",\n    stroke: \"currentColor\",\n    children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"title\", {\n      children: \"Restart script\"\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", {\n      d: \"M8 2C4.68629 2 2 4.68629 2 8C2 10.0946 3.07333 11.9385 4.7 13.0118\",\n      strokeLinecap: \"round\"\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", {\n      d: \"M14.0005 7.9998C14.0005 5.82095 12.8391 3.91335 11.1016 2.8623\",\n      strokeLinecap: \"round\"\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", {\n      d: \"M14.0003 2.3335H11.167C10.8908 2.3335 10.667 2.55735 10.667 2.8335V5.66683\",\n      strokeLinecap: \"round\"\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", {\n      d: \"M1.99967 13.6665L4.83301 13.6665C5.10915 13.6665 5.33301 13.4426 5.33301 13.1665L5.33301 10.3332\",\n      strokeLinecap: \"round\"\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", {\n      d: \"M10 10L12 12L10 14\",\n      strokeLinecap: \"round\",\n      strokeLinejoin: \"round\"\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", {\n      d: \"M14.667 14L12.667 14\",\n      strokeLinecap: \"round\",\n      strokeLinejoin: \"round\"\n    })]\n  });\n};\nvar RunIcon = function () {\n  return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(SVG, {\n    children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"title\", {\n      children: \"Run sandbox\"\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", {\n      d: \"M11.0792 8.1078C11.2793 8.25007 11.27 8.55012 11.0616 8.67981L6.02535 11.8135C5.79638 11.956 5.5 11.7913 5.5 11.5216L5.5 8.40703L5.5 4.80661C5.5 4.52735 5.81537 4.36463 6.04296 4.52647L11.0792 8.1078Z\"\n    })]\n  });\n};\nvar BackwardIcon = function () {\n  return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(SVG, {\n    children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"title\", {\n      children: \"Click to go back\"\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", {\n      d: \"M9.64645 12.3536C9.84171 12.5488 10.1583 12.5488 10.3536 12.3536C10.5488 12.1583 10.5488 11.8417 10.3536 11.6464L9.64645 12.3536ZM10.3536 4.35355C10.5488 4.15829 10.5488 3.84171 10.3536 3.64644C10.1583 3.45118 9.84171 3.45118 9.64645 3.64644L10.3536 4.35355ZM6.07072 7.92929L5.71716 7.57573L6.07072 7.92929ZM10.3536 11.6464L6.42427 7.71716L5.71716 8.42426L9.64645 12.3536L10.3536 11.6464ZM6.42427 8.28284L10.3536 4.35355L9.64645 3.64644L5.71716 7.57573L6.42427 8.28284ZM6.42427 7.71716C6.58048 7.87337 6.58048 8.12663 6.42427 8.28284L5.71716 7.57573C5.48285 7.81005 5.48285 8.18995 5.71716 8.42426L6.42427 7.71716Z\"\n    })]\n  });\n};\nvar ForwardIcon = function () {\n  return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(SVG, {\n    children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"title\", {\n      children: \"Click to go forward\"\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", {\n      d: \"M6.35355 3.64645C6.15829 3.45118 5.84171 3.45118 5.64645 3.64645C5.45118 3.84171 5.45118 4.15829 5.64645 4.35355L6.35355 3.64645ZM5.64645 11.6464C5.45118 11.8417 5.45118 12.1583 5.64645 12.3536C5.84171 12.5488 6.15829 12.5488 6.35355 12.3536L5.64645 11.6464ZM9.92929 8.07071L10.2828 8.42426L9.92929 8.07071ZM5.64645 4.35355L9.57574 8.28284L10.2828 7.57574L6.35355 3.64645L5.64645 4.35355ZM9.57574 7.71716L5.64645 11.6464L6.35355 12.3536L10.2828 8.42426L9.57574 7.71716ZM9.57574 8.28284C9.41952 8.12663 9.41953 7.87337 9.57574 7.71716L10.2828 8.42426C10.5172 8.18995 10.5172 7.81005 10.2828 7.57574L9.57574 8.28284Z\"\n    })]\n  });\n};\nvar RefreshIcon = function () {\n  return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(SVG, {\n    children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"title\", {\n      children: \"Refresh preview\"\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", {\n      clipRule: \"evenodd\",\n      d: \"M3.83325 7.99992C3.83325 5.69867 5.69853 3.83325 7.99934 3.83325C9.81246 3.83325 11.3563 4.99195 11.9285 6.61097C11.9396 6.6425 11.9536 6.67221 11.97 6.69992H8.80005C8.52391 6.69992 8.30005 6.92378 8.30005 7.19992C8.30005 7.47606 8.52391 7.69992 8.80005 7.69992H12.5667C12.8981 7.69992 13.1667 7.43129 13.1667 7.09992V3.33325C13.1667 3.05711 12.9429 2.83325 12.6667 2.83325C12.3906 2.83325 12.1667 3.05711 12.1667 3.33325V4.94608C11.2268 3.66522 9.7106 2.83325 7.99934 2.83325C5.14613 2.83325 2.83325 5.14651 2.83325 7.99992C2.83325 10.8533 5.14613 13.1666 7.99934 13.1666C9.91218 13.1666 11.5815 12.1266 12.474 10.5836C12.6123 10.3446 12.5306 10.0387 12.2915 9.90044C12.0525 9.76218 11.7466 9.84387 11.6084 10.0829C10.8873 11.3296 9.54072 12.1666 7.99934 12.1666C5.69853 12.1666 3.83325 10.3012 3.83325 7.99992Z\",\n      fillRule: \"evenodd\"\n    })]\n  });\n};\nvar CleanIcon = function () {\n  return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(SVG, {\n    fill: \"none\",\n    stroke: \"currentColor\",\n    children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"title\", {\n      children: \"Clean\"\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"circle\", {\n      cx: \"7.99998\",\n      cy: \"8.00004\",\n      r: \"4.66667\",\n      strokeLinecap: \"round\"\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", {\n      d: \"M4.66669 4.66663L11.3334 11.3333\"\n    })]\n  });\n};\nvar ExportIcon = function () {\n  return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(SVG, {\n    fill: \"none\",\n    stroke: \"currentColor\",\n    children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"title\", {\n      children: \"Open on CodeSandbox\"\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", {\n      d: \"M6.66665 3.33337H4.33331C3.78103 3.33337 3.33331 3.78109 3.33331 4.33337V11.6667C3.33331 12.219 3.78103 12.6667 4.33331 12.6667H11.6666C12.2189 12.6667 12.6666 12.219 12.6666 11.6667V9.33337\",\n      strokeLinecap: \"round\"\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", {\n      d: \"M10 3.33337H12.5667C12.6219 3.33337 12.6667 3.37815 12.6667 3.43337V6.00004\",\n      strokeLinecap: \"round\"\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", {\n      d: \"M7.33331 8.66668L12.5333 3.46667\",\n      strokeLinecap: \"round\"\n    })]\n  });\n};\nvar DirectoryIconOpen = function () {\n  return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(SVG, {\n    children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"title\", {\n      children: \"Directory\"\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", {\n      d: \"M12.5526 12.6667H3.66675C3.2922 12.6667 2.96575 12.4608 2.79442 12.156L3.81072 8.0908C3.92201 7.64563 4.32199 7.33333 4.78086 7.33333H13.386C14.0365 7.33333 14.5139 7.94472 14.3561 8.57587L13.5228 11.9092C13.4115 12.3544 13.0115 12.6667 12.5526 12.6667Z\",\n      fill: \"currentColor\"\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", {\n      d: \"M13.3334 6.63333V6.33333C13.3334 5.78105 12.8857 5.33333 12.3334 5.33333H8.30286C8.10543 5.33333 7.91242 5.2749 7.74816 5.16538L6.25201 4.16795C6.08774 4.05844 5.89473 4 5.69731 4H3.66675C3.11446 4 2.66675 4.44772 2.66675 5L2.66675 11.6667C2.66675 12.219 3.11446 12.6667 3.66675 12.6667H12.5526C13.0115 12.6667 13.4115 12.3544 13.5228 11.9092L14.3561 8.57587C14.5139 7.94472 14.0365 7.33333 13.386 7.33333H4.78086C4.32199 7.33333 3.92201 7.64563 3.81072 8.0908L2.75008 12.3333\",\n      fill: \"none\",\n      stroke: \"currentColor\",\n      strokeLinecap: \"round\"\n    })]\n  });\n};\nvar DirectoryIconClosed = function () {\n  return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(SVG, {\n    children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"title\", {\n      children: \"Directory\"\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", {\n      d: \"M12.3334 12.6667H3.66675C3.11446 12.6667 2.66675 12.219 2.66675 11.6667V5C2.66675 4.44772 3.11446 4 3.66675 4H5.69731C5.89473 4 6.08774 4.05844 6.25201 4.16795L7.74816 5.16538C7.91242 5.2749 8.10543 5.33333 8.30286 5.33333H12.3334C12.8857 5.33333 13.3334 5.78105 13.3334 6.33333V11.6667C13.3334 12.219 12.8857 12.6667 12.3334 12.6667Z\",\n      fill: \"currentColor\",\n      stroke: \"currentColor\",\n      strokeLinecap: \"round\"\n    })]\n  });\n};\nvar FileIcon = function () {\n  return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(SVG, {\n    fill: \"currentColor\",\n    children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"title\", {\n      children: \"File\"\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", {\n      clipRule: \"evenodd\",\n      d: \"M4.5 4.33325C4.5 4.05711 4.72386 3.83325 5 3.83325H8.16675V6.56659C8.16675 6.89795 8.43538 7.16658 8.76675 7.16658H11.5V12.3333C11.5 12.6094 11.2761 12.8333 11 12.8333H5C4.72386 12.8333 4.5 12.6094 4.5 12.3333V4.33325ZM12.5 6.67568C12.5001 6.67265 12.5001 6.66962 12.5001 6.66658C12.5001 6.66355 12.5001 6.66052 12.5 6.65749V6.41413C12.5 6.01631 12.342 5.63478 12.0607 5.35347L9.97978 3.27259C9.69848 2.99129 9.31694 2.83325 8.91912 2.83325H8.66675H5C4.17157 2.83325 3.5 3.50483 3.5 4.33325V12.3333C3.5 13.1617 4.17157 13.8333 5 13.8333H11C11.8284 13.8333 12.5 13.1617 12.5 12.3333V6.67568ZM9.16675 3.89888C9.20518 3.92078 9.24085 3.94787 9.27267 3.9797L11.3536 6.06058C11.3854 6.09243 11.4125 6.12813 11.4344 6.16658H9.16675V3.89888Z\",\n      fillRule: \"evenodd\"\n    })]\n  });\n};\nvar CloseIcon = function () {\n  return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(SVG, {\n    stroke: \"currentColor\",\n    children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"title\", {\n      children: \"Close file\"\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", {\n      d: \"M12 4L4 12\",\n      strokeLinecap: \"round\"\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", {\n      d: \"M4 4L12 12\",\n      strokeLinecap: \"round\"\n    })]\n  });\n};\nvar ConsoleIcon = function () {\n  return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(SVG, {\n    children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"title\", {\n      children: \"Open browser console\"\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", {\n      d: \"M5.65871 3.62037C5.44905 3.44066 5.1334 3.46494 4.95368 3.6746C4.77397 3.88427 4.79825 4.19992 5.00792 4.37963L5.65871 3.62037ZM5.00792 11.6204C4.79825 11.8001 4.77397 12.1157 4.95368 12.3254C5.1334 12.5351 5.44905 12.5593 5.65871 12.3796L5.00792 11.6204ZM9.9114 7.92407L10.2368 7.54445L9.9114 7.92407ZM5.00792 4.37963L9.586 8.3037L10.2368 7.54445L5.65871 3.62037L5.00792 4.37963ZM9.586 7.6963L5.00792 11.6204L5.65871 12.3796L10.2368 8.45555L9.586 7.6963ZM9.586 8.3037C9.39976 8.14407 9.39976 7.85594 9.586 7.6963L10.2368 8.45555C10.5162 8.2161 10.5162 7.7839 10.2368 7.54445L9.586 8.3037Z\"\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", {\n      d: \"M10 11.5C9.72386 11.5 9.5 11.7239 9.5 12C9.5 12.2761 9.72386 12.5 10 12.5V11.5ZM14.6667 12.5C14.9428 12.5 15.1667 12.2761 15.1667 12C15.1667 11.7239 14.9428 11.5 14.6667 11.5V12.5ZM10 12.5H14.6667V11.5H10V12.5Z\"\n    })]\n  });\n};\n\nvar _a$1;\nvar defaultLight = {\n  colors: {\n    surface1: \"#ffffff\",\n    surface2: \"#EFEFEF\",\n    surface3: \"#F3F3F3\",\n    disabled: \"#C5C5C5\",\n    base: \"#323232\",\n    clickable: \"#808080\",\n    hover: \"#4D4D4D\",\n    accent: \"#3973E0\",\n    error: \"#EA3323\",\n    errorSurface: \"#FCF1F0\",\n    warning: \"#6A4516\",\n    warningSurface: \"#FEF2C0\"\n  },\n  syntax: {\n    plain: \"#151515\",\n    comment: {\n      color: \"#999\",\n      fontStyle: \"italic\"\n    },\n    keyword: \"#7C5AE3\",\n    tag: \"#0971F1\",\n    punctuation: \"#3B3B3B\",\n    definition: \"#85A600\",\n    property: \"#3B3B3B\",\n    static: \"#3B3B3B\",\n    string: \"#2E6BD0\"\n  },\n  font: {\n    body: '-apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"',\n    mono: '\"Fira Mono\", \"DejaVu Sans Mono\", Menlo, Consolas, \"Liberation Mono\", Monaco, \"Lucida Console\", monospace',\n    size: \"13px\",\n    lineHeight: \"20px\"\n  }\n};\nvar defaultDark = {\n  colors: {\n    surface1: \"#151515\",\n    surface2: \"#252525\",\n    surface3: \"#2F2F2F\",\n    disabled: \"#4D4D4D\",\n    base: \"#808080\",\n    clickable: \"#999999\",\n    hover: \"#C5C5C5\",\n    accent: \"#E5E5E5\",\n    error: \"#FFB4A6\",\n    errorSurface: \"#690000\",\n    warning: \"#E7C400\",\n    warningSurface: \"#3A3000\"\n  },\n  syntax: {\n    plain: \"#FFFFFF\",\n    comment: {\n      color: \"#757575\",\n      fontStyle: \"italic\"\n    },\n    keyword: \"#77B7D7\",\n    tag: \"#DFAB5C\",\n    punctuation: \"#ffffff\",\n    definition: \"#86D9CA\",\n    property: \"#77B7D7\",\n    static: \"#C64640\",\n    string: \"#977CDC\"\n  },\n  font: {\n    body: '-apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"',\n    mono: '\"Fira Mono\", \"DejaVu Sans Mono\", Menlo, Consolas, \"Liberation Mono\", Monaco, \"Lucida Console\", monospace',\n    size: \"13px\",\n    lineHeight: \"20px\"\n  }\n};\nvar SANDPACK_THEMES = {\n  light: defaultLight,\n  dark: defaultDark,\n  auto: typeof window !== \"undefined\" ? ((_a$1 = window === null || window === void 0 ? void 0 : window.matchMedia) === null || _a$1 === void 0 ? void 0 : _a$1.call(window, \"(prefers-color-scheme: dark)\").matches) ? defaultDark : defaultLight : defaultLight\n};\n\nvar getFileName = function (filePath) {\n  var lastIndexOfSlash = filePath.lastIndexOf(\"/\");\n  return filePath.slice(lastIndexOfSlash + 1);\n};\nvar calculateNearestUniquePath = function (currentPath, otherPaths) {\n  var currentPathParts = (currentPath[0] === \"/\" ? currentPath.slice(1) : currentPath).split(\"/\");\n  var resultPathParts = [];\n  if (currentPathParts.length === 1) {\n    resultPathParts.unshift(currentPathParts[0]);\n  } else {\n    for (var fileIndex = 0; fileIndex < otherPaths.length; fileIndex++) {\n      var otherPathParts = otherPaths[fileIndex].split(\"/\");\n      for (var partsFromEnd = 1; partsFromEnd <= currentPathParts.length; partsFromEnd++) {\n        var currentPathPart = currentPathParts[currentPathParts.length - partsFromEnd];\n        var otherPathPart = otherPathParts[otherPathParts.length - partsFromEnd];\n        if (resultPathParts.length < partsFromEnd) {\n          resultPathParts.unshift(currentPathPart);\n        }\n        if (currentPathPart !== otherPathPart) {\n          break;\n        }\n      }\n    }\n  }\n  if (resultPathParts.length < currentPathParts.length) {\n    resultPathParts.unshift(\"..\");\n  }\n  return resultPathParts.join(\"/\");\n};\nvar isDarkColor = function (color) {\n  var r = 0;\n  var g = 0;\n  var b = 0;\n  if (color.startsWith(\"#\")) {\n    if (color.length < 7) {\n      return true;\n    }\n    r = parseInt(color.substr(1, 2), 16);\n    g = parseInt(color.substr(3, 2), 16);\n    b = parseInt(color.substr(5, 2), 16);\n  } else {\n    var rgbValues = color.replace(\"rgb(\", \"\").replace(\"rgba(\", \"\").replace(\")\", \"\").split(\",\");\n    if (rgbValues.length < 3) {\n      return true;\n    }\n    r = parseInt(rgbValues[0], 10);\n    g = parseInt(rgbValues[1], 10);\n    b = parseInt(rgbValues[2], 10);\n  }\n  var yiq = (r * 299 + g * 587 + b * 114) / 1000;\n  return yiq < 128;\n};\nvar lastCount = 0;\nvar generateRandomId = function () {\n  var random = +(Date.now().toString(10).substr(0, 4) + lastCount++);\n  return random.toString(16);\n};\n\nvar toString = function () {\n  return \"\";\n};\nvar doubleToString = function () {\n  return toString;\n};\nvar defineProperty = Object.getOwnPropertyDescriptors({\n  toString: toString\n});\nObject.defineProperties(toString, defineProperty);\nObject.defineProperties(doubleToString, defineProperty);\nvar createStitchesMock = {\n  createTheme: toString,\n  css: doubleToString,\n  getCssText: toString,\n  keyframes: doubleToString\n};\n\nvar _a;\nvar THEME_PREFIX = \"sp\";\nvar createTheme = (_a = createStitchesMock , _a.createTheme), getCssText = _a.getCssText, keyframes = _a.keyframes;\nvar defaultVariables = {\n  space: new Array(11).fill(\" \").reduce(function (acc, _, index) {\n    var _a;\n    return __assign(__assign({}, acc), (_a = {}, _a[index + 1] = (\"\").concat((index + 1) * 4, \"px\"), _a));\n  }, {}),\n  border: {\n    radius: \"4px\"\n  },\n  layout: {\n    height: \"300px\",\n    headerHeight: \"40px\"\n  },\n  transitions: {\n    default: \"150ms ease\"\n  },\n  zIndices: {\n    base: \"1\",\n    overlay: \"2\",\n    top: \"3\"\n  }\n};\nvar standardizeStitchesTheme = function (theme) {\n  var syntaxEntries = Object.entries(theme.syntax);\n  var syntax = syntaxEntries.reduce(function (tokenAcc, _a) {\n    var _b;\n    var tokenName = _a[0], tokenValue = _a[1];\n    var newValues = (_b = {}, _b[(\"color-\").concat(tokenName)] = tokenValue, _b);\n    if (typeof tokenValue === \"object\") {\n      newValues = Object.entries(tokenValue).reduce(function (valueAcc, _a) {\n        var _b;\n        var styleProp = _a[0], styleValue = _a[1];\n        return __assign(__assign({}, valueAcc), (_b = {}, _b[(\"\").concat(styleProp, \"-\").concat(tokenName)] = styleValue, _b));\n      }, {});\n    }\n    return __assign(__assign({}, tokenAcc), newValues);\n  }, {});\n  return __assign(__assign({}, defaultVariables), {\n    colors: theme.colors,\n    font: theme.font,\n    syntax: syntax\n  });\n};\nvar standardizeTheme = function (inputTheme) {\n  var _a, _b, _c, _d, _e;\n  if (inputTheme === void 0) {\n    inputTheme = \"light\";\n  }\n  var defaultLightThemeKey = \"default\";\n  if (typeof inputTheme === \"string\") {\n    var predefinedTheme = SANDPACK_THEMES[inputTheme];\n    if (!predefinedTheme) {\n      throw new Error((\"[sandpack-react]: invalid theme '\").concat(inputTheme, \"' provided.\"));\n    }\n    return {\n      theme: predefinedTheme,\n      id: inputTheme,\n      mode: isDarkColor(predefinedTheme.colors.surface1) ? \"dark\" : \"light\"\n    };\n  }\n  var mode = isDarkColor((_b = (_a = inputTheme === null || inputTheme === void 0 ? void 0 : inputTheme.colors) === null || _a === void 0 ? void 0 : _a.surface1) !== null && _b !== void 0 ? _b : defaultLight.colors.surface1) ? \"dark\" : \"light\";\n  var baseTheme = mode === \"dark\" ? defaultDark : defaultLight;\n  var colorsByMode = __assign(__assign({}, baseTheme.colors), (_c = inputTheme === null || inputTheme === void 0 ? void 0 : inputTheme.colors) !== null && _c !== void 0 ? _c : {});\n  var syntaxByMode = __assign(__assign({}, baseTheme.syntax), (_d = inputTheme === null || inputTheme === void 0 ? void 0 : inputTheme.syntax) !== null && _d !== void 0 ? _d : {});\n  var fontByMode = __assign(__assign({}, baseTheme.font), (_e = inputTheme === null || inputTheme === void 0 ? void 0 : inputTheme.font) !== null && _e !== void 0 ? _e : {});\n  var theme = {\n    colors: colorsByMode,\n    syntax: syntaxByMode,\n    font: fontByMode\n  };\n  var id = inputTheme ? simpleHashFunction(JSON.stringify(theme)) : defaultLightThemeKey;\n  return {\n    theme: theme,\n    id: (\"sp-\").concat(id),\n    mode: mode\n  };\n};\nvar simpleHashFunction = function (str) {\n  var hash = 0;\n  for (var i = 0; i < str.length; hash &= hash) {\n    hash = 31 * hash + str.charCodeAt(i++);\n  }\n  return Math.abs(hash);\n};\nvar fakeCss = function () {\n  return \"\";\n};\nfakeCss.toString = fakeCss;\n\nvar ClassNamesContext = (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)({});\nvar ClassNamesProvider = function (_a) {\n  var children = _a.children, classes = _a.classes;\n  return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ClassNamesContext.Provider, {\n    value: classes || ({}),\n    children: children\n  });\n};\nvar useClassNames = function () {\n  var contextClassNames = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(ClassNamesContext);\n  return function sandpackClassNames(customClassName, allClassNames) {\n    if (allClassNames === void 0) {\n      allClassNames = [];\n    }\n    var custom = (\"\").concat(THEME_PREFIX, \"-\").concat(customClassName);\n    return joinClassNames.apply(void 0, __spreadArray(__spreadArray([], allClassNames, false), [custom, contextClassNames[custom]], false));\n  };\n};\nvar joinClassNames = function () {\n  var args = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n  return args.filter(Boolean).join(\" \");\n};\n\nvar wrapperClassName$3 = fakeCss;\nvar SandpackThemeContext = react__WEBPACK_IMPORTED_MODULE_1__.createContext({\n  theme: defaultLight,\n  id: \"light\",\n  mode: \"light\"\n});\nvar SandpackThemeProvider = function (_a) {\n  var themeFromProps = _a.theme, children = _a.children, className = _a.className, props = __rest(_a, [\"theme\", \"children\", \"className\"]);\n  var _b = react__WEBPACK_IMPORTED_MODULE_1__.useState(themeFromProps), prefferedTheme = _b[0], setPreferredTheme = _b[1];\n  var _c = standardizeTheme(prefferedTheme), theme = _c.theme, id = _c.id, mode = _c.mode;\n  var classNames = useClassNames();\n  var themeClassName = react__WEBPACK_IMPORTED_MODULE_1__.useMemo(function () {\n    return createTheme(id, standardizeStitchesTheme(theme));\n  }, [theme, id]);\n  react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function () {\n    if (themeFromProps !== \"auto\") {\n      setPreferredTheme(themeFromProps);\n      return;\n    }\n    var colorSchemeChange = function (_a) {\n      var matches = _a.matches;\n      setPreferredTheme(matches ? \"dark\" : \"light\");\n    };\n    window.matchMedia(\"(prefers-color-scheme: dark)\").addEventListener(\"change\", colorSchemeChange);\n    return function () {\n      window.matchMedia(\"(prefers-color-scheme: dark)\").removeEventListener(\"change\", colorSchemeChange);\n    };\n  }, [themeFromProps]);\n  return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(SandpackThemeContext.Provider, {\n    value: {\n      theme: theme,\n      id: id,\n      mode: mode\n    },\n    children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", __assign({\n      className: classNames(\"wrapper\", [themeClassName, wrapperClassName$3(), className])\n    }, props, {\n      children: children\n    }))\n  });\n};\nvar SandpackThemeConsumer = SandpackThemeContext.Consumer;\n\nvar commonFiles = {\n  \"/styles.css\": {\n    code: \"body {\\n  font-family: sans-serif;\\n  -webkit-font-smoothing: auto;\\n  -moz-font-smoothing: auto;\\n  -moz-osx-font-smoothing: grayscale;\\n  font-smoothing: auto;\\n  text-rendering: optimizeLegibility;\\n  font-smooth: always;\\n  -webkit-tap-highlight-color: transparent;\\n  -webkit-touch-callout: none;\\n}\\n\\nh1 {\\n  font-size: 1.5rem;\\n}\"\n  }\n};\n\nvar ASTRO_TEMPLATE = {\n  files: {\n    \"/src/styles.css\": commonFiles[\"/styles.css\"],\n    \"/src/pages/index.astro\": {\n      code: \"---\\nimport \\\"../styles.css\\\";\\nconst data = \\\"world\\\";\\n---\\n\\n<h1>Hello {data}</h1>\\n\\n<style>\\n  h1 {\\n    font-size: 1.5rem;\\n  }\\n</style>\"\n    },\n    \".env\": {\n      code: \"ASTRO_TELEMETRY_DISABLED=\\\"1\\\"\"\n    },\n    \"/package.json\": {\n      code: JSON.stringify({\n        dependencies: {\n          astro: \"^1.6.12\",\n          \"esbuild-wasm\": \"^0.15.16\"\n        },\n        scripts: {\n          dev: \"astro dev\",\n          start: \"astro dev\",\n          build: \"astro build\",\n          preview: \"astro preview\",\n          astro: \"astro\"\n        }\n      })\n    }\n  },\n  main: \"/src/pages/index.astro\",\n  environment: \"node\"\n};\n\nvar NEXTJS_TEMPLATE = {\n  files: __assign(__assign({}, commonFiles), {\n    \"/pages/_app.js\": {\n      code: \"import '../styles.css'\\n\\nexport default function MyApp({ Component, pageProps }) {\\n  return <Component {...pageProps} />\\n}\"\n    },\n    \"/pages/index.js\": {\n      code: \"export default function Home({ data }) {\\n  return (\\n    <div>\\n      <h1>Hello {data}</h1>\\n    </div>\\n  );\\n}\\n  \\nexport function getServerSideProps() {\\n  return {\\n    props: { data: \\\"world\\\" },\\n  }\\n}\\n\"\n    },\n    \"/next.config.js\": {\n      code: \"/** @type {import('next').NextConfig} */\\nconst nextConfig = {\\n  reactStrictMode: true,\\n  swcMinify: true,\\n}\\n\\nmodule.exports = nextConfig\\n\"\n    },\n    \"/package.json\": {\n      code: JSON.stringify({\n        name: \"my-app\",\n        version: \"0.1.0\",\n        private: true,\n        scripts: {\n          dev: \"NEXT_TELEMETRY_DISABLED=1 next dev\",\n          build: \"next build\",\n          start: \"next start\",\n          lint: \"next lint\"\n        },\n        dependencies: {\n          next: \"12.1.6\",\n          react: \"18.2.0\",\n          \"react-dom\": \"18.2.0\",\n          \"@next/swc-wasm-nodejs\": \"12.1.6\"\n        }\n      })\n    }\n  }),\n  main: \"/pages/index.js\",\n  environment: \"node\"\n};\n\nvar NODE_TEMPLATE = {\n  files: {\n    \"/index.js\": {\n      code: \"const http = require('http');\\n\\nconst hostname = '127.0.0.1';\\nconst port = 3000;\\n\\nconst server = http.createServer((req, res) => {\\n  res.statusCode = 200;\\n  res.setHeader('Content-Type', 'text/html');\\n  res.end('Hello world');\\n});\\n\\nserver.listen(port, hostname, () => {\\n  console.log(`Server running at http://${hostname}:${port}/`);\\n});\"\n    },\n    \"/package.json\": {\n      code: JSON.stringify({\n        dependencies: {},\n        scripts: {\n          start: \"node index.js\"\n        },\n        main: \"index.js\"\n      })\n    }\n  },\n  main: \"/index.js\",\n  environment: \"node\"\n};\n\nvar VITE_TEMPLATE = {\n  files: __assign(__assign({}, commonFiles), {\n    \"/index.js\": {\n      code: \"import \\\"./styles.css\\\";\\n\\ndocument.getElementById(\\\"app\\\").innerHTML = `\\n<h1>Hello world</h1>\\n`;\\n\"\n    },\n    \"/index.html\": {\n      code: \"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n  <head>\\n    <meta charset=\\\"UTF-8\\\" />\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n    <title>Vite App</title>\\n  </head>\\n  <body>\\n    <div id=\\\"app\\\"></div>\\n    <script type=\\\"module\\\" src=\\\"/index.js\\\"></script>\\n  </body>\\n</html>\\n\"\n    },\n    \"/package.json\": {\n      code: JSON.stringify({\n        scripts: {\n          dev: \"vite\",\n          build: \"vite build\",\n          preview: \"vite preview\"\n        },\n        devDependencies: {\n          vite: \"4.1.4\",\n          \"esbuild-wasm\": \"0.17.12\"\n        }\n      })\n    }\n  }),\n  main: \"/index.js\",\n  environment: \"node\"\n};\n\nvar VITE_PREACT_TEMPLATE = {\n  files: __assign(__assign({}, commonFiles), {\n    \"/App.jsx\": {\n      code: \"export default function App() {\\n  const data = \\\"world\\\"\\n\\n  return <h1>Hello {data}</h1>\\n}\\n\"\n    },\n    \"/index.jsx\": {\n      code: \"import { render } from \\\"preact\\\";\\nimport \\\"./styles.css\\\";\\n\\nimport App from \\\"./App\\\";\\n\\nconst root = document.getElementById(\\\"root\\\");\\nrender(<App />, root);\\n\"\n    },\n    \"/index.html\": {\n      code: \"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n  <head>\\n    <meta charset=\\\"UTF-8\\\" />\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n    <title>Vite App</title>\\n  </head>\\n  <body>\\n    <div id=\\\"root\\\"></div>\\n    <script type=\\\"module\\\" src=\\\"/index.jsx\\\"></script>\\n  </body>\\n</html>\\n\"\n    },\n    \"/package.json\": {\n      code: JSON.stringify({\n        scripts: {\n          dev: \"vite\",\n          build: \"vite build\",\n          preview: \"vite preview\"\n        },\n        dependencies: {\n          preact: \"^10.16.0\"\n        },\n        devDependencies: {\n          \"@preact/preset-vite\": \"^2.5.0\",\n          vite: \"4.1.4\",\n          \"esbuild-wasm\": \"0.17.12\"\n        }\n      })\n    },\n    \"/vite.config.js\": {\n      code: \"import { defineConfig } from \\\"vite\\\";\\nimport preact from '@preact/preset-vite'\\n\\n// https://vitejs.dev/config/\\nexport default defineConfig({\\n  plugins: [preact()],\\n});\\n\"\n    }\n  }),\n  main: \"/App.jsx\",\n  environment: \"node\"\n};\n\nvar VITE_PREACT_TS_TEMPLATE = {\n  files: __assign(__assign({}, commonFiles), {\n    \"/App.tsx\": {\n      code: \"export default function App() {\\n  const data: string = \\\"world\\\"\\n\\n  return <h1>Hello {data}</h1>\\n}\\n\"\n    },\n    \"/index.tsx\": {\n      code: \"import { render } from \\\"preact\\\";\\nimport \\\"./styles.css\\\";\\n\\nimport App from \\\"./App\\\";\\n\\nconst root = document.getElementById(\\\"root\\\") as HTMLElement;\\nrender(<App />, root);\\n\"\n    },\n    \"/index.html\": {\n      code: \"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n  <head>\\n    <meta charset=\\\"UTF-8\\\" />\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n    <title>Vite App</title>\\n  </head>\\n  <body>\\n    <div id=\\\"root\\\"></div>\\n    <script type=\\\"module\\\" src=\\\"/index.tsx\\\"></script>\\n  </body>\\n</html>\\n\"\n    },\n    \"/tsconfig.json\": {\n      code: JSON.stringify({\n        compilerOptions: {\n          target: \"ESNext\",\n          useDefineForClassFields: true,\n          lib: [\"DOM\", \"DOM.Iterable\", \"ESNext\"],\n          allowJs: false,\n          skipLibCheck: true,\n          esModuleInterop: false,\n          allowSyntheticDefaultImports: true,\n          strict: true,\n          forceConsistentCasingInFileNames: true,\n          module: \"ESNext\",\n          moduleResolution: \"Node\",\n          resolveJsonModule: true,\n          isolatedModules: true,\n          noEmit: true,\n          jsx: \"react-jsx\",\n          jsxImportSource: \"preact\"\n        },\n        include: [\"src\"],\n        references: [{\n          path: \"./tsconfig.node.json\"\n        }]\n      }, null, 2)\n    },\n    \"/tsconfig.node.json\": {\n      code: JSON.stringify({\n        compilerOptions: {\n          composite: true,\n          module: \"ESNext\",\n          moduleResolution: \"Node\",\n          allowSyntheticDefaultImports: true\n        },\n        include: [\"vite.config.ts\"]\n      }, null, 2)\n    },\n    \"/package.json\": {\n      code: JSON.stringify({\n        scripts: {\n          dev: \"vite\",\n          build: \"tsc && vite build\",\n          preview: \"vite preview\"\n        },\n        dependencies: {\n          preact: \"^10.16.0\"\n        },\n        devDependencies: {\n          \"@preact/preset-vite\": \"^2.5.0\",\n          typescript: \"^4.9.5\",\n          vite: \"4.1.4\",\n          \"esbuild-wasm\": \"^0.17.12\"\n        }\n      }, null, 2)\n    },\n    \"/vite-env.d.ts\": {\n      code: '/// <reference types=\"vite/client\" />'\n    },\n    \"/vite.config.ts\": {\n      code: \"import { defineConfig } from 'vite'\\nimport preact from '@preact/preset-vite'\\n\\n// https://vitejs.dev/config/\\nexport default defineConfig({\\n  plugins: [preact()],\\n})\\n\"\n    }\n  }),\n  main: \"/App.tsx\",\n  environment: \"node\"\n};\n\nvar VITE_REACT_TEMPLATE = {\n  files: __assign(__assign({}, commonFiles), {\n    \"/App.jsx\": {\n      code: \"export default function App() {\\n  const data = \\\"world\\\"\\n\\n  return <h1>Hello {data}</h1>\\n}\\n\"\n    },\n    \"/index.jsx\": {\n      code: \"import { StrictMode } from \\\"react\\\";\\nimport { createRoot } from \\\"react-dom/client\\\";\\nimport \\\"./styles.css\\\";\\n\\nimport App from \\\"./App\\\";\\n\\nconst root = createRoot(document.getElementById(\\\"root\\\"));\\nroot.render(\\n  <StrictMode>\\n    <App />\\n  </StrictMode>\\n);\"\n    },\n    \"/index.html\": {\n      code: \"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n  <head>\\n    <meta charset=\\\"UTF-8\\\" />\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n    <title>Vite App</title>\\n  </head>\\n  <body>\\n    <div id=\\\"root\\\"></div>\\n    <script type=\\\"module\\\" src=\\\"/index.jsx\\\"></script>\\n  </body>\\n</html>\\n\"\n    },\n    \"/package.json\": {\n      code: JSON.stringify({\n        scripts: {\n          dev: \"vite\",\n          build: \"vite build\",\n          preview: \"vite preview\"\n        },\n        dependencies: {\n          react: \"^18.2.0\",\n          \"react-dom\": \"^18.2.0\"\n        },\n        devDependencies: {\n          \"@vitejs/plugin-react\": \"3.1.0\",\n          vite: \"4.1.4\",\n          \"esbuild-wasm\": \"0.17.12\"\n        }\n      })\n    },\n    \"/vite.config.js\": {\n      code: \"import { defineConfig } from \\\"vite\\\";\\nimport react from \\\"@vitejs/plugin-react\\\";\\n\\n// https://vitejs.dev/config/\\nexport default defineConfig({\\n  plugins: [react()],\\n});\\n\"\n    }\n  }),\n  main: \"/App.jsx\",\n  environment: \"node\"\n};\n\nvar VITE_REACT_TS_TEMPLATE = {\n  files: __assign(__assign({}, commonFiles), {\n    \"/App.tsx\": {\n      code: \"export default function App() {\\n  const data: string = \\\"world\\\"\\n\\n  return <h1>Hello {data}</h1>\\n}\\n\"\n    },\n    \"/index.tsx\": {\n      code: \"import { StrictMode } from \\\"react\\\";\\nimport { createRoot } from \\\"react-dom/client\\\";\\nimport \\\"./styles.css\\\";\\n\\nimport App from \\\"./App\\\";\\nimport React from \\\"react\\\";\\n\\nconst root = createRoot(document.getElementById(\\\"root\\\") as HTMLElement);\\nroot.render(\\n  <StrictMode>\\n    <App />\\n  </StrictMode>\\n);\\n\"\n    },\n    \"/index.html\": {\n      code: \"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n  <head>\\n    <meta charset=\\\"UTF-8\\\" />\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n    <title>Vite App</title>\\n  </head>\\n  <body>\\n    <div id=\\\"root\\\"></div>\\n    <script type=\\\"module\\\" src=\\\"/index.tsx\\\"></script>\\n  </body>\\n</html>\\n\"\n    },\n    \"/tsconfig.json\": {\n      code: JSON.stringify({\n        compilerOptions: {\n          target: \"ESNext\",\n          useDefineForClassFields: true,\n          lib: [\"DOM\", \"DOM.Iterable\", \"ESNext\"],\n          allowJs: false,\n          skipLibCheck: true,\n          esModuleInterop: false,\n          allowSyntheticDefaultImports: true,\n          strict: true,\n          forceConsistentCasingInFileNames: true,\n          module: \"ESNext\",\n          moduleResolution: \"Node\",\n          resolveJsonModule: true,\n          isolatedModules: true,\n          noEmit: true,\n          jsx: \"react-jsx\"\n        },\n        include: [\"src\"],\n        references: [{\n          path: \"./tsconfig.node.json\"\n        }]\n      }, null, 2)\n    },\n    \"/tsconfig.node.json\": {\n      code: JSON.stringify({\n        compilerOptions: {\n          composite: true,\n          module: \"ESNext\",\n          moduleResolution: \"Node\",\n          allowSyntheticDefaultImports: true\n        },\n        include: [\"vite.config.ts\"]\n      }, null, 2)\n    },\n    \"/package.json\": {\n      code: JSON.stringify({\n        scripts: {\n          dev: \"vite\",\n          build: \"tsc && vite build\",\n          preview: \"vite preview\"\n        },\n        dependencies: {\n          react: \"^18.2.0\",\n          \"react-dom\": \"^18.2.0\"\n        },\n        devDependencies: {\n          \"@types/react\": \"^18.0.28\",\n          \"@types/react-dom\": \"^18.0.11\",\n          \"@vitejs/plugin-react\": \"^3.1.0\",\n          typescript: \"^4.9.5\",\n          vite: \"4.1.4\",\n          \"esbuild-wasm\": \"^0.17.12\"\n        }\n      }, null, 2)\n    },\n    \"/vite-env.d.ts\": {\n      code: '/// <reference types=\"vite/client\" />'\n    },\n    \"/vite.config.ts\": {\n      code: \"import { defineConfig } from 'vite'\\nimport react from '@vitejs/plugin-react'\\n\\n// https://vitejs.dev/config/\\nexport default defineConfig({\\n  plugins: [react()],\\n})\\n\"\n    }\n  }),\n  main: \"/App.tsx\",\n  environment: \"node\"\n};\n\nvar VITE_SVELTE_TEMPLATE = {\n  files: {\n    \"/src/styles.css\": commonFiles[\"/styles.css\"],\n    \"/src/App.svelte\": {\n      code: \"<script>\\nconst data = \\\"world\\\";\\n</script>\\n\\n<h1>Hello {data}</h1>\\n\\n<style>\\nh1 {\\n  font-size: 1.5rem;\\n}\\n</style>\"\n    },\n    \"/src/main.js\": {\n      code: \"import App from './App.svelte'\\nimport \\\"./styles.css\\\"\\n\\nconst app = new App({\\n  target: document.getElementById('app'),\\n})\\n\\nexport default app\"\n    },\n    \"/index.html\": {\n      code: \"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n  <head>\\n    <meta charset=\\\"UTF-8\\\" />\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n    <title>Vite App</title>\\n  </head>\\n  <body>\\n    <div id=\\\"app\\\"></div>\\n    <script type=\\\"module\\\" src=\\\"/src/main.js\\\"></script>\\n  </body>\\n</html>\\n\"\n    },\n    \"/vite.config.js\": {\n      code: \"import { defineConfig } from 'vite'\\nimport { svelte } from '@sveltejs/vite-plugin-svelte'\\n\\n// https://vitejs.dev/config/\\nexport default defineConfig({\\n  plugins: [svelte()],\\n})\"\n    },\n    \"/package.json\": {\n      code: JSON.stringify({\n        type: \"module\",\n        scripts: {\n          dev: \"vite\"\n        },\n        devDependencies: {\n          \"@sveltejs/vite-plugin-svelte\": \"^2.0.2\",\n          svelte: \"^3.55.1\",\n          vite: \"4.0.4\",\n          \"esbuild-wasm\": \"^0.17.12\"\n        }\n      })\n    }\n  },\n  main: \"/src/App.svelte\",\n  environment: \"node\"\n};\n\nvar VITE_SVELTE_TS_TEMPLATE = {\n  files: {\n    \"/src/styles.css\": commonFiles[\"/styles.css\"],\n    \"/src/App.svelte\": {\n      code: \"<script lang=\\\"ts\\\">\\nconst data: string = \\\"world\\\";\\n</script>\\n\\n<h1>Hello {data}</h1>\\n\\n<style>\\nh1 {\\n  font-size: 1.5rem;\\n}\\n</style>\"\n    },\n    \"/src/main.ts\": {\n      code: \"import App from './App.svelte'\\nimport \\\"./styles.css\\\"\\n\\nconst app = new App({\\n  target: document.getElementById('app'),\\n})\\n\\nexport default app\"\n    },\n    \"/index.html\": {\n      code: \"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n  <head>\\n    <meta charset=\\\"UTF-8\\\" />\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n    <title>Vite App</title>\\n  </head>\\n  <body>\\n    <div id=\\\"app\\\"></div>\\n    <script type=\\\"module\\\" src=\\\"/src/main.ts\\\"></script>\\n  </body>\\n</html>\\n\"\n    },\n    \"/vite-env.d.ts\": {\n      code: \"/// <reference types=\\\"svelte\\\" />\\n/// <reference types=\\\"vite/client\\\" />\"\n    },\n    \"svelte.config.js\": {\n      code: \"import { vitePreprocess } from '@sveltejs/vite-plugin-svelte'\\n\\nexport default {\\n  // Consult https://svelte.dev/docs#compile-time-svelte-preprocess\\n  // for more information about preprocessors\\n  preprocess: vitePreprocess(),\\n}\\n\"\n    },\n    \"/vite.config.ts\": {\n      code: \"import { defineConfig } from 'vite'\\nimport { svelte } from '@sveltejs/vite-plugin-svelte'\\n\\n// https://vitejs.dev/config/\\nexport default defineConfig({\\n  plugins: [svelte()],\\n})\"\n    },\n    \"tsconfig.json\": {\n      code: JSON.stringify({\n        extends: \"@tsconfig/svelte/tsconfig.json\",\n        compilerOptions: {\n          target: \"ESNext\",\n          useDefineForClassFields: true,\n          module: \"ESNext\",\n          resolveJsonModule: true,\n          allowJs: true,\n          checkJs: true,\n          isolatedModules: true\n        },\n        include: [\"src/**/*.d.ts\", \"src/**/*.ts\", \"src/**/*.js\", \"src/**/*.svelte\"],\n        references: [{\n          path: \"./tsconfig.node.json\"\n        }]\n      }, null, 2)\n    },\n    \"tsconfig.node.json\": {\n      code: JSON.stringify({\n        compilerOptions: {\n          composite: true,\n          module: \"ESNext\",\n          moduleResolution: \"Node\"\n        },\n        include: [\"vite.config.ts\"]\n      }, null, 2)\n    },\n    \"/package.json\": {\n      code: JSON.stringify({\n        type: \"module\",\n        scripts: {\n          dev: \"vite\"\n        },\n        devDependencies: {\n          \"@sveltejs/vite-plugin-svelte\": \"^2.0.2\",\n          \"@tsconfig/svelte\": \"^3.0.0\",\n          svelte: \"^3.55.1\",\n          \"svelte-check\": \"^2.10.3\",\n          tslib: \"^2.5.0\",\n          vite: \"4.1.4\",\n          \"esbuild-wasm\": \"^0.17.12\"\n        }\n      }, null, 2)\n    }\n  },\n  main: \"/src/App.svelte\",\n  environment: \"node\"\n};\n\nvar VITE_VUE_TEMPLATE = {\n  files: {\n    \"/src/styles.css\": commonFiles[\"/styles.css\"],\n    \"/src/App.vue\": {\n      code: \"<script setup>\\nimport { ref } from \\\"vue\\\";\\n\\nconst data = ref(\\\"world\\\");\\n</script>\\n\\n<template>\\n  <h1>Hello {{ data }}</h1>\\n</template>\\n\\n<style>\\nh1 {\\n  font-size: 1.5rem;\\n}\\n</style>\"\n    },\n    \"/src/main.js\": {\n      code: \"import { createApp } from 'vue'\\nimport App from './App.vue'\\nimport \\\"./styles.css\\\"\\n            \\ncreateApp(App).mount('#app')            \\n\"\n    },\n    \"/index.html\": {\n      code: \"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n  <head>\\n    <meta charset=\\\"UTF-8\\\" />\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n    <title>Vite App</title>\\n  </head>\\n  <body>\\n    <div id=\\\"app\\\"></div>\\n    <script type=\\\"module\\\" src=\\\"/src/main.js\\\"></script>\\n  </body>\\n</html>\\n\"\n    },\n    \"/vite.config.js\": {\n      code: \"import { defineConfig } from 'vite'\\nimport vue from '@vitejs/plugin-vue'\\n\\n// https://vitejs.dev/config/\\nexport default defineConfig({\\n  plugins: [vue()]\\n})\\n\"\n    },\n    \"/package.json\": {\n      code: JSON.stringify({\n        scripts: {\n          dev: \"vite\",\n          build: \"vite build\",\n          preview: \"vite preview\"\n        },\n        dependencies: {\n          vue: \"^3.2.45\"\n        },\n        devDependencies: {\n          \"@vitejs/plugin-vue\": \"3.2.0\",\n          vite: \"4.1.4\",\n          \"esbuild-wasm\": \"0.17.12\"\n        }\n      })\n    }\n  },\n  main: \"/src/App.vue\",\n  environment: \"node\"\n};\n\nvar VITE_VUE_TS_TEMPLATE = {\n  files: {\n    \"/src/styles.css\": commonFiles[\"/styles.css\"],\n    \"/src/App.vue\": {\n      code: \"<script setup lang=\\\"ts\\\">\\nimport { ref } from \\\"vue\\\";\\n\\nconst data = ref<string>(\\\"world\\\");\\n</script>\\n\\n<template>\\n  <h1>Hello {{ data }}</h1>\\n</template>\\n\\n<style>\\nh1 {\\n  font-size: 1.5rem;\\n}\\n</style>\"\n    },\n    \"/src/main.ts\": {\n      code: \"import { createApp } from 'vue'\\nimport App from './App.vue'\\nimport \\\"./styles.css\\\"\\n\\ncreateApp(App).mount('#app')\\n\"\n    },\n    \"/index.html\": {\n      code: \"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n  <head>\\n    <meta charset=\\\"UTF-8\\\" />\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n    <title>Vite App</title>\\n  </head>\\n  <body>\\n    <div id=\\\"app\\\"></div>\\n    <script type=\\\"module\\\" src=\\\"/src/main.ts\\\"></script>\\n  </body>\\n</html>\\n\"\n    },\n    \"/vite-env.d.ts\": {\n      code: '/// <reference types=\"vite/client\" />'\n    },\n    \"/vite.config.ts\": {\n      code: \"import { defineConfig } from 'vite'\\nimport vue from '@vitejs/plugin-vue'\\n\\n// https://vitejs.dev/config/\\nexport default defineConfig({\\n  plugins: [vue()]\\n})\\n\"\n    },\n    \"tsconfig.json\": {\n      code: JSON.stringify({\n        compilerOptions: {\n          target: \"ESNext\",\n          useDefineForClassFields: true,\n          module: \"ESNext\",\n          moduleResolution: \"Node\",\n          strict: true,\n          jsx: \"preserve\",\n          resolveJsonModule: true,\n          isolatedModules: true,\n          esModuleInterop: true,\n          lib: [\"ESNext\", \"DOM\"],\n          skipLibCheck: true,\n          noEmit: true\n        },\n        include: [\"src/**/*.ts\", \"src/**/*.d.ts\", \"src/**/*.tsx\", \"src/**/*.vue\"],\n        references: [{\n          path: \"./tsconfig.node.json\"\n        }]\n      }, null, 2)\n    },\n    \"tsconfig.node.json\": {\n      code: JSON.stringify({\n        compilerOptions: {\n          composite: true,\n          module: \"ESNext\",\n          moduleResolution: \"Node\",\n          allowSyntheticDefaultImports: true\n        },\n        include: [\"vite.config.ts\"]\n      }, null, 2)\n    },\n    \"/package.json\": {\n      code: JSON.stringify({\n        scripts: {\n          dev: \"vite\",\n          build: \"tsc && vite build\",\n          preview: \"vite preview\"\n        },\n        dependencies: {\n          vue: \"^3.2.47\"\n        },\n        devDependencies: {\n          \"@vitejs/plugin-vue\": \"^4.0.0\",\n          vite: \"4.1.4\",\n          \"vue-tsc\": \"^1.2.0\",\n          typescript: \"^4.9.5\",\n          \"esbuild-wasm\": \"^0.17.12\"\n        }\n      }, null, 2)\n    }\n  },\n  main: \"/src/App.vue\",\n  environment: \"node\"\n};\n\nvar ANGULAR_TEMPLATE = {\n  files: {\n    \"/src/app/app.component.css\": commonFiles[\"/styles.css\"],\n    \"/src/app/app.component.html\": {\n      code: \"<div>\\n<h1>{{ helloWorld }}</h1>\\n</div>     \\n\"\n    },\n    \"/src/app/app.component.ts\": {\n      code: \"import { Component } from \\\"@angular/core\\\";\\n\\n@Component({\\n  selector: \\\"app-root\\\",\\n  templateUrl: \\\"./app.component.html\\\",\\n  styleUrls: [\\\"./app.component.css\\\"]\\n})\\nexport class AppComponent {\\n  helloWorld = \\\"Hello world\\\";\\n}           \\n\"\n    },\n    \"/src/app/app.module.ts\": {\n      code: \"import { BrowserModule } from \\\"@angular/platform-browser\\\";\\nimport { NgModule } from \\\"@angular/core\\\";\\n      \\nimport { AppComponent } from \\\"./app.component\\\";\\n      \\n@NgModule({\\n  declarations: [AppComponent],\\n  imports: [BrowserModule],\\n  providers: [],\\n  bootstrap: [AppComponent]\\n})\\nexport class AppModule {}       \\n\"\n    },\n    \"/src/index.html\": {\n      code: \"<!doctype html>\\n<html lang=\\\"en\\\">\\n      \\n<head>\\n  <meta charset=\\\"utf-8\\\">\\n  <title>Angular</title>\\n  <base href=\\\"/\\\">\\n      \\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1\\\">\\n  <link rel=\\\"icon\\\" type=\\\"image/x-icon\\\" href=\\\"favicon.ico\\\">\\n</head>\\n      \\n<body>\\n   <app-root></app-root>\\n</body>\\n      \\n</html>\\n\"\n    },\n    \"/src/main.ts\": {\n      code: \"import { enableProdMode } from \\\"@angular/core\\\";\\nimport { platformBrowserDynamic } from \\\"@angular/platform-browser-dynamic\\\";\\n      \\nimport { AppModule } from \\\"./app/app.module\\\";      \\n\\nplatformBrowserDynamic()\\n  .bootstrapModule(AppModule)\\n  .catch(err => console.log(err));\\n      \\n\"\n    },\n    \"/src/polyfills.ts\": {\n      code: \"import \\\"core-js/proposals/reflect-metadata\\\";   \\n      import \\\"zone.js/dist/zone\\\";\\n\"\n    },\n    \"/package.json\": {\n      code: JSON.stringify({\n        dependencies: {\n          \"@angular/core\": \"^11.2.0\",\n          \"@angular/platform-browser\": \"^11.2.0\",\n          \"@angular/platform-browser-dynamic\": \"^11.2.0\",\n          \"@angular/common\": \"^11.2.0\",\n          \"@angular/compiler\": \"^11.2.0\",\n          \"zone.js\": \"0.11.3\",\n          \"core-js\": \"3.8.3\",\n          rxjs: \"6.6.3\"\n        },\n        main: \"/src/main.ts\"\n      })\n    }\n  },\n  main: \"/src/app/app.component.ts\",\n  environment: \"angular-cli\"\n};\n\nvar REACT_TEMPLATE = {\n  files: __assign(__assign({}, commonFiles), {\n    \"/App.js\": {\n      code: \"export default function App() {\\n  return <h1>Hello world</h1>\\n}\\n\"\n    },\n    \"/index.js\": {\n      code: \"import React, { StrictMode } from \\\"react\\\";\\nimport { createRoot } from \\\"react-dom/client\\\";\\nimport \\\"./styles.css\\\";\\n\\nimport App from \\\"./App\\\";\\n\\nconst root = createRoot(document.getElementById(\\\"root\\\"));\\nroot.render(\\n  <StrictMode>\\n    <App />\\n  </StrictMode>\\n);\"\n    },\n    \"/public/index.html\": {\n      code: \"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n  <head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <title>Document</title>\\n  </head>\\n  <body>\\n    <div id=\\\"root\\\"></div>\\n  </body>\\n</html>\"\n    },\n    \"/package.json\": {\n      code: JSON.stringify({\n        dependencies: {\n          react: \"^18.0.0\",\n          \"react-dom\": \"^18.0.0\",\n          \"react-scripts\": \"^5.0.0\"\n        },\n        main: \"/index.js\"\n      })\n    }\n  }),\n  main: \"/App.js\",\n  environment: \"create-react-app\"\n};\n\nvar REACT_TYPESCRIPT_TEMPLATE = {\n  files: __assign(__assign({}, commonFiles), {\n    \"tsconfig.json\": {\n      code: \"{\\n  \\\"include\\\": [\\n    \\\"./**/*\\\"\\n  ],\\n  \\\"compilerOptions\\\": {\\n    \\\"strict\\\": true,\\n    \\\"esModuleInterop\\\": true,\\n    \\\"lib\\\": [ \\\"dom\\\", \\\"es2015\\\" ],\\n    \\\"jsx\\\": \\\"react-jsx\\\"\\n  }\\n}\"\n    },\n    \"/App.tsx\": {\n      code: \"export default function App(): JSX.Element {\\n  return <h1>Hello world</h1>\\n}\\n\"\n    },\n    \"/index.tsx\": {\n      code: \"import React, { StrictMode } from \\\"react\\\";\\nimport { createRoot } from \\\"react-dom/client\\\";\\nimport \\\"./styles.css\\\";\\n\\nimport App from \\\"./App\\\";\\n\\nconst root = createRoot(document.getElementById(\\\"root\\\"));\\nroot.render(\\n  <StrictMode>\\n    <App />\\n  </StrictMode>\\n);\"\n    },\n    \"/public/index.html\": {\n      code: \"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n  <head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <title>Document</title>\\n  </head>\\n  <body>\\n    <div id=\\\"root\\\"></div>\\n  </body>\\n</html>\"\n    },\n    \"/package.json\": {\n      code: JSON.stringify({\n        dependencies: {\n          react: \"^18.0.0\",\n          \"react-dom\": \"^18.0.0\",\n          \"react-scripts\": \"^4.0.0\"\n        },\n        devDependencies: {\n          \"@types/react\": \"^18.0.0\",\n          \"@types/react-dom\": \"^18.0.0\",\n          typescript: \"^4.0.0\"\n        },\n        main: \"/index.tsx\"\n      })\n    }\n  }),\n  main: \"/App.tsx\",\n  environment: \"create-react-app\"\n};\n\nvar SOLID_TEMPLATE = {\n  files: __assign(__assign({}, commonFiles), {\n    \"/App.tsx\": {\n      code: \"import { Component } from \\\"solid-js\\\";\\n\\nconst App: Component = () => {\\n  return <h1>Hello world</h1>\\n};\\n\\nexport default App;\"\n    },\n    \"/index.tsx\": {\n      code: \"import { render } from \\\"solid-js/web\\\";\\nimport App from \\\"./App\\\";\\n\\nimport \\\"./styles.css\\\";\\n\\nrender(() => <App />, document.getElementById(\\\"app\\\"));\"\n    },\n    \"/index.html\": {\n      code: \"<html>\\n<head>\\n  <title>Parcel Sandbox</title>\\n  <meta charset=\\\"UTF-8\\\" />\\n</head>\\n<body>\\n  <div id=\\\"app\\\"></div>\\n  <script src=\\\"src/index.tsx\\\"></script>\\n</body>\\n</html>\"\n    },\n    \"/package.json\": {\n      code: JSON.stringify({\n        dependencies: {\n          \"solid-js\": \"1.3.15\"\n        },\n        main: \"/index.tsx\"\n      })\n    }\n  }),\n  main: \"/App.tsx\",\n  environment: \"solid\"\n};\n\nvar SVELTE_TEMPLATE = {\n  files: __assign(__assign({}, commonFiles), {\n    \"/App.svelte\": {\n      code: \"<style>\\n  h1 {\\n    font-size: 1.5rem;\\n  }\\n</style>\\n\\n<script>\\n  let name = 'world';\\n</script>\\n\\n<main>\\n  <h1>Hello {name}</h1>\\n</main>\"\n    },\n    \"/index.js\": {\n      code: \"import App from \\\"./App.svelte\\\";\\nimport \\\"./styles.css\\\";\\n\\nconst app = new App({\\n  target: document.body\\n});\\n\\nexport default app;\\n      \"\n    },\n    \"/public/index.html\": {\n      code: \"<!DOCTYPE html>\\n<html>\\n  <head>\\n    <meta charset=\\\"utf8\\\" />\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width\\\" />\\n\\n    <title>Svelte app</title>\\n\\n    <link rel=\\\"stylesheet\\\" href=\\\"public/bundle.css\\\" />\\n  </head>\\n\\n  <body>\\n    <script src=\\\"bundle.js\\\"></script>\\n  </body>\\n</html>\"\n    },\n    \"/package.json\": {\n      code: JSON.stringify({\n        dependencies: {\n          svelte: \"^3.0.0\"\n        },\n        main: \"/index.js\"\n      })\n    }\n  }),\n  main: \"/App.svelte\",\n  environment: \"svelte\"\n};\n\nvar TEST_TYPESCRIPT_TEMPLATE = {\n  files: {\n    \"tsconfig.json\": {\n      code: \"{\\n  \\\"include\\\": [\\n    \\\"./**/*\\\"\\n  ],\\n  \\\"compilerOptions\\\": {\\n    \\\"strict\\\": true,\\n    \\\"esModuleInterop\\\": true,\\n    \\\"lib\\\": [ \\\"dom\\\", \\\"es2015\\\" ],\\n    \\\"jsx\\\": \\\"react-jsx\\\"\\n  }\\n}\"\n    },\n    \"/add.ts\": {\n      code: \"export const add = (a: number, b: number): number => a + b;\"\n    },\n    \"/add.test.ts\": {\n      code: \"import { add } from './add';\\n\\ndescribe('add', () => {\\n  test('Commutative Law of Addition', () => {\\n    expect(add(1, 2)).toBe(add(2, 1));\\n  });\\n});\"\n    },\n    \"package.json\": {\n      code: JSON.stringify({\n        dependencies: {},\n        devDependencies: {\n          typescript: \"^4.0.0\"\n        },\n        main: \"/add.ts\"\n      })\n    }\n  },\n  main: \"/add.test.ts\",\n  environment: \"parcel\",\n  mode: \"tests\"\n};\n\nvar VANILLA_TEMPLATE = {\n  files: __assign(__assign({}, commonFiles), {\n    \"/index.js\": {\n      code: \"import \\\"./styles.css\\\";\\n\\ndocument.getElementById(\\\"app\\\").innerHTML = `\\n<h1>Hello world</h1>\\n`;\\n\"\n    },\n    \"/index.html\": {\n      code: \"<!DOCTYPE html>\\n<html>\\n\\n<head>\\n  <title>Parcel Sandbox</title>\\n  <meta charset=\\\"UTF-8\\\" />\\n</head>\\n\\n<body>\\n  <div id=\\\"app\\\"></div>\\n\\n  <script src=\\\"index.js\\\">\\n  </script>\\n</body>\\n\\n</html>\"\n    },\n    \"/package.json\": {\n      code: JSON.stringify({\n        dependencies: {},\n        main: \"/index.js\"\n      })\n    }\n  }),\n  main: \"/index.js\",\n  environment: \"parcel\"\n};\n\nvar VANILLA_TYPESCRIPT_TEMPLATE = {\n  files: __assign(__assign({}, commonFiles), {\n    \"tsconfig.json\": {\n      code: \"{\\n  \\\"compilerOptions\\\": {\\n    \\\"strict\\\": true,\\n    \\\"module\\\": \\\"commonjs\\\",\\n    \\\"jsx\\\": \\\"preserve\\\",\\n    \\\"esModuleInterop\\\": true,\\n    \\\"sourceMap\\\": true,\\n    \\\"allowJs\\\": true,\\n    \\\"lib\\\": [\\n      \\\"es6\\\",\\n      \\\"dom\\\"\\n    ],\\n    \\\"rootDir\\\": \\\"src\\\",\\n    \\\"moduleResolution\\\": \\\"node\\\"\\n  }\\n}\"\n    },\n    \"/index.ts\": {\n      code: \"import \\\"./styles.css\\\";\\n\\ndocument.getElementById(\\\"app\\\").innerHTML = `\\n<h1>Hello world</h1>\\n`;\\n\"\n    },\n    \"/index.html\": {\n      code: \"<!DOCTYPE html>\\n<html>\\n\\n<head>\\n  <title>Parcel Sandbox</title>\\n  <meta charset=\\\"UTF-8\\\" />\\n</head>\\n\\n<body>\\n  <div id=\\\"app\\\"></div>\\n\\n  <script src=\\\"index.ts\\\">\\n  </script>\\n</body>\\n\\n</html>\"\n    },\n    \"/package.json\": {\n      code: JSON.stringify({\n        dependencies: {},\n        devDependencies: {\n          typescript: \"^4.0.0\"\n        },\n        main: \"/index.ts\"\n      })\n    }\n  }),\n  main: \"/index.ts\",\n  environment: \"parcel\"\n};\n\nvar VUE_TEMPLATE = {\n  files: {\n    \"/src/styles.css\": commonFiles[\"/styles.css\"],\n    \"/src/App.vue\": {\n      code: \"<template>\\n  <h1>Hello {{ msg }}</h1>\\n</template>\\n\\n<script setup>\\nimport { ref } from 'vue';\\nconst msg = ref('world');\\n</script>\"\n    },\n    \"/src/main.js\": {\n      code: \"import { createApp } from 'vue'\\nimport App from './App.vue'\\nimport \\\"./styles.css\\\";\\n\\ncreateApp(App).mount('#app')\\n\"\n    },\n    \"/public/index.html\": {\n      code: \"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n  <head>\\n    <meta charset=\\\"utf-8\\\" />\\n    <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=edge\\\" />\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width,initial-scale=1.0\\\" />\\n    <title>codesandbox</title>\\n  </head>\\n  <body>\\n    <noscript>\\n      <strong\\n        >We're sorry but codesandbox doesn't work properly without JavaScript\\n        enabled. Please enable it to continue.</strong\\n      >\\n    </noscript>\\n    <div id=\\\"app\\\"></div>\\n    <!-- built files will be auto injected -->\\n  </body>\\n</html>\\n\"\n    },\n    \"/package.json\": {\n      code: JSON.stringify({\n        name: \"vue3\",\n        version: \"0.1.0\",\n        private: true,\n        main: \"/src/main.js\",\n        scripts: {\n          serve: \"vue-cli-service serve\",\n          build: \"vue-cli-service build\"\n        },\n        dependencies: {\n          \"core-js\": \"^3.26.1\",\n          vue: \"^3.2.45\"\n        },\n        devDependencies: {\n          \"@vue/cli-plugin-babel\": \"^5.0.8\",\n          \"@vue/cli-service\": \"^5.0.8\"\n        }\n      })\n    }\n  },\n  main: \"/src/App.vue\",\n  environment: \"vue-cli\"\n};\n\nvar VUE_TS_TEMPLATE = {\n  files: {\n    \"/src/styles.css\": commonFiles[\"/styles.css\"],\n    \"/src/App.vue\": {\n      code: \"<template>\\n  <h1>Hello {{ msg }}</h1>\\n</template>\\n\\n<script setup lang=\\\"ts\\\">\\nimport { ref } from 'vue';\\nconst msg = ref<string>('world');\\n</script>\"\n    },\n    \"/src/main.ts\": {\n      code: \"import { createApp } from 'vue'\\nimport App from './App.vue'\\nimport \\\"./styles.css\\\";\\n\\ncreateApp(App).mount('#app')\\n\"\n    },\n    \"/src/shims-vue.d.ts\": \"/* eslint-disable */\\ndeclare module \\\"*.vue\\\" {\\n  import type { DefineComponent } from \\\"vue\\\";\\n  const component: DefineComponent<{}, {}, any>;\\n  export default component;\\n}\",\n    \"/public/index.html\": {\n      code: \"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n  <head>\\n    <meta charset=\\\"utf-8\\\" />\\n    <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=edge\\\" />\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width,initial-scale=1.0\\\" />\\n    <title>codesandbox</title>\\n  </head>\\n  <body>\\n    <noscript>\\n      <strong\\n        >We're sorry but codesandbox doesn't work properly without JavaScript\\n        enabled. Please enable it to continue.</strong\\n      >\\n    </noscript>\\n    <div id=\\\"app\\\"></div>\\n    <!-- built files will be auto injected -->\\n  </body>\\n</html>\\n\"\n    },\n    \"/package.json\": {\n      code: JSON.stringify({\n        name: \"vue3-ts\",\n        version: \"0.1.0\",\n        private: true,\n        main: \"/src/main.ts\",\n        scripts: {\n          serve: \"vue-cli-service serve\",\n          build: \"vue-cli-service build\"\n        },\n        dependencies: {\n          \"core-js\": \"^3.26.1\",\n          vue: \"^3.2.45\"\n        },\n        devDependencies: {\n          \"@vue/cli-plugin-babel\": \"^5.0.8\",\n          \"@vue/cli-plugin-typescript\": \"^5.0.8\",\n          \"@vue/cli-service\": \"^5.0.8\",\n          typescript: \"^4.9.3\"\n        }\n      })\n    },\n    \"/tsconfig.json\": {\n      code: JSON.stringify({\n        compilerOptions: {\n          target: \"esnext\",\n          module: \"esnext\",\n          strict: true,\n          jsx: \"preserve\",\n          moduleResolution: \"node\",\n          experimentalDecorators: true,\n          skipLibCheck: true,\n          esModuleInterop: true,\n          allowSyntheticDefaultImports: true,\n          forceConsistentCasingInFileNames: true,\n          useDefineForClassFields: true,\n          sourceMap: false,\n          baseUrl: \".\",\n          types: [\"webpack-env\"],\n          paths: {\n            \"@/*\": [\"src/*\"]\n          },\n          lib: [\"esnext\", \"dom\", \"dom.iterable\", \"scripthost\"]\n        },\n        include: [\"src/**/*.ts\", \"src/**/*.tsx\", \"src/**/*.vue\", \"tests/**/*.ts\", \"tests/**/*.tsx\"],\n        exclude: [\"node_modules\"]\n      })\n    }\n  },\n  main: \"/src/App.vue\",\n  environment: \"vue-cli\"\n};\n\nvar STATIC_TEMPLATE = {\n  files: __assign(__assign({}, commonFiles), {\n    \"/index.html\": {\n      code: \"<!DOCTYPE html>\\n<html>\\n\\n<head>\\n  <title>Parcel Sandbox</title>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"stylesheet\\\" href=\\\"/styles.css\\\" />\\n</head>\\n\\n<body>\\n  <h1>Hello world</h1>\\n</body>\\n\\n</html>\"\n    },\n    \"/package.json\": {\n      code: JSON.stringify({\n        dependencies: {},\n        main: \"/index.html\"\n      })\n    }\n  }),\n  main: \"/index.html\",\n  environment: \"static\"\n};\n\nvar SANDBOX_TEMPLATES = {\n  static: STATIC_TEMPLATE,\n  angular: ANGULAR_TEMPLATE,\n  react: REACT_TEMPLATE,\n  \"react-ts\": REACT_TYPESCRIPT_TEMPLATE,\n  solid: SOLID_TEMPLATE,\n  svelte: SVELTE_TEMPLATE,\n  \"test-ts\": TEST_TYPESCRIPT_TEMPLATE,\n  \"vanilla-ts\": VANILLA_TYPESCRIPT_TEMPLATE,\n  vanilla: VANILLA_TEMPLATE,\n  vue: VUE_TEMPLATE,\n  \"vue-ts\": VUE_TS_TEMPLATE,\n  node: NODE_TEMPLATE,\n  nextjs: NEXTJS_TEMPLATE,\n  vite: VITE_TEMPLATE,\n  \"vite-react\": VITE_REACT_TEMPLATE,\n  \"vite-react-ts\": VITE_REACT_TS_TEMPLATE,\n  \"vite-preact\": VITE_PREACT_TEMPLATE,\n  \"vite-preact-ts\": VITE_PREACT_TS_TEMPLATE,\n  \"vite-vue\": VITE_VUE_TEMPLATE,\n  \"vite-vue-ts\": VITE_VUE_TS_TEMPLATE,\n  \"vite-svelte\": VITE_SVELTE_TEMPLATE,\n  \"vite-svelte-ts\": VITE_SVELTE_TS_TEMPLATE,\n  astro: ASTRO_TEMPLATE\n};\n\nvar getSandpackStateFromProps = function (props) {\n  var _a, _b, _c, _d, _e, _f;\n  var normalizedFilesPath = (0,_codesandbox_sandpack_client__WEBPACK_IMPORTED_MODULE_8__.f)(props.files);\n  var projectSetup = combineTemplateFilesToSetup({\n    template: props.template,\n    customSetup: props.customSetup,\n    files: normalizedFilesPath\n  });\n  var visibleFiles = (0,_codesandbox_sandpack_client__WEBPACK_IMPORTED_MODULE_8__.f)((_b = (_a = props.options) === null || _a === void 0 ? void 0 : _a.visibleFiles) !== null && _b !== void 0 ? _b : []);\n  var activeFile = ((_c = props.options) === null || _c === void 0 ? void 0 : _c.activeFile) ? resolveFile((_d = props.options) === null || _d === void 0 ? void 0 : _d.activeFile, projectSetup.files) : undefined;\n  if (visibleFiles.length === 0 && normalizedFilesPath) {\n    Object.keys(normalizedFilesPath).forEach(function (filePath) {\n      var file = normalizedFilesPath[filePath];\n      if (typeof file === \"string\") {\n        visibleFiles.push(filePath);\n        return;\n      }\n      if (!activeFile && file.active) {\n        activeFile = filePath;\n        if (file.hidden === true) {\n          visibleFiles.push(filePath);\n        }\n      }\n      if (!file.hidden) {\n        visibleFiles.push(filePath);\n      }\n    });\n  }\n  if (visibleFiles.length === 0) {\n    visibleFiles = [projectSetup.main];\n  }\n  if (projectSetup.entry && !projectSetup.files[projectSetup.entry]) {\n    projectSetup.entry = resolveFile(projectSetup.entry, projectSetup.files);\n  }\n  if (!activeFile && projectSetup.main) {\n    activeFile = projectSetup.main;\n  }\n  if (!activeFile || !projectSetup.files[activeFile]) {\n    activeFile = visibleFiles[0];\n  }\n  if (!visibleFiles.includes(activeFile)) {\n    visibleFiles.push(activeFile);\n  }\n  var files = (0,_codesandbox_sandpack_client__WEBPACK_IMPORTED_MODULE_8__.d)(projectSetup.files, (_e = projectSetup.dependencies) !== null && _e !== void 0 ? _e : {}, (_f = projectSetup.devDependencies) !== null && _f !== void 0 ? _f : {}, projectSetup.entry);\n  var existOpenPath = visibleFiles.filter(function (path) {\n    return files[path];\n  });\n  return {\n    visibleFiles: existOpenPath,\n    activeFile: activeFile,\n    files: files,\n    environment: projectSetup.environment,\n    shouldUpdatePreview: true\n  };\n};\nvar resolveFile = function (path, files) {\n  var normalizedFilesPath = (0,_codesandbox_sandpack_client__WEBPACK_IMPORTED_MODULE_8__.f)(files);\n  var normalizedPath = (0,_codesandbox_sandpack_client__WEBPACK_IMPORTED_MODULE_8__.f)(path);\n  if ((normalizedPath in normalizedFilesPath)) {\n    return normalizedPath;\n  }\n  if (!path) {\n    return null;\n  }\n  var resolvedPath = null;\n  var index = 0;\n  var strategies = [\".js\", \".jsx\", \".ts\", \".tsx\"];\n  while (!resolvedPath && index < strategies.length) {\n    var removeExtension = normalizedPath.split(\".\")[0];\n    var attemptPath = (\"\").concat(removeExtension).concat(strategies[index]);\n    if (normalizedFilesPath[attemptPath] !== undefined) {\n      resolvedPath = attemptPath;\n    }\n    index++;\n  }\n  return resolvedPath;\n};\nvar combineTemplateFilesToSetup = function (_a) {\n  var files = _a.files, template = _a.template, customSetup = _a.customSetup;\n  if (!template) {\n    if (!customSetup) {\n      var defaultTemplate = SANDBOX_TEMPLATES.vanilla;\n      return __assign(__assign({}, defaultTemplate), {\n        files: __assign(__assign({}, defaultTemplate.files), convertedFilesToBundlerFiles(files))\n      });\n    }\n    if (!files || Object.keys(files).length === 0) {\n      throw new Error(\"[sandpack-react]: without a template, you must pass at least one file\");\n    }\n    return __assign(__assign({}, customSetup), {\n      files: convertedFilesToBundlerFiles(files)\n    });\n  }\n  var baseTemplate = SANDBOX_TEMPLATES[template];\n  if (!baseTemplate) {\n    throw new Error((\"[sandpack-react]: invalid template \\\"\").concat(template, \"\\\" provided\"));\n  }\n  if (!customSetup && !files) {\n    return baseTemplate;\n  }\n  return {\n    files: convertedFilesToBundlerFiles(__assign(__assign({}, baseTemplate.files), files)),\n    dependencies: __assign(__assign({}, baseTemplate.dependencies), customSetup === null || customSetup === void 0 ? void 0 : customSetup.dependencies),\n    devDependencies: __assign(__assign({}, baseTemplate.devDependencies), customSetup === null || customSetup === void 0 ? void 0 : customSetup.devDependencies),\n    entry: (0,_codesandbox_sandpack_client__WEBPACK_IMPORTED_MODULE_8__.f)(customSetup === null || customSetup === void 0 ? void 0 : customSetup.entry),\n    main: baseTemplate.main,\n    environment: (customSetup === null || customSetup === void 0 ? void 0 : customSetup.environment) || baseTemplate.environment\n  };\n};\nvar convertedFilesToBundlerFiles = function (files) {\n  if (!files) return {};\n  return Object.keys(files).reduce(function (acc, key) {\n    if (typeof files[key] === \"string\") {\n      acc[key] = {\n        code: files[key]\n      };\n    } else {\n      acc[key] = files[key];\n    }\n    return acc;\n  }, {});\n};\n\nvar useAppState = function (props, files) {\n  var _a = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n    editorState: \"pristine\"\n  }), state = _a[0], setState = _a[1];\n  var originalStateFromProps = getSandpackStateFromProps(props);\n  var editorState = (0,dequal__WEBPACK_IMPORTED_MODULE_2__.dequal)(originalStateFromProps.files, files) ? \"pristine\" : \"dirty\";\n  if (editorState !== state.editorState) {\n    setState(function (prev) {\n      return __assign(__assign({}, prev), {\n        editorState: editorState\n      });\n    });\n  }\n  return state;\n};\n\nvar MAX_ID_LENGTH = 9;\nvar useAsyncSandpackId = function (files) {\n  if (typeof react__WEBPACK_IMPORTED_MODULE_1__.useId === \"function\") {\n    var reactDomId_1 = (0,react__WEBPACK_IMPORTED_MODULE_1__.useId)();\n    return function () {\n      return __awaiter(void 0, void 0, void 0, function () {\n        var allCode, sha;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              allCode = Object.entries(files).map(function (path, code) {\n                return path + \"|\" + code;\n              }).join(\"|||\");\n              return [4, generateShortId(allCode + reactDomId_1)];\n            case 1:\n              sha = _a.sent();\n              return [2, ensureLength(sha.replace(/:/g, \"sp\"), MAX_ID_LENGTH)];\n          }\n        });\n      });\n    };\n  } else {\n    return function () {\n      return ensureLength(generateRandomId(), MAX_ID_LENGTH);\n    };\n  }\n};\nfunction ensureLength(str, length) {\n  if (str.length > length) {\n    return str.slice(0, length);\n  } else {\n    return str.padEnd(length, \"s\");\n  }\n}\nfunction generateShortId(input) {\n  return __awaiter(this, void 0, void 0, function () {\n    var encoder, data, hashBuffer, hashArray;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          encoder = new TextEncoder();\n          data = encoder.encode(input);\n          return [4, crypto.subtle.digest(\"SHA-256\", data)];\n        case 1:\n          hashBuffer = _a.sent();\n          hashArray = Array.from(new Uint8Array(hashBuffer));\n          return [2, btoa(String.fromCharCode.apply(String, hashArray))];\n      }\n    });\n  });\n}\n\nvar BUNDLER_TIMEOUT = 40000;\nvar useClient = function (_a, filesState) {\n  var _b, _c, _d;\n  var options = _a.options, customSetup = _a.customSetup, teamId = _a.teamId, sandboxId = _a.sandboxId;\n  options !== null && options !== void 0 ? options : options = {};\n  customSetup !== null && customSetup !== void 0 ? customSetup : customSetup = {};\n  var initModeFromProps = (options === null || options === void 0 ? void 0 : options.initMode) || \"lazy\";\n  var _e = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n    startRoute: options === null || options === void 0 ? void 0 : options.startRoute,\n    bundlerState: undefined,\n    error: null,\n    initMode: initModeFromProps,\n    reactDevTools: undefined,\n    status: ((_b = options === null || options === void 0 ? void 0 : options.autorun) !== null && _b !== void 0 ? _b : true) ? \"initial\" : \"idle\"\n  }), state = _e[0], setState = _e[1];\n  var intersectionObserverCallback = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)();\n  var intersectionObserver = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n  var lazyAnchorRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n  var registeredIframes = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)({});\n  var clients = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)({});\n  var timeoutHook = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n  var unsubscribeClientListeners = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)({});\n  var unsubscribe = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)();\n  var queuedListeners = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)({\n    global: {}\n  });\n  var debounceHook = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)();\n  var prevEnvironment = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(filesState.environment);\n  var experimental_stableServiceWorkerId = useAsyncSandpackId(filesState.files);\n  var createClient = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(function (iframe, clientId, clientPropsOverride) {\n    return __awaiter(void 0, void 0, void 0, function () {\n      var timeOut, shouldSetTimeout, client, _a, _b, _c, globalListeners;\n      var _d;\n      var _e, _f, _g;\n      return __generator(this, function (_h) {\n        switch (_h.label) {\n          case 0:\n            if (clients.current[clientId]) {\n              clients.current[clientId].destroy();\n            }\n            options !== null && options !== void 0 ? options : options = {};\n            customSetup !== null && customSetup !== void 0 ? customSetup : customSetup = {};\n            timeOut = (_e = options === null || options === void 0 ? void 0 : options.bundlerTimeOut) !== null && _e !== void 0 ? _e : BUNDLER_TIMEOUT;\n            if (timeoutHook.current) {\n              clearTimeout(timeoutHook.current);\n            }\n            shouldSetTimeout = typeof unsubscribe.current !== \"function\";\n            if (shouldSetTimeout) {\n              timeoutHook.current = setTimeout(function () {\n                unregisterAllClients();\n                setState(function (prev) {\n                  return __assign(__assign({}, prev), {\n                    status: \"timeout\"\n                  });\n                });\n              }, timeOut);\n            }\n            _a = _codesandbox_sandpack_client__WEBPACK_IMPORTED_MODULE_9__.loadSandpackClient;\n            _b = [iframe, {\n              files: filesState.files,\n              template: filesState.environment\n            }];\n            _d = {\n              externalResources: options.externalResources,\n              bundlerURL: options.bundlerURL,\n              startRoute: (_f = clientPropsOverride === null || clientPropsOverride === void 0 ? void 0 : clientPropsOverride.startRoute) !== null && _f !== void 0 ? _f : options.startRoute,\n              fileResolver: options.fileResolver,\n              skipEval: (_g = options.skipEval) !== null && _g !== void 0 ? _g : false,\n              logLevel: options.logLevel,\n              showOpenInCodeSandbox: false,\n              showErrorScreen: true,\n              showLoadingScreen: false,\n              reactDevTools: state.reactDevTools,\n              customNpmRegistries: customSetup === null || customSetup === void 0 ? void 0 : customSetup.npmRegistries,\n              teamId: teamId,\n              experimental_enableServiceWorker: !!(options === null || options === void 0 ? void 0 : options.experimental_enableServiceWorker)\n            };\n            if (!(options === null || options === void 0 ? void 0 : options.experimental_enableStableServiceWorkerId)) return [3, 2];\n            return [4, experimental_stableServiceWorkerId()];\n          case 1:\n            _c = _h.sent();\n            return [3, 3];\n          case 2:\n            _c = undefined;\n            _h.label = 3;\n          case 3:\n            return [4, _a.apply(void 0, _b.concat([(_d.experimental_stableServiceWorkerId = _c, _d.sandboxId = sandboxId, _d)]))];\n          case 4:\n            client = _h.sent();\n            if (typeof unsubscribe.current !== \"function\") {\n              unsubscribe.current = client.listen(handleMessage);\n            }\n            unsubscribeClientListeners.current[clientId] = unsubscribeClientListeners.current[clientId] || ({});\n            if (queuedListeners.current[clientId]) {\n              Object.keys(queuedListeners.current[clientId]).forEach(function (listenerId) {\n                var listener = queuedListeners.current[clientId][listenerId];\n                var unsubscribe = client.listen(listener);\n                unsubscribeClientListeners.current[clientId][listenerId] = unsubscribe;\n              });\n              queuedListeners.current[clientId] = {};\n            }\n            globalListeners = Object.entries(queuedListeners.current.global);\n            globalListeners.forEach(function (_a) {\n              var listenerId = _a[0], listener = _a[1];\n              var unsubscribe = client.listen(listener);\n              unsubscribeClientListeners.current[clientId][listenerId] = unsubscribe;\n            });\n            clients.current[clientId] = client;\n            return [2];\n        }\n      });\n    });\n  }, [filesState.environment, filesState.files, state.reactDevTools]);\n  var unregisterAllClients = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(function () {\n    Object.keys(clients.current).map(unregisterBundler);\n    if (typeof unsubscribe.current === \"function\") {\n      unsubscribe.current();\n      unsubscribe.current = undefined;\n    }\n  }, []);\n  var runSandpack = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(function () {\n    return __awaiter(void 0, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4, Promise.all(Object.entries(registeredIframes.current).map(function (_a) {\n              var clientId = _a[0], _b = _a[1], iframe = _b.iframe, _c = _b.clientPropsOverride, clientPropsOverride = _c === void 0 ? {} : _c;\n              return __awaiter(void 0, void 0, void 0, function () {\n                return __generator(this, function (_d) {\n                  switch (_d.label) {\n                    case 0:\n                      return [4, createClient(iframe, clientId, clientPropsOverride)];\n                    case 1:\n                      _d.sent();\n                      return [2];\n                  }\n                });\n              });\n            }))];\n          case 1:\n            _a.sent();\n            setState(function (prev) {\n              return __assign(__assign({}, prev), {\n                error: null,\n                status: \"running\"\n              });\n            });\n            return [2];\n        }\n      });\n    });\n  }, [createClient]);\n  intersectionObserverCallback.current = function (entries) {\n    if (entries.some(function (entry) {\n      return entry.isIntersecting;\n    })) {\n      runSandpack();\n    } else {\n      unregisterAllClients();\n    }\n  };\n  var initializeSandpackIframe = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(function () {\n    var _a, _b, _c;\n    var autorun = (_a = options === null || options === void 0 ? void 0 : options.autorun) !== null && _a !== void 0 ? _a : true;\n    if (!autorun) {\n      return;\n    }\n    var observerOptions = (_b = options === null || options === void 0 ? void 0 : options.initModeObserverOptions) !== null && _b !== void 0 ? _b : {\n      rootMargin: \"1000px 0px\"\n    };\n    if (intersectionObserver.current && lazyAnchorRef.current) {\n      (_c = intersectionObserver.current) === null || _c === void 0 ? void 0 : _c.unobserve(lazyAnchorRef.current);\n    }\n    if (lazyAnchorRef.current && state.initMode === \"lazy\") {\n      intersectionObserver.current = new IntersectionObserver(function (entries) {\n        var _a, _b;\n        if (entries.some(function (entry) {\n          return entry.isIntersecting;\n        })) {\n          if (entries.some(function (entry) {\n            return entry.isIntersecting;\n          }) && lazyAnchorRef.current) {\n            (_a = intersectionObserverCallback.current) === null || _a === void 0 ? void 0 : _a.call(intersectionObserverCallback, entries);\n            (_b = intersectionObserver.current) === null || _b === void 0 ? void 0 : _b.unobserve(lazyAnchorRef.current);\n          }\n        }\n      }, observerOptions);\n      intersectionObserver.current.observe(lazyAnchorRef.current);\n    } else if (lazyAnchorRef.current && state.initMode === \"user-visible\") {\n      intersectionObserver.current = new IntersectionObserver(function (entries) {\n        var _a;\n        (_a = intersectionObserverCallback.current) === null || _a === void 0 ? void 0 : _a.call(intersectionObserverCallback, entries);\n      }, observerOptions);\n      intersectionObserver.current.observe(lazyAnchorRef.current);\n    } else {\n      runSandpack();\n    }\n  }, [options === null || options === void 0 ? void 0 : options.autorun, options === null || options === void 0 ? void 0 : options.initModeObserverOptions, runSandpack, state.initMode, unregisterAllClients]);\n  var registerBundler = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(function (iframe, clientId, clientPropsOverride) {\n    return __awaiter(void 0, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            registeredIframes.current[clientId] = {\n              iframe: iframe,\n              clientPropsOverride: clientPropsOverride\n            };\n            if (!(state.status === \"running\")) return [3, 2];\n            return [4, createClient(iframe, clientId, clientPropsOverride)];\n          case 1:\n            _a.sent();\n            _a.label = 2;\n          case 2:\n            return [2];\n        }\n      });\n    });\n  }, [createClient, state.status]);\n  var unregisterBundler = function (clientId) {\n    var _a, _b;\n    var client = clients.current[clientId];\n    if (client) {\n      client.destroy();\n      (_a = client.iframe.contentWindow) === null || _a === void 0 ? void 0 : _a.location.replace(\"about:blank\");\n      client.iframe.removeAttribute(\"src\");\n      delete clients.current[clientId];\n    } else {\n      delete registeredIframes.current[clientId];\n    }\n    if (timeoutHook.current) {\n      clearTimeout(timeoutHook.current);\n    }\n    var unsubscribeQueuedClients = Object.values((_b = unsubscribeClientListeners.current[clientId]) !== null && _b !== void 0 ? _b : {});\n    unsubscribeQueuedClients.forEach(function (listenerOfClient) {\n      var listenerFunctions = Object.values(listenerOfClient);\n      listenerFunctions.forEach(function (unsubscribe) {\n        return unsubscribe();\n      });\n    });\n    var status = Object.keys(clients.current).length > 0 ? \"running\" : \"idle\";\n    setState(function (prev) {\n      return __assign(__assign({}, prev), {\n        status: status\n      });\n    });\n  };\n  var handleMessage = function (msg) {\n    if (msg.type === \"start\") {\n      setState(function (prev) {\n        return __assign(__assign({}, prev), {\n          error: null\n        });\n      });\n    } else if (msg.type === \"state\") {\n      setState(function (prev) {\n        return __assign(__assign({}, prev), {\n          bundlerState: msg.state\n        });\n      });\n    } else if (msg.type === \"done\" && !msg.compilatonError || msg.type === \"connected\") {\n      if (timeoutHook.current) {\n        clearTimeout(timeoutHook.current);\n      }\n      setState(function (prev) {\n        return __assign(__assign({}, prev), {\n          error: null\n        });\n      });\n    } else if (msg.type === \"action\" && msg.action === \"show-error\") {\n      if (timeoutHook.current) {\n        clearTimeout(timeoutHook.current);\n      }\n      setState(function (prev) {\n        return __assign(__assign({}, prev), {\n          error: (0,_codesandbox_sandpack_client__WEBPACK_IMPORTED_MODULE_8__.e)(msg)\n        });\n      });\n    } else if (msg.type === \"action\" && msg.action === \"notification\" && msg.notificationType === \"error\") {\n      setState(function (prev) {\n        return __assign(__assign({}, prev), {\n          error: {\n            message: msg.title\n          }\n        });\n      });\n    }\n  };\n  var registerReactDevTools = function (value) {\n    setState(function (prev) {\n      return __assign(__assign({}, prev), {\n        reactDevTools: value\n      });\n    });\n  };\n  var recompileMode = (_c = options === null || options === void 0 ? void 0 : options.recompileMode) !== null && _c !== void 0 ? _c : \"delayed\";\n  var recompileDelay = (_d = options === null || options === void 0 ? void 0 : options.recompileDelay) !== null && _d !== void 0 ? _d : 200;\n  var dispatchMessage = function (message, clientId) {\n    if (state.status !== \"running\") {\n      console.warn(\"[sandpack-react]: dispatch cannot be called while in idle mode\");\n      return;\n    }\n    if (clientId) {\n      clients.current[clientId].dispatch(message);\n    } else {\n      Object.values(clients.current).forEach(function (client) {\n        client.dispatch(message);\n      });\n    }\n  };\n  var addListener = function (listener, clientId) {\n    if (clientId) {\n      if (clients.current[clientId]) {\n        var unsubscribeListener = clients.current[clientId].listen(listener);\n        return unsubscribeListener;\n      } else {\n        var listenerId_1 = generateRandomId();\n        queuedListeners.current[clientId] = queuedListeners.current[clientId] || ({});\n        unsubscribeClientListeners.current[clientId] = unsubscribeClientListeners.current[clientId] || ({});\n        queuedListeners.current[clientId][listenerId_1] = listener;\n        var unsubscribeListener = function () {\n          if (queuedListeners.current[clientId][listenerId_1]) {\n            delete queuedListeners.current[clientId][listenerId_1];\n          } else if (unsubscribeClientListeners.current[clientId][listenerId_1]) {\n            unsubscribeClientListeners.current[clientId][listenerId_1]();\n            delete unsubscribeClientListeners.current[clientId][listenerId_1];\n          }\n        };\n        return unsubscribeListener;\n      }\n    } else {\n      var listenerId_2 = generateRandomId();\n      queuedListeners.current.global[listenerId_2] = listener;\n      var clientsList = Object.values(clients.current);\n      var currentClientUnsubscribeListeners_1 = clientsList.map(function (client) {\n        return client.listen(listener);\n      });\n      var unsubscribeListener = function () {\n        currentClientUnsubscribeListeners_1.forEach(function (unsubscribe) {\n          return unsubscribe();\n        });\n        delete queuedListeners.current.global[listenerId_2];\n        Object.values(unsubscribeClientListeners.current).forEach(function (client) {\n          var _a;\n          (_a = client === null || client === void 0 ? void 0 : client[listenerId_2]) === null || _a === void 0 ? void 0 : _a.call(client);\n        });\n      };\n      return unsubscribeListener;\n    }\n  };\n  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(function watchFileChanges() {\n    if (state.status !== \"running\" || !filesState.shouldUpdatePreview) {\n      return;\n    }\n    if (prevEnvironment.current !== filesState.environment) {\n      prevEnvironment.current = filesState.environment;\n      Object.entries(clients.current).forEach(function (_a) {\n        var key = _a[0], client = _a[1];\n        registerBundler(client.iframe, key);\n      });\n    }\n    if (recompileMode === \"immediate\") {\n      Object.values(clients.current).forEach(function (client) {\n        if (client.status === \"done\") {\n          client.updateSandbox({\n            files: filesState.files,\n            template: filesState.environment\n          });\n        }\n      });\n    }\n    if (recompileMode === \"delayed\") {\n      if (typeof window === \"undefined\") return;\n      window.clearTimeout(debounceHook.current);\n      debounceHook.current = window.setTimeout(function () {\n        Object.values(clients.current).forEach(function (client) {\n          if (client.status === \"done\") {\n            client.updateSandbox({\n              files: filesState.files,\n              template: filesState.environment\n            });\n          }\n        });\n      }, recompileDelay);\n    }\n    return function () {\n      window.clearTimeout(debounceHook.current);\n    };\n  }, [filesState.files, filesState.environment, filesState.shouldUpdatePreview, recompileDelay, recompileMode, registerBundler, state.status]);\n  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(function watchInitMode() {\n    if (initModeFromProps !== state.initMode) {\n      setState(function (prev) {\n        return __assign(__assign({}, prev), {\n          initMode: initModeFromProps\n        });\n      });\n      initializeSandpackIframe();\n    }\n  }, [initModeFromProps, initializeSandpackIframe, state.initMode]);\n  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(function () {\n    return function unmountClient() {\n      if (typeof unsubscribe.current === \"function\") {\n        unsubscribe.current();\n      }\n      if (timeoutHook.current) {\n        clearTimeout(timeoutHook.current);\n      }\n      if (debounceHook.current) {\n        clearTimeout(debounceHook.current);\n      }\n      if (intersectionObserver.current) {\n        intersectionObserver.current.disconnect();\n      }\n    };\n  }, []);\n  return [state, {\n    clients: clients.current,\n    initializeSandpackIframe: initializeSandpackIframe,\n    runSandpack: runSandpack,\n    registerBundler: registerBundler,\n    unregisterBundler: unregisterBundler,\n    registerReactDevTools: registerReactDevTools,\n    addListener: addListener,\n    dispatchMessage: dispatchMessage,\n    lazyAnchorRef: lazyAnchorRef,\n    unsubscribeClientListenersRef: unsubscribeClientListeners,\n    queuedListenersRef: queuedListeners\n  }];\n};\n\nvar useFiles = function (props) {\n  var originalStateFromProps = getSandpackStateFromProps(props);\n  var _a = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(originalStateFromProps), state = _a[0], setState = _a[1];\n  var isMountedRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(false);\n  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(function () {\n    if (isMountedRef.current) {\n      setState(getSandpackStateFromProps(props));\n    } else {\n      isMountedRef.current = true;\n    }\n  }, [props.files, props.customSetup, props.template]);\n  var updateFile = function (pathOrFiles, code, shouldUpdatePreview) {\n    if (shouldUpdatePreview === void 0) {\n      shouldUpdatePreview = true;\n    }\n    setState(function (prev) {\n      var _a;\n      var files = prev.files;\n      if (typeof pathOrFiles === \"string\" && typeof code === \"string\") {\n        files = __assign(__assign({}, files), (_a = {}, _a[pathOrFiles] = __assign(__assign({}, files[pathOrFiles]), {\n          code: code\n        }), _a));\n      } else if (typeof pathOrFiles === \"object\") {\n        files = __assign(__assign({}, files), convertedFilesToBundlerFiles(pathOrFiles));\n      }\n      return __assign(__assign({}, prev), {\n        files: (0,_codesandbox_sandpack_client__WEBPACK_IMPORTED_MODULE_8__.f)(files),\n        shouldUpdatePreview: shouldUpdatePreview\n      });\n    });\n  };\n  var operations = {\n    openFile: function (path) {\n      setState(function (_a) {\n        var visibleFiles = _a.visibleFiles, rest = __rest(_a, [\"visibleFiles\"]);\n        var newPaths = visibleFiles.includes(path) ? visibleFiles : __spreadArray(__spreadArray([], visibleFiles, true), [path], false);\n        return __assign(__assign({}, rest), {\n          activeFile: path,\n          visibleFiles: newPaths\n        });\n      });\n    },\n    resetFile: function (path) {\n      setState(function (prevState) {\n        var _a;\n        return __assign(__assign({}, prevState), {\n          files: __assign(__assign({}, prevState.files), (_a = {}, _a[path] = originalStateFromProps.files[path], _a))\n        });\n      });\n    },\n    resetAllFiles: function () {\n      setState(function (prev) {\n        return __assign(__assign({}, prev), {\n          files: originalStateFromProps.files\n        });\n      });\n    },\n    setActiveFile: function (activeFile) {\n      if (state.files[activeFile]) {\n        setState(function (prev) {\n          return __assign(__assign({}, prev), {\n            activeFile: activeFile\n          });\n        });\n      }\n    },\n    updateCurrentFile: function (code, shouldUpdatePreview) {\n      if (shouldUpdatePreview === void 0) {\n        shouldUpdatePreview = true;\n      }\n      updateFile(state.activeFile, code, shouldUpdatePreview);\n    },\n    updateFile: updateFile,\n    addFile: updateFile,\n    closeFile: function (path) {\n      if (state.visibleFiles.length === 1) {\n        return;\n      }\n      setState(function (_a) {\n        var visibleFiles = _a.visibleFiles, activeFile = _a.activeFile, prev = __rest(_a, [\"visibleFiles\", \"activeFile\"]);\n        var indexOfRemovedPath = visibleFiles.indexOf(path);\n        var newPaths = visibleFiles.filter(function (openPath) {\n          return openPath !== path;\n        });\n        return __assign(__assign({}, prev), {\n          activeFile: path === activeFile ? indexOfRemovedPath === 0 ? visibleFiles[1] : visibleFiles[indexOfRemovedPath - 1] : activeFile,\n          visibleFiles: newPaths\n        });\n      });\n    },\n    deleteFile: function (path, shouldUpdatePreview) {\n      if (shouldUpdatePreview === void 0) {\n        shouldUpdatePreview = true;\n      }\n      setState(function (_a) {\n        var visibleFiles = _a.visibleFiles, files = _a.files, activeFile = _a.activeFile, rest = __rest(_a, [\"visibleFiles\", \"files\", \"activeFile\"]);\n        var newFiles = __assign({}, files);\n        delete newFiles[path];\n        var remainingVisibleFiles = visibleFiles.filter(function (openPath) {\n          return openPath !== path;\n        });\n        var deletedLastVisibleFile = remainingVisibleFiles.length === 0;\n        if (deletedLastVisibleFile) {\n          var nextFile = Object.keys(files)[Object.keys(files).length - 1];\n          return __assign(__assign({}, rest), {\n            visibleFiles: [nextFile],\n            activeFile: nextFile,\n            files: newFiles,\n            shouldUpdatePreview: shouldUpdatePreview\n          });\n        }\n        return __assign(__assign({}, rest), {\n          visibleFiles: remainingVisibleFiles,\n          activeFile: path === activeFile ? remainingVisibleFiles[remainingVisibleFiles.length - 1] : activeFile,\n          files: newFiles,\n          shouldUpdatePreview: shouldUpdatePreview\n        });\n      });\n    }\n  };\n  return [__assign(__assign({}, state), {\n    visibleFilesFromProps: originalStateFromProps.visibleFiles\n  }), operations];\n};\n\nvar Sandpack$1 = react__WEBPACK_IMPORTED_MODULE_1__.createContext(null);\nvar SandpackProvider = function (props) {\n  var _a, _b, _c;\n  var children = props.children, options = props.options, style = props.style, className = props.className, theme = props.theme;\n  var _d = useFiles(props), fileState = _d[0], fileOperations = _d[1];\n  var _e = useClient(props, fileState), clientState = _e[0], _f = _e[1], dispatchMessage = _f.dispatchMessage, addListener = _f.addListener, clientOperations = __rest(_f, [\"dispatchMessage\", \"addListener\"]);\n  var appState = useAppState(props, fileState.files);\n  react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function () {\n    clientOperations.initializeSandpackIframe();\n  }, []);\n  return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Sandpack$1.Provider, {\n    value: __assign(__assign(__assign(__assign(__assign(__assign({}, fileState), clientState), appState), fileOperations), clientOperations), {\n      autoReload: (_b = (_a = props.options) === null || _a === void 0 ? void 0 : _a.autoReload) !== null && _b !== void 0 ? _b : true,\n      teamId: props === null || props === void 0 ? void 0 : props.teamId,\n      exportOptions: (_c = props === null || props === void 0 ? void 0 : props.customSetup) === null || _c === void 0 ? void 0 : _c.exportOptions,\n      listen: addListener,\n      dispatch: dispatchMessage\n    }),\n    children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ClassNamesProvider, {\n      classes: options === null || options === void 0 ? void 0 : options.classes,\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(SandpackThemeProvider, {\n        className: className,\n        style: style,\n        theme: theme,\n        children: children\n      })\n    })\n  });\n};\nvar SandpackConsumer = Sandpack$1.Consumer;\n\nfunction useSandpack() {\n  var sandpack = react__WEBPACK_IMPORTED_MODULE_1__.useContext(Sandpack$1);\n  if (sandpack === null) {\n    throw new Error(\"[sandpack-react]: \\\"useSandpack\\\" must be wrapped by a \\\"SandpackProvider\\\"\");\n  }\n  var dispatch = sandpack.dispatch, listen = sandpack.listen, rest = __rest(sandpack, [\"dispatch\", \"listen\"]);\n  return {\n    sandpack: __assign({}, rest),\n    dispatch: dispatch,\n    listen: listen\n  };\n}\n\nvar useActiveCode = function () {\n  var _a, _b, _c;\n  var sandpack = useSandpack().sandpack;\n  return {\n    code: (_a = sandpack.files[sandpack.activeFile]) === null || _a === void 0 ? void 0 : _a.code,\n    readOnly: (_c = (_b = sandpack.files[sandpack.activeFile]) === null || _b === void 0 ? void 0 : _b.readOnly) !== null && _c !== void 0 ? _c : false,\n    updateCode: sandpack.updateCurrentFile\n  };\n};\n\nvar iconStandaloneClassName = fakeCss;\nvar buttonClassName = fakeCss;\nvar roundedButtonClassName = fakeCss;\nvar iconClassName = fakeCss;\nkeyframes({\n  \"0%\": {\n    opacity: 0\n  },\n  \"100%\": {\n    opacity: 1\n  }\n});\nvar absoluteClassName = fakeCss;\nvar errorClassName = fakeCss;\nvar errorBundlerClassName = fakeCss;\nvar errorMessageClassName = fakeCss;\n\nvar tabsClassName = fakeCss;\nvar tabsScrollableClassName = fakeCss;\nvar closeButtonClassName = fakeCss;\nvar tabButton = fakeCss;\nvar FileTabs = function (_a) {\n  var closableTabs = _a.closableTabs, className = _a.className, props = __rest(_a, [\"closableTabs\", \"className\"]);\n  var sandpack = useSandpack().sandpack;\n  var classNames = useClassNames();\n  var activeFile = sandpack.activeFile, visibleFiles = sandpack.visibleFiles, setActiveFile = sandpack.setActiveFile;\n  var handleCloseFile = function (ev) {\n    ev.stopPropagation();\n    var tabElm = ev.target.closest(\"[data-active]\");\n    var pathToClose = tabElm === null || tabElm === void 0 ? void 0 : tabElm.getAttribute(\"title\");\n    if (!pathToClose) {\n      return;\n    }\n    sandpack.closeFile(pathToClose);\n  };\n  var getTriggerText = function (currentPath) {\n    var documentFileName = getFileName(currentPath);\n    var pathsWithDuplicateFileNames = visibleFiles.reduce(function (prev, curr) {\n      if (curr === currentPath) {\n        return prev;\n      }\n      var fileName = getFileName(curr);\n      if (fileName === documentFileName) {\n        prev.push(curr);\n        return prev;\n      }\n      return prev;\n    }, []);\n    if (pathsWithDuplicateFileNames.length === 0) {\n      return documentFileName;\n    } else {\n      return calculateNearestUniquePath(currentPath, pathsWithDuplicateFileNames);\n    }\n  };\n  return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", __assign({\n    className: classNames(\"tabs\", [tabsClassName, className]),\n    translate: \"no\"\n  }, props, {\n    children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n      \"aria-label\": \"Select active file\",\n      className: classNames(\"tabs-scrollable-container\", [tabsScrollableClassName]),\n      role: \"tablist\",\n      children: visibleFiles.map(function (filePath) {\n        return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"button\", {\n          \"aria-selected\": filePath === activeFile,\n          className: classNames(\"tab-button\", [buttonClassName, tabButton]),\n          \"data-active\": filePath === activeFile,\n          onClick: function () {\n            return setActiveFile(filePath);\n          },\n          role: \"tab\",\n          title: filePath,\n          type: \"button\",\n          children: [getTriggerText(filePath), closableTabs && visibleFiles.length > 1 && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n            className: classNames(\"close-button\", [closeButtonClassName]),\n            onClick: handleCloseFile,\n            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(CloseIcon, {})\n          })]\n        }, filePath);\n      })\n    })\n  }));\n};\n\nvar RoundedButton = function (_a) {\n  var onClick = _a.onClick, className = _a.className, children = _a.children;\n  var classNames = useClassNames();\n  return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"button\", {\n    className: classNames(\"button\", [classNames(\"icon-standalone\"), buttonClassName, iconStandaloneClassName, roundedButtonClassName, className]),\n    onClick: onClick,\n    type: \"button\",\n    children: children\n  });\n};\n\nvar runButtonClassName = fakeCss;\nvar RunButton$1 = function (_a) {\n  var onClick = _a.onClick, props = __rest(_a, [\"className\", \"onClick\"]);\n  var sandpack = useSandpack().sandpack;\n  return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(RoundedButton, __assign({\n    className: runButtonClassName.toString(),\n    onClick: function (event) {\n      sandpack.runSandpack();\n      onClick === null || onClick === void 0 ? void 0 : onClick(event);\n    }\n  }, props, {\n    children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(RunIcon, {}), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n      children: \"Run\"\n    })]\n  }));\n};\n\nvar stackClassName = fakeCss;\nvar SandpackStack = function (_a) {\n  var className = _a.className, props = __rest(_a, [\"className\"]);\n  var classNames = useClassNames();\n  return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", __assign({\n    className: classNames(\"stack\", [stackClassName, className])\n  }, props));\n};\n\nvar useSandpackTheme = function () {\n  var _a = react__WEBPACK_IMPORTED_MODULE_1__.useContext(SandpackThemeContext), theme = _a.theme, id = _a.id, mode = _a.mode;\n  return {\n    theme: theme,\n    themeId: id,\n    themeMode: mode\n  };\n};\n\nvar shallowEqual = function (a, b) {\n  if (a.length !== b.length) return false;\n  var result = true;\n  for (var index = 0; index < a.length; index++) {\n    if (a[index] !== b[index]) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\nvar getCodeMirrorPosition = function (doc, _a) {\n  var line = _a.line, column = _a.column;\n  return doc.line(line).from + (column !== null && column !== void 0 ? column : 0) - 1;\n};\nvar getEditorTheme = function () {\n  return _codemirror_view__WEBPACK_IMPORTED_MODULE_10__.EditorView.theme({\n    \"&\": {\n      backgroundColor: (\"var(--\").concat(THEME_PREFIX, \"-colors-surface1)\"),\n      color: (\"var(--\").concat(THEME_PREFIX, \"-syntax-color-plain)\"),\n      height: \"100%\"\n    },\n    \".cm-matchingBracket, .cm-nonmatchingBracket, &.cm-focused .cm-matchingBracket, &.cm-focused .cm-nonmatchingBracket\": {\n      color: \"inherit\",\n      backgroundColor: \"rgba(128,128,128,.25)\",\n      backgroundBlendMode: \"difference\"\n    },\n    \"&.cm-editor.cm-focused\": {\n      outline: \"none\"\n    },\n    \".cm-activeLine\": {\n      backgroundColor: (\"var(--\").concat(THEME_PREFIX, \"-colors-surface3)\"),\n      borderRadius: (\"var(--\").concat(THEME_PREFIX, \"-border-radius)\")\n    },\n    \".cm-errorLine\": {\n      backgroundColor: (\"var(--\").concat(THEME_PREFIX, \"-colors-errorSurface)\"),\n      borderRadius: (\"var(--\").concat(THEME_PREFIX, \"-border-radius)\")\n    },\n    \".cm-content\": {\n      caretColor: (\"var(--\").concat(THEME_PREFIX, \"-colors-accent)\"),\n      padding: (\"0 var(--\").concat(THEME_PREFIX, \"-space-4)\")\n    },\n    \".cm-scroller\": {\n      fontFamily: (\"var(--\").concat(THEME_PREFIX, \"-font-mono)\"),\n      lineHeight: (\"var(--\").concat(THEME_PREFIX, \"-font-lineHeight)\")\n    },\n    \".cm-gutters\": {\n      backgroundColor: (\"var(--\").concat(THEME_PREFIX, \"-colors-surface1)\"),\n      color: (\"var(--\").concat(THEME_PREFIX, \"-colors-disabled)\"),\n      border: \"none\",\n      paddingLeft: (\"var(--\").concat(THEME_PREFIX, \"-space-1)\")\n    },\n    \".cm-gutter.cm-lineNumbers\": {\n      fontSize: \".6em\"\n    },\n    \".cm-lineNumbers .cm-gutterElement\": {\n      lineHeight: (\"var(--\").concat(THEME_PREFIX, \"-font-lineHeight)\"),\n      minWidth: (\"var(--\").concat(THEME_PREFIX, \"-space-5)\")\n    },\n    \".cm-content .cm-line\": {\n      paddingLeft: (\"var(--\").concat(THEME_PREFIX, \"-space-1)\")\n    },\n    \".cm-content.cm-readonly .cm-line\": {\n      paddingLeft: 0\n    }\n  });\n};\nvar classNameToken = function (name) {\n  return (\"\").concat(THEME_PREFIX, \"-syntax-\").concat(name);\n};\nvar getSyntaxHighlight = function (theme) {\n  return _codemirror_language__WEBPACK_IMPORTED_MODULE_11__.HighlightStyle.define([{\n    tag: _lezer_highlight__WEBPACK_IMPORTED_MODULE_3__.tags.link,\n    textDecoration: \"underline\"\n  }, {\n    tag: _lezer_highlight__WEBPACK_IMPORTED_MODULE_3__.tags.emphasis,\n    fontStyle: \"italic\"\n  }, {\n    tag: _lezer_highlight__WEBPACK_IMPORTED_MODULE_3__.tags.strong,\n    fontWeight: \"bold\"\n  }, {\n    tag: _lezer_highlight__WEBPACK_IMPORTED_MODULE_3__.tags.keyword,\n    class: classNameToken(\"keyword\")\n  }, {\n    tag: [_lezer_highlight__WEBPACK_IMPORTED_MODULE_3__.tags.atom, _lezer_highlight__WEBPACK_IMPORTED_MODULE_3__.tags.number, _lezer_highlight__WEBPACK_IMPORTED_MODULE_3__.tags.bool],\n    class: classNameToken(\"static\")\n  }, {\n    tag: _lezer_highlight__WEBPACK_IMPORTED_MODULE_3__.tags.variableName,\n    class: classNameToken(\"plain\")\n  }, {\n    tag: _lezer_highlight__WEBPACK_IMPORTED_MODULE_3__.tags.standard(_lezer_highlight__WEBPACK_IMPORTED_MODULE_3__.tags.tagName),\n    class: classNameToken(\"tag\")\n  }, {\n    tag: [_lezer_highlight__WEBPACK_IMPORTED_MODULE_3__.tags.function(_lezer_highlight__WEBPACK_IMPORTED_MODULE_3__.tags.variableName), _lezer_highlight__WEBPACK_IMPORTED_MODULE_3__.tags.definition(_lezer_highlight__WEBPACK_IMPORTED_MODULE_3__.tags.function(_lezer_highlight__WEBPACK_IMPORTED_MODULE_3__.tags.variableName)), _lezer_highlight__WEBPACK_IMPORTED_MODULE_3__.tags.tagName],\n    class: classNameToken(\"definition\")\n  }, {\n    tag: _lezer_highlight__WEBPACK_IMPORTED_MODULE_3__.tags.propertyName,\n    class: classNameToken(\"property\")\n  }, {\n    tag: [_lezer_highlight__WEBPACK_IMPORTED_MODULE_3__.tags.literal, _lezer_highlight__WEBPACK_IMPORTED_MODULE_3__.tags.inserted],\n    class: classNameToken(theme.syntax.string ? \"string\" : \"static\")\n  }, {\n    tag: _lezer_highlight__WEBPACK_IMPORTED_MODULE_3__.tags.punctuation,\n    class: classNameToken(\"punctuation\")\n  }, {\n    tag: [_lezer_highlight__WEBPACK_IMPORTED_MODULE_3__.tags.comment, _lezer_highlight__WEBPACK_IMPORTED_MODULE_3__.tags.quote],\n    class: classNameToken(\"comment\")\n  }]);\n};\nvar getLanguageFromFile = function (filePath, fileType, additionalLanguages) {\n  if (!filePath && !fileType) return \"javascript\";\n  var extension = fileType;\n  if (!extension && filePath) {\n    var extensionDotIndex = filePath.lastIndexOf(\".\");\n    extension = filePath.slice(extensionDotIndex + 1);\n  }\n  for (var _i = 0, additionalLanguages_1 = additionalLanguages; _i < additionalLanguages_1.length; _i++) {\n    var additionalLanguage = additionalLanguages_1[_i];\n    if (extension === additionalLanguage.name || additionalLanguage.extensions.includes(extension || \"\")) {\n      return additionalLanguage.name;\n    }\n  }\n  switch (extension) {\n    case \"ts\":\n    case \"tsx\":\n      return \"typescript\";\n    case \"html\":\n    case \"svelte\":\n    case \"vue\":\n    case \"astro\":\n      return \"html\";\n    case \"css\":\n    case \"less\":\n    case \"scss\":\n      return \"css\";\n    case \"js\":\n    case \"jsx\":\n    case \"json\":\n    default:\n      return \"javascript\";\n  }\n};\nvar getCodeMirrorLanguage = function (extension, additionalLanguages) {\n  var options = {\n    javascript: (0,_codemirror_lang_javascript__WEBPACK_IMPORTED_MODULE_12__.javascript)({\n      jsx: true,\n      typescript: false\n    }),\n    typescript: (0,_codemirror_lang_javascript__WEBPACK_IMPORTED_MODULE_12__.javascript)({\n      jsx: true,\n      typescript: true\n    }),\n    html: (0,_codemirror_lang_html__WEBPACK_IMPORTED_MODULE_13__.html)(),\n    css: (0,_codemirror_lang_css__WEBPACK_IMPORTED_MODULE_14__.css)()\n  };\n  for (var _i = 0, additionalLanguages_2 = additionalLanguages; _i < additionalLanguages_2.length; _i++) {\n    var additionalLanguage = additionalLanguages_2[_i];\n    if (extension === additionalLanguage.name) {\n      return additionalLanguage.language;\n    }\n  }\n  return options[extension];\n};\nvar useCombinedRefs = function () {\n  var refs = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    refs[_i] = arguments[_i];\n  }\n  return react__WEBPACK_IMPORTED_MODULE_1__.useCallback(function (element) {\n    return refs.forEach(function (ref) {\n      if (!ref) {\n        return;\n      }\n      if (typeof ref === \"function\") {\n        return ref(element);\n      }\n      ref.current = element;\n    });\n  }, refs);\n};\n\nfunction highlightDecorators(positions) {\n  return _codemirror_view__WEBPACK_IMPORTED_MODULE_10__.ViewPlugin.fromClass((function () {\n    function class_1(view) {\n      this.decorations = this.getDecoration(view);\n    }\n    class_1.prototype.update = function (update) {\n      return;\n    };\n    class_1.prototype.getDecoration = function (view) {\n      if (!positions) return _codemirror_view__WEBPACK_IMPORTED_MODULE_10__.Decoration.none;\n      var rangesDecorators = positions.map(function (item) {\n        var _a, _b, _c;\n        var lineDeco = _codemirror_view__WEBPACK_IMPORTED_MODULE_10__.Decoration.line({\n          attributes: {\n            class: (_a = item.className) !== null && _a !== void 0 ? _a : \"\"\n          }\n        });\n        var markDeco = _codemirror_view__WEBPACK_IMPORTED_MODULE_10__.Decoration.mark({\n          class: (_b = item.className) !== null && _b !== void 0 ? _b : \"\",\n          attributes: (_c = item.elementAttributes) !== null && _c !== void 0 ? _c : undefined\n        });\n        var positionLineStart = getCodeMirrorPosition(view.state.doc, {\n          line: item.line,\n          column: item.startColumn\n        }) + 1;\n        if (item.startColumn && item.endColumn) {\n          var positionLineEnd = getCodeMirrorPosition(view.state.doc, {\n            line: item.line,\n            column: item.endColumn\n          }) + 1;\n          return markDeco.range(positionLineStart, positionLineEnd);\n        }\n        return lineDeco.range(positionLineStart);\n      });\n      return _codemirror_view__WEBPACK_IMPORTED_MODULE_10__.Decoration.set(rangesDecorators);\n    };\n    return class_1;\n  })(), {\n    decorations: function (v) {\n      return v.decorations;\n    }\n  });\n}\n\nfunction highlightInlineError() {\n  return activeLineHighlighter;\n}\nvar lineDeco = _codemirror_view__WEBPACK_IMPORTED_MODULE_10__.Decoration.line({\n  attributes: {\n    class: \"cm-errorLine\"\n  }\n});\nvar activeLineHighlighter = _codemirror_view__WEBPACK_IMPORTED_MODULE_10__.ViewPlugin.fromClass((function () {\n  function class_1() {\n    this.decorations = _codemirror_view__WEBPACK_IMPORTED_MODULE_10__.Decoration.none;\n  }\n  class_1.prototype.update = function (update) {\n    var _this = this;\n    update.transactions.forEach(function (trans) {\n      var errorValue = trans.annotation(\"show-error\");\n      if (errorValue !== undefined) {\n        var position = getCodeMirrorPosition(update.view.state.doc, {\n          line: errorValue\n        }) + 1;\n        _this.decorations = _codemirror_view__WEBPACK_IMPORTED_MODULE_10__.Decoration.set([lineDeco.range(position)]);\n      } else if (trans.annotation(\"remove-errors\")) {\n        _this.decorations = _codemirror_view__WEBPACK_IMPORTED_MODULE_10__.Decoration.none;\n      }\n    });\n  };\n  return class_1;\n})(), {\n  decorations: function (v) {\n    return v.decorations;\n  }\n});\n\nvar placeholderClassName = fakeCss;\nvar tokensClassName = fakeCss;\nvar editorClassName = fakeCss;\nvar cmClassName = fakeCss;\nvar readOnlyClassName = fakeCss;\n\nvar useSyntaxHighlight = function (_a) {\n  var langSupport = _a.langSupport, highlightTheme = _a.highlightTheme, _b = _a.code, code = _b === void 0 ? \"\" : _b;\n  var tree = langSupport.language.parser.parse(code);\n  var offSet = 0;\n  var codeElementsRender = [];\n  var addElement = function (to, className) {\n    if (to > offSet) {\n      var children = code.slice(offSet, to);\n      codeElementsRender.push(className ? (0,react__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"span\", {\n        children: children,\n        className: className,\n        key: (\"\").concat(to).concat(offSet)\n      }) : children);\n      offSet = to;\n    }\n  };\n  (0,_lezer_highlight__WEBPACK_IMPORTED_MODULE_3__.highlightTree)(tree, highlightTheme, function (from, to, className) {\n    addElement(from, \"\");\n    addElement(to, className);\n  });\n  if (offSet < code.length && (code === null || code === void 0 ? void 0 : code.includes(\"\\n\"))) {\n    codeElementsRender.push(\"\\n\\n\");\n  }\n  return codeElementsRender;\n};\n\nvar CodeMirror = react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(function (_a, ref) {\n  var _b = _a.code, code = _b === void 0 ? \"\" : _b, filePath = _a.filePath, fileType = _a.fileType, onCodeUpdate = _a.onCodeUpdate, _c = _a.showLineNumbers, showLineNumbers = _c === void 0 ? false : _c, _d = _a.showInlineErrors, showInlineErrors = _d === void 0 ? false : _d, _e = _a.wrapContent, wrapContent = _e === void 0 ? false : _e, _f = _a.editorState, editorState = _f === void 0 ? \"pristine\" : _f, _g = _a.readOnly, readOnly = _g === void 0 ? false : _g, _h = _a.showReadOnly, showReadOnly = _h === void 0 ? true : _h, decorators = _a.decorators, _j = _a.initMode, initMode = _j === void 0 ? \"lazy\" : _j, _k = _a.extensions, extensions = _k === void 0 ? [] : _k, _l = _a.extensionsKeymap, extensionsKeymap = _l === void 0 ? [] : _l, _m = _a.additionalLanguages, additionalLanguages = _m === void 0 ? [] : _m;\n  var wrapper = react__WEBPACK_IMPORTED_MODULE_1__.useRef(null);\n  var combinedRef = useCombinedRefs(wrapper, ref);\n  var cmView = react__WEBPACK_IMPORTED_MODULE_1__.useRef();\n  var _o = useSandpackTheme(), theme = _o.theme, themeId = _o.themeId;\n  var _p = react__WEBPACK_IMPORTED_MODULE_1__.useState(code), internalCode = _p[0], setInternalCode = _p[1];\n  var _q = react__WEBPACK_IMPORTED_MODULE_1__.useState(initMode === \"immediate\"), shouldInitEditor = _q[0], setShouldInitEditor = _q[1];\n  var classNames = useClassNames();\n  var _r = useSandpack(), listen = _r.listen, autoReload = _r.sandpack.autoReload;\n  var prevExtension = react__WEBPACK_IMPORTED_MODULE_1__.useRef([]);\n  var prevExtensionKeymap = react__WEBPACK_IMPORTED_MODULE_1__.useRef([]);\n  var isIntersecting = (0,_react_hook_intersection_observer__WEBPACK_IMPORTED_MODULE_15__[\"default\"])(wrapper, {\n    rootMargin: \"600px 0px\",\n    threshold: 0.2\n  }).isIntersecting;\n  react__WEBPACK_IMPORTED_MODULE_1__.useImperativeHandle(ref, function () {\n    return {\n      getCodemirror: function () {\n        return cmView.current;\n      }\n    };\n  });\n  react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function () {\n    var mode = initMode === \"lazy\" || initMode === \"user-visible\";\n    if (mode && isIntersecting) {\n      setShouldInitEditor(true);\n    }\n  }, [initMode, isIntersecting]);\n  var languageExtension = getLanguageFromFile(filePath, fileType, additionalLanguages);\n  var langSupport = getCodeMirrorLanguage(languageExtension, additionalLanguages);\n  var highlightTheme = getSyntaxHighlight(theme);\n  var syntaxHighlightRender = useSyntaxHighlight({\n    langSupport: langSupport,\n    highlightTheme: highlightTheme,\n    code: code\n  });\n  var sortedDecorators = react__WEBPACK_IMPORTED_MODULE_1__.useMemo(function () {\n    return decorators ? decorators.sort(function (d1, d2) {\n      return d1.line - d2.line;\n    }) : decorators;\n  }, [decorators]);\n  react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function () {\n    if (!wrapper.current || !shouldInitEditor) return;\n    var parentDiv = wrapper.current;\n    var existingPlaceholder = parentDiv.querySelector(\".sp-pre-placeholder\");\n    if (existingPlaceholder) {\n      parentDiv.removeChild(existingPlaceholder);\n    }\n    var view = new _codemirror_view__WEBPACK_IMPORTED_MODULE_10__.EditorView({\n      doc: code,\n      extensions: [],\n      parent: parentDiv,\n      dispatch: function (tr) {\n        view.update([tr]);\n        if (tr.docChanged) {\n          var newCode = tr.newDoc.sliceString(0, tr.newDoc.length);\n          setInternalCode(newCode);\n          onCodeUpdate === null || onCodeUpdate === void 0 ? void 0 : onCodeUpdate(newCode);\n        }\n      }\n    });\n    view.contentDOM.setAttribute(\"data-gramm\", \"false\");\n    view.contentDOM.setAttribute(\"data-lt-active\", \"false\");\n    view.contentDOM.setAttribute(\"aria-label\", filePath ? (\"Code Editor for \").concat(getFileName(filePath)) : \"Code Editor\");\n    if (readOnly) {\n      view.contentDOM.classList.add(\"cm-readonly\");\n    } else {\n      view.contentDOM.setAttribute(\"tabIndex\", \"-1\");\n    }\n    cmView.current = view;\n    return function () {\n      var _a;\n      (_a = cmView.current) === null || _a === void 0 ? void 0 : _a.destroy();\n    };\n  }, [shouldInitEditor]);\n  react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function () {\n    if (cmView.current) {\n      var customCommandsKeymap = [{\n        key: \"Tab\",\n        run: function (view) {\n          var _a, _b;\n          (0,_codemirror_commands__WEBPACK_IMPORTED_MODULE_16__.indentMore)(view);\n          var customKey = extensionsKeymap.find(function (_a) {\n            var key = _a.key;\n            return key === \"Tab\";\n          });\n          return (_b = (_a = customKey === null || customKey === void 0 ? void 0 : customKey.run) === null || _a === void 0 ? void 0 : _a.call(customKey, view)) !== null && _b !== void 0 ? _b : true;\n        }\n      }, {\n        key: \"Shift-Tab\",\n        run: function (view) {\n          var _a, _b;\n          (0,_codemirror_commands__WEBPACK_IMPORTED_MODULE_16__.indentLess)({\n            state: view.state,\n            dispatch: view.dispatch\n          });\n          var customKey = extensionsKeymap.find(function (_a) {\n            var key = _a.key;\n            return key === \"Shift-Tab\";\n          });\n          return (_b = (_a = customKey === null || customKey === void 0 ? void 0 : customKey.run) === null || _a === void 0 ? void 0 : _a.call(customKey, view)) !== null && _b !== void 0 ? _b : true;\n        }\n      }, {\n        key: \"Escape\",\n        run: function () {\n          if (readOnly) return true;\n          if (wrapper.current) {\n            wrapper.current.focus();\n          }\n          return true;\n        }\n      }, {\n        key: \"mod-Backspace\",\n        run: _codemirror_commands__WEBPACK_IMPORTED_MODULE_16__.deleteGroupBackward\n      }];\n      var extensionList = __spreadArray(__spreadArray([(0,_codemirror_view__WEBPACK_IMPORTED_MODULE_10__.highlightSpecialChars)(), (0,_codemirror_commands__WEBPACK_IMPORTED_MODULE_16__.history)(), (0,_codemirror_autocomplete__WEBPACK_IMPORTED_MODULE_17__.closeBrackets)()], extensions, true), [_codemirror_view__WEBPACK_IMPORTED_MODULE_10__.keymap.of(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray([], _codemirror_autocomplete__WEBPACK_IMPORTED_MODULE_17__.closeBracketsKeymap, true), _codemirror_commands__WEBPACK_IMPORTED_MODULE_16__.defaultKeymap, true), _codemirror_commands__WEBPACK_IMPORTED_MODULE_16__.historyKeymap, true), customCommandsKeymap, true), extensionsKeymap, true)), langSupport, getEditorTheme(), (0,_codemirror_language__WEBPACK_IMPORTED_MODULE_11__.syntaxHighlighting)(highlightTheme)], false);\n      if (readOnly) {\n        extensionList.push(_codemirror_state__WEBPACK_IMPORTED_MODULE_18__.EditorState.readOnly.of(true));\n        extensionList.push(_codemirror_view__WEBPACK_IMPORTED_MODULE_10__.EditorView.editable.of(false));\n      } else {\n        extensionList.push((0,_codemirror_language__WEBPACK_IMPORTED_MODULE_11__.bracketMatching)());\n        extensionList.push((0,_codemirror_view__WEBPACK_IMPORTED_MODULE_10__.highlightActiveLine)());\n      }\n      if (sortedDecorators) {\n        extensionList.push(highlightDecorators(sortedDecorators));\n      }\n      if (wrapContent) {\n        extensionList.push(_codemirror_view__WEBPACK_IMPORTED_MODULE_10__.EditorView.lineWrapping);\n      }\n      if (showLineNumbers) {\n        extensionList.push((0,_codemirror_view__WEBPACK_IMPORTED_MODULE_10__.lineNumbers)());\n      }\n      if (showInlineErrors) {\n        extensionList.push(highlightInlineError());\n      }\n      cmView.current.dispatch({\n        effects: _codemirror_state__WEBPACK_IMPORTED_MODULE_18__.StateEffect.reconfigure.of(extensionList)\n      });\n    }\n  }, [shouldInitEditor, sortedDecorators, showLineNumbers, wrapContent, themeId, readOnly, autoReload]);\n  react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function applyExtensions() {\n    var view = cmView.current;\n    var dependenciesAreDiff = !shallowEqual(extensions, prevExtension.current) || !shallowEqual(extensionsKeymap, prevExtensionKeymap.current);\n    if (view && dependenciesAreDiff) {\n      view.dispatch({\n        effects: _codemirror_state__WEBPACK_IMPORTED_MODULE_18__.StateEffect.appendConfig.of(extensions)\n      });\n      view.dispatch({\n        effects: _codemirror_state__WEBPACK_IMPORTED_MODULE_18__.StateEffect.appendConfig.of(_codemirror_view__WEBPACK_IMPORTED_MODULE_10__.keymap.of(__spreadArray([], extensionsKeymap, true)))\n      });\n      prevExtension.current = extensions;\n      prevExtensionKeymap.current = extensionsKeymap;\n    }\n  }, [extensions, extensionsKeymap]);\n  react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function () {\n    if (cmView.current && editorState === \"dirty\" && window.matchMedia(\"(min-width: 768px)\").matches) {\n      cmView.current.contentDOM.focus();\n    }\n  }, []);\n  react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function () {\n    if (cmView.current && typeof code === \"string\" && code !== internalCode) {\n      var view = cmView.current;\n      var selection = view.state.selection.ranges.some(function (_a) {\n        var to = _a.to, from = _a.from;\n        return to > code.length || from > code.length;\n      }) ? _codemirror_state__WEBPACK_IMPORTED_MODULE_18__.EditorSelection.cursor(code.length) : view.state.selection;\n      var changes = {\n        from: 0,\n        to: view.state.doc.length,\n        insert: code\n      };\n      view.dispatch({\n        changes: changes,\n        selection: selection\n      });\n    }\n  }, [code]);\n  react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function messageToInlineError() {\n    if (!showInlineErrors) return;\n    var unsubscribe = listen(function (message) {\n      var view = cmView.current;\n      if (message.type === \"success\") {\n        view === null || view === void 0 ? void 0 : view.dispatch({\n          annotations: [new _codemirror_state__WEBPACK_IMPORTED_MODULE_18__.Annotation(\"remove-errors\", true)]\n        });\n      } else if (message.type === \"action\" && message.action === \"show-error\" && message.path === filePath && message.line) {\n        view === null || view === void 0 ? void 0 : view.dispatch({\n          annotations: [new _codemirror_state__WEBPACK_IMPORTED_MODULE_18__.Annotation(\"show-error\", message.line)]\n        });\n      }\n    });\n    return function () {\n      return unsubscribe();\n    };\n  }, [listen, showInlineErrors]);\n  var handleContainerKeyDown = function (evt) {\n    if (evt.key === \"Enter\" && cmView.current) {\n      evt.preventDefault();\n      cmView.current.contentDOM.focus();\n    }\n  };\n  var gutterLineOffset = function () {\n    var offset = 4;\n    if (showLineNumbers) {\n      offset += 6;\n    }\n    if (!readOnly) {\n      offset += 1;\n    }\n    return (\"var(--\").concat(THEME_PREFIX, \"-space-\").concat(offset, \")\");\n  };\n  if (readOnly) {\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"pre\", {\n        ref: combinedRef,\n        className: classNames(\"cm\", [classNames(editorState), classNames(languageExtension), cmClassName, tokensClassName]),\n        translate: \"no\",\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"code\", {\n          className: classNames(\"pre-placeholder\", [placeholderClassName]),\n          style: {\n            marginLeft: gutterLineOffset()\n          },\n          children: syntaxHighlightRender\n        })\n      }), readOnly && showReadOnly && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", __assign({\n        className: classNames(\"read-only\", [readOnlyClassName])\n      }, {}, {\n        children: \"Read-only\"\n      }))]\n    });\n  }\n  return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n    ref: combinedRef,\n    \"aria-autocomplete\": \"list\",\n    \"aria-label\": filePath ? (\"Code Editor for \").concat(getFileName(filePath)) : \"Code Editor\",\n    \"aria-multiline\": \"true\",\n    className: classNames(\"cm\", [classNames(editorState), classNames(languageExtension), cmClassName, tokensClassName]),\n    onKeyDown: handleContainerKeyDown,\n    role: \"textbox\",\n    tabIndex: 0,\n    translate: \"no\",\n    suppressHydrationWarning: true,\n    children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"pre\", {\n      className: classNames(\"pre-placeholder\", [placeholderClassName]),\n      style: {\n        marginLeft: gutterLineOffset()\n      },\n      children: syntaxHighlightRender\n    })\n  });\n});\n\nvar SandpackCodeEditor = (0,react__WEBPACK_IMPORTED_MODULE_1__.forwardRef)(function (_a, ref) {\n  var showTabs = _a.showTabs, _b = _a.showLineNumbers, showLineNumbers = _b === void 0 ? false : _b, _c = _a.showInlineErrors, showInlineErrors = _c === void 0 ? false : _c, _d = _a.showRunButton, showRunButton = _d === void 0 ? true : _d, _e = _a.wrapContent, wrapContent = _e === void 0 ? false : _e, _f = _a.closableTabs, closableTabs = _f === void 0 ? false : _f, initMode = _a.initMode, extensions = _a.extensions, extensionsKeymap = _a.extensionsKeymap, readOnly = _a.readOnly, showReadOnly = _a.showReadOnly, additionalLanguages = _a.additionalLanguages, className = _a.className, props = __rest(_a, [\"showTabs\", \"showLineNumbers\", \"showInlineErrors\", \"showRunButton\", \"wrapContent\", \"closableTabs\", \"initMode\", \"extensions\", \"extensionsKeymap\", \"readOnly\", \"showReadOnly\", \"additionalLanguages\", \"className\"]);\n  var sandpack = useSandpack().sandpack;\n  var _g = useActiveCode(), code = _g.code, updateCode = _g.updateCode, readOnlyFile = _g.readOnly;\n  var activeFile = sandpack.activeFile, status = sandpack.status, editorState = sandpack.editorState;\n  var shouldShowTabs = showTabs !== null && showTabs !== void 0 ? showTabs : sandpack.visibleFiles.length > 1;\n  var classNames = useClassNames();\n  var handleCodeUpdate = function (newCode, shouldUpdatePreview) {\n    if (shouldUpdatePreview === void 0) {\n      shouldUpdatePreview = true;\n    }\n    updateCode(newCode, shouldUpdatePreview);\n  };\n  return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(SandpackStack, __assign({\n    className: classNames(\"editor\", [className])\n  }, props, {\n    children: [shouldShowTabs && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(FileTabs, {\n      closableTabs: closableTabs\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n      className: classNames(\"code-editor\", [editorClassName]),\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(CodeMirror, {\n        ref: ref,\n        additionalLanguages: additionalLanguages,\n        code: code,\n        editorState: editorState,\n        extensions: extensions,\n        extensionsKeymap: extensionsKeymap,\n        filePath: activeFile,\n        initMode: initMode || sandpack.initMode,\n        onCodeUpdate: function (newCode) {\n          var _a;\n          return handleCodeUpdate(newCode, (_a = sandpack.autoReload) !== null && _a !== void 0 ? _a : true);\n        },\n        readOnly: readOnly || readOnlyFile,\n        showInlineErrors: showInlineErrors,\n        showLineNumbers: showLineNumbers,\n        showReadOnly: showReadOnly,\n        wrapContent: wrapContent\n      }, activeFile), showRunButton && (!sandpack.autoReload || status === \"idle\") ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(RunButton$1, {}) : null]\n    })]\n  }));\n});\n\nvar SandpackCodeViewer = react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(function (_a, ref) {\n  var showTabs = _a.showTabs, showLineNumbers = _a.showLineNumbers, decorators = _a.decorators, propCode = _a.code, initMode = _a.initMode, wrapContent = _a.wrapContent, additionalLanguages = _a.additionalLanguages, props = __rest(_a, [\"showTabs\", \"showLineNumbers\", \"decorators\", \"code\", \"initMode\", \"wrapContent\", \"additionalLanguages\"]);\n  var sandpack = useSandpack().sandpack;\n  var code = useActiveCode().code;\n  var classNames = useClassNames();\n  var shouldShowTabs = showTabs !== null && showTabs !== void 0 ? showTabs : sandpack.visibleFiles.length > 1;\n  return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(SandpackStack, __assign({\n    className: classNames(\"editor-viewer\")\n  }, props, {\n    children: [shouldShowTabs ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(FileTabs, {}) : null, (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n      className: classNames(\"code-editor\", [editorClassName]),\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(CodeMirror, {\n        ref: ref,\n        additionalLanguages: additionalLanguages,\n        code: propCode !== null && propCode !== void 0 ? propCode : code,\n        decorators: decorators,\n        filePath: sandpack.activeFile,\n        initMode: initMode || sandpack.initMode,\n        showLineNumbers: showLineNumbers,\n        showReadOnly: false,\n        wrapContent: wrapContent,\n        readOnly: true\n      })\n    }), sandpack.status === \"idle\" ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(RunButton$1, {}) : null]\n  }));\n});\n\nvar layoutClassName = fakeCss;\nvar SandpackLayout = react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(function (_a, ref) {\n  var children = _a.children, className = _a.className, props = __rest(_a, [\"children\", \"className\"]);\n  var sandpack = useSandpack().sandpack;\n  var classNames = useClassNames();\n  var combinedRef = useCombinedRefs(sandpack.lazyAnchorRef, ref);\n  return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", __assign({\n    ref: combinedRef,\n    className: classNames(\"layout\", [layoutClassName, className])\n  }, props, {\n    children: children\n  }));\n});\n\nvar useErrorMessage = function () {\n  var _a;\n  var sandpack = useSandpack().sandpack;\n  var error = sandpack.error;\n  return (_a = error === null || error === void 0 ? void 0 : error.message) !== null && _a !== void 0 ? _a : null;\n};\n\nvar FADE_ANIMATION_DURATION = 200;\nvar useLoadingOverlayState = function (clientId, externalLoading) {\n  var _a = useSandpack(), sandpack = _a.sandpack, listen = _a.listen;\n  var _b = react__WEBPACK_IMPORTED_MODULE_1__.useState(\"LOADING\"), state = _b[0], setState = _b[1];\n  react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function () {\n    var unsubscribe = listen(function (message) {\n      if (message.type === \"start\" && message.firstLoad === true) {\n        setState(\"LOADING\");\n      }\n      if (message.type === \"done\") {\n        setState(function (prev) {\n          return prev === \"LOADING\" ? \"PRE_FADING\" : \"HIDDEN\";\n        });\n      }\n    }, clientId);\n    return function () {\n      unsubscribe();\n    };\n  }, [clientId, sandpack.status === \"idle\"]);\n  react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function () {\n    var fadeTimeout;\n    if (state === \"PRE_FADING\" && !externalLoading) {\n      setState(\"FADING\");\n    } else if (state === \"FADING\") {\n      fadeTimeout = setTimeout(function () {\n        return setState(\"HIDDEN\");\n      }, FADE_ANIMATION_DURATION);\n    }\n    return function () {\n      clearTimeout(fadeTimeout);\n    };\n  }, [state, externalLoading]);\n  if (sandpack.status === \"timeout\") {\n    return \"TIMEOUT\";\n  }\n  if (sandpack.status !== \"running\") {\n    return \"HIDDEN\";\n  }\n  return state;\n};\n\nvar useSandpackNavigation = function (clientId) {\n  var dispatch = useSandpack().dispatch;\n  return {\n    refresh: function () {\n      return dispatch({\n        type: \"refresh\"\n      }, clientId);\n    },\n    back: function () {\n      return dispatch({\n        type: \"urlback\"\n      }, clientId);\n    },\n    forward: function () {\n      return dispatch({\n        type: \"urlforward\"\n      }, clientId);\n    }\n  };\n};\n\nfunction getTranspiledCode(sandpack) {\n  var _a, _b;\n  var activeFile = sandpack.activeFile, bundlerState = sandpack.bundlerState;\n  if (bundlerState == null) {\n    return null;\n  }\n  var tModule = bundlerState.transpiledModules[activeFile + \":\"];\n  return (_b = (_a = tModule === null || tModule === void 0 ? void 0 : tModule.source) === null || _a === void 0 ? void 0 : _a.compiledCode) !== null && _b !== void 0 ? _b : null;\n}\nvar useTranspiledCode = function () {\n  var sandpack = useSandpack().sandpack;\n  if (sandpack.status !== \"running\") {\n    return null;\n  }\n  return getTranspiledCode(sandpack);\n};\n\nvar useSandpackClient = function (clientPropsOverride) {\n  var _a = useSandpack(), sandpack = _a.sandpack, listen = _a.listen, dispatch = _a.dispatch;\n  var iframeRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(null);\n  var clientId = react__WEBPACK_IMPORTED_MODULE_1__.useRef(generateRandomId());\n  react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function () {\n    var iframeElement = iframeRef.current;\n    var clientIdValue = clientId.current;\n    if (iframeElement !== null) {\n      sandpack.registerBundler(iframeElement, clientIdValue, clientPropsOverride);\n    }\n    return function () {\n      return sandpack.unregisterBundler(clientIdValue);\n    };\n  }, []);\n  var getClient = function () {\n    return sandpack.clients[clientId.current] || null;\n  };\n  return {\n    sandpack: sandpack,\n    getClient: getClient,\n    clientId: clientId.current,\n    iframe: iframeRef,\n    listen: function (listener) {\n      return listen(listener, clientId.current);\n    },\n    dispatch: function (message) {\n      return dispatch(message, clientId.current);\n    }\n  };\n};\n\nvar useSandpackShell = function (clientId) {\n  var dispatch = useSandpack().dispatch;\n  return {\n    restart: function () {\n      return dispatch({\n        type: \"shell/restart\"\n      }, clientId);\n    },\n    openPreview: function () {\n      return dispatch({\n        type: \"shell/openPreview\"\n      }, clientId);\n    }\n  };\n};\n\nvar mapProgressMessage = function (originalMessage, firstTotalPending) {\n  var _a;\n  switch (originalMessage.state) {\n    case \"downloading_manifest\":\n      return \"[1/3] Downloading manifest\";\n    case \"downloaded_module\":\n      return (\"[2/3] Downloaded \").concat(originalMessage.name, \" (\").concat(firstTotalPending - originalMessage.totalPending, \"/\").concat(firstTotalPending, \")\");\n    case \"starting_command\":\n      return \"[3/3] Starting command\";\n    case \"command_running\":\n      return (\"[3/3] Running \\\"\").concat((_a = originalMessage.command) === null || _a === void 0 ? void 0 : _a.trim(), \"\\\"\");\n  }\n};\nvar useSandpackPreviewProgress = function (props) {\n  var _a = react__WEBPACK_IMPORTED_MODULE_1__.useState(false), isReady = _a[0], setIsReady = _a[1];\n  var _b = react__WEBPACK_IMPORTED_MODULE_1__.useState(), totalDependencies = _b[0], setTotalDependencies = _b[1];\n  var _c = react__WEBPACK_IMPORTED_MODULE_1__.useState(null), loadingMessage = _c[0], setLoadingMessage = _c[1];\n  var timeout = props === null || props === void 0 ? void 0 : props.timeout;\n  var clientId = props === null || props === void 0 ? void 0 : props.clientId;\n  var listen = useSandpack().listen;\n  react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function () {\n    var timer;\n    var unsubscribe = listen(function (message) {\n      if (message.type === \"start\" && message.firstLoad) {\n        setIsReady(false);\n      }\n      if (timeout) {\n        timer = setTimeout(function () {\n          setLoadingMessage(null);\n        }, timeout);\n      }\n      if (message.type === \"dependencies\") {\n        setLoadingMessage(function () {\n          switch (message.data.state) {\n            case \"downloading_manifest\":\n              return \"[1/3] Downloading manifest\";\n            case \"downloaded_module\":\n              return (\"[2/3] Downloaded \").concat(message.data.name, \" (\").concat(message.data.progress, \"/\").concat(message.data.total, \")\");\n            case \"starting\":\n              return \"[3/3] Starting\";\n          }\n          return null;\n        });\n      } else if (message.type === \"shell/progress\" && !isReady) {\n        if (!totalDependencies && message.data.state === \"downloaded_module\") {\n          setTotalDependencies(message.data.totalPending);\n        }\n        if (totalDependencies !== undefined) {\n          setLoadingMessage(mapProgressMessage(message.data, totalDependencies));\n        }\n      }\n      if (message.type === \"done\" && message.compilatonError === false) {\n        setLoadingMessage(null);\n        setIsReady(true);\n        clearTimeout(timer);\n      }\n    }, clientId);\n    return function () {\n      if (timer) {\n        clearTimeout(timer);\n      }\n      unsubscribe();\n    };\n  }, [clientId, isReady, totalDependencies, timeout]);\n  return loadingMessage;\n};\n\nvar MAX_MESSAGE_COUNT$1 = 400 * 2;\nvar useSandpackShellStdout = function (_a) {\n  var clientId = _a.clientId, _b = _a.maxMessageCount, maxMessageCount = _b === void 0 ? MAX_MESSAGE_COUNT$1 : _b;\n  var _d = react__WEBPACK_IMPORTED_MODULE_1__.useState([]), logs = _d[0], setLogs = _d[1];\n  var listen = useSandpack().listen;\n  react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function () {\n    var unsubscribe = listen(function (message) {\n      if (message.type === \"start\") {\n        setLogs([]);\n      } else if (message.type === \"stdout\" && message.payload.data && Boolean(message.payload.data.trim())) {\n        setLogs(function (prev) {\n          var messages = __spreadArray(__spreadArray([], prev, true), [{\n            data: message.payload.data,\n            id: generateRandomId()\n          }], false);\n          while (messages.length > maxMessageCount) {\n            messages.shift();\n          }\n          return messages;\n        });\n      }\n    }, clientId);\n    return unsubscribe;\n  }, [maxMessageCount, clientId]);\n  return {\n    logs: logs,\n    reset: function () {\n      return setLogs([]);\n    }\n  };\n};\n\nvar mapBundlerErrors = function (originalMessage) {\n  var errorMessage = originalMessage.replace(\"[sandpack-client]: \", \"\");\n  if ((/process.exit/).test(errorMessage)) {\n    var exitCode = errorMessage.match(/process.exit\\((\\d+)\\)/);\n    if (!exitCode) return errorMessage;\n    if (Number(exitCode[1]) === 0) {\n      return \"Server is not running, would you like to start it again?\";\n    }\n    return (\"Server has crashed with status code \").concat(exitCode[1], \", would you like to restart the server?\");\n  }\n  return errorMessage;\n};\nvar ErrorOverlay = function (props) {\n  var children = props.children, className = props.className, otherProps = __rest(props, [\"children\", \"className\"]);\n  var errorMessage = useErrorMessage();\n  var restart = useSandpackShell().restart;\n  var classNames = useClassNames();\n  var _a = useSandpack().sandpack, runSandpack = _a.runSandpack, teamId = _a.teamId;\n  var dispatch = useSandpack().dispatch;\n  if (!errorMessage && !children) {\n    return null;\n  }\n  var isSandpackBundlerError = errorMessage === null || errorMessage === void 0 ? void 0 : errorMessage.startsWith(\"[sandpack-client]\");\n  var privateDependencyError = errorMessage === null || errorMessage === void 0 ? void 0 : errorMessage.includes(\"NPM_REGISTRY_UNAUTHENTICATED_REQUEST\");\n  var onSignIn = function () {\n    if (teamId) {\n      dispatch({\n        type: \"sign-in\",\n        teamId: teamId\n      });\n    }\n  };\n  if (privateDependencyError) {\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", __assign({\n      className: classNames(\"overlay\", [classNames(\"error\"), absoluteClassName, errorBundlerClassName, className])\n    }, props, {\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", {\n        className: classNames(\"error-message\", [errorMessageClassName]),\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"strong\", {\n          children: \"Unable to fetch required dependency.\"\n        })\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n        className: classNames(\"error-message\", [errorMessageClassName]),\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"p\", {\n          children: [\"Authentication required. Please sign in to your account (make sure to allow pop-ups to this page) and try again. If the issue persists, contact\", \" \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"a\", {\n            href: \"mailto:hello@codesandbox.io?subject=Sandpack Timeout Error\",\n            children: \"support\"\n          }), \" \", \"for further assistance.\"]\n        })\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"button\", {\n          className: classNames(\"button\", [buttonClassName, iconStandaloneClassName, roundedButtonClassName]),\n          onClick: onSignIn,\n          children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(SignInIcon, {}), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n            children: \"Sign in\"\n          })]\n        })\n      })]\n    }));\n  }\n  if (isSandpackBundlerError && errorMessage) {\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", __assign({\n      className: classNames(\"overlay\", [classNames(\"error\"), absoluteClassName, errorBundlerClassName, className])\n    }, otherProps, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n        className: classNames(\"error-message\", [errorMessageClassName]),\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", {\n          className: classNames(\"error-title\", [fakeCss]),\n          children: \"Couldn't connect to server\"\n        }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", {\n          children: mapBundlerErrors(errorMessage)\n        }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n          children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"button\", {\n            className: classNames(\"button\", [classNames(\"icon-standalone\"), buttonClassName, iconStandaloneClassName, roundedButtonClassName]),\n            onClick: function () {\n              restart();\n              runSandpack();\n            },\n            title: \"Restart script\",\n            type: \"button\",\n            children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(RestartIcon, {}), \" \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n              children: \"Restart\"\n            })]\n          })\n        })]\n      })\n    }));\n  }\n  return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", __assign({\n    className: classNames(\"overlay\", [classNames(\"error\"), absoluteClassName, errorClassName(), className]),\n    translate: \"no\"\n  }, otherProps, {\n    children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", {\n      className: classNames(\"error-message\", [errorMessageClassName]),\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"strong\", {\n        children: \"Something went wrong\"\n      })\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", {\n      className: classNames(\"error-message\", [errorMessageClassName()]),\n      children: errorMessage || children\n    })]\n  }));\n};\n\nfunction ansiToJSON(input, use_classes) {\n  if (use_classes === void 0) {\n    use_classes = false;\n  }\n  input = (0,escape_carriage__WEBPACK_IMPORTED_MODULE_5__.escapeCarriageReturn)(fixBackspace(input));\n  return anser__WEBPACK_IMPORTED_MODULE_4__.ansiToJson(input, {\n    json: true,\n    remove_empty: true,\n    use_classes: use_classes\n  });\n}\nfunction createClass(bundle) {\n  var classNames = \"\";\n  if (bundle.bg) {\n    classNames += (\"\").concat(bundle.bg, \"-bg \");\n  }\n  if (bundle.fg) {\n    classNames += (\"\").concat(bundle.fg, \"-fg \");\n  }\n  if (bundle.decoration) {\n    classNames += (\"ansi-\").concat(bundle.decoration, \" \");\n  }\n  if (classNames === \"\") {\n    return null;\n  }\n  classNames = classNames.substring(0, classNames.length - 1);\n  return classNames;\n}\nfunction createStyle(bundle) {\n  var style = {};\n  if (bundle.bg) {\n    style.backgroundColor = (\"rgb(\").concat(bundle.bg, \")\");\n  }\n  if (bundle.fg) {\n    style.color = (\"rgb(\").concat(bundle.fg, \")\");\n  }\n  switch (bundle.decoration) {\n    case \"bold\":\n      style.fontWeight = \"bold\";\n      break;\n    case \"dim\":\n      style.opacity = \"0.5\";\n      break;\n    case \"italic\":\n      style.fontStyle = \"italic\";\n      break;\n    case \"hidden\":\n      style.visibility = \"hidden\";\n      break;\n    case \"strikethrough\":\n      style.textDecoration = \"line-through\";\n      break;\n    case \"underline\":\n      style.textDecoration = \"underline\";\n      break;\n    case \"blink\":\n      style.textDecoration = \"blink\";\n      break;\n  }\n  return style;\n}\nfunction convertBundleIntoReact(linkify, useClasses, bundle, key) {\n  var style = useClasses ? null : createStyle(bundle);\n  var className = useClasses ? createClass(bundle) : null;\n  if (!linkify) {\n    return react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"span\", {\n      style: style,\n      key: key,\n      className: className\n    }, bundle.content);\n  }\n  var content = [];\n  var linkRegex = /(\\s|^)(https?:\\/\\/(?:www\\.|(?!www))[^\\s.]+\\.[^\\s]{2,}|www\\.[^\\s]+\\.[^\\s]{2,})/g;\n  var index = 0;\n  var match;\n  while ((match = linkRegex.exec(bundle.content)) !== null) {\n    var pre = match[1], url = match[2];\n    var startIndex = match.index + pre.length;\n    if (startIndex > index) {\n      content.push(bundle.content.substring(index, startIndex));\n    }\n    var href = url.startsWith(\"www.\") ? (\"http://\").concat(url) : url;\n    content.push(react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"a\", {\n      key: index,\n      href: href,\n      target: \"_blank\"\n    }, (\"\").concat(url)));\n    index = linkRegex.lastIndex;\n  }\n  if (index < bundle.content.length) {\n    content.push(bundle.content.substring(index));\n  }\n  return react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"span\", {\n    style: style,\n    key: key,\n    className: className\n  }, content);\n}\nfunction Ansi(props) {\n  var className = props.className, useClasses = props.useClasses, children = props.children, linkify = props.linkify;\n  return react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"code\", {\n    className: className\n  }, ansiToJSON(children !== null && children !== void 0 ? children : \"\", useClasses !== null && useClasses !== void 0 ? useClasses : false).map(convertBundleIntoReact.bind(null, linkify !== null && linkify !== void 0 ? linkify : false, useClasses !== null && useClasses !== void 0 ? useClasses : false)));\n}\nfunction fixBackspace(txt) {\n  var tmp = txt;\n  do {\n    txt = tmp;\n    tmp = txt.replace(/[^\\n]\\x08/gm, \"\");\n  } while (tmp.length < txt.length);\n  return txt;\n}\n\nvar StdoutList = function (_a) {\n  var data = _a.data;\n  var classNames = useClassNames();\n  return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n    children: data.map(function (_a) {\n      var data = _a.data, id = _a.id;\n      return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n        className: classNames(\"console-item\", [consoleItemClassName$1]),\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Ansi, {\n          children: data\n        })\n      }, id);\n    })\n  });\n};\nvar consoleItemClassName$1 = fakeCss;\n\nvar getParameters = function (parameters) {\n  return lz_string__WEBPACK_IMPORTED_MODULE_6__.compressToBase64(JSON.stringify(parameters)).replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=+$/, \"\");\n};\nvar CSB_URL = \"https://codesandbox.io/api/v1/sandboxes/define\";\nvar getFileParameters = function (files, environment) {\n  var normalizedFiles = Object.keys(files).reduce(function (prev, next) {\n    var _a;\n    var fileName = next.replace(\"/\", \"\");\n    var value = {\n      content: files[next].code,\n      isBinary: false\n    };\n    return __assign(__assign({}, prev), (_a = {}, _a[fileName] = value, _a));\n  }, {});\n  return getParameters(__assign({\n    files: normalizedFiles\n  }, environment ? {\n    template: environment\n  } : null));\n};\nvar UnstyledOpenInCodeSandboxButton = function (props) {\n  var sandpack = useSandpack().sandpack;\n  if (sandpack.exportOptions) {\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ExportToWorkspaceButton, __assign({\n      state: sandpack\n    }, props));\n  }\n  return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(RegularExportButton, __assign({\n    state: sandpack\n  }, props));\n};\nvar ExportToWorkspaceButton = function (_a) {\n  var children = _a.children, state = _a.state, props = __rest(_a, [\"children\", \"state\"]);\n  var submit = function () {\n    return __awaiter(void 0, void 0, void 0, function () {\n      var normalizedFiles, response, data;\n      var _a;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!((_a = state.exportOptions) === null || _a === void 0 ? void 0 : _a.apiToken)) {\n              throw new Error(\"Missing `apiToken` property\");\n            }\n            normalizedFiles = Object.keys(state.files).reduce(function (prev, next) {\n              var _a;\n              var fileName = next.replace(\"/\", \"\");\n              return __assign(__assign({}, prev), (_a = {}, _a[fileName] = state.files[next], _a));\n            }, {});\n            return [4, fetch(\"https://api.codesandbox.io/sandbox\", {\n              method: \"POST\",\n              body: JSON.stringify({\n                template: state.environment,\n                files: normalizedFiles,\n                privacy: state.exportOptions.privacy === \"public\" ? 0 : 2\n              }),\n              headers: {\n                Authorization: (\"Bearer \").concat(state.exportOptions.apiToken),\n                \"Content-Type\": \"application/json\",\n                \"X-CSB-API-Version\": \"2023-07-01\"\n              }\n            })];\n          case 1:\n            response = _b.sent();\n            return [4, response.json()];\n          case 2:\n            data = _b.sent();\n            window.open((\"https://codesandbox.io/p/sandbox/\").concat(data.data.alias, \"?file=/\").concat(state.activeFile, \"&utm-source=storybook-addon\"), \"_blank\");\n            return [2];\n        }\n      });\n    });\n  };\n  return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"button\", __assign({\n    onClick: submit,\n    title: \"Export to workspace in CodeSandbox\",\n    type: \"button\"\n  }, props, {\n    children: children\n  }));\n};\nvar RegularExportButton = function (_a) {\n  var _b, _c, _d;\n  var children = _a.children, state = _a.state, props = __rest(_a, [\"children\", \"state\"]);\n  var formRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(null);\n  var _e = react__WEBPACK_IMPORTED_MODULE_1__.useState(), paramsValues = _e[0], setParamsValues = _e[1];\n  react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function debounce() {\n    var timer = setTimeout(function () {\n      var params = getFileParameters(state.files, state.environment);\n      var searchParams = new URLSearchParams({\n        parameters: params,\n        query: new URLSearchParams({\n          file: state.activeFile,\n          utm_medium: \"sandpack\"\n        }).toString()\n      });\n      setParamsValues(searchParams);\n    }, 600);\n    return function () {\n      clearTimeout(timer);\n    };\n  }, [state.activeFile, state.environment, state.files]);\n  if (((_d = (_c = (_b = paramsValues === null || paramsValues === void 0 ? void 0 : paramsValues.get) === null || _b === void 0 ? void 0 : _b.call(paramsValues, \"parameters\")) === null || _c === void 0 ? void 0 : _c.length) !== null && _d !== void 0 ? _d : 0) > 1500) {\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"button\", __assign({\n      onClick: function () {\n        var _a;\n        return (_a = formRef.current) === null || _a === void 0 ? void 0 : _a.submit();\n      },\n      title: \"Open in CodeSandbox\",\n      type: \"button\"\n    }, props, {\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"form\", {\n        ref: formRef,\n        action: CSB_URL,\n        method: \"POST\",\n        style: {\n          visibility: \"hidden\"\n        },\n        target: \"_blank\",\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"input\", {\n          name: \"environment\",\n          type: \"hidden\",\n          value: state.environment === \"node\" ? \"server\" : state.environment\n        }), Array.from(paramsValues, function (_a) {\n          var key = _a[0], value = _a[1];\n          return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"input\", {\n            name: key,\n            type: \"hidden\",\n            value: value\n          }, key);\n        })]\n      }), children]\n    }));\n  }\n  return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"a\", __assign({\n    href: (\"\").concat(CSB_URL, \"?\").concat(paramsValues === null || paramsValues === void 0 ? void 0 : paramsValues.toString(), \"&environment=\").concat(state.environment === \"node\" ? \"server\" : state.environment),\n    rel: \"noreferrer noopener\",\n    target: \"_blank\",\n    title: \"Open in CodeSandbox\"\n  }, props, {\n    children: children\n  }));\n};\n\nvar OpenInCodeSandboxButton = function () {\n  var classNames = useClassNames();\n  return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(UnstyledOpenInCodeSandboxButton, {\n    className: classNames(\"button\", [classNames(\"icon-standalone\"), buttonClassName, iconStandaloneClassName, roundedButtonClassName]),\n    children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ExportIcon, {}), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n      children: \"Open Sandbox\"\n    })]\n  });\n};\n\nvar cubeClassName = fakeCss;\nvar wrapperClassName$2 = fakeCss;\nkeyframes({\n  \"0%\": {\n    transform: \"rotateX(-25.5deg) rotateY(45deg)\"\n  },\n  \"100%\": {\n    transform: \"rotateX(-25.5deg) rotateY(405deg)\"\n  }\n});\nvar sidesClassNames = fakeCss;\nvar Loading = function (_a) {\n  var className = _a.className, showOpenInCodeSandbox = _a.showOpenInCodeSandbox, props = __rest(_a, [\"className\", \"showOpenInCodeSandbox\"]);\n  var classNames = useClassNames();\n  return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", __assign({\n    className: classNames(\"cube-wrapper\", [wrapperClassName$2, className]),\n    title: \"Open in CodeSandbox\"\n  }, props, {\n    children: [showOpenInCodeSandbox && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(OpenInCodeSandboxButton, {}), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n      className: classNames(\"cube\", [cubeClassName]),\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n        className: classNames(\"sides\", [sidesClassNames]),\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n          className: \"top\"\n        }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n          className: \"right\"\n        }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n          className: \"bottom\"\n        }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n          className: \"left\"\n        }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n          className: \"front\"\n        }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n          className: \"back\"\n        })]\n      })\n    })]\n  }));\n};\n\nvar loadingClassName = fakeCss;\nvar LoadingOverlay = function (_a) {\n  var clientId = _a.clientId, loading = _a.loading, className = _a.className, style = _a.style, showOpenInCodeSandbox = _a.showOpenInCodeSandbox, props = __rest(_a, [\"clientId\", \"loading\", \"className\", \"style\", \"showOpenInCodeSandbox\"]);\n  var classNames = useClassNames();\n  var _b = useSandpack().sandpack, runSandpack = _b.runSandpack, environment = _b.environment;\n  var _c = react__WEBPACK_IMPORTED_MODULE_1__.useState(false), shouldShowStdout = _c[0], setShouldShowStdout = _c[1];\n  var loadingOverlayState = useLoadingOverlayState(clientId, loading);\n  var progressMessage = useSandpackPreviewProgress({\n    clientId: clientId\n  });\n  var stdoutData = useSandpackShellStdout({\n    clientId: clientId\n  }).logs;\n  react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function () {\n    var timer;\n    if (progressMessage === null || progressMessage === void 0 ? void 0 : progressMessage.includes(\"Running\")) {\n      timer = setTimeout(function () {\n        setShouldShowStdout(true);\n      }, 3000);\n    }\n    return function () {\n      if (timer) {\n        clearTimeout(timer);\n      }\n    };\n  }, [progressMessage]);\n  if (loadingOverlayState === \"HIDDEN\") {\n    return null;\n  }\n  if (loadingOverlayState === \"TIMEOUT\") {\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", __assign({\n      className: classNames(\"overlay\", [classNames(\"error\"), absoluteClassName, errorClassName, errorBundlerClassName, className])\n    }, props, {\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n        className: classNames(\"error-message\", [errorMessageClassName]),\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", {\n          className: classNames(\"error-title\", [fakeCss]),\n          children: \"Couldn't connect to server\"\n        }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n          className: classNames(\"error-message\", [errorMessageClassName]),\n          children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"p\", {\n            children: [\"This means sandpack cannot connect to the runtime or your network is having some issues. Please check the network tab in your browser and try again. If the problem persists, report it via\", \" \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"a\", {\n              href: \"mailto:hello@codesandbox.io?subject=Sandpack Timeout Error\",\n              children: \"email\"\n            }), \" \", \"or submit an issue on\", \" \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"a\", {\n              href: \"https://github.com/codesandbox/sandpack/issues\",\n              rel: \"noreferrer noopener\",\n              target: \"_blank\",\n              children: \"GitHub.\"\n            })]\n          })\n        }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"p\", {\n          className: classNames(\"error-message\", [errorMessageClassName()]),\n          children: [\"ENV: \", environment, (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"br\", {}), \"ERROR: TIME_OUT\"]\n        }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n          children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"button\", {\n            className: classNames(\"button\", [classNames(\"icon-standalone\"), buttonClassName, iconStandaloneClassName, roundedButtonClassName]),\n            onClick: runSandpack,\n            title: \"Restart script\",\n            type: \"button\",\n            children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(RestartIcon, {}), \" \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n              children: \"Try again\"\n            })]\n          })\n        })]\n      })\n    }));\n  }\n  var stillLoading = loadingOverlayState === \"LOADING\" || loadingOverlayState === \"PRE_FADING\";\n  return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n    children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", __assign({\n      className: classNames(\"overlay\", [classNames(\"loading\"), absoluteClassName, loadingClassName, className]),\n      style: __assign(__assign({}, style), {\n        opacity: stillLoading ? 1 : 0,\n        transition: (\"opacity \").concat(FADE_ANIMATION_DURATION, \"ms ease-out\")\n      })\n    }, props, {\n      children: [shouldShowStdout && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n        className: stdoutPreview.toString(),\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(StdoutList, {\n          data: stdoutData\n        })\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Loading, {\n        showOpenInCodeSandbox: showOpenInCodeSandbox\n      })]\n    })), progressMessage && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n      className: progressClassName$1.toString(),\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", {\n        children: progressMessage\n      })\n    })]\n  });\n};\nvar stdoutPreview = fakeCss;\nvar progressClassName$1 = fakeCss;\n\nvar DependenciesProgress = function (_a) {\n  var clientId = _a.clientId;\n  var progressMessage = useSandpackPreviewProgress({\n    timeout: 3000,\n    clientId: clientId\n  });\n  if (!progressMessage) {\n    return null;\n  }\n  return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n    className: progressClassName.toString(),\n    children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", {\n      children: progressMessage\n    })\n  });\n};\nvar progressClassName = fakeCss;\n\nvar explorerClassName = fakeCss;\nvar File = function (_a) {\n  var selectFile = _a.selectFile, path = _a.path, active = _a.active, onClick = _a.onClick, depth = _a.depth, isDirOpen = _a.isDirOpen;\n  var classNames = useClassNames();\n  var onClickButton = function (event) {\n    if (selectFile) {\n      selectFile(path);\n    }\n    onClick === null || onClick === void 0 ? void 0 : onClick(event);\n  };\n  var fileName = path.split(\"/\").filter(Boolean).pop();\n  var getIcon = function () {\n    if (selectFile) return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(FileIcon, {});\n    return isDirOpen ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(DirectoryIconOpen, {}) : (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(DirectoryIconClosed, {});\n  };\n  return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"button\", {\n    className: classNames(\"button\", [classNames(\"explorer\"), buttonClassName, explorerClassName]),\n    \"data-active\": active,\n    onClick: onClickButton,\n    style: {\n      paddingLeft: 18 * depth + \"px\"\n    },\n    title: fileName,\n    type: \"button\",\n    children: [getIcon(), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n      children: fileName\n    })]\n  });\n};\n\nvar Directory = function (_a) {\n  var prefixedPath = _a.prefixedPath, files = _a.files, selectFile = _a.selectFile, activeFile = _a.activeFile, depth = _a.depth, autoHiddenFiles = _a.autoHiddenFiles, visibleFiles = _a.visibleFiles, initialCollapsedFolder = _a.initialCollapsedFolder;\n  var _b = react__WEBPACK_IMPORTED_MODULE_1__.useState(!(initialCollapsedFolder === null || initialCollapsedFolder === void 0 ? void 0 : initialCollapsedFolder.includes(prefixedPath))), open = _b[0], setOpen = _b[1];\n  var toggle = function () {\n    return setOpen(function (prev) {\n      return !prev;\n    });\n  };\n  return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n    children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(File, {\n      depth: depth,\n      isDirOpen: open,\n      onClick: toggle,\n      path: prefixedPath + \"/\"\n    }), open && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ModuleList, {\n      activeFile: activeFile,\n      autoHiddenFiles: autoHiddenFiles,\n      depth: depth + 1,\n      files: files,\n      initialCollapsedFolder: initialCollapsedFolder,\n      prefixedPath: prefixedPath,\n      selectFile: selectFile,\n      visibleFiles: visibleFiles\n    })]\n  }, prefixedPath);\n};\n\nvar fromPropsToModules = function (_a) {\n  var autoHiddenFiles = _a.autoHiddenFiles, visibleFiles = _a.visibleFiles, files = _a.files, prefixedPath = _a.prefixedPath;\n  var hasVisibleFilesOption = visibleFiles.length > 0;\n  var filterByHiddenProperty = autoHiddenFiles && !hasVisibleFilesOption;\n  var filterByVisibleFilesOption = autoHiddenFiles && !!hasVisibleFilesOption;\n  var fileListWithoutPrefix = Object.keys(files).filter(function (filePath) {\n    var _a;\n    var isValidatedPath = filePath.startsWith(prefixedPath);\n    if (filterByVisibleFilesOption) {\n      return isValidatedPath && visibleFiles.includes(filePath);\n    }\n    if (filterByHiddenProperty) {\n      return isValidatedPath && !((_a = files[filePath]) === null || _a === void 0 ? void 0 : _a.hidden);\n    }\n    return isValidatedPath;\n  }).map(function (file) {\n    return file.substring(prefixedPath.length);\n  });\n  var directories = new Set(fileListWithoutPrefix.filter(function (file) {\n    return file.includes(\"/\");\n  }).map(function (file) {\n    return (\"\").concat(prefixedPath).concat(file.split(\"/\")[0], \"/\");\n  }));\n  var modules = fileListWithoutPrefix.filter(function (file) {\n    return !file.includes(\"/\");\n  }).map(function (file) {\n    return (\"\").concat(prefixedPath).concat(file);\n  });\n  return {\n    directories: Array.from(directories),\n    modules: modules\n  };\n};\n\nvar ModuleList = function (_a) {\n  var _b = _a.depth, depth = _b === void 0 ? 0 : _b, activeFile = _a.activeFile, selectFile = _a.selectFile, prefixedPath = _a.prefixedPath, files = _a.files, autoHiddenFiles = _a.autoHiddenFiles, visibleFiles = _a.visibleFiles, initialCollapsedFolder = _a.initialCollapsedFolder;\n  var _c = fromPropsToModules({\n    visibleFiles: visibleFiles,\n    autoHiddenFiles: autoHiddenFiles,\n    prefixedPath: prefixedPath,\n    files: files\n  }), directories = _c.directories, modules = _c.modules;\n  return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n    children: [directories.map(function (dir) {\n      return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Directory, {\n        activeFile: activeFile,\n        autoHiddenFiles: autoHiddenFiles,\n        depth: depth,\n        files: files,\n        initialCollapsedFolder: initialCollapsedFolder,\n        prefixedPath: dir,\n        selectFile: selectFile,\n        visibleFiles: visibleFiles\n      }, dir);\n    }), modules.map(function (file) {\n      return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(File, {\n        active: activeFile === file,\n        depth: depth,\n        path: file,\n        selectFile: selectFile\n      }, file);\n    })]\n  });\n};\n\nvar fileExplorerClassName = fakeCss;\nvar SandpackFileExplorer = function (_a) {\n  var className = _a.className, _b = _a.autoHiddenFiles, autoHiddenFiles = _b === void 0 ? false : _b, _c = _a.initialCollapsedFolder, initialCollapsedFolder = _c === void 0 ? [] : _c, props = __rest(_a, [\"className\", \"autoHiddenFiles\", \"initialCollapsedFolder\"]);\n  var _d = useSandpack(), _e = _d.sandpack, status = _e.status, updateFile = _e.updateFile, deleteFile = _e.deleteFile, activeFile = _e.activeFile, files = _e.files, openFile = _e.openFile, visibleFilesFromProps = _e.visibleFilesFromProps, listen = _d.listen;\n  var classNames = useClassNames();\n  react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function watchFSFilesChanges() {\n    if (status !== \"running\") return;\n    var unsubscribe = listen(function (message) {\n      if (message.type === \"fs/change\") {\n        updateFile(message.path, message.content, false);\n      }\n      if (message.type === \"fs/remove\") {\n        deleteFile(message.path, false);\n      }\n    });\n    return unsubscribe;\n  }, [status]);\n  var orderedFiles = Object.keys(files).sort().reduce(function (obj, key) {\n    obj[key] = files[key];\n    return obj;\n  }, {});\n  return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", __assign({\n    className: classNames(\"file-explorer\", [stackClassName, className])\n  }, props, {\n    children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n      className: classNames(\"file-explorer-list\", [fileExplorerClassName]),\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ModuleList, {\n        activeFile: activeFile,\n        autoHiddenFiles: autoHiddenFiles,\n        files: orderedFiles,\n        initialCollapsedFolder: initialCollapsedFolder,\n        prefixedPath: \"/\",\n        selectFile: openFile,\n        visibleFiles: visibleFilesFromProps\n      })\n    })\n  }));\n};\n\nvar splitUrl = function (url) {\n  var match = url.match(/(https?:\\/\\/.*?)\\//);\n  if (match && match[1]) {\n    return [match[1], url.replace(match[1], \"\")];\n  }\n  return [url, \"/\"];\n};\n\nvar navigatorClassName = fakeCss;\nvar inputClassName = fakeCss;\nvar Navigator = function (_a) {\n  var _b;\n  var clientId = _a.clientId, onURLChange = _a.onURLChange, className = _a.className, startRoute = _a.startRoute, props = __rest(_a, [\"clientId\", \"onURLChange\", \"className\", \"startRoute\"]);\n  var _c = react__WEBPACK_IMPORTED_MODULE_1__.useState(\"\"), baseUrl = _c[0], setBaseUrl = _c[1];\n  var _d = useSandpack(), sandpack = _d.sandpack, dispatch = _d.dispatch, listen = _d.listen;\n  var _e = react__WEBPACK_IMPORTED_MODULE_1__.useState((_b = startRoute !== null && startRoute !== void 0 ? startRoute : sandpack.startRoute) !== null && _b !== void 0 ? _b : \"/\"), relativeUrl = _e[0], setRelativeUrl = _e[1];\n  var _f = react__WEBPACK_IMPORTED_MODULE_1__.useState(false), backEnabled = _f[0], setBackEnabled = _f[1];\n  var _g = react__WEBPACK_IMPORTED_MODULE_1__.useState(false), forwardEnabled = _g[0], setForwardEnabled = _g[1];\n  var classNames = useClassNames();\n  react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function () {\n    var unsub = listen(function (message) {\n      if (message.type === \"urlchange\") {\n        var url = message.url, back = message.back, forward = message.forward;\n        var _a = splitUrl(url), newBaseUrl = _a[0], newRelativeUrl = _a[1];\n        setBaseUrl(newBaseUrl);\n        setRelativeUrl(newRelativeUrl);\n        setBackEnabled(back);\n        setForwardEnabled(forward);\n      }\n    }, clientId);\n    return function () {\n      return unsub();\n    };\n  }, []);\n  var handleInputChange = function (e) {\n    var path = e.target.value.startsWith(\"/\") ? e.target.value : (\"/\").concat(e.target.value);\n    setRelativeUrl(path);\n  };\n  var handleKeyDown = function (e) {\n    if (e.code === \"Enter\") {\n      e.preventDefault();\n      e.stopPropagation();\n      if (typeof onURLChange === \"function\") {\n        onURLChange(baseUrl + e.currentTarget.value);\n      }\n    }\n  };\n  var handleRefresh = function () {\n    dispatch({\n      type: \"refresh\"\n    });\n  };\n  var handleBack = function () {\n    dispatch({\n      type: \"urlback\"\n    });\n  };\n  var handleForward = function () {\n    dispatch({\n      type: \"urlforward\"\n    });\n  };\n  var buttonsClassNames = classNames(\"button\", [classNames(\"icon\"), buttonClassName, iconClassName, fakeCss]);\n  return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", __assign({\n    className: classNames(\"navigator\", [navigatorClassName, className])\n  }, props, {\n    children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"button\", {\n      \"aria-label\": \"Go back one page\",\n      className: buttonsClassNames,\n      disabled: !backEnabled,\n      onClick: handleBack,\n      type: \"button\",\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(BackwardIcon, {})\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"button\", {\n      \"aria-label\": \"Go forward one page\",\n      className: buttonsClassNames,\n      disabled: !forwardEnabled,\n      onClick: handleForward,\n      type: \"button\",\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ForwardIcon, {})\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"button\", {\n      \"aria-label\": \"Refresh page\",\n      className: buttonsClassNames,\n      onClick: handleRefresh,\n      type: \"button\",\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(RefreshIcon, {})\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"input\", {\n      \"aria-label\": \"Current Sandpack URL\",\n      className: classNames(\"input\", [inputClassName]),\n      name: \"Current Sandpack URL\",\n      onChange: handleInputChange,\n      onKeyDown: handleKeyDown,\n      type: \"text\",\n      value: relativeUrl\n    })]\n  }));\n};\n\nvar previewClassName = fakeCss;\nvar previewIframe = fakeCss;\nvar previewActionsClassName$1 = fakeCss;\nvar SandpackPreview = react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(function (_a, ref) {\n  var _b = _a.showNavigator, showNavigator = _b === void 0 ? false : _b, _c = _a.showRefreshButton, showRefreshButton = _c === void 0 ? true : _c, _d = _a.showOpenInCodeSandbox, showOpenInCodeSandbox = _d === void 0 ? true : _d, _e = _a.showSandpackErrorOverlay, showSandpackErrorOverlay = _e === void 0 ? true : _e, _g = _a.showRestartButton, showRestartButton = _g === void 0 ? true : _g, _h = _a.actionsChildren, actionsChildren = _h === void 0 ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {}) : _h, children = _a.children, className = _a.className, _j = _a.startRoute, startRoute = _j === void 0 ? \"/\" : _j, props = __rest(_a, [\"showNavigator\", \"showRefreshButton\", \"showOpenInCodeSandbox\", \"showSandpackErrorOverlay\", \"showOpenNewtab\", \"showRestartButton\", \"actionsChildren\", \"children\", \"className\", \"startRoute\"]);\n  var _k = useSandpackClient({\n    startRoute: startRoute\n  }), sandpack = _k.sandpack, listen = _k.listen, iframe = _k.iframe, getClient = _k.getClient, clientId = _k.clientId, dispatch = _k.dispatch;\n  var _l = react__WEBPACK_IMPORTED_MODULE_1__.useState(null), iframeComputedHeight = _l[0], setComputedAutoHeight = _l[1];\n  var status = sandpack.status;\n  var refresh = useSandpackNavigation(clientId).refresh;\n  var restart = useSandpackShell(clientId).restart;\n  var classNames = useClassNames();\n  react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function () {\n    var unsubscribe = listen(function (message) {\n      if (message.type === \"resize\") {\n        setComputedAutoHeight(message.height);\n      }\n    });\n    return unsubscribe;\n  }, []);\n  react__WEBPACK_IMPORTED_MODULE_1__.useImperativeHandle(ref, function () {\n    return {\n      clientId: clientId,\n      getClient: getClient\n    };\n  }, [getClient, clientId]);\n  var handleNewURL = function (newUrl) {\n    if (!iframe.current) {\n      return;\n    }\n    iframe.current.src = newUrl;\n  };\n  return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(SandpackStack, __assign({\n    className: classNames(\"preview\", [className])\n  }, props, {\n    children: [showNavigator && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Navigator, {\n      clientId: clientId,\n      onURLChange: handleNewURL,\n      startRoute: startRoute\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n      className: classNames(\"preview-container\", [previewClassName]),\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"iframe\", {\n        ref: iframe,\n        className: classNames(\"preview-iframe\", [previewIframe]),\n        style: {\n          height: iframeComputedHeight ? iframeComputedHeight : undefined\n        },\n        title: \"Sandpack Preview\"\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n        className: classNames(\"preview-actions\", [previewActionsClassName$1]),\n        children: [actionsChildren, showRestartButton && sandpack.environment === \"node\" && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(RoundedButton, {\n          onClick: restart,\n          children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(RestartIcon, {})\n        }), !showNavigator && showRefreshButton && status === \"running\" && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(RoundedButton, {\n          onClick: refresh,\n          children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(RefreshIcon, {})\n        }), sandpack.teamId && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"button\", {\n          className: classNames(\"button\", [classNames(\"icon-standalone\"), buttonClassName, iconStandaloneClassName, roundedButtonClassName]),\n          onClick: function () {\n            return dispatch({\n              type: \"sign-out\"\n            });\n          },\n          title: \"Sign out\",\n          type: \"button\",\n          children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(SignOutIcon, {})\n        }), showOpenInCodeSandbox && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(OpenInCodeSandboxButton, {})]\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(LoadingOverlay, {\n        clientId: clientId,\n        showOpenInCodeSandbox: showOpenInCodeSandbox\n      }), showSandpackErrorOverlay && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ErrorOverlay, {}), children]\n    })]\n  }));\n});\n\nvar transpiledCodeClassName = fakeCss;\nvar SandpackTranspiledCode = function (_a) {\n  var className = _a.className, props = __rest(_a, [\"className\"]);\n  var sandpack = useSandpack().sandpack;\n  var transpiledCode = useTranspiledCode();\n  var classNames = useClassNames();\n  var hiddenIframeRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(null);\n  react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function () {\n    var hiddenIframe = hiddenIframeRef.current;\n    if (hiddenIframe) {\n      sandpack.registerBundler(hiddenIframe, \"hidden\");\n    }\n    return function () {\n      sandpack.unregisterBundler(\"hidden\");\n    };\n  }, []);\n  return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", __assign({\n    className: classNames(\"transpiled-code\", [stackClassName, transpiledCodeClassName, className])\n  }, props, {\n    children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(SandpackCodeViewer, __assign({\n      code: transpiledCode !== null && transpiledCode !== void 0 ? transpiledCode : \"\",\n      initMode: sandpack.initMode\n    }, props)), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"iframe\", {\n      ref: hiddenIframeRef,\n      style: {\n        display: \"none\"\n      },\n      title: \"transpiled sandpack code\"\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ErrorOverlay, {}), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(LoadingOverlay, {\n      clientId: \"hidden\",\n      showOpenInCodeSandbox: false\n    })]\n  }));\n};\n\nvar wrapperClassName$1 = fakeCss;\nvar flexClassName$1 = fakeCss;\nvar Header$1 = function (_a) {\n  var status = _a.status, suiteOnly = _a.suiteOnly, setSuiteOnly = _a.setSuiteOnly, setVerbose = _a.setVerbose, verbose = _a.verbose, watchMode = _a.watchMode, setWatchMode = _a.setWatchMode, showSuitesOnly = _a.showSuitesOnly, showWatchButton = _a.showWatchButton, showVerboseButton = _a.showVerboseButton, hideTestsAndSupressLogs = _a.hideTestsAndSupressLogs;\n  var classNames = useClassNames();\n  var buttonsClassName = classNames(\"test-header-button\", [buttonClassName, roundedButtonClassName, fakeCss]);\n  return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n    className: classNames(\"test-header\", [wrapperClassName$1, flexClassName$1]),\n    children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n      className: classNames(\"test-header-wrapper\", [flexClassName$1]),\n      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"p\", {\n        className: classNames(\"test-header-title\", [fakeCss]),\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ConsoleIcon, {}), \"Tests\"]\n      })\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n      className: classNames(\"test-header-actions\", [flexClassName$1]),\n      children: [showSuitesOnly && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"button\", {\n        className: buttonsClassName,\n        \"data-active\": suiteOnly,\n        disabled: status === \"initialising\",\n        onClick: setSuiteOnly,\n        type: \"button\",\n        children: \"Suite only\"\n      }), showVerboseButton && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"button\", {\n        className: buttonsClassName,\n        \"data-active\": verbose,\n        disabled: status === \"initialising\" || hideTestsAndSupressLogs,\n        onClick: setVerbose,\n        type: \"button\",\n        children: \"Verbose\"\n      }), showWatchButton && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"button\", {\n        className: buttonsClassName,\n        \"data-active\": watchMode,\n        disabled: status === \"initialising\",\n        onClick: setWatchMode,\n        type: \"button\",\n        children: \"Watch\"\n      })]\n    })]\n  });\n};\n\nvar RunButton = function (_a) {\n  var onClick = _a.onClick;\n  return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(RoundedButton, {\n    onClick: onClick,\n    title: \"Run tests\",\n    children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(RunIcon, {})\n  });\n};\n\nvar setTestTheme = function (isDark) {\n  return {\n    \"--test-pass\": isDark ? \"#18df16\" : \"#15c213\",\n    \"--test-fail\": isDark ? \"#df162b\" : \"#c21325\",\n    \"--test-skip\": isDark ? \"#eace2b\" : \"#c2a813\",\n    \"--test-run\": isDark ? \"#eace2b\" : \"#c2a813\",\n    \"--test-title\": isDark ? \"#3fbabe\" : \"#256c6f\"\n  };\n};\nvar color = fakeCss;\nvar passTextClassName = color();\nvar failTextClassName = color();\nvar skipTextClassName = color();\nvar titleTextClassName = color();\nvar background = fakeCss;\nvar runBackgroundClassName = background();\nvar passBackgroundClassName = background();\nvar failBackgroundClassName = background();\n\nvar testContainerClassName = fakeCss;\nvar containerClassName$4 = fakeCss;\nvar testClassName = fakeCss;\nvar durationClassName = fakeCss;\nvar gapRightClassName = fakeCss;\nvar Tests = function (_a) {\n  var tests = _a.tests;\n  var classNames = useClassNames();\n  return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n    className: classNames(\"test\", [testContainerClassName]),\n    children: tests.map(function (test) {\n      return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n        className: classNames(\"test-result\", [containerClassName$4]),\n        children: [test.status === \"pass\" && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n          className: classNames(\"test-pass-text\", [passTextClassName, gapRightClassName]),\n          children: \"\\u2713\"\n        }), test.status === \"fail\" && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n          className: classNames(\"test-fail-text\", [failTextClassName, gapRightClassName]),\n          children: \"\\u2715\"\n        }), test.status === \"idle\" && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n          className: classNames(\"test-idle-text\", [skipTextClassName, gapRightClassName]),\n          children: \"\\u25CB\"\n        }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n          className: classNames(\"test-name-text\", [testClassName]),\n          children: test.name\n        }), test.duration !== undefined && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"span\", {\n          className: classNames(\"test-duration-text\", [durationClassName]),\n          children: [\"(\", test.duration, \" ms)\"]\n        })]\n      }, test.name);\n    })\n  });\n};\n\nvar getTests = function (block) {\n  var _a;\n  var _b, _c;\n  return (_a = Object.values((_b = block.tests) !== null && _b !== void 0 ? _b : {})).concat.apply(_a, Object.values((_c = block.describes) !== null && _c !== void 0 ? _c : {}).map(getTests));\n};\nvar getFailingTests = function (block) {\n  return getTests(block).filter(function (t) {\n    return t.status === \"fail\";\n  });\n};\nvar getAllTestResults = function (specs) {\n  return specs.map(getSpecTestResults).reduce(function (acc, stats) {\n    return {\n      pass: acc.pass + stats.pass,\n      fail: acc.fail + stats.fail,\n      skip: acc.skip + stats.skip,\n      total: acc.total + stats.total\n    };\n  }, {\n    pass: 0,\n    skip: 0,\n    fail: 0,\n    total: 0\n  });\n};\nvar getSpecTestResults = function (spec) {\n  return getTests(spec).reduce(function (acc, test) {\n    return {\n      pass: test.status === \"pass\" ? acc.pass + 1 : acc.pass,\n      fail: test.status === \"fail\" ? acc.fail + 1 : acc.fail,\n      skip: test.status === \"idle\" || test.status === \"running\" ? acc.skip + 1 : acc.skip,\n      total: acc.total + 1\n    };\n  }, {\n    pass: 0,\n    fail: 0,\n    skip: 0,\n    total: 0\n  });\n};\nvar getAllSuiteResults = function (specs) {\n  return specs.filter(function (spec) {\n    var _a, _b;\n    return Object.values((_a = spec.describes) !== null && _a !== void 0 ? _a : {}).length > 0 || Object.values((_b = spec.tests) !== null && _b !== void 0 ? _b : {}).length > 0;\n  }).map(getSpecTestResults).reduce(function (acc, stats) {\n    return {\n      pass: acc.pass + (stats.fail === 0 ? 1 : 0),\n      fail: acc.fail + (stats.fail > 0 ? 1 : 0),\n      total: acc.total + 1\n    };\n  }, {\n    pass: 0,\n    fail: 0,\n    total: 0\n  });\n};\nvar getDuration = function (specs) {\n  return flatMap(specs, getTests).reduce(function (acc, test) {\n    return acc + (test.duration || 0);\n  }, 0);\n};\nvar isEmpty = function (block) {\n  var _a, _b;\n  return Object.values((_a = block.describes) !== null && _a !== void 0 ? _a : {}).length === 0 && Object.values((_b = block.tests) !== null && _b !== void 0 ? _b : {}).length === 0;\n};\nvar splitTail = function (as) {\n  var lastIndex = as.length - 1;\n  var head = as.slice(0, lastIndex);\n  var tail = as[lastIndex];\n  return [head, tail];\n};\nvar flatMap = function (as, f) {\n  return as.map(f).reduce(function (acc, next) {\n    return acc.concat(next);\n  }, []);\n};\nvar set = function (path, value) {\n  return function (object) {\n    return (0,clean_set__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(object, path, value);\n  };\n};\n\nvar nameClassName = fakeCss;\nvar containerClassName$3 = fakeCss;\nvar Describes = function (_a) {\n  var describes = _a.describes;\n  var classNames = useClassNames();\n  return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n    children: describes.map(function (describe) {\n      var _a, _b;\n      if (isEmpty(describe)) {\n        return null;\n      }\n      var tests = Object.values((_a = describe.tests) !== null && _a !== void 0 ? _a : {});\n      var describes = Object.values((_b = describe.describes) !== null && _b !== void 0 ? _b : {});\n      return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n        className: classNames(\"test-describe\", [containerClassName$3]),\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n          className: classNames(\"test-name\", [nameClassName]),\n          children: describe.name\n        }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Tests, {\n          tests: tests\n        }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Describes, {\n          describes: describes\n        })]\n      }, describe.name);\n    })\n  });\n};\n\nvar containerClassName$2 = fakeCss;\nvar FormattedError = function (_a) {\n  var error = _a.error, path = _a.path;\n  var classNames = useClassNames();\n  return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n    className: classNames(\"test-error\", [containerClassName$2]),\n    dangerouslySetInnerHTML: {\n      __html: formatDiffMessage(error, path)\n    }\n  });\n};\nvar escapeHtml = function (unsafe) {\n  return unsafe.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\").replace(/\"/g, \"&quot;\").replace(/'/g, \"&#039;\");\n};\nvar formatDiffMessage = function (error, path) {\n  var finalMessage = \"\";\n  if (error.matcherResult) {\n    finalMessage = (\"<span>\").concat(escapeHtml(error.message).replace(/(expected)/m, (\"<span class=\\\"\").concat(passTextClassName, \"\\\">$1</span>\")).replace(/(received)/m, (\"<span class=\\\"\").concat(failTextClassName, \"\\\">$1</span>\")).replace(/(Difference:)/m, \"<span>$1</span>\").replace(/(Expected:)(.*)/m, (\"<span>$1</span><span class=\\\"\").concat(passTextClassName, \"\\\">$2</span>\")).replace(/(Received:)(.*)/m, (\"<span>$1</span><span class=\\\"\").concat(failTextClassName, \"\\\">$2</span>\")).replace(/^(-.*)/gm, (\"<span class=\\\"\").concat(failTextClassName, \"\\\">$1</span>\")).replace(/^(\\+.*)/gm, (\"<span class=\\\"\").concat(passTextClassName, \"\\\">$1</span>\")), \"</span>\");\n  } else {\n    finalMessage = escapeHtml(error.message);\n  }\n  if (error.mappedErrors && error.mappedErrors[0] && error.mappedErrors[0].fileName.endsWith(path) && error.mappedErrors[0]._originalScriptCode) {\n    var mappedError = error.mappedErrors[0];\n    var _originalScriptCode = mappedError._originalScriptCode || [];\n    var widestNumber_1 = Math.max.apply(Math, _originalScriptCode.map(function (code) {\n      return (code.lineNumber + \"\").length;\n    })) + 2;\n    var margin_1 = Array.from({\n      length: widestNumber_1\n    }).map(function () {\n      return \" \";\n    });\n    finalMessage += \"<br />\";\n    finalMessage += \"<br />\";\n    finalMessage += \"<div>\";\n    _originalScriptCode.filter(function (s) {\n      return s.content.trim();\n    }).forEach(function (code) {\n      var currentLineMargin = (code.lineNumber + \"\").length;\n      var newMargin = __spreadArray([], margin_1, true);\n      newMargin.length -= currentLineMargin;\n      if (code.highlight) {\n        newMargin.length -= 2;\n      }\n      var toBeIndex = code.content.indexOf(\".to\");\n      var toBeMargin = Array.from({\n        length: margin_1.length + toBeIndex - (widestNumber_1 - 1)\n      }, function () {\n        return \" \";\n      });\n      var content = escapeHtml(code.content).replace(/(describe|test|it)(\\()(&#039;|&quot;|`)(.*)(&#039;|&quot;|`)/m, (\"<span>$1$2$3</span><span class=\\\"\").concat(titleTextClassName, \"\\\">$4</span><span>$5</span>\")).replace(/(expect\\()(.*)(\\)\\..*)(to[\\w\\d]*)(\\()(.*)(\\))/m, (\"<span>$1</span><span class=\\\"\").concat(failTextClassName, \"\\\">$2</span><span>$3</span><span style=\\\"text-decoration: underline; font-weight: 900\\\">$4</span><span>$5</span><span class=\\\"\").concat(passTextClassName, \"\\\">$6</span><span>$7</span>\"));\n      finalMessage += (\"<div \").concat(code.highlight ? \"style=\\\"font-weight:200;\\\"\" : \"\", \">\") + (code.highlight ? (\"<span class=\\\"\").concat(failTextClassName, \"\\\">></span> \") : \"\") + newMargin.join(\"\") + escapeHtml(\"\" + code.lineNumber) + \" | \" + content + \"</div>\" + (code.highlight ? \"<div>\" + margin_1.join(\"\") + \" | \" + toBeMargin.join(\"\") + (\"<span class=\\\"\").concat(failTextClassName, \"\\\">^</span>\") + \"</div>\" : \"\");\n    });\n    finalMessage += \"</div>\";\n  }\n  return finalMessage.replace(/(?:\\r\\n|\\r|\\n)/g, \"<br />\");\n};\n\nvar fileContainer = fakeCss;\nvar gapBottomClassName$1 = fakeCss;\nvar failTestClassName = fakeCss;\nvar labelClassName$1 = fakeCss;\nvar specLabelClassName = fakeCss;\nvar filePathButtonClassName = fakeCss;\nvar filePathClassName = fakeCss;\nvar fileNameClassName = fakeCss;\nvar Specs = function (_a) {\n  var specs = _a.specs, openSpec = _a.openSpec, status = _a.status, verbose = _a.verbose, hideTestsAndSupressLogs = _a.hideTestsAndSupressLogs;\n  var classNames = useClassNames();\n  return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n    children: specs.map(function (spec) {\n      if (spec.error) {\n        return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n          className: classNames(\"test-spec\", [gapBottomClassName$1]),\n          children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(SpecLabel, {\n            className: classNames(\"test-spec-error\", [labelClassName$1, failBackgroundClassName]),\n            children: \"Error\"\n          }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(FilePath, {\n            onClick: function () {\n              return openSpec(spec.name);\n            },\n            path: spec.name\n          }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(FormattedError, {\n            error: spec.error,\n            path: spec.name\n          })]\n        }, spec.name);\n      }\n      if (isEmpty(spec)) {\n        return null;\n      }\n      var tests = Object.values(spec.tests);\n      var describes = Object.values(spec.describes);\n      var stats = getSpecTestResults(spec);\n      return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n        className: classNames(\"test-spec-name\", [gapBottomClassName$1]),\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n          className: classNames(\"test-spec-name-container\", [fileContainer]),\n          children: [status === \"complete\" ? stats.fail > 0 ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(SpecLabel, {\n            className: classNames(\"test-spec-complete\", [labelClassName$1, failBackgroundClassName]),\n            children: \"Fail\"\n          }) : (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(SpecLabel, {\n            className: classNames(\"test-spec-pass\", [labelClassName$1, passBackgroundClassName]),\n            children: \"Pass\"\n          }) : (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(SpecLabel, {\n            className: classNames(\"test-spec-run\", [labelClassName$1, runBackgroundClassName]),\n            children: \"Run\"\n          }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(FilePath, {\n            onClick: function () {\n              if (!hideTestsAndSupressLogs) {\n                openSpec(spec.name);\n              }\n            },\n            path: spec.name\n          })]\n        }), verbose && !hideTestsAndSupressLogs && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Tests, {\n          tests: tests\n        }), verbose && !hideTestsAndSupressLogs && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Describes, {\n          describes: describes\n        }), !hideTestsAndSupressLogs && getFailingTests(spec).map(function (test) {\n          return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n            className: classNames(\"test-spec-error\", [gapBottomClassName$1]),\n            children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n              className: classNames(\"test-spec-error-text\", [failTestClassName, failTextClassName]),\n              children: [\"\\u25CF \", test.blocks.join(\" › \"), \" \\u203A \", test.name]\n            }), test.errors.map(function (e) {\n              return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(FormattedError, {\n                error: e,\n                path: test.path\n              }, (\"failing-\").concat(test.name, \"-error\"));\n            })]\n          }, (\"failing-\").concat(test.name));\n        })]\n      }, spec.name);\n    })\n  });\n};\nvar SpecLabel = function (_a) {\n  var children = _a.children, className = _a.className;\n  var classNames = useClassNames();\n  return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n    className: classNames(\"test-spec-label\", [specLabelClassName, className]),\n    children: children\n  });\n};\nvar FilePath = function (_a) {\n  var onClick = _a.onClick, path = _a.path;\n  var parts = path.split(\"/\");\n  var basePath = parts.slice(0, parts.length - 1).join(\"/\") + \"/\";\n  var fileName = parts[parts.length - 1];\n  var classNames = useClassNames();\n  return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"button\", {\n    className: classNames(\"test-filename\", [buttonClassName, filePathButtonClassName]),\n    onClick: onClick,\n    type: \"button\",\n    children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n      className: classNames(\"test-filename-base\", [filePathClassName]),\n      children: basePath\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n      className: classNames(\"test-filename-file\", [fileNameClassName]),\n      children: fileName\n    })]\n  });\n};\n\nvar gapBottomClassName = fakeCss;\nvar labelClassName = fakeCss;\nvar containerClassName$1 = fakeCss;\nvar Summary = function (_a) {\n  var suites = _a.suites, tests = _a.tests, duration = _a.duration;\n  var widestLabel = \"Test suites: \";\n  var withMargin = function (label) {\n    var difference = widestLabel.length - label.length;\n    var margin = Array.from({\n      length: difference\n    }, function () {\n      return \" \";\n    }).join(\"\");\n    return label + margin;\n  };\n  var classNames = useClassNames();\n  return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n    className: classNames(\"test-summary\", [containerClassName$1]),\n    children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n      className: classNames(\"test-summary\", [gapBottomClassName]),\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n        className: classNames(\"test-summary-suites-label\", [labelClassName]),\n        children: widestLabel\n      }), suites.fail > 0 && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"span\", {\n        className: classNames(\"test-summary-suites-fail\", [failTextClassName]),\n        children: [suites.fail, \" failed,\", \" \"]\n      }), suites.pass > 0 && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"span\", {\n        className: classNames(\"test-summary-suites-pass\", [passTextClassName]),\n        children: [suites.pass, \" passed,\", \" \"]\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"span\", {\n        children: [suites.total, \" total\"]\n      })]\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n      className: classNames(\"test-summary\", [gapBottomClassName]),\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n        className: classNames(\"test-summary-label\", [labelClassName]),\n        children: withMargin(\"Tests:\")\n      }), tests.fail > 0 && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"span\", {\n        className: classNames(\"test-summary-fail\", [failTextClassName]),\n        children: [tests.fail, \" failed,\", \" \"]\n      }), tests.skip > 0 && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"span\", {\n        className: classNames(\"test-summary-skip\", [skipTextClassName]),\n        children: [tests.skip, \" skipped,\", \" \"]\n      }), tests.pass > 0 && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"span\", {\n        className: classNames(\"test-summary-pass\", [passTextClassName]),\n        children: [tests.pass, \" passed,\", \" \"]\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"span\", {\n        children: [tests.total, \" total\"]\n      })]\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n      className: classNames(\"test-summary-curation\", [labelClassName]),\n      children: [withMargin(\"Time:\"), duration / 1000, \"s\"]\n    })]\n  });\n};\n\nvar previewActionsClassName = fakeCss;\nvar INITIAL_STATE = {\n  specs: {},\n  status: \"initialising\",\n  verbose: false,\n  watchMode: true,\n  suiteOnly: false,\n  specsCount: 0\n};\nvar SandpackTests = function (_a) {\n  var _b = _a.verbose, verbose = _b === void 0 ? false : _b, _c = _a.watchMode, watchMode = _c === void 0 ? true : _c, style = _a.style, className = _a.className, onComplete = _a.onComplete, actionsChildren = _a.actionsChildren, _d = _a.showVerboseButton, showVerboseButton = _d === void 0 ? true : _d, _e = _a.showWatchButton, showWatchButton = _e === void 0 ? true : _e, _f = _a.hideTestsAndSupressLogs, hideTestsAndSupressLogs = _f === void 0 ? false : _f, props = __rest(_a, [\"verbose\", \"watchMode\", \"style\", \"className\", \"onComplete\", \"actionsChildren\", \"showVerboseButton\", \"showWatchButton\", \"hideTestsAndSupressLogs\"]);\n  var theme = useSandpackTheme();\n  var _g = useSandpackClient(), getClient = _g.getClient, iframe = _g.iframe, listen = _g.listen, sandpack = _g.sandpack;\n  var _h = react__WEBPACK_IMPORTED_MODULE_1__.useState(__assign(__assign({}, INITIAL_STATE), {\n    verbose: verbose,\n    watchMode: watchMode\n  })), state = _h[0], setState = _h[1];\n  var runAllTests = react__WEBPACK_IMPORTED_MODULE_1__.useCallback(function () {\n    setState(function (oldState) {\n      return __assign(__assign({}, oldState), {\n        status: \"running\",\n        specs: {}\n      });\n    });\n    var client = getClient();\n    if (client) {\n      client.dispatch({\n        type: \"run-all-tests\"\n      });\n    }\n  }, [getClient]);\n  var runSpec = react__WEBPACK_IMPORTED_MODULE_1__.useCallback(function () {\n    setState(function (oldState) {\n      return __assign(__assign({}, oldState), {\n        status: \"running\",\n        specs: {}\n      });\n    });\n    var client = getClient();\n    if (client) {\n      client.dispatch({\n        type: \"run-tests\",\n        path: sandpack.activeFile\n      });\n    }\n  }, [getClient, sandpack.activeFile]);\n  var testFileRegex = /.*\\.(test|spec)\\.[tj]sx?$/;\n  var isSpecOpen = sandpack.activeFile.match(testFileRegex) !== null;\n  react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function () {\n    var currentDescribeBlocks = [];\n    var currentSpec = \"\";\n    var unsubscribe = listen(function (data) {\n      if (state.suiteOnly && ((\"path\" in data) && data.path !== sandpack.activeFile || (\"test\" in data) && (\"path\" in data.test) && data.test.path !== sandpack.activeFile)) {\n        return;\n      }\n      if (data.type === \"action\" && data.action === \"clear-errors\" && data.source === \"jest\") {\n        currentSpec = data.path;\n        return;\n      }\n      if (data.type === \"test\") {\n        if (data.event === \"initialize_tests\") {\n          currentDescribeBlocks = [];\n          currentSpec = \"\";\n          if (state.watchMode) {\n            return runAllTests();\n          } else {\n            return setState(function (oldState) {\n              return __assign(__assign({}, oldState), {\n                status: \"idle\",\n                specs: {}\n              });\n            });\n          }\n        }\n        if (data.event === \"test_count\") {\n          return setState(function (oldState) {\n            return __assign(__assign({}, oldState), {\n              specsCount: data.count\n            });\n          });\n        }\n        if (data.event === \"total_test_start\") {\n          currentDescribeBlocks = [];\n          return setState(function (oldState) {\n            return __assign(__assign({}, oldState), {\n              status: \"running\"\n            });\n          });\n        }\n        if (data.event === \"total_test_end\") {\n          return setState(function (oldState) {\n            if (onComplete !== undefined) {\n              onComplete(oldState.specs);\n            }\n            return __assign(__assign({}, oldState), {\n              status: \"complete\"\n            });\n          });\n        }\n        if (data.event === \"add_file\") {\n          return setState(set([\"specs\", data.path], {\n            describes: {},\n            tests: {},\n            name: data.path\n          }));\n        }\n        if (data.event === \"remove_file\") {\n          return setState(function (oldState) {\n            var specs = Object.entries(oldState.specs).reduce(function (acc, _a) {\n              var _b;\n              var key = _a[0], value = _a[1];\n              if (key === data.path) {\n                return acc;\n              } else {\n                return __assign(__assign({}, acc), (_b = {}, _b[key] = value, _b));\n              }\n            }, {});\n            return __assign(__assign({}, oldState), {\n              specs: specs\n            });\n          });\n        }\n        if (data.event === \"file_error\") {\n          return setState(set([\"specs\", data.path, \"error\"], data.error));\n        }\n        if (data.event === \"describe_start\") {\n          currentDescribeBlocks.push(data.blockName);\n          var _a = splitTail(currentDescribeBlocks), describePath = _a[0], currentDescribe = _a[1];\n          var spec = currentSpec;\n          if (currentDescribe === undefined) {\n            return;\n          }\n          return setState(set(__spreadArray(__spreadArray([\"specs\", spec, \"describes\"], flatMap(describePath, function (name) {\n            return [name, \"describes\"];\n          }), true), [currentDescribe], false), {\n            name: data.blockName,\n            tests: {},\n            describes: {}\n          }));\n        }\n        if (data.event === \"describe_end\") {\n          currentDescribeBlocks.pop();\n          return;\n        }\n        if (data.event === \"add_test\") {\n          var _b = splitTail(currentDescribeBlocks), describePath = _b[0], currentDescribe = _b[1];\n          var test_1 = {\n            status: \"idle\",\n            errors: [],\n            name: data.testName,\n            blocks: __spreadArray([], currentDescribeBlocks, true),\n            path: data.path\n          };\n          if (currentDescribe === undefined) {\n            return setState(set([\"specs\", data.path, \"tests\", data.testName], test_1));\n          } else {\n            return setState(set(__spreadArray(__spreadArray([\"specs\", data.path, \"describes\"], flatMap(describePath, function (name) {\n              return [name, \"describes\"];\n            }), true), [currentDescribe, \"tests\", data.testName], false), test_1));\n          }\n        }\n        if (data.event === \"test_start\") {\n          var test_2 = data.test;\n          var _c = splitTail(test_2.blocks), describePath = _c[0], currentDescribe = _c[1];\n          var startedTest = {\n            status: \"running\",\n            name: test_2.name,\n            blocks: test_2.blocks,\n            path: test_2.path,\n            errors: []\n          };\n          if (currentDescribe === undefined) {\n            return setState(set([\"specs\", test_2.path, \"tests\", test_2.name], startedTest));\n          } else {\n            return setState(set(__spreadArray(__spreadArray([\"specs\", test_2.path, \"describes\"], flatMap(describePath, function (name) {\n              return [name, \"describes\"];\n            }), true), [currentDescribe, \"tests\", test_2.name], false), startedTest));\n          }\n        }\n        if (data.event === \"test_end\") {\n          var test_3 = data.test;\n          var _d = splitTail(test_3.blocks), describePath = _d[0], currentDescribe = _d[1];\n          var endedTest = {\n            status: test_3.status,\n            errors: test_3.errors,\n            duration: test_3.duration,\n            name: test_3.name,\n            blocks: test_3.blocks,\n            path: test_3.path\n          };\n          if (currentDescribe === undefined) {\n            return setState(set([\"specs\", test_3.path, \"tests\", test_3.name], endedTest));\n          } else {\n            return setState(set(__spreadArray(__spreadArray([\"specs\", test_3.path, \"describes\"], flatMap(describePath, function (name) {\n              return [name, \"describes\"];\n            }), true), [currentDescribe, \"tests\", test_3.name], false), endedTest));\n          }\n        }\n      }\n    });\n    return unsubscribe;\n  }, [state.suiteOnly, state.watchMode, sandpack.activeFile]);\n  react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function watchMode() {\n    var unsunscribe = listen(function (_a) {\n      var type = _a.type;\n      if (type === \"done\" && state.watchMode) {\n        if (isSpecOpen) {\n          runSpec();\n        } else {\n          runAllTests();\n        }\n      }\n    });\n    return unsunscribe;\n  }, [runSpec, runAllTests, state.watchMode, isSpecOpen]);\n  var openSpec = function (file) {\n    sandpack.setActiveFile(file);\n  };\n  var specs = Object.values(state.specs);\n  var duration = getDuration(specs);\n  var testResults = getAllTestResults(specs);\n  var suiteResults = getAllSuiteResults(specs);\n  var classNames = useClassNames();\n  return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(SandpackStack, __assign({\n    className: classNames(\"tests\", [className]),\n    style: __assign(__assign({}, setTestTheme(theme.themeMode === \"dark\")), style)\n  }, props, {\n    children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"iframe\", {\n      ref: iframe,\n      style: {\n        display: \"none\"\n      },\n      title: \"Sandpack Tests\"\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Header$1, {\n      hideTestsAndSupressLogs: hideTestsAndSupressLogs,\n      setSuiteOnly: function () {\n        return setState(function (s) {\n          return __assign(__assign({}, s), {\n            suiteOnly: !s.suiteOnly\n          });\n        });\n      },\n      setVerbose: function () {\n        return setState(function (s) {\n          return __assign(__assign({}, s), {\n            verbose: !s.verbose\n          });\n        });\n      },\n      setWatchMode: function () {\n        setState(function (s) {\n          return __assign(__assign({}, s), {\n            watchMode: !s.watchMode\n          });\n        });\n      },\n      showSuitesOnly: state.specsCount > 1,\n      showVerboseButton: showVerboseButton,\n      showWatchButton: showWatchButton,\n      status: state.status,\n      suiteOnly: state.suiteOnly,\n      verbose: state.verbose,\n      watchMode: state.watchMode\n    }), state.status === \"running\" || state.status === \"initialising\" ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Loading, {\n      showOpenInCodeSandbox: false\n    }) : (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n      className: previewActionsClassName.toString(),\n      children: [actionsChildren, (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(RunButton, {\n        onClick: state.suiteOnly ? runSpec : runAllTests\n      })]\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n      className: containerClassName.toString(),\n      children: specs.length === 0 && state.status === \"complete\" ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n        className: fileErrorContainerClassName.toString(),\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", {\n          children: \"No test files found.\"\n        }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"p\", {\n          children: [\"Test match:\", \" \", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n            className: failTextClassName.toString(),\n            children: testFileRegex.toString()\n          })]\n        })]\n      }) : (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n        children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Specs, {\n          hideTestsAndSupressLogs: hideTestsAndSupressLogs,\n          openSpec: openSpec,\n          specs: specs,\n          status: state.status,\n          verbose: state.verbose\n        }), state.status === \"complete\" && testResults.total > 0 && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Summary, {\n          duration: duration,\n          suites: suiteResults,\n          tests: testResults\n        })]\n      })\n    })]\n  }));\n};\nvar containerClassName = fakeCss;\nvar fileErrorContainerClassName = fakeCss;\n\nvar SYNTAX_ERROR_PATTERN = [\"SyntaxError: \", \"Error in sandbox:\"];\nvar CLEAR_LOG = {\n  id: \"random\",\n  method: \"clear\",\n  data: [\"Console was cleared\"]\n};\nvar TRANSFORMED_TYPE_KEY = \"@t\";\nvar TRANSFORMED_TYPE_KEY_ALTERNATE = \"#@t\";\nvar CIRCULAR_REF_KEY = \"@r\";\nvar MAX_LENGTH_STRING = 10000;\nvar MAX_NEST_LEVEL = 2;\nvar MAX_KEYS = 400;\nvar MAX_MESSAGE_COUNT = MAX_KEYS * 2;\n\nvar GLOBAL = (function getGlobal() {\n  var savedEval = eval;\n  return savedEval(\"this\");\n})();\nvar ARRAY_BUFFER_SUPPORTED = typeof ArrayBuffer === \"function\";\nvar MAP_SUPPORTED = typeof Map === \"function\";\nvar SET_SUPPORTED = typeof Set === \"function\";\nvar Arithmetic;\n(function (Arithmetic) {\n  Arithmetic[Arithmetic[\"infinity\"] = 0] = \"infinity\";\n  Arithmetic[Arithmetic[\"minusInfinity\"] = 1] = \"minusInfinity\";\n  Arithmetic[Arithmetic[\"minusZero\"] = 2] = \"minusZero\";\n})(Arithmetic || (Arithmetic = {}));\nvar transformers = {\n  Arithmetic: function (data) {\n    if (data === Arithmetic.infinity) return Infinity;\n    if (data === Arithmetic.minusInfinity) return -Infinity;\n    if (data === Arithmetic.minusZero) return -0;\n    return data;\n  },\n  HTMLElement: function (data) {\n    var sandbox = document.implementation.createHTMLDocument(\"sandbox\");\n    try {\n      var element = sandbox.createElement(data.tagName);\n      element.innerHTML = data.innerHTML;\n      for (var _i = 0, _a = Object.keys(data.attributes); _i < _a.length; _i++) {\n        var attribute = _a[_i];\n        try {\n          element.setAttribute(attribute, data.attributes[attribute]);\n        } catch (_b) {}\n      }\n      return element;\n    } catch (e) {\n      return data;\n    }\n  },\n  Function: function (data) {\n    var tempFun = function () {};\n    Object.defineProperty(tempFun, \"toString\", {\n      value: function () {\n        return (\"function \").concat(data.name, \"() {\").concat(data.body, \"}\");\n      }\n    });\n    return tempFun;\n  },\n  \"[[NaN]]\": function () {\n    return NaN;\n  },\n  \"[[undefined]]\": function () {\n    return void 0;\n  },\n  \"[[Date]]\": function (val) {\n    var date = new Date();\n    date.setTime(val);\n    return date;\n  },\n  \"[[RegExp]]\": function (val) {\n    return new RegExp(val.src, val.flags);\n  },\n  \"[[Error]]\": function (val) {\n    var Ctor = GLOBAL[val.name] || Error;\n    var err = new Ctor(val.message);\n    err.stack = val.stack;\n    return err;\n  },\n  \"[[ArrayBuffer]]\": function (val) {\n    if (ARRAY_BUFFER_SUPPORTED) {\n      var buffer = new ArrayBuffer(val.length);\n      var view = new Int8Array(buffer);\n      view.set(val);\n      return buffer;\n    }\n    return val;\n  },\n  \"[[TypedArray]]\": function (val) {\n    return typeof GLOBAL[val.ctorName] === \"function\" ? new GLOBAL[val.ctorName](val.arr) : val.arr;\n  },\n  \"[[Map]]\": function (val) {\n    if (MAP_SUPPORTED) {\n      var map = new Map();\n      for (var i = 0; i < val.length; i += 2) map.set(val[i], val[i + 1]);\n      return map;\n    }\n    var kvArr = [];\n    for (var j = 0; j < val.length; j += 2) kvArr.push([val[i], val[i + 1]]);\n    return kvArr;\n  },\n  \"[[Set]]\": function (val) {\n    if (SET_SUPPORTED) {\n      var set = new Set();\n      for (var i = 0; i < val.length; i++) set.add(val[i]);\n      return set;\n    }\n    return val;\n  }\n};\n\nvar formatSymbols = function (message) {\n  var _a;\n  if (typeof message === \"string\" || typeof message === \"number\" || message === null) {\n    return message;\n  } else if (Array.isArray(message)) {\n    return message.map(formatSymbols);\n  } else if (typeof message == \"object\" && (TRANSFORMED_TYPE_KEY in message)) {\n    var type = message[TRANSFORMED_TYPE_KEY];\n    var transform = transformers[type];\n    return transform(message.data);\n  } else if (typeof message == \"object\" && (TRANSFORMED_TYPE_KEY_ALTERNATE in message)) {\n    var type = message[TRANSFORMED_TYPE_KEY_ALTERNATE];\n    var transform = transformers[type];\n    return transform(message.data);\n  } else if (typeof message == \"object\" && ((_a = message.constructor) === null || _a === void 0 ? void 0 : _a.name) === \"NodeList\") {\n    var NodeList_1 = {};\n    Object.entries(message).forEach(function (_a) {\n      var key = _a[0], value = _a[1];\n      NodeList_1[key] = formatSymbols(value);\n    });\n    return NodeList_1;\n  }\n  return message;\n};\nvar arrayToString = function (output, references, level) {\n  var mergeArray = output.reduce(function (acc, curr, index) {\n    return (\"\").concat(acc).concat(index ? \", \" : \"\").concat(fromConsoleToString(curr, references, level));\n  }, \"\");\n  return (\"[\").concat(mergeArray, \"]\");\n};\nvar objectToString = function (output, references, level) {\n  var constructorName = output.constructor.name !== \"Object\" ? (\"\").concat(output.constructor.name, \" \") : \"\";\n  if (level > MAX_NEST_LEVEL) {\n    return constructorName;\n  }\n  var entries = Object.entries(output);\n  var formattedObject = Object.entries(output).reduce(function (acc, _a, index) {\n    var key = _a[0], value = _a[1];\n    var comma = index === 0 ? \"\" : \", \";\n    var breakLine = entries.length > 10 ? \"\\n  \" : \"\";\n    var formatted = fromConsoleToString(value, references, level);\n    if (index === MAX_KEYS) {\n      return acc + breakLine + \"...\";\n    } else if (index > MAX_KEYS) {\n      return acc;\n    }\n    return acc + (\"\").concat(comma).concat(breakLine).concat(key, \": \") + formatted;\n  }, \"\");\n  return (\"\").concat(constructorName, \"{ \").concat(formattedObject).concat(entries.length > 10 ? \"\\n\" : \" \", \"}\");\n};\nvar fromConsoleToString = function (message, references, level) {\n  var _a;\n  if (level === void 0) {\n    level = 0;\n  }\n  try {\n    var output_1 = formatSymbols(message);\n    if (Array.isArray(output_1)) {\n      return arrayToString(output_1, references, level + 1);\n    }\n    switch (typeof output_1) {\n      case \"string\":\n        return (\"\\\"\").concat(output_1, \"\\\"\").slice(0, MAX_LENGTH_STRING);\n      case \"number\":\n      case \"function\":\n      case \"symbol\":\n        return output_1.toString();\n      case \"boolean\":\n        return String(output_1);\n      case \"undefined\":\n        return \"undefined\";\n      case \"object\":\n      default:\n        if (output_1 instanceof RegExp || output_1 instanceof Error || output_1 instanceof Date) {\n          return output_1.toString();\n        }\n        if (output_1 === null) {\n          return String(null);\n        }\n        if (output_1 instanceof HTMLElement) {\n          return output_1.outerHTML.slice(0, MAX_LENGTH_STRING);\n        }\n        if (Object.entries(output_1).length === 0) {\n          return \"{}\";\n        }\n        if ((CIRCULAR_REF_KEY in output_1)) {\n          if (level > MAX_NEST_LEVEL) {\n            return \"Unable to print information\";\n          }\n          var newMessage = references[output_1[CIRCULAR_REF_KEY]];\n          return fromConsoleToString(newMessage, references, level + 1);\n        }\n        if (((_a = output_1.constructor) === null || _a === void 0 ? void 0 : _a.name) === \"NodeList\") {\n          var length_1 = output_1.length;\n          var nodes = new Array(length_1).fill(null).map(function (_, index) {\n            return fromConsoleToString(output_1[index], references);\n          });\n          return (\"NodeList(\").concat(output_1.length, \")[\").concat(nodes, \"]\");\n        }\n        return objectToString(output_1, references, level + 1);\n    }\n  } catch (_b) {\n    return \"Unable to print information\";\n  }\n};\n\nvar getType = function (message) {\n  switch (message) {\n    case \"warn\":\n      return \"warning\";\n    case \"clear\":\n      return \"clear\";\n    case \"error\":\n      return \"error\";\n    case \"log\":\n    case \"info\":\n    default:\n      return \"info\";\n  }\n};\n\nvar ConsoleList = function (_a) {\n  var data = _a.data;\n  var classNames = useClassNames();\n  return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n    children: data.map(function (_a, logIndex, references) {\n      var data = _a.data, id = _a.id, method = _a.method;\n      if (!data) return null;\n      if (Array.isArray(data)) {\n        return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, {\n          children: data.map(function (msg, msgIndex) {\n            var fixReferences = references.slice(logIndex, references.length);\n            return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n              className: classNames(\"console-item\", [consoleItemClassName({\n                variant: getType(method)\n              })]),\n              children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(CodeMirror, {\n                code: method === \"clear\" ? msg : fromConsoleToString(msg, fixReferences),\n                fileType: \"js\",\n                initMode: \"user-visible\",\n                showReadOnly: false,\n                readOnly: true,\n                wrapContent: true\n              })\n            }, (\"\").concat(id, \"-\").concat(msgIndex));\n          })\n        }, id);\n      }\n      return null;\n    })\n  });\n};\nvar consoleItemClassName = fakeCss;\n\nvar wrapperClassName = fakeCss;\nvar flexClassName = fakeCss;\nvar Header = function (_a) {\n  var currentTab = _a.currentTab, setCurrentTab = _a.setCurrentTab, node = _a.node;\n  var classNames = useClassNames();\n  var buttonsClassName = classNames(\"console-header-button\", [buttonClassName, roundedButtonClassName, fakeCss]);\n  return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n    className: classNames(\"console-header\", [wrapperClassName, flexClassName]),\n    children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"p\", {\n      className: classNames(\"console-header-title\", [fakeCss]),\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ConsoleIcon, {}), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n        children: \"Terminal\"\n      })]\n    }), node && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n      className: classNames(\"console-header-actions\", [flexClassName]),\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"button\", {\n        className: buttonsClassName,\n        \"data-active\": currentTab === \"server\",\n        onClick: function () {\n          return setCurrentTab(\"server\");\n        },\n        type: \"button\",\n        children: \"Server\"\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"button\", {\n        className: buttonsClassName,\n        \"data-active\": currentTab === \"client\",\n        onClick: function () {\n          return setCurrentTab(\"client\");\n        },\n        type: \"button\",\n        children: \"Client\"\n      })]\n    })]\n  });\n};\n\nvar useSandpackConsole = function (_a) {\n  var clientId = _a.clientId, _b = _a.maxMessageCount, maxMessageCount = _b === void 0 ? MAX_MESSAGE_COUNT : _b, _c = _a.showSyntaxError, showSyntaxError = _c === void 0 ? false : _c, _d = _a.resetOnPreviewRestart, resetOnPreviewRestart = _d === void 0 ? false : _d;\n  var _e = react__WEBPACK_IMPORTED_MODULE_1__.useState([]), logs = _e[0], setLogs = _e[1];\n  var listen = useSandpack().listen;\n  react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function () {\n    var unsubscribe = listen(function (message) {\n      if (resetOnPreviewRestart && message.type === \"start\") {\n        setLogs([]);\n      } else if (message.type === \"console\" && message.codesandbox) {\n        var payloadLog = Array.isArray(message.log) ? message.log : [message.log];\n        if (payloadLog.find(function (_a) {\n          var method = _a.method;\n          return method === \"clear\";\n        })) {\n          return setLogs([CLEAR_LOG]);\n        }\n        var logsMessages_1 = showSyntaxError ? payloadLog : payloadLog.filter(function (messageItem) {\n          var _a, _b, _c;\n          var messagesWithoutSyntaxErrors = (_c = (_b = (_a = messageItem === null || messageItem === void 0 ? void 0 : messageItem.data) === null || _a === void 0 ? void 0 : _a.filter) === null || _b === void 0 ? void 0 : _b.call(_a, function (dataItem) {\n            if (typeof dataItem !== \"string\") return true;\n            var matches = SYNTAX_ERROR_PATTERN.filter(function (lookFor) {\n              return dataItem.startsWith(lookFor);\n            });\n            return matches.length === 0;\n          })) !== null && _c !== void 0 ? _c : [];\n          return messagesWithoutSyntaxErrors.length > 0;\n        });\n        if (!logsMessages_1) return;\n        setLogs(function (prev) {\n          var messages = __spreadArray(__spreadArray([], prev, true), logsMessages_1, true).filter(function (value, index, self) {\n            return index === self.findIndex(function (s) {\n              return s.id === value.id;\n            });\n          });\n          while (messages.length > maxMessageCount) {\n            messages.shift();\n          }\n          return messages;\n        });\n      }\n    }, clientId);\n    return unsubscribe;\n  }, [showSyntaxError, maxMessageCount, clientId, resetOnPreviewRestart]);\n  return {\n    logs: logs,\n    reset: function () {\n      return setLogs([]);\n    }\n  };\n};\n\nvar SandpackConsole = react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(function (_a, ref) {\n  var _c = _a.showHeader, showHeader = _c === void 0 ? true : _c, _d = _a.showSyntaxError, showSyntaxError = _d === void 0 ? false : _d, maxMessageCount = _a.maxMessageCount, onLogsChange = _a.onLogsChange, className = _a.className, _f = _a.showResetConsoleButton, showResetConsoleButton = _f === void 0 ? true : _f, _g = _a.showRestartButton, showRestartButton = _g === void 0 ? true : _g, _h = _a.resetOnPreviewRestart, resetOnPreviewRestart = _h === void 0 ? false : _h, _j = _a.actionsChildren, actionsChildren = _j === void 0 ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {}) : _j, _k = _a.standalone, standalone = _k === void 0 ? false : _k, props = __rest(_a, [\"showHeader\", \"showSyntaxError\", \"maxMessageCount\", \"onLogsChange\", \"className\", \"showSetupProgress\", \"showResetConsoleButton\", \"showRestartButton\", \"resetOnPreviewRestart\", \"actionsChildren\", \"standalone\"]);\n  var environment = useSandpack().sandpack.environment;\n  var _l = useSandpackClient(), iframe = _l.iframe, internalClientId = _l.clientId;\n  var restart = useSandpackShell().restart;\n  var _m = react__WEBPACK_IMPORTED_MODULE_1__.useState(environment === \"node\" ? \"server\" : \"client\"), currentTab = _m[0], setCurrentTab = _m[1];\n  var clientId = standalone ? internalClientId : undefined;\n  var _o = useSandpackConsole({\n    maxMessageCount: maxMessageCount,\n    showSyntaxError: showSyntaxError,\n    resetOnPreviewRestart: resetOnPreviewRestart,\n    clientId: clientId\n  }), consoleData = _o.logs, resetConsole = _o.reset;\n  var _p = useSandpackShellStdout({\n    maxMessageCount: maxMessageCount,\n    resetOnPreviewRestart: resetOnPreviewRestart,\n    clientId: clientId\n  }), stdoutData = _p.logs, resetStdout = _p.reset;\n  var wrapperRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(null);\n  react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function () {\n    onLogsChange === null || onLogsChange === void 0 ? void 0 : onLogsChange(consoleData);\n    if (wrapperRef.current) {\n      wrapperRef.current.scrollTop = wrapperRef.current.scrollHeight;\n    }\n  }, [onLogsChange, consoleData, stdoutData, currentTab]);\n  var isServerTab = currentTab === \"server\";\n  var isNodeEnvironment = environment === \"node\";\n  react__WEBPACK_IMPORTED_MODULE_1__.useImperativeHandle(ref, function () {\n    return {\n      reset: function () {\n        resetConsole();\n        resetStdout();\n      }\n    };\n  });\n  var classNames = useClassNames();\n  return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(SandpackStack, __assign({\n    className: classNames(\"console\", [fakeCss, className])\n  }, props, {\n    children: [showHeader && isNodeEnvironment && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Header, {\n      currentTab: currentTab,\n      node: isNodeEnvironment,\n      setCurrentTab: setCurrentTab\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n      ref: wrapperRef,\n      className: classNames(\"console-list\", [fakeCss]),\n      children: isServerTab ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(StdoutList, {\n        data: stdoutData\n      }) : (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ConsoleList, {\n        data: consoleData\n      })\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n      className: classNames(\"console-actions\", [fakeCss]),\n      children: [actionsChildren, showRestartButton && isServerTab && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(RoundedButton, {\n        onClick: function () {\n          restart();\n          resetConsole();\n          resetStdout();\n        },\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(RestartIcon, {})\n      }), showResetConsoleButton && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(RoundedButton, {\n        onClick: function () {\n          if (currentTab === \"client\") {\n            resetConsole();\n          } else {\n            resetStdout();\n          }\n        },\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(CleanIcon, {})\n      })]\n    }), standalone && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(DependenciesProgress, {\n        clientId: clientId\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"iframe\", {\n        ref: iframe\n      })]\n    })]\n  }));\n});\n\nvar Sandpack = function (_a) {\n  var _b, _c, _d, _e, _f, _g, _h, _j;\n  var options = _a.options, template = _a.template, customSetup = _a.customSetup, files = _a.files, theme = _a.theme, props = __rest(_a, [\"options\", \"template\", \"customSetup\", \"files\", \"theme\"]);\n  options !== null && options !== void 0 ? options : options = {};\n  (_b = options.resizablePanels) !== null && _b !== void 0 ? _b : options.resizablePanels = true;\n  (_c = options.editorWidthPercentage) !== null && _c !== void 0 ? _c : options.editorWidthPercentage = 50;\n  (_d = options.showConsole) !== null && _d !== void 0 ? _d : options.showConsole = false;\n  var rtlLayout = (_e = options === null || options === void 0 ? void 0 : options.rtl) !== null && _e !== void 0 ? _e : false;\n  var codeEditorOptions = {\n    showTabs: options.showTabs,\n    showLineNumbers: options.showLineNumbers,\n    showInlineErrors: options.showInlineErrors,\n    wrapContent: options.wrapContent,\n    closableTabs: options.closableTabs,\n    initMode: options.initMode,\n    extensions: (_f = options.codeEditor) === null || _f === void 0 ? void 0 : _f.extensions,\n    extensionsKeymap: (_g = options.codeEditor) === null || _g === void 0 ? void 0 : _g.extensionsKeymap,\n    readOnly: options.readOnly,\n    showReadOnly: options.showReadOnly,\n    additionalLanguages: (_h = options.codeEditor) === null || _h === void 0 ? void 0 : _h.additionalLanguages\n  };\n  var providerOptions = {\n    activeFile: options.activeFile,\n    visibleFiles: options.visibleFiles,\n    recompileMode: options.recompileMode,\n    recompileDelay: options.recompileDelay,\n    autorun: options.autorun,\n    autoReload: options.autoReload,\n    bundlerURL: options.bundlerURL,\n    startRoute: options.startRoute,\n    skipEval: options.skipEval,\n    fileResolver: options.fileResolver,\n    initMode: options.initMode,\n    initModeObserverOptions: options.initModeObserverOptions,\n    externalResources: options.externalResources,\n    logLevel: options.logLevel,\n    classes: options.classes,\n    experimental_enableServiceWorker: options.experimental_enableServiceWorker,\n    experimental_enableStableServiceWorkerId: options.experimental_enableStableServiceWorkerId\n  };\n  var _k = react__WEBPACK_IMPORTED_MODULE_1__.useState(options.showConsole), consoleVisibility = _k[0], setConsoleVisibility = _k[1];\n  var _l = react__WEBPACK_IMPORTED_MODULE_1__.useState(0), counter = _l[0], setCounter = _l[1];\n  var hasRightColumn = options.showConsole || options.showConsoleButton;\n  var templateFiles = (_j = SANDBOX_TEMPLATES[template]) !== null && _j !== void 0 ? _j : {};\n  var mode = (options === null || options === void 0 ? void 0 : options.layout) ? options === null || options === void 0 ? void 0 : options.layout : (\"mode\" in templateFiles) ? templateFiles.mode : \"preview\";\n  var actionsChildren = options.showConsoleButton ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ConsoleCounterButton, {\n    counter: counter,\n    onClick: function () {\n      return setConsoleVisibility(function (prev) {\n        return !prev;\n      });\n    }\n  }) : undefined;\n  var dragEventTargetRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(null);\n  var _m = react__WEBPACK_IMPORTED_MODULE_1__.useState(options.editorWidthPercentage), horizontalSize = _m[0], setHorizontalSize = _m[1];\n  var _o = react__WEBPACK_IMPORTED_MODULE_1__.useState(70), verticalSize = _o[0], setVerticalSize = _o[1];\n  var RightColumn = hasRightColumn ? SandpackStack : react__WEBPACK_IMPORTED_MODULE_1__.Fragment;\n  var rightColumnStyle = {\n    flexGrow: 100 - horizontalSize,\n    flexShrink: 100 - horizontalSize,\n    flexBasis: 0,\n    width: 100 - horizontalSize + \"%\",\n    gap: consoleVisibility ? 1 : 0,\n    height: options.editorHeight\n  };\n  var topRowStyle = hasRightColumn ? {\n    flexGrow: verticalSize,\n    flexShrink: verticalSize,\n    flexBasis: 0,\n    overflow: \"hidden\"\n  } : rightColumnStyle;\n  var onDragMove = function (event) {\n    if (!dragEventTargetRef.current) return;\n    var container = dragEventTargetRef.current.parentElement;\n    if (!container) return;\n    var direction = dragEventTargetRef.current.dataset.direction;\n    var isHorizontal = direction === \"horizontal\";\n    var _a = container.getBoundingClientRect(), left = _a.left, top = _a.top, height = _a.height, width = _a.width;\n    var offset = isHorizontal ? (event.clientX - left) / width * 100 : (event.clientY - top) / height * 100;\n    var boundaries = Math.min(Math.max(offset, 25), 75);\n    if (isHorizontal) {\n      setHorizontalSize(rtlLayout ? 100 - boundaries : boundaries);\n    } else {\n      setVerticalSize(boundaries);\n    }\n    container.querySelectorAll((\".\").concat(THEME_PREFIX, \"-stack\")).forEach(function (item) {\n      item.style.pointerEvents = \"none\";\n    });\n  };\n  var stopDragging = function () {\n    var _a;\n    var container = (_a = dragEventTargetRef.current) === null || _a === void 0 ? void 0 : _a.parentElement;\n    if (!container) return;\n    container.querySelectorAll((\".\").concat(THEME_PREFIX, \"-stack\")).forEach(function (item) {\n      item.style.pointerEvents = \"\";\n    });\n    dragEventTargetRef.current = null;\n  };\n  react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function () {\n    if (!(options === null || options === void 0 ? void 0 : options.resizablePanels)) return;\n    document.body.addEventListener(\"mousemove\", onDragMove);\n    document.body.addEventListener(\"mouseup\", stopDragging);\n    return function () {\n      document.body.removeEventListener(\"mousemove\", onDragMove);\n      document.body.removeEventListener(\"mouseup\", stopDragging);\n    };\n  }, [options]);\n  react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function () {\n    var _a;\n    setConsoleVisibility((_a = options === null || options === void 0 ? void 0 : options.showConsole) !== null && _a !== void 0 ? _a : false);\n  }, [options.showConsole]);\n  var rightColumnProps = hasRightColumn ? {\n    className: THEME_PREFIX + \"-preset-column\",\n    style: rightColumnStyle\n  } : {};\n  var classNames = useClassNames();\n  return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(SandpackProvider, __assign({\n    customSetup: customSetup,\n    files: files,\n    options: providerOptions,\n    template: template,\n    theme: theme\n  }, props, {\n    children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(SandpackLayout, {\n      className: rtlLayout ? classNames(\"rtl-layout\", [rtlLayoutClassName]) : \"\",\n      children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(SandpackCodeEditor, __assign({}, codeEditorOptions, {\n        style: {\n          height: options.editorHeight,\n          flexGrow: horizontalSize,\n          flexShrink: horizontalSize,\n          flexBasis: 0,\n          overflow: \"hidden\"\n        }\n      })), options.resizablePanels && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n        className: classNames(\"resize-handler\", [dragHandler()]),\n        \"data-direction\": \"horizontal\",\n        onMouseDown: function (event) {\n          dragEventTargetRef.current = event.target;\n        },\n        style: {\n          left: (\"calc(\").concat(rtlLayout ? 100 - horizontalSize : horizontalSize, \"% - 5px)\")\n        }\n      }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(RightColumn, __assign({}, rightColumnProps, {\n        children: [mode === \"preview\" && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(SandpackPreview, {\n          actionsChildren: actionsChildren,\n          showNavigator: options.showNavigator,\n          showRefreshButton: options.showRefreshButton,\n          style: topRowStyle\n        }), mode === \"tests\" && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(SandpackTests, {\n          actionsChildren: actionsChildren,\n          style: topRowStyle\n        }), mode === \"console\" && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(SandpackConsole, {\n          actionsChildren: actionsChildren,\n          style: topRowStyle,\n          standalone: true\n        }), (options.showConsoleButton || consoleVisibility) && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n          children: [options.resizablePanels && consoleVisibility && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n            className: classNames(\"resize-handler\", [dragHandler()]),\n            \"data-direction\": \"vertical\",\n            onMouseDown: function (event) {\n              dragEventTargetRef.current = event.target;\n            },\n            style: {\n              top: (\"calc(\").concat(verticalSize, \"% - 5px)\")\n            }\n          }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n            className: classNames(\"console-wrapper\", [consoleWrapper]),\n            style: {\n              flexGrow: consoleVisibility ? 100 - verticalSize : 0,\n              flexShrink: consoleVisibility ? 100 - verticalSize : 0,\n              flexBasis: 0\n            },\n            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(SandpackConsole, {\n              onLogsChange: function (logs) {\n                return setCounter(logs.length);\n              },\n              showHeader: false\n            })\n          })]\n        })]\n      }))]\n    })\n  }), template);\n};\nvar dragHandler = fakeCss;\nvar ConsoleCounterButton = function (_a) {\n  var onClick = _a.onClick, counter = _a.counter;\n  return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(RoundedButton, {\n    className: buttonCounter.toString(),\n    onClick: onClick,\n    children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ConsoleIcon, {}), counter > 0 && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"strong\", {\n      children: counter\n    })]\n  });\n};\nvar buttonCounter = fakeCss;\nvar consoleWrapper = fakeCss;\nvar rtlLayoutClassName = fakeCss;\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvZGVzYW5kYm94L3NhbmRwYWNrLXJlYWN0L2Rpc3QvdW5zdHlsZWQvaW5kZXgubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBd0Q7QUFDekI7QUFDK0Y7QUFDOUY7QUFDOEY7QUFDaEQ7QUFDNEM7QUFDL0I7QUFDRDtBQUM2QztBQUMvRDtBQUM3QjtBQUNFO0FBQ1k7QUFDRjtBQUM3QjtBQUM2QjtBQUN0QjtBQUNBOztBQUVqQztBQUNBO0FBQ0EsNkNBQTZDLE9BQU87QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRIQUE0SCxjQUFjO0FBQzFJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FB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QUFDVDtBQUNBO0FBQ0E7QUFDQSxPQUFPLEdBQUcsdURBQUkseUJBQXlCO0FBQ3ZDLHlDQUF5QyxzREFBRztBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsdUJBQXVCLHNEQUFHO0FBQ25DO0FBQ0E7QUFDQSxTQUFTLHlCQUF5QixzREFBRztBQUNyQztBQUNBO0FBQ0E7QUFDQSxTQUFTLHVEQUF1RCx1REFBSSxDQUFDLHVEQUFRO0FBQzdFLHFFQUFxRSxzREFBRztBQUN4RTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxXQUFXLEdBQUcsc0RBQUc7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixzQkFBc0Isc0RBQUc7QUFDekI7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBLGFBQWE7QUFDYixXQUFXO0FBQ1gsU0FBUztBQUNULE9BQU87QUFDUCxLQUFLO0FBQ0wsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyx1REFBSTtBQUNiO0FBQ0E7QUFDQSxlQUFlLHNEQUFHLGdCQUFnQixrQkFBa0Isc0RBQUc7QUFDdkQ7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUU0eUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9sbGFtYWNvZGVyLW5ldy8uL25vZGVfbW9kdWxlcy9AY29kZXNhbmRib3gvc2FuZHBhY2stcmVhY3QvZGlzdC91bnN0eWxlZC9pbmRleC5tanM/ZGM3MCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBqc3hzLCBqc3gsIEZyYWdtZW50IH0gZnJvbSAncmVhY3QvanN4LXJ1bnRpbWUnO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY3JlYXRlQ29udGV4dCwgdXNlQ29udGV4dCwgdXNlU3RhdGUsIHVzZUlkLCB1c2VSZWYsIHVzZUNhbGxiYWNrLCB1c2VFZmZlY3QsIGNyZWF0ZUVsZW1lbnQsIGZvcndhcmRSZWYgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBkZXF1YWwgfSBmcm9tICdkZXF1YWwnO1xuaW1wb3J0IHsgbm9ybWFsaXplUGF0aCwgYWRkUGFja2FnZUpTT05JZk5lZWRlZCwgbG9hZFNhbmRwYWNrQ2xpZW50LCBleHRyYWN0RXJyb3JEZXRhaWxzIH0gZnJvbSAnQGNvZGVzYW5kYm94L3NhbmRwYWNrLWNsaWVudCc7XG5pbXBvcnQgeyBjbG9zZUJyYWNrZXRzS2V5bWFwLCBjbG9zZUJyYWNrZXRzIH0gZnJvbSAnQGNvZGVtaXJyb3IvYXV0b2NvbXBsZXRlJztcbmltcG9ydCB7IGRlZmF1bHRLZXltYXAsIGhpc3RvcnlLZXltYXAsIGhpc3RvcnksIGluZGVudE1vcmUsIGluZGVudExlc3MsIGRlbGV0ZUdyb3VwQmFja3dhcmQgfSBmcm9tICdAY29kZW1pcnJvci9jb21tYW5kcyc7XG5pbXBvcnQgeyBIaWdobGlnaHRTdHlsZSwgc3ludGF4SGlnaGxpZ2h0aW5nLCBicmFja2V0TWF0Y2hpbmcgfSBmcm9tICdAY29kZW1pcnJvci9sYW5ndWFnZSc7XG5pbXBvcnQgeyBFZGl0b3JTdGF0ZSwgU3RhdGVFZmZlY3QsIEVkaXRvclNlbGVjdGlvbiwgQW5ub3RhdGlvbiB9IGZyb20gJ0Bjb2RlbWlycm9yL3N0YXRlJztcbmltcG9ydCB7IEVkaXRvclZpZXcsIFZpZXdQbHVnaW4sIERlY29yYXRpb24sIGtleW1hcCwgaGlnaGxpZ2h0U3BlY2lhbENoYXJzLCBoaWdobGlnaHRBY3RpdmVMaW5lLCBsaW5lTnVtYmVycyB9IGZyb20gJ0Bjb2RlbWlycm9yL3ZpZXcnO1xuaW1wb3J0IHVzZUludGVyc2VjdGlvbk9ic2VydmVyIGZyb20gJ0ByZWFjdC1ob29rL2ludGVyc2VjdGlvbi1vYnNlcnZlcic7XG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAY29kZW1pcnJvci9sYW5nLWNzcyc7XG5pbXBvcnQgeyBodG1sIH0gZnJvbSAnQGNvZGVtaXJyb3IvbGFuZy1odG1sJztcbmltcG9ydCB7IGphdmFzY3JpcHQgfSBmcm9tICdAY29kZW1pcnJvci9sYW5nLWphdmFzY3JpcHQnO1xuaW1wb3J0IHsgdGFncywgaGlnaGxpZ2h0VHJlZSB9IGZyb20gJ0BsZXplci9oaWdobGlnaHQnO1xuaW1wb3J0IEFuc2VyIGZyb20gJ2Fuc2VyJztcbmltcG9ydCB7IGVzY2FwZUNhcnJpYWdlUmV0dXJuIH0gZnJvbSAnZXNjYXBlLWNhcnJpYWdlJztcbmltcG9ydCBMWlN0cmluZyBmcm9tICdsei1zdHJpbmcnO1xuaW1wb3J0IGNsZWFuU2V0IGZyb20gJ2NsZWFuLXNldCc7XG5cbnZhciBfX2Fzc2lnbiA9IGZ1bmN0aW9uICgpIHtcbiAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IChmdW5jdGlvbiBfX2Fzc2lnbih0KSB7XG4gICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICBzID0gYXJndW1lbnRzW2ldO1xuICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKSB0W3BdID0gc1twXTtcbiAgICB9XG4gICAgcmV0dXJuIHQ7XG4gIH0pO1xuICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn07XG5mdW5jdGlvbiBfX3Jlc3QocywgZSkge1xuICB2YXIgdCA9IHt9O1xuICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMCkgdFtwXSA9IHNbcF07XG4gIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIikgZm9yICh2YXIgaSA9IDAsIHAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHMpOyBpIDwgcC5sZW5ndGg7IGkrKykge1xuICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSkgdFtwW2ldXSA9IHNbcFtpXV07XG4gIH1cbiAgcmV0dXJuIHQ7XG59XG5mdW5jdGlvbiBfX2F3YWl0ZXIodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgIHJlc29sdmUodmFsdWUpO1xuICAgIH0pO1xuICB9XG4gIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZWplY3QoZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7XG4gICAgICB0cnkge1xuICAgICAgICBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJlamVjdChlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHtcbiAgICAgIHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpO1xuICAgIH1cbiAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gIH0pO1xufVxuZnVuY3Rpb24gX19nZW5lcmF0b3IodGhpc0FyZywgYm9keSkge1xuICB2YXIgXyA9IHtcbiAgICBsYWJlbDogMCxcbiAgICBzZW50OiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAodFswXSAmIDEpIHRocm93IHRbMV07XG4gICAgICByZXR1cm4gdFsxXTtcbiAgICB9LFxuICAgIHRyeXM6IFtdLFxuICAgIG9wczogW11cbiAgfSwgZiwgeSwgdCwgZztcbiAgcmV0dXJuIChnID0ge1xuICAgIG5leHQ6IHZlcmIoMCksXG4gICAgXCJ0aHJvd1wiOiB2ZXJiKDEpLFxuICAgIFwicmV0dXJuXCI6IHZlcmIoMilcbiAgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0pLCBnKTtcbiAgZnVuY3Rpb24gdmVyYihuKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICh2KSB7XG4gICAgICByZXR1cm4gc3RlcChbbiwgdl0pO1xuICAgIH07XG4gIH1cbiAgZnVuY3Rpb24gc3RlcChvcCkge1xuICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcbiAgICB3aGlsZSAoXykgdHJ5IHtcbiAgICAgIGlmICgoZiA9IDEsIHkgJiYgKHQgPSBvcFswXSAmIDIgPyB5W1wicmV0dXJuXCJdIDogb3BbMF0gPyB5W1widGhyb3dcIl0gfHwgKCh0ID0geVtcInJldHVyblwiXSkgJiYgdC5jYWxsKHkpLCAwKSA6IHkubmV4dCkgJiYgISh0ID0gdC5jYWxsKHksIG9wWzFdKSkuZG9uZSkpIHJldHVybiB0O1xuICAgICAgaWYgKCh5ID0gMCwgdCkpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XG4gICAgICBzd2l0Y2ggKG9wWzBdKSB7XG4gICAgICAgIGNhc2UgMDpcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgIHQgPSBvcDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSA0OlxuICAgICAgICAgIF8ubGFiZWwrKztcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmFsdWU6IG9wWzFdLFxuICAgICAgICAgICAgZG9uZTogZmFsc2VcbiAgICAgICAgICB9O1xuICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgXy5sYWJlbCsrO1xuICAgICAgICAgIHkgPSBvcFsxXTtcbiAgICAgICAgICBvcCA9IFswXTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgY2FzZSA3OlxuICAgICAgICAgIG9wID0gXy5vcHMucG9wKCk7XG4gICAgICAgICAgXy50cnlzLnBvcCgpO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7XG4gICAgICAgICAgICBfID0gMDtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSB7XG4gICAgICAgICAgICBfLmxhYmVsID0gb3BbMV07XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7XG4gICAgICAgICAgICBfLmxhYmVsID0gdFsxXTtcbiAgICAgICAgICAgIHQgPSBvcDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkge1xuICAgICAgICAgICAgXy5sYWJlbCA9IHRbMl07XG4gICAgICAgICAgICBfLm9wcy5wdXNoKG9wKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XG4gICAgICAgICAgXy50cnlzLnBvcCgpO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgb3AgPSBbNiwgZV07XG4gICAgICB5ID0gMDtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgZiA9IHQgPSAwO1xuICAgIH1cbiAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTtcbiAgICByZXR1cm4ge1xuICAgICAgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsXG4gICAgICBkb25lOiB0cnVlXG4gICAgfTtcbiAgfVxufVxuZnVuY3Rpb24gX19zcHJlYWRBcnJheSh0bywgZnJvbSwgcGFjaykge1xuICBpZiAocGFjayB8fCBhcmd1bWVudHMubGVuZ3RoID09PSAyKSBmb3IgKHZhciBpID0gMCwgbCA9IGZyb20ubGVuZ3RoLCBhcjsgaSA8IGw7IGkrKykge1xuICAgIGlmIChhciB8fCAhKChpIGluIGZyb20pKSkge1xuICAgICAgaWYgKCFhcikgYXIgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChmcm9tLCAwLCBpKTtcbiAgICAgIGFyW2ldID0gZnJvbVtpXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRvLmNvbmNhdChhciB8fCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChmcm9tKSk7XG59XG5cbnZhciBTVkcgPSBmdW5jdGlvbiAocHJvcHMpIHtcbiAgcmV0dXJuIGpzeChcInN2Z1wiLCBfX2Fzc2lnbih7XG4gICAgZmlsbDogXCJjdXJyZW50Q29sb3JcIixcbiAgICBoZWlnaHQ6IFwiMTZcIixcbiAgICB2aWV3Qm94OiBcIjAgMCAxNiAxNlwiLFxuICAgIHdpZHRoOiBcIjE2XCIsXG4gICAgeG1sbnM6IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxuICB9LCBwcm9wcykpO1xufTtcbnZhciBTaWduSW5JY29uID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4ganN4cyhTVkcsIHtcbiAgICB2aWV3Qm94OiBcIjAgMCA0OCA0OFwiLFxuICAgIGNoaWxkcmVuOiBbanN4KFwidGl0bGVcIiwge1xuICAgICAgY2hpbGRyZW46IFwiU2lnbiBpblwiXG4gICAgfSksIGpzeChcInBhdGhcIiwge1xuICAgICAgZDogXCJNOSA0MnEtMS4yIDAtMi4xLS45UTYgNDAuMiA2IDM5VjlxMC0xLjIuOS0yLjFRNy44IDYgOSA2aDE0LjU1djNIOXYzMGgxNC41NXYzWm0yNC4zLTkuMjUtMi4xNS0yLjE1IDUuMS01LjFoLTE3LjV2LTNoMTcuNGwtNS4xLTUuMSAyLjE1LTIuMTUgOC44IDguOFpcIlxuICAgIH0pXVxuICB9KTtcbn07XG52YXIgU2lnbk91dEljb24gPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBqc3hzKFNWRywge1xuICAgIHZpZXdCb3g6IFwiMCAwIDQ4IDQ4XCIsXG4gICAgY2hpbGRyZW46IFtqc3goXCJ0aXRsZVwiLCB7XG4gICAgICBjaGlsZHJlbjogXCJTaWduIG91dFwiXG4gICAgfSksIGpzeChcInBhdGhcIiwge1xuICAgICAgZDogXCJNOSA0MnEtMS4yIDAtMi4xLS45UTYgNDAuMiA2IDM5VjlxMC0xLjIuOS0yLjFRNy44IDYgOSA2aDE0LjU1djNIOXYzMGgxNC41NXYzWm0yNC4zLTkuMjUtMi4xNS0yLjE1IDUuMS01LjFoLTE3LjV2LTNoMTcuNGwtNS4xLTUuMSAyLjE1LTIuMTUgOC44IDguOFpcIlxuICAgIH0pXVxuICB9KTtcbn07XG52YXIgUmVzdGFydEljb24gPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBqc3hzKFNWRywge1xuICAgIGZpbGw6IFwibm9uZVwiLFxuICAgIHN0cm9rZTogXCJjdXJyZW50Q29sb3JcIixcbiAgICBjaGlsZHJlbjogW2pzeChcInRpdGxlXCIsIHtcbiAgICAgIGNoaWxkcmVuOiBcIlJlc3RhcnQgc2NyaXB0XCJcbiAgICB9KSwganN4KFwicGF0aFwiLCB7XG4gICAgICBkOiBcIk04IDJDNC42ODYyOSAyIDIgNC42ODYyOSAyIDhDMiAxMC4wOTQ2IDMuMDczMzMgMTEuOTM4NSA0LjcgMTMuMDExOFwiLFxuICAgICAgc3Ryb2tlTGluZWNhcDogXCJyb3VuZFwiXG4gICAgfSksIGpzeChcInBhdGhcIiwge1xuICAgICAgZDogXCJNMTQuMDAwNSA3Ljk5OThDMTQuMDAwNSA1LjgyMDk1IDEyLjgzOTEgMy45MTMzNSAxMS4xMDE2IDIuODYyM1wiLFxuICAgICAgc3Ryb2tlTGluZWNhcDogXCJyb3VuZFwiXG4gICAgfSksIGpzeChcInBhdGhcIiwge1xuICAgICAgZDogXCJNMTQuMDAwMyAyLjMzMzVIMTEuMTY3QzEwLjg5MDggMi4zMzM1IDEwLjY2NyAyLjU1NzM1IDEwLjY2NyAyLjgzMzVWNS42NjY4M1wiLFxuICAgICAgc3Ryb2tlTGluZWNhcDogXCJyb3VuZFwiXG4gICAgfSksIGpzeChcInBhdGhcIiwge1xuICAgICAgZDogXCJNMS45OTk2NyAxMy42NjY1TDQuODMzMDEgMTMuNjY2NUM1LjEwOTE1IDEzLjY2NjUgNS4zMzMwMSAxMy40NDI2IDUuMzMzMDEgMTMuMTY2NUw1LjMzMzAxIDEwLjMzMzJcIixcbiAgICAgIHN0cm9rZUxpbmVjYXA6IFwicm91bmRcIlxuICAgIH0pLCBqc3goXCJwYXRoXCIsIHtcbiAgICAgIGQ6IFwiTTEwIDEwTDEyIDEyTDEwIDE0XCIsXG4gICAgICBzdHJva2VMaW5lY2FwOiBcInJvdW5kXCIsXG4gICAgICBzdHJva2VMaW5lam9pbjogXCJyb3VuZFwiXG4gICAgfSksIGpzeChcInBhdGhcIiwge1xuICAgICAgZDogXCJNMTQuNjY3IDE0TDEyLjY2NyAxNFwiLFxuICAgICAgc3Ryb2tlTGluZWNhcDogXCJyb3VuZFwiLFxuICAgICAgc3Ryb2tlTGluZWpvaW46IFwicm91bmRcIlxuICAgIH0pXVxuICB9KTtcbn07XG52YXIgUnVuSWNvbiA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGpzeHMoU1ZHLCB7XG4gICAgY2hpbGRyZW46IFtqc3goXCJ0aXRsZVwiLCB7XG4gICAgICBjaGlsZHJlbjogXCJSdW4gc2FuZGJveFwiXG4gICAgfSksIGpzeChcInBhdGhcIiwge1xuICAgICAgZDogXCJNMTEuMDc5MiA4LjEwNzhDMTEuMjc5MyA4LjI1MDA3IDExLjI3IDguNTUwMTIgMTEuMDYxNiA4LjY3OTgxTDYuMDI1MzUgMTEuODEzNUM1Ljc5NjM4IDExLjk1NiA1LjUgMTEuNzkxMyA1LjUgMTEuNTIxNkw1LjUgOC40MDcwM0w1LjUgNC44MDY2MUM1LjUgNC41MjczNSA1LjgxNTM3IDQuMzY0NjMgNi4wNDI5NiA0LjUyNjQ3TDExLjA3OTIgOC4xMDc4WlwiXG4gICAgfSldXG4gIH0pO1xufTtcbnZhciBCYWNrd2FyZEljb24gPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBqc3hzKFNWRywge1xuICAgIGNoaWxkcmVuOiBbanN4KFwidGl0bGVcIiwge1xuICAgICAgY2hpbGRyZW46IFwiQ2xpY2sgdG8gZ28gYmFja1wiXG4gICAgfSksIGpzeChcInBhdGhcIiwge1xuICAgICAgZDogXCJNOS42NDY0NSAxMi4zNTM2QzkuODQxNzEgMTIuNTQ4OCAxMC4xNTgzIDEyLjU0ODggMTAuMzUzNiAxMi4zNTM2QzEwLjU0ODggMTIuMTU4MyAxMC41NDg4IDExLjg0MTcgMTAuMzUzNiAxMS42NDY0TDkuNjQ2NDUgMTIuMzUzNlpNMTAuMzUzNiA0LjM1MzU1QzEwLjU0ODggNC4xNTgyOSAxMC41NDg4IDMuODQxNzEgMTAuMzUzNiAzLjY0NjQ0QzEwLjE1ODMgMy40NTExOCA5Ljg0MTcxIDMuNDUxMTggOS42NDY0NSAzLjY0NjQ0TDEwLjM1MzYgNC4zNTM1NVpNNi4wNzA3MiA3LjkyOTI5TDUuNzE3MTYgNy41NzU3M0w2LjA3MDcyIDcuOTI5MjlaTTEwLjM1MzYgMTEuNjQ2NEw2LjQyNDI3IDcuNzE3MTZMNS43MTcxNiA4LjQyNDI2TDkuNjQ2NDUgMTIuMzUzNkwxMC4zNTM2IDExLjY0NjRaTTYuNDI0MjcgOC4yODI4NEwxMC4zNTM2IDQuMzUzNTVMOS42NDY0NSAzLjY0NjQ0TDUuNzE3MTYgNy41NzU3M0w2LjQyNDI3IDguMjgyODRaTTYuNDI0MjcgNy43MTcxNkM2LjU4MDQ4IDcuODczMzcgNi41ODA0OCA4LjEyNjYzIDYuNDI0MjcgOC4yODI4NEw1LjcxNzE2IDcuNTc1NzNDNS40ODI4NSA3LjgxMDA1IDUuNDgyODUgOC4xODk5NSA1LjcxNzE2IDguNDI0MjZMNi40MjQyNyA3LjcxNzE2WlwiXG4gICAgfSldXG4gIH0pO1xufTtcbnZhciBGb3J3YXJkSWNvbiA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGpzeHMoU1ZHLCB7XG4gICAgY2hpbGRyZW46IFtqc3goXCJ0aXRsZVwiLCB7XG4gICAgICBjaGlsZHJlbjogXCJDbGljayB0byBnbyBmb3J3YXJkXCJcbiAgICB9KSwganN4KFwicGF0aFwiLCB7XG4gICAgICBkOiBcIk02LjM1MzU1IDMuNjQ2NDVDNi4xNTgyOSAzLjQ1MTE4IDUuODQxNzEgMy40NTExOCA1LjY0NjQ1IDMuNjQ2NDVDNS40NTExOCAzLjg0MTcxIDUuNDUxMTggNC4xNTgyOSA1LjY0NjQ1IDQuMzUzNTVMNi4zNTM1NSAzLjY0NjQ1Wk01LjY0NjQ1IDExLjY0NjRDNS40NTExOCAxMS44NDE3IDUuNDUxMTggMTIuMTU4MyA1LjY0NjQ1IDEyLjM1MzZDNS44NDE3MSAxMi41NDg4IDYuMTU4MjkgMTIuNTQ4OCA2LjM1MzU1IDEyLjM1MzZMNS42NDY0NSAxMS42NDY0Wk05LjkyOTI5IDguMDcwNzFMMTAuMjgyOCA4LjQyNDI2TDkuOTI5MjkgOC4wNzA3MVpNNS42NDY0NSA0LjM1MzU1TDkuNTc1NzQgOC4yODI4NEwxMC4yODI4IDcuNTc1NzRMNi4zNTM1NSAzLjY0NjQ1TDUuNjQ2NDUgNC4zNTM1NVpNOS41NzU3NCA3LjcxNzE2TDUuNjQ2NDUgMTEuNjQ2NEw2LjM1MzU1IDEyLjM1MzZMMTAuMjgyOCA4LjQyNDI2TDkuNTc1NzQgNy43MTcxNlpNOS41NzU3NCA4LjI4Mjg0QzkuNDE5NTIgOC4xMjY2MyA5LjQxOTUzIDcuODczMzcgOS41NzU3NCA3LjcxNzE2TDEwLjI4MjggOC40MjQyNkMxMC41MTcyIDguMTg5OTUgMTAuNTE3MiA3LjgxMDA1IDEwLjI4MjggNy41NzU3NEw5LjU3NTc0IDguMjgyODRaXCJcbiAgICB9KV1cbiAgfSk7XG59O1xudmFyIFJlZnJlc2hJY29uID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4ganN4cyhTVkcsIHtcbiAgICBjaGlsZHJlbjogW2pzeChcInRpdGxlXCIsIHtcbiAgICAgIGNoaWxkcmVuOiBcIlJlZnJlc2ggcHJldmlld1wiXG4gICAgfSksIGpzeChcInBhdGhcIiwge1xuICAgICAgY2xpcFJ1bGU6IFwiZXZlbm9kZFwiLFxuICAgICAgZDogXCJNMy44MzMyNSA3Ljk5OTkyQzMuODMzMjUgNS42OTg2NyA1LjY5ODUzIDMuODMzMjUgNy45OTkzNCAzLjgzMzI1QzkuODEyNDYgMy44MzMyNSAxMS4zNTYzIDQuOTkxOTUgMTEuOTI4NSA2LjYxMDk3QzExLjkzOTYgNi42NDI1IDExLjk1MzYgNi42NzIyMSAxMS45NyA2LjY5OTkySDguODAwMDVDOC41MjM5MSA2LjY5OTkyIDguMzAwMDUgNi45MjM3OCA4LjMwMDA1IDcuMTk5OTJDOC4zMDAwNSA3LjQ3NjA2IDguNTIzOTEgNy42OTk5MiA4LjgwMDA1IDcuNjk5OTJIMTIuNTY2N0MxMi44OTgxIDcuNjk5OTIgMTMuMTY2NyA3LjQzMTI5IDEzLjE2NjcgNy4wOTk5MlYzLjMzMzI1QzEzLjE2NjcgMy4wNTcxMSAxMi45NDI5IDIuODMzMjUgMTIuNjY2NyAyLjgzMzI1QzEyLjM5MDYgMi44MzMyNSAxMi4xNjY3IDMuMDU3MTEgMTIuMTY2NyAzLjMzMzI1VjQuOTQ2MDhDMTEuMjI2OCAzLjY2NTIyIDkuNzEwNiAyLjgzMzI1IDcuOTk5MzQgMi44MzMyNUM1LjE0NjEzIDIuODMzMjUgMi44MzMyNSA1LjE0NjUxIDIuODMzMjUgNy45OTk5MkMyLjgzMzI1IDEwLjg1MzMgNS4xNDYxMyAxMy4xNjY2IDcuOTk5MzQgMTMuMTY2NkM5LjkxMjE4IDEzLjE2NjYgMTEuNTgxNSAxMi4xMjY2IDEyLjQ3NCAxMC41ODM2QzEyLjYxMjMgMTAuMzQ0NiAxMi41MzA2IDEwLjAzODcgMTIuMjkxNSA5LjkwMDQ0QzEyLjA1MjUgOS43NjIxOCAxMS43NDY2IDkuODQzODcgMTEuNjA4NCAxMC4wODI5QzEwLjg4NzMgMTEuMzI5NiA5LjU0MDcyIDEyLjE2NjYgNy45OTkzNCAxMi4xNjY2QzUuNjk4NTMgMTIuMTY2NiAzLjgzMzI1IDEwLjMwMTIgMy44MzMyNSA3Ljk5OTkyWlwiLFxuICAgICAgZmlsbFJ1bGU6IFwiZXZlbm9kZFwiXG4gICAgfSldXG4gIH0pO1xufTtcbnZhciBDbGVhbkljb24gPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBqc3hzKFNWRywge1xuICAgIGZpbGw6IFwibm9uZVwiLFxuICAgIHN0cm9rZTogXCJjdXJyZW50Q29sb3JcIixcbiAgICBjaGlsZHJlbjogW2pzeChcInRpdGxlXCIsIHtcbiAgICAgIGNoaWxkcmVuOiBcIkNsZWFuXCJcbiAgICB9KSwganN4KFwiY2lyY2xlXCIsIHtcbiAgICAgIGN4OiBcIjcuOTk5OThcIixcbiAgICAgIGN5OiBcIjguMDAwMDRcIixcbiAgICAgIHI6IFwiNC42NjY2N1wiLFxuICAgICAgc3Ryb2tlTGluZWNhcDogXCJyb3VuZFwiXG4gICAgfSksIGpzeChcInBhdGhcIiwge1xuICAgICAgZDogXCJNNC42NjY2OSA0LjY2NjYzTDExLjMzMzQgMTEuMzMzM1wiXG4gICAgfSldXG4gIH0pO1xufTtcbnZhciBFeHBvcnRJY29uID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4ganN4cyhTVkcsIHtcbiAgICBmaWxsOiBcIm5vbmVcIixcbiAgICBzdHJva2U6IFwiY3VycmVudENvbG9yXCIsXG4gICAgY2hpbGRyZW46IFtqc3goXCJ0aXRsZVwiLCB7XG4gICAgICBjaGlsZHJlbjogXCJPcGVuIG9uIENvZGVTYW5kYm94XCJcbiAgICB9KSwganN4KFwicGF0aFwiLCB7XG4gICAgICBkOiBcIk02LjY2NjY1IDMuMzMzMzdINC4zMzMzMUMzLjc4MTAzIDMuMzMzMzcgMy4zMzMzMSAzLjc4MTA5IDMuMzMzMzEgNC4zMzMzN1YxMS42NjY3QzMuMzMzMzEgMTIuMjE5IDMuNzgxMDMgMTIuNjY2NyA0LjMzMzMxIDEyLjY2NjdIMTEuNjY2NkMxMi4yMTg5IDEyLjY2NjcgMTIuNjY2NiAxMi4yMTkgMTIuNjY2NiAxMS42NjY3VjkuMzMzMzdcIixcbiAgICAgIHN0cm9rZUxpbmVjYXA6IFwicm91bmRcIlxuICAgIH0pLCBqc3goXCJwYXRoXCIsIHtcbiAgICAgIGQ6IFwiTTEwIDMuMzMzMzdIMTIuNTY2N0MxMi42MjE5IDMuMzMzMzcgMTIuNjY2NyAzLjM3ODE1IDEyLjY2NjcgMy40MzMzN1Y2LjAwMDA0XCIsXG4gICAgICBzdHJva2VMaW5lY2FwOiBcInJvdW5kXCJcbiAgICB9KSwganN4KFwicGF0aFwiLCB7XG4gICAgICBkOiBcIk03LjMzMzMxIDguNjY2NjhMMTIuNTMzMyAzLjQ2NjY3XCIsXG4gICAgICBzdHJva2VMaW5lY2FwOiBcInJvdW5kXCJcbiAgICB9KV1cbiAgfSk7XG59O1xudmFyIERpcmVjdG9yeUljb25PcGVuID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4ganN4cyhTVkcsIHtcbiAgICBjaGlsZHJlbjogW2pzeChcInRpdGxlXCIsIHtcbiAgICAgIGNoaWxkcmVuOiBcIkRpcmVjdG9yeVwiXG4gICAgfSksIGpzeChcInBhdGhcIiwge1xuICAgICAgZDogXCJNMTIuNTUyNiAxMi42NjY3SDMuNjY2NzVDMy4yOTIyIDEyLjY2NjcgMi45NjU3NSAxMi40NjA4IDIuNzk0NDIgMTIuMTU2TDMuODEwNzIgOC4wOTA4QzMuOTIyMDEgNy42NDU2MyA0LjMyMTk5IDcuMzMzMzMgNC43ODA4NiA3LjMzMzMzSDEzLjM4NkMxNC4wMzY1IDcuMzMzMzMgMTQuNTEzOSA3Ljk0NDcyIDE0LjM1NjEgOC41NzU4N0wxMy41MjI4IDExLjkwOTJDMTMuNDExNSAxMi4zNTQ0IDEzLjAxMTUgMTIuNjY2NyAxMi41NTI2IDEyLjY2NjdaXCIsXG4gICAgICBmaWxsOiBcImN1cnJlbnRDb2xvclwiXG4gICAgfSksIGpzeChcInBhdGhcIiwge1xuICAgICAgZDogXCJNMTMuMzMzNCA2LjYzMzMzVjYuMzMzMzNDMTMuMzMzNCA1Ljc4MTA1IDEyLjg4NTcgNS4zMzMzMyAxMi4zMzM0IDUuMzMzMzNIOC4zMDI4NkM4LjEwNTQzIDUuMzMzMzMgNy45MTI0MiA1LjI3NDkgNy43NDgxNiA1LjE2NTM4TDYuMjUyMDEgNC4xNjc5NUM2LjA4Nzc0IDQuMDU4NDQgNS44OTQ3MyA0IDUuNjk3MzEgNEgzLjY2Njc1QzMuMTE0NDYgNCAyLjY2Njc1IDQuNDQ3NzIgMi42NjY3NSA1TDIuNjY2NzUgMTEuNjY2N0MyLjY2Njc1IDEyLjIxOSAzLjExNDQ2IDEyLjY2NjcgMy42NjY3NSAxMi42NjY3SDEyLjU1MjZDMTMuMDExNSAxMi42NjY3IDEzLjQxMTUgMTIuMzU0NCAxMy41MjI4IDExLjkwOTJMMTQuMzU2MSA4LjU3NTg3QzE0LjUxMzkgNy45NDQ3MiAxNC4wMzY1IDcuMzMzMzMgMTMuMzg2IDcuMzMzMzNINC43ODA4NkM0LjMyMTk5IDcuMzMzMzMgMy45MjIwMSA3LjY0NTYzIDMuODEwNzIgOC4wOTA4TDIuNzUwMDggMTIuMzMzM1wiLFxuICAgICAgZmlsbDogXCJub25lXCIsXG4gICAgICBzdHJva2U6IFwiY3VycmVudENvbG9yXCIsXG4gICAgICBzdHJva2VMaW5lY2FwOiBcInJvdW5kXCJcbiAgICB9KV1cbiAgfSk7XG59O1xudmFyIERpcmVjdG9yeUljb25DbG9zZWQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBqc3hzKFNWRywge1xuICAgIGNoaWxkcmVuOiBbanN4KFwidGl0bGVcIiwge1xuICAgICAgY2hpbGRyZW46IFwiRGlyZWN0b3J5XCJcbiAgICB9KSwganN4KFwicGF0aFwiLCB7XG4gICAgICBkOiBcIk0xMi4zMzM0IDEyLjY2NjdIMy42NjY3NUMzLjExNDQ2IDEyLjY2NjcgMi42NjY3NSAxMi4yMTkgMi42NjY3NSAxMS42NjY3VjVDMi42NjY3NSA0LjQ0NzcyIDMuMTE0NDYgNCAzLjY2Njc1IDRINS42OTczMUM1Ljg5NDczIDQgNi4wODc3NCA0LjA1ODQ0IDYuMjUyMDEgNC4xNjc5NUw3Ljc0ODE2IDUuMTY1MzhDNy45MTI0MiA1LjI3NDkgOC4xMDU0MyA1LjMzMzMzIDguMzAyODYgNS4zMzMzM0gxMi4zMzM0QzEyLjg4NTcgNS4zMzMzMyAxMy4zMzM0IDUuNzgxMDUgMTMuMzMzNCA2LjMzMzMzVjExLjY2NjdDMTMuMzMzNCAxMi4yMTkgMTIuODg1NyAxMi42NjY3IDEyLjMzMzQgMTIuNjY2N1pcIixcbiAgICAgIGZpbGw6IFwiY3VycmVudENvbG9yXCIsXG4gICAgICBzdHJva2U6IFwiY3VycmVudENvbG9yXCIsXG4gICAgICBzdHJva2VMaW5lY2FwOiBcInJvdW5kXCJcbiAgICB9KV1cbiAgfSk7XG59O1xudmFyIEZpbGVJY29uID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4ganN4cyhTVkcsIHtcbiAgICBmaWxsOiBcImN1cnJlbnRDb2xvclwiLFxuICAgIGNoaWxkcmVuOiBbanN4KFwidGl0bGVcIiwge1xuICAgICAgY2hpbGRyZW46IFwiRmlsZVwiXG4gICAgfSksIGpzeChcInBhdGhcIiwge1xuICAgICAgY2xpcFJ1bGU6IFwiZXZlbm9kZFwiLFxuICAgICAgZDogXCJNNC41IDQuMzMzMjVDNC41IDQuMDU3MTEgNC43MjM4NiAzLjgzMzI1IDUgMy44MzMyNUg4LjE2Njc1VjYuNTY2NTlDOC4xNjY3NSA2Ljg5Nzk1IDguNDM1MzggNy4xNjY1OCA4Ljc2Njc1IDcuMTY2NThIMTEuNVYxMi4zMzMzQzExLjUgMTIuNjA5NCAxMS4yNzYxIDEyLjgzMzMgMTEgMTIuODMzM0g1QzQuNzIzODYgMTIuODMzMyA0LjUgMTIuNjA5NCA0LjUgMTIuMzMzM1Y0LjMzMzI1Wk0xMi41IDYuNjc1NjhDMTIuNTAwMSA2LjY3MjY1IDEyLjUwMDEgNi42Njk2MiAxMi41MDAxIDYuNjY2NThDMTIuNTAwMSA2LjY2MzU1IDEyLjUwMDEgNi42NjA1MiAxMi41IDYuNjU3NDlWNi40MTQxM0MxMi41IDYuMDE2MzEgMTIuMzQyIDUuNjM0NzggMTIuMDYwNyA1LjM1MzQ3TDkuOTc5NzggMy4yNzI1OUM5LjY5ODQ4IDIuOTkxMjkgOS4zMTY5NCAyLjgzMzI1IDguOTE5MTIgMi44MzMyNUg4LjY2Njc1SDVDNC4xNzE1NyAyLjgzMzI1IDMuNSAzLjUwNDgzIDMuNSA0LjMzMzI1VjEyLjMzMzNDMy41IDEzLjE2MTcgNC4xNzE1NyAxMy44MzMzIDUgMTMuODMzM0gxMUMxMS44Mjg0IDEzLjgzMzMgMTIuNSAxMy4xNjE3IDEyLjUgMTIuMzMzM1Y2LjY3NTY4Wk05LjE2Njc1IDMuODk4ODhDOS4yMDUxOCAzLjkyMDc4IDkuMjQwODUgMy45NDc4NyA5LjI3MjY3IDMuOTc5N0wxMS4zNTM2IDYuMDYwNThDMTEuMzg1NCA2LjA5MjQzIDExLjQxMjUgNi4xMjgxMyAxMS40MzQ0IDYuMTY2NThIOS4xNjY3NVYzLjg5ODg4WlwiLFxuICAgICAgZmlsbFJ1bGU6IFwiZXZlbm9kZFwiXG4gICAgfSldXG4gIH0pO1xufTtcbnZhciBDbG9zZUljb24gPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBqc3hzKFNWRywge1xuICAgIHN0cm9rZTogXCJjdXJyZW50Q29sb3JcIixcbiAgICBjaGlsZHJlbjogW2pzeChcInRpdGxlXCIsIHtcbiAgICAgIGNoaWxkcmVuOiBcIkNsb3NlIGZpbGVcIlxuICAgIH0pLCBqc3goXCJwYXRoXCIsIHtcbiAgICAgIGQ6IFwiTTEyIDRMNCAxMlwiLFxuICAgICAgc3Ryb2tlTGluZWNhcDogXCJyb3VuZFwiXG4gICAgfSksIGpzeChcInBhdGhcIiwge1xuICAgICAgZDogXCJNNCA0TDEyIDEyXCIsXG4gICAgICBzdHJva2VMaW5lY2FwOiBcInJvdW5kXCJcbiAgICB9KV1cbiAgfSk7XG59O1xudmFyIENvbnNvbGVJY29uID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4ganN4cyhTVkcsIHtcbiAgICBjaGlsZHJlbjogW2pzeChcInRpdGxlXCIsIHtcbiAgICAgIGNoaWxkcmVuOiBcIk9wZW4gYnJvd3NlciBjb25zb2xlXCJcbiAgICB9KSwganN4KFwicGF0aFwiLCB7XG4gICAgICBkOiBcIk01LjY1ODcxIDMuNjIwMzdDNS40NDkwNSAzLjQ0MDY2IDUuMTMzNCAzLjQ2NDk0IDQuOTUzNjggMy42NzQ2QzQuNzczOTcgMy44ODQyNyA0Ljc5ODI1IDQuMTk5OTIgNS4wMDc5MiA0LjM3OTYzTDUuNjU4NzEgMy42MjAzN1pNNS4wMDc5MiAxMS42MjA0QzQuNzk4MjUgMTEuODAwMSA0Ljc3Mzk3IDEyLjExNTcgNC45NTM2OCAxMi4zMjU0QzUuMTMzNCAxMi41MzUxIDUuNDQ5MDUgMTIuNTU5MyA1LjY1ODcxIDEyLjM3OTZMNS4wMDc5MiAxMS42MjA0Wk05LjkxMTQgNy45MjQwN0wxMC4yMzY4IDcuNTQ0NDVMOS45MTE0IDcuOTI0MDdaTTUuMDA3OTIgNC4zNzk2M0w5LjU4NiA4LjMwMzdMMTAuMjM2OCA3LjU0NDQ1TDUuNjU4NzEgMy42MjAzN0w1LjAwNzkyIDQuMzc5NjNaTTkuNTg2IDcuNjk2M0w1LjAwNzkyIDExLjYyMDRMNS42NTg3MSAxMi4zNzk2TDEwLjIzNjggOC40NTU1NUw5LjU4NiA3LjY5NjNaTTkuNTg2IDguMzAzN0M5LjM5OTc2IDguMTQ0MDcgOS4zOTk3NiA3Ljg1NTk0IDkuNTg2IDcuNjk2M0wxMC4yMzY4IDguNDU1NTVDMTAuNTE2MiA4LjIxNjEgMTAuNTE2MiA3Ljc4MzkgMTAuMjM2OCA3LjU0NDQ1TDkuNTg2IDguMzAzN1pcIlxuICAgIH0pLCBqc3goXCJwYXRoXCIsIHtcbiAgICAgIGQ6IFwiTTEwIDExLjVDOS43MjM4NiAxMS41IDkuNSAxMS43MjM5IDkuNSAxMkM5LjUgMTIuMjc2MSA5LjcyMzg2IDEyLjUgMTAgMTIuNVYxMS41Wk0xNC42NjY3IDEyLjVDMTQuOTQyOCAxMi41IDE1LjE2NjcgMTIuMjc2MSAxNS4xNjY3IDEyQzE1LjE2NjcgMTEuNzIzOSAxNC45NDI4IDExLjUgMTQuNjY2NyAxMS41VjEyLjVaTTEwIDEyLjVIMTQuNjY2N1YxMS41SDEwVjEyLjVaXCJcbiAgICB9KV1cbiAgfSk7XG59O1xuXG52YXIgX2EkMTtcbnZhciBkZWZhdWx0TGlnaHQgPSB7XG4gIGNvbG9yczoge1xuICAgIHN1cmZhY2UxOiBcIiNmZmZmZmZcIixcbiAgICBzdXJmYWNlMjogXCIjRUZFRkVGXCIsXG4gICAgc3VyZmFjZTM6IFwiI0YzRjNGM1wiLFxuICAgIGRpc2FibGVkOiBcIiNDNUM1QzVcIixcbiAgICBiYXNlOiBcIiMzMjMyMzJcIixcbiAgICBjbGlja2FibGU6IFwiIzgwODA4MFwiLFxuICAgIGhvdmVyOiBcIiM0RDRENERcIixcbiAgICBhY2NlbnQ6IFwiIzM5NzNFMFwiLFxuICAgIGVycm9yOiBcIiNFQTMzMjNcIixcbiAgICBlcnJvclN1cmZhY2U6IFwiI0ZDRjFGMFwiLFxuICAgIHdhcm5pbmc6IFwiIzZBNDUxNlwiLFxuICAgIHdhcm5pbmdTdXJmYWNlOiBcIiNGRUYyQzBcIlxuICB9LFxuICBzeW50YXg6IHtcbiAgICBwbGFpbjogXCIjMTUxNTE1XCIsXG4gICAgY29tbWVudDoge1xuICAgICAgY29sb3I6IFwiIzk5OVwiLFxuICAgICAgZm9udFN0eWxlOiBcIml0YWxpY1wiXG4gICAgfSxcbiAgICBrZXl3b3JkOiBcIiM3QzVBRTNcIixcbiAgICB0YWc6IFwiIzA5NzFGMVwiLFxuICAgIHB1bmN0dWF0aW9uOiBcIiMzQjNCM0JcIixcbiAgICBkZWZpbml0aW9uOiBcIiM4NUE2MDBcIixcbiAgICBwcm9wZXJ0eTogXCIjM0IzQjNCXCIsXG4gICAgc3RhdGljOiBcIiMzQjNCM0JcIixcbiAgICBzdHJpbmc6IFwiIzJFNkJEMFwiXG4gIH0sXG4gIGZvbnQ6IHtcbiAgICBib2R5OiAnLWFwcGxlLXN5c3RlbSwgQmxpbmtNYWNTeXN0ZW1Gb250LCBcIlNlZ29lIFVJXCIsIFJvYm90bywgSGVsdmV0aWNhLCBBcmlhbCwgc2Fucy1zZXJpZiwgXCJBcHBsZSBDb2xvciBFbW9qaVwiLCBcIlNlZ29lIFVJIEVtb2ppXCIsIFwiU2Vnb2UgVUkgU3ltYm9sXCInLFxuICAgIG1vbm86ICdcIkZpcmEgTW9ub1wiLCBcIkRlamFWdSBTYW5zIE1vbm9cIiwgTWVubG8sIENvbnNvbGFzLCBcIkxpYmVyYXRpb24gTW9ub1wiLCBNb25hY28sIFwiTHVjaWRhIENvbnNvbGVcIiwgbW9ub3NwYWNlJyxcbiAgICBzaXplOiBcIjEzcHhcIixcbiAgICBsaW5lSGVpZ2h0OiBcIjIwcHhcIlxuICB9XG59O1xudmFyIGRlZmF1bHREYXJrID0ge1xuICBjb2xvcnM6IHtcbiAgICBzdXJmYWNlMTogXCIjMTUxNTE1XCIsXG4gICAgc3VyZmFjZTI6IFwiIzI1MjUyNVwiLFxuICAgIHN1cmZhY2UzOiBcIiMyRjJGMkZcIixcbiAgICBkaXNhYmxlZDogXCIjNEQ0RDREXCIsXG4gICAgYmFzZTogXCIjODA4MDgwXCIsXG4gICAgY2xpY2thYmxlOiBcIiM5OTk5OTlcIixcbiAgICBob3ZlcjogXCIjQzVDNUM1XCIsXG4gICAgYWNjZW50OiBcIiNFNUU1RTVcIixcbiAgICBlcnJvcjogXCIjRkZCNEE2XCIsXG4gICAgZXJyb3JTdXJmYWNlOiBcIiM2OTAwMDBcIixcbiAgICB3YXJuaW5nOiBcIiNFN0M0MDBcIixcbiAgICB3YXJuaW5nU3VyZmFjZTogXCIjM0EzMDAwXCJcbiAgfSxcbiAgc3ludGF4OiB7XG4gICAgcGxhaW46IFwiI0ZGRkZGRlwiLFxuICAgIGNvbW1lbnQ6IHtcbiAgICAgIGNvbG9yOiBcIiM3NTc1NzVcIixcbiAgICAgIGZvbnRTdHlsZTogXCJpdGFsaWNcIlxuICAgIH0sXG4gICAga2V5d29yZDogXCIjNzdCN0Q3XCIsXG4gICAgdGFnOiBcIiNERkFCNUNcIixcbiAgICBwdW5jdHVhdGlvbjogXCIjZmZmZmZmXCIsXG4gICAgZGVmaW5pdGlvbjogXCIjODZEOUNBXCIsXG4gICAgcHJvcGVydHk6IFwiIzc3QjdEN1wiLFxuICAgIHN0YXRpYzogXCIjQzY0NjQwXCIsXG4gICAgc3RyaW5nOiBcIiM5NzdDRENcIlxuICB9LFxuICBmb250OiB7XG4gICAgYm9keTogJy1hcHBsZS1zeXN0ZW0sIEJsaW5rTWFjU3lzdGVtRm9udCwgXCJTZWdvZSBVSVwiLCBSb2JvdG8sIEhlbHZldGljYSwgQXJpYWwsIHNhbnMtc2VyaWYsIFwiQXBwbGUgQ29sb3IgRW1vamlcIiwgXCJTZWdvZSBVSSBFbW9qaVwiLCBcIlNlZ29lIFVJIFN5bWJvbFwiJyxcbiAgICBtb25vOiAnXCJGaXJhIE1vbm9cIiwgXCJEZWphVnUgU2FucyBNb25vXCIsIE1lbmxvLCBDb25zb2xhcywgXCJMaWJlcmF0aW9uIE1vbm9cIiwgTW9uYWNvLCBcIkx1Y2lkYSBDb25zb2xlXCIsIG1vbm9zcGFjZScsXG4gICAgc2l6ZTogXCIxM3B4XCIsXG4gICAgbGluZUhlaWdodDogXCIyMHB4XCJcbiAgfVxufTtcbnZhciBTQU5EUEFDS19USEVNRVMgPSB7XG4gIGxpZ2h0OiBkZWZhdWx0TGlnaHQsXG4gIGRhcms6IGRlZmF1bHREYXJrLFxuICBhdXRvOiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gKChfYSQxID0gd2luZG93ID09PSBudWxsIHx8IHdpbmRvdyA9PT0gdm9pZCAwID8gdm9pZCAwIDogd2luZG93Lm1hdGNoTWVkaWEpID09PSBudWxsIHx8IF9hJDEgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hJDEuY2FsbCh3aW5kb3csIFwiKHByZWZlcnMtY29sb3Itc2NoZW1lOiBkYXJrKVwiKS5tYXRjaGVzKSA/IGRlZmF1bHREYXJrIDogZGVmYXVsdExpZ2h0IDogZGVmYXVsdExpZ2h0XG59O1xuXG52YXIgZ2V0RmlsZU5hbWUgPSBmdW5jdGlvbiAoZmlsZVBhdGgpIHtcbiAgdmFyIGxhc3RJbmRleE9mU2xhc2ggPSBmaWxlUGF0aC5sYXN0SW5kZXhPZihcIi9cIik7XG4gIHJldHVybiBmaWxlUGF0aC5zbGljZShsYXN0SW5kZXhPZlNsYXNoICsgMSk7XG59O1xudmFyIGNhbGN1bGF0ZU5lYXJlc3RVbmlxdWVQYXRoID0gZnVuY3Rpb24gKGN1cnJlbnRQYXRoLCBvdGhlclBhdGhzKSB7XG4gIHZhciBjdXJyZW50UGF0aFBhcnRzID0gKGN1cnJlbnRQYXRoWzBdID09PSBcIi9cIiA/IGN1cnJlbnRQYXRoLnNsaWNlKDEpIDogY3VycmVudFBhdGgpLnNwbGl0KFwiL1wiKTtcbiAgdmFyIHJlc3VsdFBhdGhQYXJ0cyA9IFtdO1xuICBpZiAoY3VycmVudFBhdGhQYXJ0cy5sZW5ndGggPT09IDEpIHtcbiAgICByZXN1bHRQYXRoUGFydHMudW5zaGlmdChjdXJyZW50UGF0aFBhcnRzWzBdKTtcbiAgfSBlbHNlIHtcbiAgICBmb3IgKHZhciBmaWxlSW5kZXggPSAwOyBmaWxlSW5kZXggPCBvdGhlclBhdGhzLmxlbmd0aDsgZmlsZUluZGV4KyspIHtcbiAgICAgIHZhciBvdGhlclBhdGhQYXJ0cyA9IG90aGVyUGF0aHNbZmlsZUluZGV4XS5zcGxpdChcIi9cIik7XG4gICAgICBmb3IgKHZhciBwYXJ0c0Zyb21FbmQgPSAxOyBwYXJ0c0Zyb21FbmQgPD0gY3VycmVudFBhdGhQYXJ0cy5sZW5ndGg7IHBhcnRzRnJvbUVuZCsrKSB7XG4gICAgICAgIHZhciBjdXJyZW50UGF0aFBhcnQgPSBjdXJyZW50UGF0aFBhcnRzW2N1cnJlbnRQYXRoUGFydHMubGVuZ3RoIC0gcGFydHNGcm9tRW5kXTtcbiAgICAgICAgdmFyIG90aGVyUGF0aFBhcnQgPSBvdGhlclBhdGhQYXJ0c1tvdGhlclBhdGhQYXJ0cy5sZW5ndGggLSBwYXJ0c0Zyb21FbmRdO1xuICAgICAgICBpZiAocmVzdWx0UGF0aFBhcnRzLmxlbmd0aCA8IHBhcnRzRnJvbUVuZCkge1xuICAgICAgICAgIHJlc3VsdFBhdGhQYXJ0cy51bnNoaWZ0KGN1cnJlbnRQYXRoUGFydCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGN1cnJlbnRQYXRoUGFydCAhPT0gb3RoZXJQYXRoUGFydCkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmIChyZXN1bHRQYXRoUGFydHMubGVuZ3RoIDwgY3VycmVudFBhdGhQYXJ0cy5sZW5ndGgpIHtcbiAgICByZXN1bHRQYXRoUGFydHMudW5zaGlmdChcIi4uXCIpO1xuICB9XG4gIHJldHVybiByZXN1bHRQYXRoUGFydHMuam9pbihcIi9cIik7XG59O1xudmFyIGlzRGFya0NvbG9yID0gZnVuY3Rpb24gKGNvbG9yKSB7XG4gIHZhciByID0gMDtcbiAgdmFyIGcgPSAwO1xuICB2YXIgYiA9IDA7XG4gIGlmIChjb2xvci5zdGFydHNXaXRoKFwiI1wiKSkge1xuICAgIGlmIChjb2xvci5sZW5ndGggPCA3KSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgciA9IHBhcnNlSW50KGNvbG9yLnN1YnN0cigxLCAyKSwgMTYpO1xuICAgIGcgPSBwYXJzZUludChjb2xvci5zdWJzdHIoMywgMiksIDE2KTtcbiAgICBiID0gcGFyc2VJbnQoY29sb3Iuc3Vic3RyKDUsIDIpLCAxNik7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHJnYlZhbHVlcyA9IGNvbG9yLnJlcGxhY2UoXCJyZ2IoXCIsIFwiXCIpLnJlcGxhY2UoXCJyZ2JhKFwiLCBcIlwiKS5yZXBsYWNlKFwiKVwiLCBcIlwiKS5zcGxpdChcIixcIik7XG4gICAgaWYgKHJnYlZhbHVlcy5sZW5ndGggPCAzKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgciA9IHBhcnNlSW50KHJnYlZhbHVlc1swXSwgMTApO1xuICAgIGcgPSBwYXJzZUludChyZ2JWYWx1ZXNbMV0sIDEwKTtcbiAgICBiID0gcGFyc2VJbnQocmdiVmFsdWVzWzJdLCAxMCk7XG4gIH1cbiAgdmFyIHlpcSA9IChyICogMjk5ICsgZyAqIDU4NyArIGIgKiAxMTQpIC8gMTAwMDtcbiAgcmV0dXJuIHlpcSA8IDEyODtcbn07XG52YXIgbGFzdENvdW50ID0gMDtcbnZhciBnZW5lcmF0ZVJhbmRvbUlkID0gZnVuY3Rpb24gKCkge1xuICB2YXIgcmFuZG9tID0gKyhEYXRlLm5vdygpLnRvU3RyaW5nKDEwKS5zdWJzdHIoMCwgNCkgKyBsYXN0Q291bnQrKyk7XG4gIHJldHVybiByYW5kb20udG9TdHJpbmcoMTYpO1xufTtcblxudmFyIHRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gXCJcIjtcbn07XG52YXIgZG91YmxlVG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0b1N0cmluZztcbn07XG52YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyh7XG4gIHRvU3RyaW5nOiB0b1N0cmluZ1xufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyh0b1N0cmluZywgZGVmaW5lUHJvcGVydHkpO1xuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoZG91YmxlVG9TdHJpbmcsIGRlZmluZVByb3BlcnR5KTtcbnZhciBjcmVhdGVTdGl0Y2hlc01vY2sgPSB7XG4gIGNyZWF0ZVRoZW1lOiB0b1N0cmluZyxcbiAgY3NzOiBkb3VibGVUb1N0cmluZyxcbiAgZ2V0Q3NzVGV4dDogdG9TdHJpbmcsXG4gIGtleWZyYW1lczogZG91YmxlVG9TdHJpbmdcbn07XG5cbnZhciBfYTtcbnZhciBUSEVNRV9QUkVGSVggPSBcInNwXCI7XG52YXIgY3JlYXRlVGhlbWUgPSAoX2EgPSBjcmVhdGVTdGl0Y2hlc01vY2sgLCBfYS5jcmVhdGVUaGVtZSksIGdldENzc1RleHQgPSBfYS5nZXRDc3NUZXh0LCBrZXlmcmFtZXMgPSBfYS5rZXlmcmFtZXM7XG52YXIgZGVmYXVsdFZhcmlhYmxlcyA9IHtcbiAgc3BhY2U6IG5ldyBBcnJheSgxMSkuZmlsbChcIiBcIikucmVkdWNlKGZ1bmN0aW9uIChhY2MsIF8sIGluZGV4KSB7XG4gICAgdmFyIF9hO1xuICAgIHJldHVybiBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgYWNjKSwgKF9hID0ge30sIF9hW2luZGV4ICsgMV0gPSAoXCJcIikuY29uY2F0KChpbmRleCArIDEpICogNCwgXCJweFwiKSwgX2EpKTtcbiAgfSwge30pLFxuICBib3JkZXI6IHtcbiAgICByYWRpdXM6IFwiNHB4XCJcbiAgfSxcbiAgbGF5b3V0OiB7XG4gICAgaGVpZ2h0OiBcIjMwMHB4XCIsXG4gICAgaGVhZGVySGVpZ2h0OiBcIjQwcHhcIlxuICB9LFxuICB0cmFuc2l0aW9uczoge1xuICAgIGRlZmF1bHQ6IFwiMTUwbXMgZWFzZVwiXG4gIH0sXG4gIHpJbmRpY2VzOiB7XG4gICAgYmFzZTogXCIxXCIsXG4gICAgb3ZlcmxheTogXCIyXCIsXG4gICAgdG9wOiBcIjNcIlxuICB9XG59O1xudmFyIHN0YW5kYXJkaXplU3RpdGNoZXNUaGVtZSA9IGZ1bmN0aW9uICh0aGVtZSkge1xuICB2YXIgc3ludGF4RW50cmllcyA9IE9iamVjdC5lbnRyaWVzKHRoZW1lLnN5bnRheCk7XG4gIHZhciBzeW50YXggPSBzeW50YXhFbnRyaWVzLnJlZHVjZShmdW5jdGlvbiAodG9rZW5BY2MsIF9hKSB7XG4gICAgdmFyIF9iO1xuICAgIHZhciB0b2tlbk5hbWUgPSBfYVswXSwgdG9rZW5WYWx1ZSA9IF9hWzFdO1xuICAgIHZhciBuZXdWYWx1ZXMgPSAoX2IgPSB7fSwgX2JbKFwiY29sb3ItXCIpLmNvbmNhdCh0b2tlbk5hbWUpXSA9IHRva2VuVmFsdWUsIF9iKTtcbiAgICBpZiAodHlwZW9mIHRva2VuVmFsdWUgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgIG5ld1ZhbHVlcyA9IE9iamVjdC5lbnRyaWVzKHRva2VuVmFsdWUpLnJlZHVjZShmdW5jdGlvbiAodmFsdWVBY2MsIF9hKSB7XG4gICAgICAgIHZhciBfYjtcbiAgICAgICAgdmFyIHN0eWxlUHJvcCA9IF9hWzBdLCBzdHlsZVZhbHVlID0gX2FbMV07XG4gICAgICAgIHJldHVybiBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgdmFsdWVBY2MpLCAoX2IgPSB7fSwgX2JbKFwiXCIpLmNvbmNhdChzdHlsZVByb3AsIFwiLVwiKS5jb25jYXQodG9rZW5OYW1lKV0gPSBzdHlsZVZhbHVlLCBfYikpO1xuICAgICAgfSwge30pO1xuICAgIH1cbiAgICByZXR1cm4gX19hc3NpZ24oX19hc3NpZ24oe30sIHRva2VuQWNjKSwgbmV3VmFsdWVzKTtcbiAgfSwge30pO1xuICByZXR1cm4gX19hc3NpZ24oX19hc3NpZ24oe30sIGRlZmF1bHRWYXJpYWJsZXMpLCB7XG4gICAgY29sb3JzOiB0aGVtZS5jb2xvcnMsXG4gICAgZm9udDogdGhlbWUuZm9udCxcbiAgICBzeW50YXg6IHN5bnRheFxuICB9KTtcbn07XG52YXIgc3RhbmRhcmRpemVUaGVtZSA9IGZ1bmN0aW9uIChpbnB1dFRoZW1lKSB7XG4gIHZhciBfYSwgX2IsIF9jLCBfZCwgX2U7XG4gIGlmIChpbnB1dFRoZW1lID09PSB2b2lkIDApIHtcbiAgICBpbnB1dFRoZW1lID0gXCJsaWdodFwiO1xuICB9XG4gIHZhciBkZWZhdWx0TGlnaHRUaGVtZUtleSA9IFwiZGVmYXVsdFwiO1xuICBpZiAodHlwZW9mIGlucHV0VGhlbWUgPT09IFwic3RyaW5nXCIpIHtcbiAgICB2YXIgcHJlZGVmaW5lZFRoZW1lID0gU0FORFBBQ0tfVEhFTUVTW2lucHV0VGhlbWVdO1xuICAgIGlmICghcHJlZGVmaW5lZFRoZW1lKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoKFwiW3NhbmRwYWNrLXJlYWN0XTogaW52YWxpZCB0aGVtZSAnXCIpLmNvbmNhdChpbnB1dFRoZW1lLCBcIicgcHJvdmlkZWQuXCIpKTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIHRoZW1lOiBwcmVkZWZpbmVkVGhlbWUsXG4gICAgICBpZDogaW5wdXRUaGVtZSxcbiAgICAgIG1vZGU6IGlzRGFya0NvbG9yKHByZWRlZmluZWRUaGVtZS5jb2xvcnMuc3VyZmFjZTEpID8gXCJkYXJrXCIgOiBcImxpZ2h0XCJcbiAgICB9O1xuICB9XG4gIHZhciBtb2RlID0gaXNEYXJrQ29sb3IoKF9iID0gKF9hID0gaW5wdXRUaGVtZSA9PT0gbnVsbCB8fCBpbnB1dFRoZW1lID09PSB2b2lkIDAgPyB2b2lkIDAgOiBpbnB1dFRoZW1lLmNvbG9ycykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnN1cmZhY2UxKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBkZWZhdWx0TGlnaHQuY29sb3JzLnN1cmZhY2UxKSA/IFwiZGFya1wiIDogXCJsaWdodFwiO1xuICB2YXIgYmFzZVRoZW1lID0gbW9kZSA9PT0gXCJkYXJrXCIgPyBkZWZhdWx0RGFyayA6IGRlZmF1bHRMaWdodDtcbiAgdmFyIGNvbG9yc0J5TW9kZSA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCBiYXNlVGhlbWUuY29sb3JzKSwgKF9jID0gaW5wdXRUaGVtZSA9PT0gbnVsbCB8fCBpbnB1dFRoZW1lID09PSB2b2lkIDAgPyB2b2lkIDAgOiBpbnB1dFRoZW1lLmNvbG9ycykgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDoge30pO1xuICB2YXIgc3ludGF4QnlNb2RlID0gX19hc3NpZ24oX19hc3NpZ24oe30sIGJhc2VUaGVtZS5zeW50YXgpLCAoX2QgPSBpbnB1dFRoZW1lID09PSBudWxsIHx8IGlucHV0VGhlbWUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGlucHV0VGhlbWUuc3ludGF4KSAhPT0gbnVsbCAmJiBfZCAhPT0gdm9pZCAwID8gX2QgOiB7fSk7XG4gIHZhciBmb250QnlNb2RlID0gX19hc3NpZ24oX19hc3NpZ24oe30sIGJhc2VUaGVtZS5mb250KSwgKF9lID0gaW5wdXRUaGVtZSA9PT0gbnVsbCB8fCBpbnB1dFRoZW1lID09PSB2b2lkIDAgPyB2b2lkIDAgOiBpbnB1dFRoZW1lLmZvbnQpICE9PSBudWxsICYmIF9lICE9PSB2b2lkIDAgPyBfZSA6IHt9KTtcbiAgdmFyIHRoZW1lID0ge1xuICAgIGNvbG9yczogY29sb3JzQnlNb2RlLFxuICAgIHN5bnRheDogc3ludGF4QnlNb2RlLFxuICAgIGZvbnQ6IGZvbnRCeU1vZGVcbiAgfTtcbiAgdmFyIGlkID0gaW5wdXRUaGVtZSA/IHNpbXBsZUhhc2hGdW5jdGlvbihKU09OLnN0cmluZ2lmeSh0aGVtZSkpIDogZGVmYXVsdExpZ2h0VGhlbWVLZXk7XG4gIHJldHVybiB7XG4gICAgdGhlbWU6IHRoZW1lLFxuICAgIGlkOiAoXCJzcC1cIikuY29uY2F0KGlkKSxcbiAgICBtb2RlOiBtb2RlXG4gIH07XG59O1xudmFyIHNpbXBsZUhhc2hGdW5jdGlvbiA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgdmFyIGhhc2ggPSAwO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGhhc2ggJj0gaGFzaCkge1xuICAgIGhhc2ggPSAzMSAqIGhhc2ggKyBzdHIuY2hhckNvZGVBdChpKyspO1xuICB9XG4gIHJldHVybiBNYXRoLmFicyhoYXNoKTtcbn07XG52YXIgZmFrZUNzcyA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIFwiXCI7XG59O1xuZmFrZUNzcy50b1N0cmluZyA9IGZha2VDc3M7XG5cbnZhciBDbGFzc05hbWVzQ29udGV4dCA9IGNyZWF0ZUNvbnRleHQoe30pO1xudmFyIENsYXNzTmFtZXNQcm92aWRlciA9IGZ1bmN0aW9uIChfYSkge1xuICB2YXIgY2hpbGRyZW4gPSBfYS5jaGlsZHJlbiwgY2xhc3NlcyA9IF9hLmNsYXNzZXM7XG4gIHJldHVybiBqc3goQ2xhc3NOYW1lc0NvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogY2xhc3NlcyB8fCAoe30pLFxuICAgIGNoaWxkcmVuOiBjaGlsZHJlblxuICB9KTtcbn07XG52YXIgdXNlQ2xhc3NOYW1lcyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGNvbnRleHRDbGFzc05hbWVzID0gdXNlQ29udGV4dChDbGFzc05hbWVzQ29udGV4dCk7XG4gIHJldHVybiBmdW5jdGlvbiBzYW5kcGFja0NsYXNzTmFtZXMoY3VzdG9tQ2xhc3NOYW1lLCBhbGxDbGFzc05hbWVzKSB7XG4gICAgaWYgKGFsbENsYXNzTmFtZXMgPT09IHZvaWQgMCkge1xuICAgICAgYWxsQ2xhc3NOYW1lcyA9IFtdO1xuICAgIH1cbiAgICB2YXIgY3VzdG9tID0gKFwiXCIpLmNvbmNhdChUSEVNRV9QUkVGSVgsIFwiLVwiKS5jb25jYXQoY3VzdG9tQ2xhc3NOYW1lKTtcbiAgICByZXR1cm4gam9pbkNsYXNzTmFtZXMuYXBwbHkodm9pZCAwLCBfX3NwcmVhZEFycmF5KF9fc3ByZWFkQXJyYXkoW10sIGFsbENsYXNzTmFtZXMsIGZhbHNlKSwgW2N1c3RvbSwgY29udGV4dENsYXNzTmFtZXNbY3VzdG9tXV0sIGZhbHNlKSk7XG4gIH07XG59O1xudmFyIGpvaW5DbGFzc05hbWVzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgYXJncyA9IFtdO1xuICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgfVxuICByZXR1cm4gYXJncy5maWx0ZXIoQm9vbGVhbikuam9pbihcIiBcIik7XG59O1xuXG52YXIgd3JhcHBlckNsYXNzTmFtZSQzID0gZmFrZUNzcztcbnZhciBTYW5kcGFja1RoZW1lQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQoe1xuICB0aGVtZTogZGVmYXVsdExpZ2h0LFxuICBpZDogXCJsaWdodFwiLFxuICBtb2RlOiBcImxpZ2h0XCJcbn0pO1xudmFyIFNhbmRwYWNrVGhlbWVQcm92aWRlciA9IGZ1bmN0aW9uIChfYSkge1xuICB2YXIgdGhlbWVGcm9tUHJvcHMgPSBfYS50aGVtZSwgY2hpbGRyZW4gPSBfYS5jaGlsZHJlbiwgY2xhc3NOYW1lID0gX2EuY2xhc3NOYW1lLCBwcm9wcyA9IF9fcmVzdChfYSwgW1widGhlbWVcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzTmFtZVwiXSk7XG4gIHZhciBfYiA9IFJlYWN0LnVzZVN0YXRlKHRoZW1lRnJvbVByb3BzKSwgcHJlZmZlcmVkVGhlbWUgPSBfYlswXSwgc2V0UHJlZmVycmVkVGhlbWUgPSBfYlsxXTtcbiAgdmFyIF9jID0gc3RhbmRhcmRpemVUaGVtZShwcmVmZmVyZWRUaGVtZSksIHRoZW1lID0gX2MudGhlbWUsIGlkID0gX2MuaWQsIG1vZGUgPSBfYy5tb2RlO1xuICB2YXIgY2xhc3NOYW1lcyA9IHVzZUNsYXNzTmFtZXMoKTtcbiAgdmFyIHRoZW1lQ2xhc3NOYW1lID0gUmVhY3QudXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZVRoZW1lKGlkLCBzdGFuZGFyZGl6ZVN0aXRjaGVzVGhlbWUodGhlbWUpKTtcbiAgfSwgW3RoZW1lLCBpZF0pO1xuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGVtZUZyb21Qcm9wcyAhPT0gXCJhdXRvXCIpIHtcbiAgICAgIHNldFByZWZlcnJlZFRoZW1lKHRoZW1lRnJvbVByb3BzKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIGNvbG9yU2NoZW1lQ2hhbmdlID0gZnVuY3Rpb24gKF9hKSB7XG4gICAgICB2YXIgbWF0Y2hlcyA9IF9hLm1hdGNoZXM7XG4gICAgICBzZXRQcmVmZXJyZWRUaGVtZShtYXRjaGVzID8gXCJkYXJrXCIgOiBcImxpZ2h0XCIpO1xuICAgIH07XG4gICAgd2luZG93Lm1hdGNoTWVkaWEoXCIocHJlZmVycy1jb2xvci1zY2hlbWU6IGRhcmspXCIpLmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgY29sb3JTY2hlbWVDaGFuZ2UpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICB3aW5kb3cubWF0Y2hNZWRpYShcIihwcmVmZXJzLWNvbG9yLXNjaGVtZTogZGFyaylcIikucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCBjb2xvclNjaGVtZUNoYW5nZSk7XG4gICAgfTtcbiAgfSwgW3RoZW1lRnJvbVByb3BzXSk7XG4gIHJldHVybiBqc3goU2FuZHBhY2tUaGVtZUNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZToge1xuICAgICAgdGhlbWU6IHRoZW1lLFxuICAgICAgaWQ6IGlkLFxuICAgICAgbW9kZTogbW9kZVxuICAgIH0sXG4gICAgY2hpbGRyZW46IGpzeChcImRpdlwiLCBfX2Fzc2lnbih7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoXCJ3cmFwcGVyXCIsIFt0aGVtZUNsYXNzTmFtZSwgd3JhcHBlckNsYXNzTmFtZSQzKCksIGNsYXNzTmFtZV0pXG4gICAgfSwgcHJvcHMsIHtcbiAgICAgIGNoaWxkcmVuOiBjaGlsZHJlblxuICAgIH0pKVxuICB9KTtcbn07XG52YXIgU2FuZHBhY2tUaGVtZUNvbnN1bWVyID0gU2FuZHBhY2tUaGVtZUNvbnRleHQuQ29uc3VtZXI7XG5cbnZhciBjb21tb25GaWxlcyA9IHtcbiAgXCIvc3R5bGVzLmNzc1wiOiB7XG4gICAgY29kZTogXCJib2R5IHtcXG4gIGZvbnQtZmFtaWx5OiBzYW5zLXNlcmlmO1xcbiAgLXdlYmtpdC1mb250LXNtb290aGluZzogYXV0bztcXG4gIC1tb3otZm9udC1zbW9vdGhpbmc6IGF1dG87XFxuICAtbW96LW9zeC1mb250LXNtb290aGluZzogZ3JheXNjYWxlO1xcbiAgZm9udC1zbW9vdGhpbmc6IGF1dG87XFxuICB0ZXh0LXJlbmRlcmluZzogb3B0aW1pemVMZWdpYmlsaXR5O1xcbiAgZm9udC1zbW9vdGg6IGFsd2F5cztcXG4gIC13ZWJraXQtdGFwLWhpZ2hsaWdodC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICAtd2Via2l0LXRvdWNoLWNhbGxvdXQ6IG5vbmU7XFxufVxcblxcbmgxIHtcXG4gIGZvbnQtc2l6ZTogMS41cmVtO1xcbn1cIlxuICB9XG59O1xuXG52YXIgQVNUUk9fVEVNUExBVEUgPSB7XG4gIGZpbGVzOiB7XG4gICAgXCIvc3JjL3N0eWxlcy5jc3NcIjogY29tbW9uRmlsZXNbXCIvc3R5bGVzLmNzc1wiXSxcbiAgICBcIi9zcmMvcGFnZXMvaW5kZXguYXN0cm9cIjoge1xuICAgICAgY29kZTogXCItLS1cXG5pbXBvcnQgXFxcIi4uL3N0eWxlcy5jc3NcXFwiO1xcbmNvbnN0IGRhdGEgPSBcXFwid29ybGRcXFwiO1xcbi0tLVxcblxcbjxoMT5IZWxsbyB7ZGF0YX08L2gxPlxcblxcbjxzdHlsZT5cXG4gIGgxIHtcXG4gICAgZm9udC1zaXplOiAxLjVyZW07XFxuICB9XFxuPC9zdHlsZT5cIlxuICAgIH0sXG4gICAgXCIuZW52XCI6IHtcbiAgICAgIGNvZGU6IFwiQVNUUk9fVEVMRU1FVFJZX0RJU0FCTEVEPVxcXCIxXFxcIlwiXG4gICAgfSxcbiAgICBcIi9wYWNrYWdlLmpzb25cIjoge1xuICAgICAgY29kZTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICBkZXBlbmRlbmNpZXM6IHtcbiAgICAgICAgICBhc3RybzogXCJeMS42LjEyXCIsXG4gICAgICAgICAgXCJlc2J1aWxkLXdhc21cIjogXCJeMC4xNS4xNlwiXG4gICAgICAgIH0sXG4gICAgICAgIHNjcmlwdHM6IHtcbiAgICAgICAgICBkZXY6IFwiYXN0cm8gZGV2XCIsXG4gICAgICAgICAgc3RhcnQ6IFwiYXN0cm8gZGV2XCIsXG4gICAgICAgICAgYnVpbGQ6IFwiYXN0cm8gYnVpbGRcIixcbiAgICAgICAgICBwcmV2aWV3OiBcImFzdHJvIHByZXZpZXdcIixcbiAgICAgICAgICBhc3RybzogXCJhc3Ryb1wiXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfVxuICB9LFxuICBtYWluOiBcIi9zcmMvcGFnZXMvaW5kZXguYXN0cm9cIixcbiAgZW52aXJvbm1lbnQ6IFwibm9kZVwiXG59O1xuXG52YXIgTkVYVEpTX1RFTVBMQVRFID0ge1xuICBmaWxlczogX19hc3NpZ24oX19hc3NpZ24oe30sIGNvbW1vbkZpbGVzKSwge1xuICAgIFwiL3BhZ2VzL19hcHAuanNcIjoge1xuICAgICAgY29kZTogXCJpbXBvcnQgJy4uL3N0eWxlcy5jc3MnXFxuXFxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTXlBcHAoeyBDb21wb25lbnQsIHBhZ2VQcm9wcyB9KSB7XFxuICByZXR1cm4gPENvbXBvbmVudCB7Li4ucGFnZVByb3BzfSAvPlxcbn1cIlxuICAgIH0sXG4gICAgXCIvcGFnZXMvaW5kZXguanNcIjoge1xuICAgICAgY29kZTogXCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBIb21lKHsgZGF0YSB9KSB7XFxuICByZXR1cm4gKFxcbiAgICA8ZGl2PlxcbiAgICAgIDxoMT5IZWxsbyB7ZGF0YX08L2gxPlxcbiAgICA8L2Rpdj5cXG4gICk7XFxufVxcbiAgXFxuZXhwb3J0IGZ1bmN0aW9uIGdldFNlcnZlclNpZGVQcm9wcygpIHtcXG4gIHJldHVybiB7XFxuICAgIHByb3BzOiB7IGRhdGE6IFxcXCJ3b3JsZFxcXCIgfSxcXG4gIH1cXG59XFxuXCJcbiAgICB9LFxuICAgIFwiL25leHQuY29uZmlnLmpzXCI6IHtcbiAgICAgIGNvZGU6IFwiLyoqIEB0eXBlIHtpbXBvcnQoJ25leHQnKS5OZXh0Q29uZmlnfSAqL1xcbmNvbnN0IG5leHRDb25maWcgPSB7XFxuICByZWFjdFN0cmljdE1vZGU6IHRydWUsXFxuICBzd2NNaW5pZnk6IHRydWUsXFxufVxcblxcbm1vZHVsZS5leHBvcnRzID0gbmV4dENvbmZpZ1xcblwiXG4gICAgfSxcbiAgICBcIi9wYWNrYWdlLmpzb25cIjoge1xuICAgICAgY29kZTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICBuYW1lOiBcIm15LWFwcFwiLFxuICAgICAgICB2ZXJzaW9uOiBcIjAuMS4wXCIsXG4gICAgICAgIHByaXZhdGU6IHRydWUsXG4gICAgICAgIHNjcmlwdHM6IHtcbiAgICAgICAgICBkZXY6IFwiTkVYVF9URUxFTUVUUllfRElTQUJMRUQ9MSBuZXh0IGRldlwiLFxuICAgICAgICAgIGJ1aWxkOiBcIm5leHQgYnVpbGRcIixcbiAgICAgICAgICBzdGFydDogXCJuZXh0IHN0YXJ0XCIsXG4gICAgICAgICAgbGludDogXCJuZXh0IGxpbnRcIlxuICAgICAgICB9LFxuICAgICAgICBkZXBlbmRlbmNpZXM6IHtcbiAgICAgICAgICBuZXh0OiBcIjEyLjEuNlwiLFxuICAgICAgICAgIHJlYWN0OiBcIjE4LjIuMFwiLFxuICAgICAgICAgIFwicmVhY3QtZG9tXCI6IFwiMTguMi4wXCIsXG4gICAgICAgICAgXCJAbmV4dC9zd2Mtd2FzbS1ub2RlanNcIjogXCIxMi4xLjZcIlxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cbiAgfSksXG4gIG1haW46IFwiL3BhZ2VzL2luZGV4LmpzXCIsXG4gIGVudmlyb25tZW50OiBcIm5vZGVcIlxufTtcblxudmFyIE5PREVfVEVNUExBVEUgPSB7XG4gIGZpbGVzOiB7XG4gICAgXCIvaW5kZXguanNcIjoge1xuICAgICAgY29kZTogXCJjb25zdCBodHRwID0gcmVxdWlyZSgnaHR0cCcpO1xcblxcbmNvbnN0IGhvc3RuYW1lID0gJzEyNy4wLjAuMSc7XFxuY29uc3QgcG9ydCA9IDMwMDA7XFxuXFxuY29uc3Qgc2VydmVyID0gaHR0cC5jcmVhdGVTZXJ2ZXIoKHJlcSwgcmVzKSA9PiB7XFxuICByZXMuc3RhdHVzQ29kZSA9IDIwMDtcXG4gIHJlcy5zZXRIZWFkZXIoJ0NvbnRlbnQtVHlwZScsICd0ZXh0L2h0bWwnKTtcXG4gIHJlcy5lbmQoJ0hlbGxvIHdvcmxkJyk7XFxufSk7XFxuXFxuc2VydmVyLmxpc3Rlbihwb3J0LCBob3N0bmFtZSwgKCkgPT4ge1xcbiAgY29uc29sZS5sb2coYFNlcnZlciBydW5uaW5nIGF0IGh0dHA6Ly8ke2hvc3RuYW1lfToke3BvcnR9L2ApO1xcbn0pO1wiXG4gICAgfSxcbiAgICBcIi9wYWNrYWdlLmpzb25cIjoge1xuICAgICAgY29kZTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICBkZXBlbmRlbmNpZXM6IHt9LFxuICAgICAgICBzY3JpcHRzOiB7XG4gICAgICAgICAgc3RhcnQ6IFwibm9kZSBpbmRleC5qc1wiXG4gICAgICAgIH0sXG4gICAgICAgIG1haW46IFwiaW5kZXguanNcIlxuICAgICAgfSlcbiAgICB9XG4gIH0sXG4gIG1haW46IFwiL2luZGV4LmpzXCIsXG4gIGVudmlyb25tZW50OiBcIm5vZGVcIlxufTtcblxudmFyIFZJVEVfVEVNUExBVEUgPSB7XG4gIGZpbGVzOiBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgY29tbW9uRmlsZXMpLCB7XG4gICAgXCIvaW5kZXguanNcIjoge1xuICAgICAgY29kZTogXCJpbXBvcnQgXFxcIi4vc3R5bGVzLmNzc1xcXCI7XFxuXFxuZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXFxcImFwcFxcXCIpLmlubmVySFRNTCA9IGBcXG48aDE+SGVsbG8gd29ybGQ8L2gxPlxcbmA7XFxuXCJcbiAgICB9LFxuICAgIFwiL2luZGV4Lmh0bWxcIjoge1xuICAgICAgY29kZTogXCI8IURPQ1RZUEUgaHRtbD5cXG48aHRtbCBsYW5nPVxcXCJlblxcXCI+XFxuICA8aGVhZD5cXG4gICAgPG1ldGEgY2hhcnNldD1cXFwiVVRGLThcXFwiIC8+XFxuICAgIDxtZXRhIG5hbWU9XFxcInZpZXdwb3J0XFxcIiBjb250ZW50PVxcXCJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wXFxcIiAvPlxcbiAgICA8dGl0bGU+Vml0ZSBBcHA8L3RpdGxlPlxcbiAgPC9oZWFkPlxcbiAgPGJvZHk+XFxuICAgIDxkaXYgaWQ9XFxcImFwcFxcXCI+PC9kaXY+XFxuICAgIDxzY3JpcHQgdHlwZT1cXFwibW9kdWxlXFxcIiBzcmM9XFxcIi9pbmRleC5qc1xcXCI+PC9zY3JpcHQ+XFxuICA8L2JvZHk+XFxuPC9odG1sPlxcblwiXG4gICAgfSxcbiAgICBcIi9wYWNrYWdlLmpzb25cIjoge1xuICAgICAgY29kZTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICBzY3JpcHRzOiB7XG4gICAgICAgICAgZGV2OiBcInZpdGVcIixcbiAgICAgICAgICBidWlsZDogXCJ2aXRlIGJ1aWxkXCIsXG4gICAgICAgICAgcHJldmlldzogXCJ2aXRlIHByZXZpZXdcIlxuICAgICAgICB9LFxuICAgICAgICBkZXZEZXBlbmRlbmNpZXM6IHtcbiAgICAgICAgICB2aXRlOiBcIjQuMS40XCIsXG4gICAgICAgICAgXCJlc2J1aWxkLXdhc21cIjogXCIwLjE3LjEyXCJcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9XG4gIH0pLFxuICBtYWluOiBcIi9pbmRleC5qc1wiLFxuICBlbnZpcm9ubWVudDogXCJub2RlXCJcbn07XG5cbnZhciBWSVRFX1BSRUFDVF9URU1QTEFURSA9IHtcbiAgZmlsZXM6IF9fYXNzaWduKF9fYXNzaWduKHt9LCBjb21tb25GaWxlcyksIHtcbiAgICBcIi9BcHAuanN4XCI6IHtcbiAgICAgIGNvZGU6IFwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gQXBwKCkge1xcbiAgY29uc3QgZGF0YSA9IFxcXCJ3b3JsZFxcXCJcXG5cXG4gIHJldHVybiA8aDE+SGVsbG8ge2RhdGF9PC9oMT5cXG59XFxuXCJcbiAgICB9LFxuICAgIFwiL2luZGV4LmpzeFwiOiB7XG4gICAgICBjb2RlOiBcImltcG9ydCB7IHJlbmRlciB9IGZyb20gXFxcInByZWFjdFxcXCI7XFxuaW1wb3J0IFxcXCIuL3N0eWxlcy5jc3NcXFwiO1xcblxcbmltcG9ydCBBcHAgZnJvbSBcXFwiLi9BcHBcXFwiO1xcblxcbmNvbnN0IHJvb3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcXFwicm9vdFxcXCIpO1xcbnJlbmRlcig8QXBwIC8+LCByb290KTtcXG5cIlxuICAgIH0sXG4gICAgXCIvaW5kZXguaHRtbFwiOiB7XG4gICAgICBjb2RlOiBcIjwhRE9DVFlQRSBodG1sPlxcbjxodG1sIGxhbmc9XFxcImVuXFxcIj5cXG4gIDxoZWFkPlxcbiAgICA8bWV0YSBjaGFyc2V0PVxcXCJVVEYtOFxcXCIgLz5cXG4gICAgPG1ldGEgbmFtZT1cXFwidmlld3BvcnRcXFwiIGNvbnRlbnQ9XFxcIndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xLjBcXFwiIC8+XFxuICAgIDx0aXRsZT5WaXRlIEFwcDwvdGl0bGU+XFxuICA8L2hlYWQ+XFxuICA8Ym9keT5cXG4gICAgPGRpdiBpZD1cXFwicm9vdFxcXCI+PC9kaXY+XFxuICAgIDxzY3JpcHQgdHlwZT1cXFwibW9kdWxlXFxcIiBzcmM9XFxcIi9pbmRleC5qc3hcXFwiPjwvc2NyaXB0PlxcbiAgPC9ib2R5PlxcbjwvaHRtbD5cXG5cIlxuICAgIH0sXG4gICAgXCIvcGFja2FnZS5qc29uXCI6IHtcbiAgICAgIGNvZGU6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgc2NyaXB0czoge1xuICAgICAgICAgIGRldjogXCJ2aXRlXCIsXG4gICAgICAgICAgYnVpbGQ6IFwidml0ZSBidWlsZFwiLFxuICAgICAgICAgIHByZXZpZXc6IFwidml0ZSBwcmV2aWV3XCJcbiAgICAgICAgfSxcbiAgICAgICAgZGVwZW5kZW5jaWVzOiB7XG4gICAgICAgICAgcHJlYWN0OiBcIl4xMC4xNi4wXCJcbiAgICAgICAgfSxcbiAgICAgICAgZGV2RGVwZW5kZW5jaWVzOiB7XG4gICAgICAgICAgXCJAcHJlYWN0L3ByZXNldC12aXRlXCI6IFwiXjIuNS4wXCIsXG4gICAgICAgICAgdml0ZTogXCI0LjEuNFwiLFxuICAgICAgICAgIFwiZXNidWlsZC13YXNtXCI6IFwiMC4xNy4xMlwiXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSxcbiAgICBcIi92aXRlLmNvbmZpZy5qc1wiOiB7XG4gICAgICBjb2RlOiBcImltcG9ydCB7IGRlZmluZUNvbmZpZyB9IGZyb20gXFxcInZpdGVcXFwiO1xcbmltcG9ydCBwcmVhY3QgZnJvbSAnQHByZWFjdC9wcmVzZXQtdml0ZSdcXG5cXG4vLyBodHRwczovL3ZpdGVqcy5kZXYvY29uZmlnL1xcbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbmZpZyh7XFxuICBwbHVnaW5zOiBbcHJlYWN0KCldLFxcbn0pO1xcblwiXG4gICAgfVxuICB9KSxcbiAgbWFpbjogXCIvQXBwLmpzeFwiLFxuICBlbnZpcm9ubWVudDogXCJub2RlXCJcbn07XG5cbnZhciBWSVRFX1BSRUFDVF9UU19URU1QTEFURSA9IHtcbiAgZmlsZXM6IF9fYXNzaWduKF9fYXNzaWduKHt9LCBjb21tb25GaWxlcyksIHtcbiAgICBcIi9BcHAudHN4XCI6IHtcbiAgICAgIGNvZGU6IFwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gQXBwKCkge1xcbiAgY29uc3QgZGF0YTogc3RyaW5nID0gXFxcIndvcmxkXFxcIlxcblxcbiAgcmV0dXJuIDxoMT5IZWxsbyB7ZGF0YX08L2gxPlxcbn1cXG5cIlxuICAgIH0sXG4gICAgXCIvaW5kZXgudHN4XCI6IHtcbiAgICAgIGNvZGU6IFwiaW1wb3J0IHsgcmVuZGVyIH0gZnJvbSBcXFwicHJlYWN0XFxcIjtcXG5pbXBvcnQgXFxcIi4vc3R5bGVzLmNzc1xcXCI7XFxuXFxuaW1wb3J0IEFwcCBmcm9tIFxcXCIuL0FwcFxcXCI7XFxuXFxuY29uc3Qgcm9vdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFxcXCJyb290XFxcIikgYXMgSFRNTEVsZW1lbnQ7XFxucmVuZGVyKDxBcHAgLz4sIHJvb3QpO1xcblwiXG4gICAgfSxcbiAgICBcIi9pbmRleC5odG1sXCI6IHtcbiAgICAgIGNvZGU6IFwiPCFET0NUWVBFIGh0bWw+XFxuPGh0bWwgbGFuZz1cXFwiZW5cXFwiPlxcbiAgPGhlYWQ+XFxuICAgIDxtZXRhIGNoYXJzZXQ9XFxcIlVURi04XFxcIiAvPlxcbiAgICA8bWV0YSBuYW1lPVxcXCJ2aWV3cG9ydFxcXCIgY29udGVudD1cXFwid2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEuMFxcXCIgLz5cXG4gICAgPHRpdGxlPlZpdGUgQXBwPC90aXRsZT5cXG4gIDwvaGVhZD5cXG4gIDxib2R5PlxcbiAgICA8ZGl2IGlkPVxcXCJyb290XFxcIj48L2Rpdj5cXG4gICAgPHNjcmlwdCB0eXBlPVxcXCJtb2R1bGVcXFwiIHNyYz1cXFwiL2luZGV4LnRzeFxcXCI+PC9zY3JpcHQ+XFxuICA8L2JvZHk+XFxuPC9odG1sPlxcblwiXG4gICAgfSxcbiAgICBcIi90c2NvbmZpZy5qc29uXCI6IHtcbiAgICAgIGNvZGU6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgY29tcGlsZXJPcHRpb25zOiB7XG4gICAgICAgICAgdGFyZ2V0OiBcIkVTTmV4dFwiLFxuICAgICAgICAgIHVzZURlZmluZUZvckNsYXNzRmllbGRzOiB0cnVlLFxuICAgICAgICAgIGxpYjogW1wiRE9NXCIsIFwiRE9NLkl0ZXJhYmxlXCIsIFwiRVNOZXh0XCJdLFxuICAgICAgICAgIGFsbG93SnM6IGZhbHNlLFxuICAgICAgICAgIHNraXBMaWJDaGVjazogdHJ1ZSxcbiAgICAgICAgICBlc01vZHVsZUludGVyb3A6IGZhbHNlLFxuICAgICAgICAgIGFsbG93U3ludGhldGljRGVmYXVsdEltcG9ydHM6IHRydWUsXG4gICAgICAgICAgc3RyaWN0OiB0cnVlLFxuICAgICAgICAgIGZvcmNlQ29uc2lzdGVudENhc2luZ0luRmlsZU5hbWVzOiB0cnVlLFxuICAgICAgICAgIG1vZHVsZTogXCJFU05leHRcIixcbiAgICAgICAgICBtb2R1bGVSZXNvbHV0aW9uOiBcIk5vZGVcIixcbiAgICAgICAgICByZXNvbHZlSnNvbk1vZHVsZTogdHJ1ZSxcbiAgICAgICAgICBpc29sYXRlZE1vZHVsZXM6IHRydWUsXG4gICAgICAgICAgbm9FbWl0OiB0cnVlLFxuICAgICAgICAgIGpzeDogXCJyZWFjdC1qc3hcIixcbiAgICAgICAgICBqc3hJbXBvcnRTb3VyY2U6IFwicHJlYWN0XCJcbiAgICAgICAgfSxcbiAgICAgICAgaW5jbHVkZTogW1wic3JjXCJdLFxuICAgICAgICByZWZlcmVuY2VzOiBbe1xuICAgICAgICAgIHBhdGg6IFwiLi90c2NvbmZpZy5ub2RlLmpzb25cIlxuICAgICAgICB9XVxuICAgICAgfSwgbnVsbCwgMilcbiAgICB9LFxuICAgIFwiL3RzY29uZmlnLm5vZGUuanNvblwiOiB7XG4gICAgICBjb2RlOiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIGNvbXBpbGVyT3B0aW9uczoge1xuICAgICAgICAgIGNvbXBvc2l0ZTogdHJ1ZSxcbiAgICAgICAgICBtb2R1bGU6IFwiRVNOZXh0XCIsXG4gICAgICAgICAgbW9kdWxlUmVzb2x1dGlvbjogXCJOb2RlXCIsXG4gICAgICAgICAgYWxsb3dTeW50aGV0aWNEZWZhdWx0SW1wb3J0czogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICBpbmNsdWRlOiBbXCJ2aXRlLmNvbmZpZy50c1wiXVxuICAgICAgfSwgbnVsbCwgMilcbiAgICB9LFxuICAgIFwiL3BhY2thZ2UuanNvblwiOiB7XG4gICAgICBjb2RlOiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIHNjcmlwdHM6IHtcbiAgICAgICAgICBkZXY6IFwidml0ZVwiLFxuICAgICAgICAgIGJ1aWxkOiBcInRzYyAmJiB2aXRlIGJ1aWxkXCIsXG4gICAgICAgICAgcHJldmlldzogXCJ2aXRlIHByZXZpZXdcIlxuICAgICAgICB9LFxuICAgICAgICBkZXBlbmRlbmNpZXM6IHtcbiAgICAgICAgICBwcmVhY3Q6IFwiXjEwLjE2LjBcIlxuICAgICAgICB9LFxuICAgICAgICBkZXZEZXBlbmRlbmNpZXM6IHtcbiAgICAgICAgICBcIkBwcmVhY3QvcHJlc2V0LXZpdGVcIjogXCJeMi41LjBcIixcbiAgICAgICAgICB0eXBlc2NyaXB0OiBcIl40LjkuNVwiLFxuICAgICAgICAgIHZpdGU6IFwiNC4xLjRcIixcbiAgICAgICAgICBcImVzYnVpbGQtd2FzbVwiOiBcIl4wLjE3LjEyXCJcbiAgICAgICAgfVxuICAgICAgfSwgbnVsbCwgMilcbiAgICB9LFxuICAgIFwiL3ZpdGUtZW52LmQudHNcIjoge1xuICAgICAgY29kZTogJy8vLyA8cmVmZXJlbmNlIHR5cGVzPVwidml0ZS9jbGllbnRcIiAvPidcbiAgICB9LFxuICAgIFwiL3ZpdGUuY29uZmlnLnRzXCI6IHtcbiAgICAgIGNvZGU6IFwiaW1wb3J0IHsgZGVmaW5lQ29uZmlnIH0gZnJvbSAndml0ZSdcXG5pbXBvcnQgcHJlYWN0IGZyb20gJ0BwcmVhY3QvcHJlc2V0LXZpdGUnXFxuXFxuLy8gaHR0cHM6Ly92aXRlanMuZGV2L2NvbmZpZy9cXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb25maWcoe1xcbiAgcGx1Z2luczogW3ByZWFjdCgpXSxcXG59KVxcblwiXG4gICAgfVxuICB9KSxcbiAgbWFpbjogXCIvQXBwLnRzeFwiLFxuICBlbnZpcm9ubWVudDogXCJub2RlXCJcbn07XG5cbnZhciBWSVRFX1JFQUNUX1RFTVBMQVRFID0ge1xuICBmaWxlczogX19hc3NpZ24oX19hc3NpZ24oe30sIGNvbW1vbkZpbGVzKSwge1xuICAgIFwiL0FwcC5qc3hcIjoge1xuICAgICAgY29kZTogXCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBBcHAoKSB7XFxuICBjb25zdCBkYXRhID0gXFxcIndvcmxkXFxcIlxcblxcbiAgcmV0dXJuIDxoMT5IZWxsbyB7ZGF0YX08L2gxPlxcbn1cXG5cIlxuICAgIH0sXG4gICAgXCIvaW5kZXguanN4XCI6IHtcbiAgICAgIGNvZGU6IFwiaW1wb3J0IHsgU3RyaWN0TW9kZSB9IGZyb20gXFxcInJlYWN0XFxcIjtcXG5pbXBvcnQgeyBjcmVhdGVSb290IH0gZnJvbSBcXFwicmVhY3QtZG9tL2NsaWVudFxcXCI7XFxuaW1wb3J0IFxcXCIuL3N0eWxlcy5jc3NcXFwiO1xcblxcbmltcG9ydCBBcHAgZnJvbSBcXFwiLi9BcHBcXFwiO1xcblxcbmNvbnN0IHJvb3QgPSBjcmVhdGVSb290KGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFxcXCJyb290XFxcIikpO1xcbnJvb3QucmVuZGVyKFxcbiAgPFN0cmljdE1vZGU+XFxuICAgIDxBcHAgLz5cXG4gIDwvU3RyaWN0TW9kZT5cXG4pO1wiXG4gICAgfSxcbiAgICBcIi9pbmRleC5odG1sXCI6IHtcbiAgICAgIGNvZGU6IFwiPCFET0NUWVBFIGh0bWw+XFxuPGh0bWwgbGFuZz1cXFwiZW5cXFwiPlxcbiAgPGhlYWQ+XFxuICAgIDxtZXRhIGNoYXJzZXQ9XFxcIlVURi04XFxcIiAvPlxcbiAgICA8bWV0YSBuYW1lPVxcXCJ2aWV3cG9ydFxcXCIgY29udGVudD1cXFwid2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEuMFxcXCIgLz5cXG4gICAgPHRpdGxlPlZpdGUgQXBwPC90aXRsZT5cXG4gIDwvaGVhZD5cXG4gIDxib2R5PlxcbiAgICA8ZGl2IGlkPVxcXCJyb290XFxcIj48L2Rpdj5cXG4gICAgPHNjcmlwdCB0eXBlPVxcXCJtb2R1bGVcXFwiIHNyYz1cXFwiL2luZGV4LmpzeFxcXCI+PC9zY3JpcHQ+XFxuICA8L2JvZHk+XFxuPC9odG1sPlxcblwiXG4gICAgfSxcbiAgICBcIi9wYWNrYWdlLmpzb25cIjoge1xuICAgICAgY29kZTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICBzY3JpcHRzOiB7XG4gICAgICAgICAgZGV2OiBcInZpdGVcIixcbiAgICAgICAgICBidWlsZDogXCJ2aXRlIGJ1aWxkXCIsXG4gICAgICAgICAgcHJldmlldzogXCJ2aXRlIHByZXZpZXdcIlxuICAgICAgICB9LFxuICAgICAgICBkZXBlbmRlbmNpZXM6IHtcbiAgICAgICAgICByZWFjdDogXCJeMTguMi4wXCIsXG4gICAgICAgICAgXCJyZWFjdC1kb21cIjogXCJeMTguMi4wXCJcbiAgICAgICAgfSxcbiAgICAgICAgZGV2RGVwZW5kZW5jaWVzOiB7XG4gICAgICAgICAgXCJAdml0ZWpzL3BsdWdpbi1yZWFjdFwiOiBcIjMuMS4wXCIsXG4gICAgICAgICAgdml0ZTogXCI0LjEuNFwiLFxuICAgICAgICAgIFwiZXNidWlsZC13YXNtXCI6IFwiMC4xNy4xMlwiXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSxcbiAgICBcIi92aXRlLmNvbmZpZy5qc1wiOiB7XG4gICAgICBjb2RlOiBcImltcG9ydCB7IGRlZmluZUNvbmZpZyB9IGZyb20gXFxcInZpdGVcXFwiO1xcbmltcG9ydCByZWFjdCBmcm9tIFxcXCJAdml0ZWpzL3BsdWdpbi1yZWFjdFxcXCI7XFxuXFxuLy8gaHR0cHM6Ly92aXRlanMuZGV2L2NvbmZpZy9cXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb25maWcoe1xcbiAgcGx1Z2luczogW3JlYWN0KCldLFxcbn0pO1xcblwiXG4gICAgfVxuICB9KSxcbiAgbWFpbjogXCIvQXBwLmpzeFwiLFxuICBlbnZpcm9ubWVudDogXCJub2RlXCJcbn07XG5cbnZhciBWSVRFX1JFQUNUX1RTX1RFTVBMQVRFID0ge1xuICBmaWxlczogX19hc3NpZ24oX19hc3NpZ24oe30sIGNvbW1vbkZpbGVzKSwge1xuICAgIFwiL0FwcC50c3hcIjoge1xuICAgICAgY29kZTogXCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBBcHAoKSB7XFxuICBjb25zdCBkYXRhOiBzdHJpbmcgPSBcXFwid29ybGRcXFwiXFxuXFxuICByZXR1cm4gPGgxPkhlbGxvIHtkYXRhfTwvaDE+XFxufVxcblwiXG4gICAgfSxcbiAgICBcIi9pbmRleC50c3hcIjoge1xuICAgICAgY29kZTogXCJpbXBvcnQgeyBTdHJpY3RNb2RlIH0gZnJvbSBcXFwicmVhY3RcXFwiO1xcbmltcG9ydCB7IGNyZWF0ZVJvb3QgfSBmcm9tIFxcXCJyZWFjdC1kb20vY2xpZW50XFxcIjtcXG5pbXBvcnQgXFxcIi4vc3R5bGVzLmNzc1xcXCI7XFxuXFxuaW1wb3J0IEFwcCBmcm9tIFxcXCIuL0FwcFxcXCI7XFxuaW1wb3J0IFJlYWN0IGZyb20gXFxcInJlYWN0XFxcIjtcXG5cXG5jb25zdCByb290ID0gY3JlYXRlUm9vdChkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcXFwicm9vdFxcXCIpIGFzIEhUTUxFbGVtZW50KTtcXG5yb290LnJlbmRlcihcXG4gIDxTdHJpY3RNb2RlPlxcbiAgICA8QXBwIC8+XFxuICA8L1N0cmljdE1vZGU+XFxuKTtcXG5cIlxuICAgIH0sXG4gICAgXCIvaW5kZXguaHRtbFwiOiB7XG4gICAgICBjb2RlOiBcIjwhRE9DVFlQRSBodG1sPlxcbjxodG1sIGxhbmc9XFxcImVuXFxcIj5cXG4gIDxoZWFkPlxcbiAgICA8bWV0YSBjaGFyc2V0PVxcXCJVVEYtOFxcXCIgLz5cXG4gICAgPG1ldGEgbmFtZT1cXFwidmlld3BvcnRcXFwiIGNvbnRlbnQ9XFxcIndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xLjBcXFwiIC8+XFxuICAgIDx0aXRsZT5WaXRlIEFwcDwvdGl0bGU+XFxuICA8L2hlYWQ+XFxuICA8Ym9keT5cXG4gICAgPGRpdiBpZD1cXFwicm9vdFxcXCI+PC9kaXY+XFxuICAgIDxzY3JpcHQgdHlwZT1cXFwibW9kdWxlXFxcIiBzcmM9XFxcIi9pbmRleC50c3hcXFwiPjwvc2NyaXB0PlxcbiAgPC9ib2R5PlxcbjwvaHRtbD5cXG5cIlxuICAgIH0sXG4gICAgXCIvdHNjb25maWcuanNvblwiOiB7XG4gICAgICBjb2RlOiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIGNvbXBpbGVyT3B0aW9uczoge1xuICAgICAgICAgIHRhcmdldDogXCJFU05leHRcIixcbiAgICAgICAgICB1c2VEZWZpbmVGb3JDbGFzc0ZpZWxkczogdHJ1ZSxcbiAgICAgICAgICBsaWI6IFtcIkRPTVwiLCBcIkRPTS5JdGVyYWJsZVwiLCBcIkVTTmV4dFwiXSxcbiAgICAgICAgICBhbGxvd0pzOiBmYWxzZSxcbiAgICAgICAgICBza2lwTGliQ2hlY2s6IHRydWUsXG4gICAgICAgICAgZXNNb2R1bGVJbnRlcm9wOiBmYWxzZSxcbiAgICAgICAgICBhbGxvd1N5bnRoZXRpY0RlZmF1bHRJbXBvcnRzOiB0cnVlLFxuICAgICAgICAgIHN0cmljdDogdHJ1ZSxcbiAgICAgICAgICBmb3JjZUNvbnNpc3RlbnRDYXNpbmdJbkZpbGVOYW1lczogdHJ1ZSxcbiAgICAgICAgICBtb2R1bGU6IFwiRVNOZXh0XCIsXG4gICAgICAgICAgbW9kdWxlUmVzb2x1dGlvbjogXCJOb2RlXCIsXG4gICAgICAgICAgcmVzb2x2ZUpzb25Nb2R1bGU6IHRydWUsXG4gICAgICAgICAgaXNvbGF0ZWRNb2R1bGVzOiB0cnVlLFxuICAgICAgICAgIG5vRW1pdDogdHJ1ZSxcbiAgICAgICAgICBqc3g6IFwicmVhY3QtanN4XCJcbiAgICAgICAgfSxcbiAgICAgICAgaW5jbHVkZTogW1wic3JjXCJdLFxuICAgICAgICByZWZlcmVuY2VzOiBbe1xuICAgICAgICAgIHBhdGg6IFwiLi90c2NvbmZpZy5ub2RlLmpzb25cIlxuICAgICAgICB9XVxuICAgICAgfSwgbnVsbCwgMilcbiAgICB9LFxuICAgIFwiL3RzY29uZmlnLm5vZGUuanNvblwiOiB7XG4gICAgICBjb2RlOiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIGNvbXBpbGVyT3B0aW9uczoge1xuICAgICAgICAgIGNvbXBvc2l0ZTogdHJ1ZSxcbiAgICAgICAgICBtb2R1bGU6IFwiRVNOZXh0XCIsXG4gICAgICAgICAgbW9kdWxlUmVzb2x1dGlvbjogXCJOb2RlXCIsXG4gICAgICAgICAgYWxsb3dTeW50aGV0aWNEZWZhdWx0SW1wb3J0czogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICBpbmNsdWRlOiBbXCJ2aXRlLmNvbmZpZy50c1wiXVxuICAgICAgfSwgbnVsbCwgMilcbiAgICB9LFxuICAgIFwiL3BhY2thZ2UuanNvblwiOiB7XG4gICAgICBjb2RlOiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIHNjcmlwdHM6IHtcbiAgICAgICAgICBkZXY6IFwidml0ZVwiLFxuICAgICAgICAgIGJ1aWxkOiBcInRzYyAmJiB2aXRlIGJ1aWxkXCIsXG4gICAgICAgICAgcHJldmlldzogXCJ2aXRlIHByZXZpZXdcIlxuICAgICAgICB9LFxuICAgICAgICBkZXBlbmRlbmNpZXM6IHtcbiAgICAgICAgICByZWFjdDogXCJeMTguMi4wXCIsXG4gICAgICAgICAgXCJyZWFjdC1kb21cIjogXCJeMTguMi4wXCJcbiAgICAgICAgfSxcbiAgICAgICAgZGV2RGVwZW5kZW5jaWVzOiB7XG4gICAgICAgICAgXCJAdHlwZXMvcmVhY3RcIjogXCJeMTguMC4yOFwiLFxuICAgICAgICAgIFwiQHR5cGVzL3JlYWN0LWRvbVwiOiBcIl4xOC4wLjExXCIsXG4gICAgICAgICAgXCJAdml0ZWpzL3BsdWdpbi1yZWFjdFwiOiBcIl4zLjEuMFwiLFxuICAgICAgICAgIHR5cGVzY3JpcHQ6IFwiXjQuOS41XCIsXG4gICAgICAgICAgdml0ZTogXCI0LjEuNFwiLFxuICAgICAgICAgIFwiZXNidWlsZC13YXNtXCI6IFwiXjAuMTcuMTJcIlxuICAgICAgICB9XG4gICAgICB9LCBudWxsLCAyKVxuICAgIH0sXG4gICAgXCIvdml0ZS1lbnYuZC50c1wiOiB7XG4gICAgICBjb2RlOiAnLy8vIDxyZWZlcmVuY2UgdHlwZXM9XCJ2aXRlL2NsaWVudFwiIC8+J1xuICAgIH0sXG4gICAgXCIvdml0ZS5jb25maWcudHNcIjoge1xuICAgICAgY29kZTogXCJpbXBvcnQgeyBkZWZpbmVDb25maWcgfSBmcm9tICd2aXRlJ1xcbmltcG9ydCByZWFjdCBmcm9tICdAdml0ZWpzL3BsdWdpbi1yZWFjdCdcXG5cXG4vLyBodHRwczovL3ZpdGVqcy5kZXYvY29uZmlnL1xcbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbmZpZyh7XFxuICBwbHVnaW5zOiBbcmVhY3QoKV0sXFxufSlcXG5cIlxuICAgIH1cbiAgfSksXG4gIG1haW46IFwiL0FwcC50c3hcIixcbiAgZW52aXJvbm1lbnQ6IFwibm9kZVwiXG59O1xuXG52YXIgVklURV9TVkVMVEVfVEVNUExBVEUgPSB7XG4gIGZpbGVzOiB7XG4gICAgXCIvc3JjL3N0eWxlcy5jc3NcIjogY29tbW9uRmlsZXNbXCIvc3R5bGVzLmNzc1wiXSxcbiAgICBcIi9zcmMvQXBwLnN2ZWx0ZVwiOiB7XG4gICAgICBjb2RlOiBcIjxzY3JpcHQ+XFxuY29uc3QgZGF0YSA9IFxcXCJ3b3JsZFxcXCI7XFxuPC9zY3JpcHQ+XFxuXFxuPGgxPkhlbGxvIHtkYXRhfTwvaDE+XFxuXFxuPHN0eWxlPlxcbmgxIHtcXG4gIGZvbnQtc2l6ZTogMS41cmVtO1xcbn1cXG48L3N0eWxlPlwiXG4gICAgfSxcbiAgICBcIi9zcmMvbWFpbi5qc1wiOiB7XG4gICAgICBjb2RlOiBcImltcG9ydCBBcHAgZnJvbSAnLi9BcHAuc3ZlbHRlJ1xcbmltcG9ydCBcXFwiLi9zdHlsZXMuY3NzXFxcIlxcblxcbmNvbnN0IGFwcCA9IG5ldyBBcHAoe1xcbiAgdGFyZ2V0OiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYXBwJyksXFxufSlcXG5cXG5leHBvcnQgZGVmYXVsdCBhcHBcIlxuICAgIH0sXG4gICAgXCIvaW5kZXguaHRtbFwiOiB7XG4gICAgICBjb2RlOiBcIjwhRE9DVFlQRSBodG1sPlxcbjxodG1sIGxhbmc9XFxcImVuXFxcIj5cXG4gIDxoZWFkPlxcbiAgICA8bWV0YSBjaGFyc2V0PVxcXCJVVEYtOFxcXCIgLz5cXG4gICAgPG1ldGEgbmFtZT1cXFwidmlld3BvcnRcXFwiIGNvbnRlbnQ9XFxcIndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xLjBcXFwiIC8+XFxuICAgIDx0aXRsZT5WaXRlIEFwcDwvdGl0bGU+XFxuICA8L2hlYWQ+XFxuICA8Ym9keT5cXG4gICAgPGRpdiBpZD1cXFwiYXBwXFxcIj48L2Rpdj5cXG4gICAgPHNjcmlwdCB0eXBlPVxcXCJtb2R1bGVcXFwiIHNyYz1cXFwiL3NyYy9tYWluLmpzXFxcIj48L3NjcmlwdD5cXG4gIDwvYm9keT5cXG48L2h0bWw+XFxuXCJcbiAgICB9LFxuICAgIFwiL3ZpdGUuY29uZmlnLmpzXCI6IHtcbiAgICAgIGNvZGU6IFwiaW1wb3J0IHsgZGVmaW5lQ29uZmlnIH0gZnJvbSAndml0ZSdcXG5pbXBvcnQgeyBzdmVsdGUgfSBmcm9tICdAc3ZlbHRlanMvdml0ZS1wbHVnaW4tc3ZlbHRlJ1xcblxcbi8vIGh0dHBzOi8vdml0ZWpzLmRldi9jb25maWcvXFxuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29uZmlnKHtcXG4gIHBsdWdpbnM6IFtzdmVsdGUoKV0sXFxufSlcIlxuICAgIH0sXG4gICAgXCIvcGFja2FnZS5qc29uXCI6IHtcbiAgICAgIGNvZGU6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgdHlwZTogXCJtb2R1bGVcIixcbiAgICAgICAgc2NyaXB0czoge1xuICAgICAgICAgIGRldjogXCJ2aXRlXCJcbiAgICAgICAgfSxcbiAgICAgICAgZGV2RGVwZW5kZW5jaWVzOiB7XG4gICAgICAgICAgXCJAc3ZlbHRlanMvdml0ZS1wbHVnaW4tc3ZlbHRlXCI6IFwiXjIuMC4yXCIsXG4gICAgICAgICAgc3ZlbHRlOiBcIl4zLjU1LjFcIixcbiAgICAgICAgICB2aXRlOiBcIjQuMC40XCIsXG4gICAgICAgICAgXCJlc2J1aWxkLXdhc21cIjogXCJeMC4xNy4xMlwiXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfVxuICB9LFxuICBtYWluOiBcIi9zcmMvQXBwLnN2ZWx0ZVwiLFxuICBlbnZpcm9ubWVudDogXCJub2RlXCJcbn07XG5cbnZhciBWSVRFX1NWRUxURV9UU19URU1QTEFURSA9IHtcbiAgZmlsZXM6IHtcbiAgICBcIi9zcmMvc3R5bGVzLmNzc1wiOiBjb21tb25GaWxlc1tcIi9zdHlsZXMuY3NzXCJdLFxuICAgIFwiL3NyYy9BcHAuc3ZlbHRlXCI6IHtcbiAgICAgIGNvZGU6IFwiPHNjcmlwdCBsYW5nPVxcXCJ0c1xcXCI+XFxuY29uc3QgZGF0YTogc3RyaW5nID0gXFxcIndvcmxkXFxcIjtcXG48L3NjcmlwdD5cXG5cXG48aDE+SGVsbG8ge2RhdGF9PC9oMT5cXG5cXG48c3R5bGU+XFxuaDEge1xcbiAgZm9udC1zaXplOiAxLjVyZW07XFxufVxcbjwvc3R5bGU+XCJcbiAgICB9LFxuICAgIFwiL3NyYy9tYWluLnRzXCI6IHtcbiAgICAgIGNvZGU6IFwiaW1wb3J0IEFwcCBmcm9tICcuL0FwcC5zdmVsdGUnXFxuaW1wb3J0IFxcXCIuL3N0eWxlcy5jc3NcXFwiXFxuXFxuY29uc3QgYXBwID0gbmV3IEFwcCh7XFxuICB0YXJnZXQ6IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhcHAnKSxcXG59KVxcblxcbmV4cG9ydCBkZWZhdWx0IGFwcFwiXG4gICAgfSxcbiAgICBcIi9pbmRleC5odG1sXCI6IHtcbiAgICAgIGNvZGU6IFwiPCFET0NUWVBFIGh0bWw+XFxuPGh0bWwgbGFuZz1cXFwiZW5cXFwiPlxcbiAgPGhlYWQ+XFxuICAgIDxtZXRhIGNoYXJzZXQ9XFxcIlVURi04XFxcIiAvPlxcbiAgICA8bWV0YSBuYW1lPVxcXCJ2aWV3cG9ydFxcXCIgY29udGVudD1cXFwid2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEuMFxcXCIgLz5cXG4gICAgPHRpdGxlPlZpdGUgQXBwPC90aXRsZT5cXG4gIDwvaGVhZD5cXG4gIDxib2R5PlxcbiAgICA8ZGl2IGlkPVxcXCJhcHBcXFwiPjwvZGl2PlxcbiAgICA8c2NyaXB0IHR5cGU9XFxcIm1vZHVsZVxcXCIgc3JjPVxcXCIvc3JjL21haW4udHNcXFwiPjwvc2NyaXB0PlxcbiAgPC9ib2R5PlxcbjwvaHRtbD5cXG5cIlxuICAgIH0sXG4gICAgXCIvdml0ZS1lbnYuZC50c1wiOiB7XG4gICAgICBjb2RlOiBcIi8vLyA8cmVmZXJlbmNlIHR5cGVzPVxcXCJzdmVsdGVcXFwiIC8+XFxuLy8vIDxyZWZlcmVuY2UgdHlwZXM9XFxcInZpdGUvY2xpZW50XFxcIiAvPlwiXG4gICAgfSxcbiAgICBcInN2ZWx0ZS5jb25maWcuanNcIjoge1xuICAgICAgY29kZTogXCJpbXBvcnQgeyB2aXRlUHJlcHJvY2VzcyB9IGZyb20gJ0BzdmVsdGVqcy92aXRlLXBsdWdpbi1zdmVsdGUnXFxuXFxuZXhwb3J0IGRlZmF1bHQge1xcbiAgLy8gQ29uc3VsdCBodHRwczovL3N2ZWx0ZS5kZXYvZG9jcyNjb21waWxlLXRpbWUtc3ZlbHRlLXByZXByb2Nlc3NcXG4gIC8vIGZvciBtb3JlIGluZm9ybWF0aW9uIGFib3V0IHByZXByb2Nlc3NvcnNcXG4gIHByZXByb2Nlc3M6IHZpdGVQcmVwcm9jZXNzKCksXFxufVxcblwiXG4gICAgfSxcbiAgICBcIi92aXRlLmNvbmZpZy50c1wiOiB7XG4gICAgICBjb2RlOiBcImltcG9ydCB7IGRlZmluZUNvbmZpZyB9IGZyb20gJ3ZpdGUnXFxuaW1wb3J0IHsgc3ZlbHRlIH0gZnJvbSAnQHN2ZWx0ZWpzL3ZpdGUtcGx1Z2luLXN2ZWx0ZSdcXG5cXG4vLyBodHRwczovL3ZpdGVqcy5kZXYvY29uZmlnL1xcbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbmZpZyh7XFxuICBwbHVnaW5zOiBbc3ZlbHRlKCldLFxcbn0pXCJcbiAgICB9LFxuICAgIFwidHNjb25maWcuanNvblwiOiB7XG4gICAgICBjb2RlOiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIGV4dGVuZHM6IFwiQHRzY29uZmlnL3N2ZWx0ZS90c2NvbmZpZy5qc29uXCIsXG4gICAgICAgIGNvbXBpbGVyT3B0aW9uczoge1xuICAgICAgICAgIHRhcmdldDogXCJFU05leHRcIixcbiAgICAgICAgICB1c2VEZWZpbmVGb3JDbGFzc0ZpZWxkczogdHJ1ZSxcbiAgICAgICAgICBtb2R1bGU6IFwiRVNOZXh0XCIsXG4gICAgICAgICAgcmVzb2x2ZUpzb25Nb2R1bGU6IHRydWUsXG4gICAgICAgICAgYWxsb3dKczogdHJ1ZSxcbiAgICAgICAgICBjaGVja0pzOiB0cnVlLFxuICAgICAgICAgIGlzb2xhdGVkTW9kdWxlczogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICBpbmNsdWRlOiBbXCJzcmMvKiovKi5kLnRzXCIsIFwic3JjLyoqLyoudHNcIiwgXCJzcmMvKiovKi5qc1wiLCBcInNyYy8qKi8qLnN2ZWx0ZVwiXSxcbiAgICAgICAgcmVmZXJlbmNlczogW3tcbiAgICAgICAgICBwYXRoOiBcIi4vdHNjb25maWcubm9kZS5qc29uXCJcbiAgICAgICAgfV1cbiAgICAgIH0sIG51bGwsIDIpXG4gICAgfSxcbiAgICBcInRzY29uZmlnLm5vZGUuanNvblwiOiB7XG4gICAgICBjb2RlOiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIGNvbXBpbGVyT3B0aW9uczoge1xuICAgICAgICAgIGNvbXBvc2l0ZTogdHJ1ZSxcbiAgICAgICAgICBtb2R1bGU6IFwiRVNOZXh0XCIsXG4gICAgICAgICAgbW9kdWxlUmVzb2x1dGlvbjogXCJOb2RlXCJcbiAgICAgICAgfSxcbiAgICAgICAgaW5jbHVkZTogW1widml0ZS5jb25maWcudHNcIl1cbiAgICAgIH0sIG51bGwsIDIpXG4gICAgfSxcbiAgICBcIi9wYWNrYWdlLmpzb25cIjoge1xuICAgICAgY29kZTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICB0eXBlOiBcIm1vZHVsZVwiLFxuICAgICAgICBzY3JpcHRzOiB7XG4gICAgICAgICAgZGV2OiBcInZpdGVcIlxuICAgICAgICB9LFxuICAgICAgICBkZXZEZXBlbmRlbmNpZXM6IHtcbiAgICAgICAgICBcIkBzdmVsdGVqcy92aXRlLXBsdWdpbi1zdmVsdGVcIjogXCJeMi4wLjJcIixcbiAgICAgICAgICBcIkB0c2NvbmZpZy9zdmVsdGVcIjogXCJeMy4wLjBcIixcbiAgICAgICAgICBzdmVsdGU6IFwiXjMuNTUuMVwiLFxuICAgICAgICAgIFwic3ZlbHRlLWNoZWNrXCI6IFwiXjIuMTAuM1wiLFxuICAgICAgICAgIHRzbGliOiBcIl4yLjUuMFwiLFxuICAgICAgICAgIHZpdGU6IFwiNC4xLjRcIixcbiAgICAgICAgICBcImVzYnVpbGQtd2FzbVwiOiBcIl4wLjE3LjEyXCJcbiAgICAgICAgfVxuICAgICAgfSwgbnVsbCwgMilcbiAgICB9XG4gIH0sXG4gIG1haW46IFwiL3NyYy9BcHAuc3ZlbHRlXCIsXG4gIGVudmlyb25tZW50OiBcIm5vZGVcIlxufTtcblxudmFyIFZJVEVfVlVFX1RFTVBMQVRFID0ge1xuICBmaWxlczoge1xuICAgIFwiL3NyYy9zdHlsZXMuY3NzXCI6IGNvbW1vbkZpbGVzW1wiL3N0eWxlcy5jc3NcIl0sXG4gICAgXCIvc3JjL0FwcC52dWVcIjoge1xuICAgICAgY29kZTogXCI8c2NyaXB0IHNldHVwPlxcbmltcG9ydCB7IHJlZiB9IGZyb20gXFxcInZ1ZVxcXCI7XFxuXFxuY29uc3QgZGF0YSA9IHJlZihcXFwid29ybGRcXFwiKTtcXG48L3NjcmlwdD5cXG5cXG48dGVtcGxhdGU+XFxuICA8aDE+SGVsbG8ge3sgZGF0YSB9fTwvaDE+XFxuPC90ZW1wbGF0ZT5cXG5cXG48c3R5bGU+XFxuaDEge1xcbiAgZm9udC1zaXplOiAxLjVyZW07XFxufVxcbjwvc3R5bGU+XCJcbiAgICB9LFxuICAgIFwiL3NyYy9tYWluLmpzXCI6IHtcbiAgICAgIGNvZGU6IFwiaW1wb3J0IHsgY3JlYXRlQXBwIH0gZnJvbSAndnVlJ1xcbmltcG9ydCBBcHAgZnJvbSAnLi9BcHAudnVlJ1xcbmltcG9ydCBcXFwiLi9zdHlsZXMuY3NzXFxcIlxcbiAgICAgICAgICAgIFxcbmNyZWF0ZUFwcChBcHApLm1vdW50KCcjYXBwJykgICAgICAgICAgICBcXG5cIlxuICAgIH0sXG4gICAgXCIvaW5kZXguaHRtbFwiOiB7XG4gICAgICBjb2RlOiBcIjwhRE9DVFlQRSBodG1sPlxcbjxodG1sIGxhbmc9XFxcImVuXFxcIj5cXG4gIDxoZWFkPlxcbiAgICA8bWV0YSBjaGFyc2V0PVxcXCJVVEYtOFxcXCIgLz5cXG4gICAgPG1ldGEgbmFtZT1cXFwidmlld3BvcnRcXFwiIGNvbnRlbnQ9XFxcIndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xLjBcXFwiIC8+XFxuICAgIDx0aXRsZT5WaXRlIEFwcDwvdGl0bGU+XFxuICA8L2hlYWQ+XFxuICA8Ym9keT5cXG4gICAgPGRpdiBpZD1cXFwiYXBwXFxcIj48L2Rpdj5cXG4gICAgPHNjcmlwdCB0eXBlPVxcXCJtb2R1bGVcXFwiIHNyYz1cXFwiL3NyYy9tYWluLmpzXFxcIj48L3NjcmlwdD5cXG4gIDwvYm9keT5cXG48L2h0bWw+XFxuXCJcbiAgICB9LFxuICAgIFwiL3ZpdGUuY29uZmlnLmpzXCI6IHtcbiAgICAgIGNvZGU6IFwiaW1wb3J0IHsgZGVmaW5lQ29uZmlnIH0gZnJvbSAndml0ZSdcXG5pbXBvcnQgdnVlIGZyb20gJ0B2aXRlanMvcGx1Z2luLXZ1ZSdcXG5cXG4vLyBodHRwczovL3ZpdGVqcy5kZXYvY29uZmlnL1xcbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbmZpZyh7XFxuICBwbHVnaW5zOiBbdnVlKCldXFxufSlcXG5cIlxuICAgIH0sXG4gICAgXCIvcGFja2FnZS5qc29uXCI6IHtcbiAgICAgIGNvZGU6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgc2NyaXB0czoge1xuICAgICAgICAgIGRldjogXCJ2aXRlXCIsXG4gICAgICAgICAgYnVpbGQ6IFwidml0ZSBidWlsZFwiLFxuICAgICAgICAgIHByZXZpZXc6IFwidml0ZSBwcmV2aWV3XCJcbiAgICAgICAgfSxcbiAgICAgICAgZGVwZW5kZW5jaWVzOiB7XG4gICAgICAgICAgdnVlOiBcIl4zLjIuNDVcIlxuICAgICAgICB9LFxuICAgICAgICBkZXZEZXBlbmRlbmNpZXM6IHtcbiAgICAgICAgICBcIkB2aXRlanMvcGx1Z2luLXZ1ZVwiOiBcIjMuMi4wXCIsXG4gICAgICAgICAgdml0ZTogXCI0LjEuNFwiLFxuICAgICAgICAgIFwiZXNidWlsZC13YXNtXCI6IFwiMC4xNy4xMlwiXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfVxuICB9LFxuICBtYWluOiBcIi9zcmMvQXBwLnZ1ZVwiLFxuICBlbnZpcm9ubWVudDogXCJub2RlXCJcbn07XG5cbnZhciBWSVRFX1ZVRV9UU19URU1QTEFURSA9IHtcbiAgZmlsZXM6IHtcbiAgICBcIi9zcmMvc3R5bGVzLmNzc1wiOiBjb21tb25GaWxlc1tcIi9zdHlsZXMuY3NzXCJdLFxuICAgIFwiL3NyYy9BcHAudnVlXCI6IHtcbiAgICAgIGNvZGU6IFwiPHNjcmlwdCBzZXR1cCBsYW5nPVxcXCJ0c1xcXCI+XFxuaW1wb3J0IHsgcmVmIH0gZnJvbSBcXFwidnVlXFxcIjtcXG5cXG5jb25zdCBkYXRhID0gcmVmPHN0cmluZz4oXFxcIndvcmxkXFxcIik7XFxuPC9zY3JpcHQ+XFxuXFxuPHRlbXBsYXRlPlxcbiAgPGgxPkhlbGxvIHt7IGRhdGEgfX08L2gxPlxcbjwvdGVtcGxhdGU+XFxuXFxuPHN0eWxlPlxcbmgxIHtcXG4gIGZvbnQtc2l6ZTogMS41cmVtO1xcbn1cXG48L3N0eWxlPlwiXG4gICAgfSxcbiAgICBcIi9zcmMvbWFpbi50c1wiOiB7XG4gICAgICBjb2RlOiBcImltcG9ydCB7IGNyZWF0ZUFwcCB9IGZyb20gJ3Z1ZSdcXG5pbXBvcnQgQXBwIGZyb20gJy4vQXBwLnZ1ZSdcXG5pbXBvcnQgXFxcIi4vc3R5bGVzLmNzc1xcXCJcXG5cXG5jcmVhdGVBcHAoQXBwKS5tb3VudCgnI2FwcCcpXFxuXCJcbiAgICB9LFxuICAgIFwiL2luZGV4Lmh0bWxcIjoge1xuICAgICAgY29kZTogXCI8IURPQ1RZUEUgaHRtbD5cXG48aHRtbCBsYW5nPVxcXCJlblxcXCI+XFxuICA8aGVhZD5cXG4gICAgPG1ldGEgY2hhcnNldD1cXFwiVVRGLThcXFwiIC8+XFxuICAgIDxtZXRhIG5hbWU9XFxcInZpZXdwb3J0XFxcIiBjb250ZW50PVxcXCJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wXFxcIiAvPlxcbiAgICA8dGl0bGU+Vml0ZSBBcHA8L3RpdGxlPlxcbiAgPC9oZWFkPlxcbiAgPGJvZHk+XFxuICAgIDxkaXYgaWQ9XFxcImFwcFxcXCI+PC9kaXY+XFxuICAgIDxzY3JpcHQgdHlwZT1cXFwibW9kdWxlXFxcIiBzcmM9XFxcIi9zcmMvbWFpbi50c1xcXCI+PC9zY3JpcHQ+XFxuICA8L2JvZHk+XFxuPC9odG1sPlxcblwiXG4gICAgfSxcbiAgICBcIi92aXRlLWVudi5kLnRzXCI6IHtcbiAgICAgIGNvZGU6ICcvLy8gPHJlZmVyZW5jZSB0eXBlcz1cInZpdGUvY2xpZW50XCIgLz4nXG4gICAgfSxcbiAgICBcIi92aXRlLmNvbmZpZy50c1wiOiB7XG4gICAgICBjb2RlOiBcImltcG9ydCB7IGRlZmluZUNvbmZpZyB9IGZyb20gJ3ZpdGUnXFxuaW1wb3J0IHZ1ZSBmcm9tICdAdml0ZWpzL3BsdWdpbi12dWUnXFxuXFxuLy8gaHR0cHM6Ly92aXRlanMuZGV2L2NvbmZpZy9cXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb25maWcoe1xcbiAgcGx1Z2luczogW3Z1ZSgpXVxcbn0pXFxuXCJcbiAgICB9LFxuICAgIFwidHNjb25maWcuanNvblwiOiB7XG4gICAgICBjb2RlOiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIGNvbXBpbGVyT3B0aW9uczoge1xuICAgICAgICAgIHRhcmdldDogXCJFU05leHRcIixcbiAgICAgICAgICB1c2VEZWZpbmVGb3JDbGFzc0ZpZWxkczogdHJ1ZSxcbiAgICAgICAgICBtb2R1bGU6IFwiRVNOZXh0XCIsXG4gICAgICAgICAgbW9kdWxlUmVzb2x1dGlvbjogXCJOb2RlXCIsXG4gICAgICAgICAgc3RyaWN0OiB0cnVlLFxuICAgICAgICAgIGpzeDogXCJwcmVzZXJ2ZVwiLFxuICAgICAgICAgIHJlc29sdmVKc29uTW9kdWxlOiB0cnVlLFxuICAgICAgICAgIGlzb2xhdGVkTW9kdWxlczogdHJ1ZSxcbiAgICAgICAgICBlc01vZHVsZUludGVyb3A6IHRydWUsXG4gICAgICAgICAgbGliOiBbXCJFU05leHRcIiwgXCJET01cIl0sXG4gICAgICAgICAgc2tpcExpYkNoZWNrOiB0cnVlLFxuICAgICAgICAgIG5vRW1pdDogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICBpbmNsdWRlOiBbXCJzcmMvKiovKi50c1wiLCBcInNyYy8qKi8qLmQudHNcIiwgXCJzcmMvKiovKi50c3hcIiwgXCJzcmMvKiovKi52dWVcIl0sXG4gICAgICAgIHJlZmVyZW5jZXM6IFt7XG4gICAgICAgICAgcGF0aDogXCIuL3RzY29uZmlnLm5vZGUuanNvblwiXG4gICAgICAgIH1dXG4gICAgICB9LCBudWxsLCAyKVxuICAgIH0sXG4gICAgXCJ0c2NvbmZpZy5ub2RlLmpzb25cIjoge1xuICAgICAgY29kZTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICBjb21waWxlck9wdGlvbnM6IHtcbiAgICAgICAgICBjb21wb3NpdGU6IHRydWUsXG4gICAgICAgICAgbW9kdWxlOiBcIkVTTmV4dFwiLFxuICAgICAgICAgIG1vZHVsZVJlc29sdXRpb246IFwiTm9kZVwiLFxuICAgICAgICAgIGFsbG93U3ludGhldGljRGVmYXVsdEltcG9ydHM6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAgaW5jbHVkZTogW1widml0ZS5jb25maWcudHNcIl1cbiAgICAgIH0sIG51bGwsIDIpXG4gICAgfSxcbiAgICBcIi9wYWNrYWdlLmpzb25cIjoge1xuICAgICAgY29kZTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICBzY3JpcHRzOiB7XG4gICAgICAgICAgZGV2OiBcInZpdGVcIixcbiAgICAgICAgICBidWlsZDogXCJ0c2MgJiYgdml0ZSBidWlsZFwiLFxuICAgICAgICAgIHByZXZpZXc6IFwidml0ZSBwcmV2aWV3XCJcbiAgICAgICAgfSxcbiAgICAgICAgZGVwZW5kZW5jaWVzOiB7XG4gICAgICAgICAgdnVlOiBcIl4zLjIuNDdcIlxuICAgICAgICB9LFxuICAgICAgICBkZXZEZXBlbmRlbmNpZXM6IHtcbiAgICAgICAgICBcIkB2aXRlanMvcGx1Z2luLXZ1ZVwiOiBcIl40LjAuMFwiLFxuICAgICAgICAgIHZpdGU6IFwiNC4xLjRcIixcbiAgICAgICAgICBcInZ1ZS10c2NcIjogXCJeMS4yLjBcIixcbiAgICAgICAgICB0eXBlc2NyaXB0OiBcIl40LjkuNVwiLFxuICAgICAgICAgIFwiZXNidWlsZC13YXNtXCI6IFwiXjAuMTcuMTJcIlxuICAgICAgICB9XG4gICAgICB9LCBudWxsLCAyKVxuICAgIH1cbiAgfSxcbiAgbWFpbjogXCIvc3JjL0FwcC52dWVcIixcbiAgZW52aXJvbm1lbnQ6IFwibm9kZVwiXG59O1xuXG52YXIgQU5HVUxBUl9URU1QTEFURSA9IHtcbiAgZmlsZXM6IHtcbiAgICBcIi9zcmMvYXBwL2FwcC5jb21wb25lbnQuY3NzXCI6IGNvbW1vbkZpbGVzW1wiL3N0eWxlcy5jc3NcIl0sXG4gICAgXCIvc3JjL2FwcC9hcHAuY29tcG9uZW50Lmh0bWxcIjoge1xuICAgICAgY29kZTogXCI8ZGl2PlxcbjxoMT57eyBoZWxsb1dvcmxkIH19PC9oMT5cXG48L2Rpdj4gICAgIFxcblwiXG4gICAgfSxcbiAgICBcIi9zcmMvYXBwL2FwcC5jb21wb25lbnQudHNcIjoge1xuICAgICAgY29kZTogXCJpbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tIFxcXCJAYW5ndWxhci9jb3JlXFxcIjtcXG5cXG5AQ29tcG9uZW50KHtcXG4gIHNlbGVjdG9yOiBcXFwiYXBwLXJvb3RcXFwiLFxcbiAgdGVtcGxhdGVVcmw6IFxcXCIuL2FwcC5jb21wb25lbnQuaHRtbFxcXCIsXFxuICBzdHlsZVVybHM6IFtcXFwiLi9hcHAuY29tcG9uZW50LmNzc1xcXCJdXFxufSlcXG5leHBvcnQgY2xhc3MgQXBwQ29tcG9uZW50IHtcXG4gIGhlbGxvV29ybGQgPSBcXFwiSGVsbG8gd29ybGRcXFwiO1xcbn0gICAgICAgICAgIFxcblwiXG4gICAgfSxcbiAgICBcIi9zcmMvYXBwL2FwcC5tb2R1bGUudHNcIjoge1xuICAgICAgY29kZTogXCJpbXBvcnQgeyBCcm93c2VyTW9kdWxlIH0gZnJvbSBcXFwiQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3NlclxcXCI7XFxuaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tIFxcXCJAYW5ndWxhci9jb3JlXFxcIjtcXG4gICAgICBcXG5pbXBvcnQgeyBBcHBDb21wb25lbnQgfSBmcm9tIFxcXCIuL2FwcC5jb21wb25lbnRcXFwiO1xcbiAgICAgIFxcbkBOZ01vZHVsZSh7XFxuICBkZWNsYXJhdGlvbnM6IFtBcHBDb21wb25lbnRdLFxcbiAgaW1wb3J0czogW0Jyb3dzZXJNb2R1bGVdLFxcbiAgcHJvdmlkZXJzOiBbXSxcXG4gIGJvb3RzdHJhcDogW0FwcENvbXBvbmVudF1cXG59KVxcbmV4cG9ydCBjbGFzcyBBcHBNb2R1bGUge30gICAgICAgXFxuXCJcbiAgICB9LFxuICAgIFwiL3NyYy9pbmRleC5odG1sXCI6IHtcbiAgICAgIGNvZGU6IFwiPCFkb2N0eXBlIGh0bWw+XFxuPGh0bWwgbGFuZz1cXFwiZW5cXFwiPlxcbiAgICAgIFxcbjxoZWFkPlxcbiAgPG1ldGEgY2hhcnNldD1cXFwidXRmLThcXFwiPlxcbiAgPHRpdGxlPkFuZ3VsYXI8L3RpdGxlPlxcbiAgPGJhc2UgaHJlZj1cXFwiL1xcXCI+XFxuICAgICAgXFxuICA8bWV0YSBuYW1lPVxcXCJ2aWV3cG9ydFxcXCIgY29udGVudD1cXFwid2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTFcXFwiPlxcbiAgPGxpbmsgcmVsPVxcXCJpY29uXFxcIiB0eXBlPVxcXCJpbWFnZS94LWljb25cXFwiIGhyZWY9XFxcImZhdmljb24uaWNvXFxcIj5cXG48L2hlYWQ+XFxuICAgICAgXFxuPGJvZHk+XFxuICAgPGFwcC1yb290PjwvYXBwLXJvb3Q+XFxuPC9ib2R5PlxcbiAgICAgIFxcbjwvaHRtbD5cXG5cIlxuICAgIH0sXG4gICAgXCIvc3JjL21haW4udHNcIjoge1xuICAgICAgY29kZTogXCJpbXBvcnQgeyBlbmFibGVQcm9kTW9kZSB9IGZyb20gXFxcIkBhbmd1bGFyL2NvcmVcXFwiO1xcbmltcG9ydCB7IHBsYXRmb3JtQnJvd3NlckR5bmFtaWMgfSBmcm9tIFxcXCJAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyLWR5bmFtaWNcXFwiO1xcbiAgICAgIFxcbmltcG9ydCB7IEFwcE1vZHVsZSB9IGZyb20gXFxcIi4vYXBwL2FwcC5tb2R1bGVcXFwiOyAgICAgIFxcblxcbnBsYXRmb3JtQnJvd3NlckR5bmFtaWMoKVxcbiAgLmJvb3RzdHJhcE1vZHVsZShBcHBNb2R1bGUpXFxuICAuY2F0Y2goZXJyID0+IGNvbnNvbGUubG9nKGVycikpO1xcbiAgICAgIFxcblwiXG4gICAgfSxcbiAgICBcIi9zcmMvcG9seWZpbGxzLnRzXCI6IHtcbiAgICAgIGNvZGU6IFwiaW1wb3J0IFxcXCJjb3JlLWpzL3Byb3Bvc2Fscy9yZWZsZWN0LW1ldGFkYXRhXFxcIjsgICBcXG4gICAgICBpbXBvcnQgXFxcInpvbmUuanMvZGlzdC96b25lXFxcIjtcXG5cIlxuICAgIH0sXG4gICAgXCIvcGFja2FnZS5qc29uXCI6IHtcbiAgICAgIGNvZGU6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgZGVwZW5kZW5jaWVzOiB7XG4gICAgICAgICAgXCJAYW5ndWxhci9jb3JlXCI6IFwiXjExLjIuMFwiLFxuICAgICAgICAgIFwiQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3NlclwiOiBcIl4xMS4yLjBcIixcbiAgICAgICAgICBcIkBhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXItZHluYW1pY1wiOiBcIl4xMS4yLjBcIixcbiAgICAgICAgICBcIkBhbmd1bGFyL2NvbW1vblwiOiBcIl4xMS4yLjBcIixcbiAgICAgICAgICBcIkBhbmd1bGFyL2NvbXBpbGVyXCI6IFwiXjExLjIuMFwiLFxuICAgICAgICAgIFwiem9uZS5qc1wiOiBcIjAuMTEuM1wiLFxuICAgICAgICAgIFwiY29yZS1qc1wiOiBcIjMuOC4zXCIsXG4gICAgICAgICAgcnhqczogXCI2LjYuM1wiXG4gICAgICAgIH0sXG4gICAgICAgIG1haW46IFwiL3NyYy9tYWluLnRzXCJcbiAgICAgIH0pXG4gICAgfVxuICB9LFxuICBtYWluOiBcIi9zcmMvYXBwL2FwcC5jb21wb25lbnQudHNcIixcbiAgZW52aXJvbm1lbnQ6IFwiYW5ndWxhci1jbGlcIlxufTtcblxudmFyIFJFQUNUX1RFTVBMQVRFID0ge1xuICBmaWxlczogX19hc3NpZ24oX19hc3NpZ24oe30sIGNvbW1vbkZpbGVzKSwge1xuICAgIFwiL0FwcC5qc1wiOiB7XG4gICAgICBjb2RlOiBcImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEFwcCgpIHtcXG4gIHJldHVybiA8aDE+SGVsbG8gd29ybGQ8L2gxPlxcbn1cXG5cIlxuICAgIH0sXG4gICAgXCIvaW5kZXguanNcIjoge1xuICAgICAgY29kZTogXCJpbXBvcnQgUmVhY3QsIHsgU3RyaWN0TW9kZSB9IGZyb20gXFxcInJlYWN0XFxcIjtcXG5pbXBvcnQgeyBjcmVhdGVSb290IH0gZnJvbSBcXFwicmVhY3QtZG9tL2NsaWVudFxcXCI7XFxuaW1wb3J0IFxcXCIuL3N0eWxlcy5jc3NcXFwiO1xcblxcbmltcG9ydCBBcHAgZnJvbSBcXFwiLi9BcHBcXFwiO1xcblxcbmNvbnN0IHJvb3QgPSBjcmVhdGVSb290KGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFxcXCJyb290XFxcIikpO1xcbnJvb3QucmVuZGVyKFxcbiAgPFN0cmljdE1vZGU+XFxuICAgIDxBcHAgLz5cXG4gIDwvU3RyaWN0TW9kZT5cXG4pO1wiXG4gICAgfSxcbiAgICBcIi9wdWJsaWMvaW5kZXguaHRtbFwiOiB7XG4gICAgICBjb2RlOiBcIjwhRE9DVFlQRSBodG1sPlxcbjxodG1sIGxhbmc9XFxcImVuXFxcIj5cXG4gIDxoZWFkPlxcbiAgICA8bWV0YSBjaGFyc2V0PVxcXCJVVEYtOFxcXCI+XFxuICAgIDxtZXRhIG5hbWU9XFxcInZpZXdwb3J0XFxcIiBjb250ZW50PVxcXCJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wXFxcIj5cXG4gICAgPHRpdGxlPkRvY3VtZW50PC90aXRsZT5cXG4gIDwvaGVhZD5cXG4gIDxib2R5PlxcbiAgICA8ZGl2IGlkPVxcXCJyb290XFxcIj48L2Rpdj5cXG4gIDwvYm9keT5cXG48L2h0bWw+XCJcbiAgICB9LFxuICAgIFwiL3BhY2thZ2UuanNvblwiOiB7XG4gICAgICBjb2RlOiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIGRlcGVuZGVuY2llczoge1xuICAgICAgICAgIHJlYWN0OiBcIl4xOC4wLjBcIixcbiAgICAgICAgICBcInJlYWN0LWRvbVwiOiBcIl4xOC4wLjBcIixcbiAgICAgICAgICBcInJlYWN0LXNjcmlwdHNcIjogXCJeNS4wLjBcIlxuICAgICAgICB9LFxuICAgICAgICBtYWluOiBcIi9pbmRleC5qc1wiXG4gICAgICB9KVxuICAgIH1cbiAgfSksXG4gIG1haW46IFwiL0FwcC5qc1wiLFxuICBlbnZpcm9ubWVudDogXCJjcmVhdGUtcmVhY3QtYXBwXCJcbn07XG5cbnZhciBSRUFDVF9UWVBFU0NSSVBUX1RFTVBMQVRFID0ge1xuICBmaWxlczogX19hc3NpZ24oX19hc3NpZ24oe30sIGNvbW1vbkZpbGVzKSwge1xuICAgIFwidHNjb25maWcuanNvblwiOiB7XG4gICAgICBjb2RlOiBcIntcXG4gIFxcXCJpbmNsdWRlXFxcIjogW1xcbiAgICBcXFwiLi8qKi8qXFxcIlxcbiAgXSxcXG4gIFxcXCJjb21waWxlck9wdGlvbnNcXFwiOiB7XFxuICAgIFxcXCJzdHJpY3RcXFwiOiB0cnVlLFxcbiAgICBcXFwiZXNNb2R1bGVJbnRlcm9wXFxcIjogdHJ1ZSxcXG4gICAgXFxcImxpYlxcXCI6IFsgXFxcImRvbVxcXCIsIFxcXCJlczIwMTVcXFwiIF0sXFxuICAgIFxcXCJqc3hcXFwiOiBcXFwicmVhY3QtanN4XFxcIlxcbiAgfVxcbn1cIlxuICAgIH0sXG4gICAgXCIvQXBwLnRzeFwiOiB7XG4gICAgICBjb2RlOiBcImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEFwcCgpOiBKU1guRWxlbWVudCB7XFxuICByZXR1cm4gPGgxPkhlbGxvIHdvcmxkPC9oMT5cXG59XFxuXCJcbiAgICB9LFxuICAgIFwiL2luZGV4LnRzeFwiOiB7XG4gICAgICBjb2RlOiBcImltcG9ydCBSZWFjdCwgeyBTdHJpY3RNb2RlIH0gZnJvbSBcXFwicmVhY3RcXFwiO1xcbmltcG9ydCB7IGNyZWF0ZVJvb3QgfSBmcm9tIFxcXCJyZWFjdC1kb20vY2xpZW50XFxcIjtcXG5pbXBvcnQgXFxcIi4vc3R5bGVzLmNzc1xcXCI7XFxuXFxuaW1wb3J0IEFwcCBmcm9tIFxcXCIuL0FwcFxcXCI7XFxuXFxuY29uc3Qgcm9vdCA9IGNyZWF0ZVJvb3QoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXFxcInJvb3RcXFwiKSk7XFxucm9vdC5yZW5kZXIoXFxuICA8U3RyaWN0TW9kZT5cXG4gICAgPEFwcCAvPlxcbiAgPC9TdHJpY3RNb2RlPlxcbik7XCJcbiAgICB9LFxuICAgIFwiL3B1YmxpYy9pbmRleC5odG1sXCI6IHtcbiAgICAgIGNvZGU6IFwiPCFET0NUWVBFIGh0bWw+XFxuPGh0bWwgbGFuZz1cXFwiZW5cXFwiPlxcbiAgPGhlYWQ+XFxuICAgIDxtZXRhIGNoYXJzZXQ9XFxcIlVURi04XFxcIj5cXG4gICAgPG1ldGEgbmFtZT1cXFwidmlld3BvcnRcXFwiIGNvbnRlbnQ9XFxcIndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xLjBcXFwiPlxcbiAgICA8dGl0bGU+RG9jdW1lbnQ8L3RpdGxlPlxcbiAgPC9oZWFkPlxcbiAgPGJvZHk+XFxuICAgIDxkaXYgaWQ9XFxcInJvb3RcXFwiPjwvZGl2PlxcbiAgPC9ib2R5PlxcbjwvaHRtbD5cIlxuICAgIH0sXG4gICAgXCIvcGFja2FnZS5qc29uXCI6IHtcbiAgICAgIGNvZGU6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgZGVwZW5kZW5jaWVzOiB7XG4gICAgICAgICAgcmVhY3Q6IFwiXjE4LjAuMFwiLFxuICAgICAgICAgIFwicmVhY3QtZG9tXCI6IFwiXjE4LjAuMFwiLFxuICAgICAgICAgIFwicmVhY3Qtc2NyaXB0c1wiOiBcIl40LjAuMFwiXG4gICAgICAgIH0sXG4gICAgICAgIGRldkRlcGVuZGVuY2llczoge1xuICAgICAgICAgIFwiQHR5cGVzL3JlYWN0XCI6IFwiXjE4LjAuMFwiLFxuICAgICAgICAgIFwiQHR5cGVzL3JlYWN0LWRvbVwiOiBcIl4xOC4wLjBcIixcbiAgICAgICAgICB0eXBlc2NyaXB0OiBcIl40LjAuMFwiXG4gICAgICAgIH0sXG4gICAgICAgIG1haW46IFwiL2luZGV4LnRzeFwiXG4gICAgICB9KVxuICAgIH1cbiAgfSksXG4gIG1haW46IFwiL0FwcC50c3hcIixcbiAgZW52aXJvbm1lbnQ6IFwiY3JlYXRlLXJlYWN0LWFwcFwiXG59O1xuXG52YXIgU09MSURfVEVNUExBVEUgPSB7XG4gIGZpbGVzOiBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgY29tbW9uRmlsZXMpLCB7XG4gICAgXCIvQXBwLnRzeFwiOiB7XG4gICAgICBjb2RlOiBcImltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gXFxcInNvbGlkLWpzXFxcIjtcXG5cXG5jb25zdCBBcHA6IENvbXBvbmVudCA9ICgpID0+IHtcXG4gIHJldHVybiA8aDE+SGVsbG8gd29ybGQ8L2gxPlxcbn07XFxuXFxuZXhwb3J0IGRlZmF1bHQgQXBwO1wiXG4gICAgfSxcbiAgICBcIi9pbmRleC50c3hcIjoge1xuICAgICAgY29kZTogXCJpbXBvcnQgeyByZW5kZXIgfSBmcm9tIFxcXCJzb2xpZC1qcy93ZWJcXFwiO1xcbmltcG9ydCBBcHAgZnJvbSBcXFwiLi9BcHBcXFwiO1xcblxcbmltcG9ydCBcXFwiLi9zdHlsZXMuY3NzXFxcIjtcXG5cXG5yZW5kZXIoKCkgPT4gPEFwcCAvPiwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXFxcImFwcFxcXCIpKTtcIlxuICAgIH0sXG4gICAgXCIvaW5kZXguaHRtbFwiOiB7XG4gICAgICBjb2RlOiBcIjxodG1sPlxcbjxoZWFkPlxcbiAgPHRpdGxlPlBhcmNlbCBTYW5kYm94PC90aXRsZT5cXG4gIDxtZXRhIGNoYXJzZXQ9XFxcIlVURi04XFxcIiAvPlxcbjwvaGVhZD5cXG48Ym9keT5cXG4gIDxkaXYgaWQ9XFxcImFwcFxcXCI+PC9kaXY+XFxuICA8c2NyaXB0IHNyYz1cXFwic3JjL2luZGV4LnRzeFxcXCI+PC9zY3JpcHQ+XFxuPC9ib2R5PlxcbjwvaHRtbD5cIlxuICAgIH0sXG4gICAgXCIvcGFja2FnZS5qc29uXCI6IHtcbiAgICAgIGNvZGU6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgZGVwZW5kZW5jaWVzOiB7XG4gICAgICAgICAgXCJzb2xpZC1qc1wiOiBcIjEuMy4xNVwiXG4gICAgICAgIH0sXG4gICAgICAgIG1haW46IFwiL2luZGV4LnRzeFwiXG4gICAgICB9KVxuICAgIH1cbiAgfSksXG4gIG1haW46IFwiL0FwcC50c3hcIixcbiAgZW52aXJvbm1lbnQ6IFwic29saWRcIlxufTtcblxudmFyIFNWRUxURV9URU1QTEFURSA9IHtcbiAgZmlsZXM6IF9fYXNzaWduKF9fYXNzaWduKHt9LCBjb21tb25GaWxlcyksIHtcbiAgICBcIi9BcHAuc3ZlbHRlXCI6IHtcbiAgICAgIGNvZGU6IFwiPHN0eWxlPlxcbiAgaDEge1xcbiAgICBmb250LXNpemU6IDEuNXJlbTtcXG4gIH1cXG48L3N0eWxlPlxcblxcbjxzY3JpcHQ+XFxuICBsZXQgbmFtZSA9ICd3b3JsZCc7XFxuPC9zY3JpcHQ+XFxuXFxuPG1haW4+XFxuICA8aDE+SGVsbG8ge25hbWV9PC9oMT5cXG48L21haW4+XCJcbiAgICB9LFxuICAgIFwiL2luZGV4LmpzXCI6IHtcbiAgICAgIGNvZGU6IFwiaW1wb3J0IEFwcCBmcm9tIFxcXCIuL0FwcC5zdmVsdGVcXFwiO1xcbmltcG9ydCBcXFwiLi9zdHlsZXMuY3NzXFxcIjtcXG5cXG5jb25zdCBhcHAgPSBuZXcgQXBwKHtcXG4gIHRhcmdldDogZG9jdW1lbnQuYm9keVxcbn0pO1xcblxcbmV4cG9ydCBkZWZhdWx0IGFwcDtcXG4gICAgICBcIlxuICAgIH0sXG4gICAgXCIvcHVibGljL2luZGV4Lmh0bWxcIjoge1xuICAgICAgY29kZTogXCI8IURPQ1RZUEUgaHRtbD5cXG48aHRtbD5cXG4gIDxoZWFkPlxcbiAgICA8bWV0YSBjaGFyc2V0PVxcXCJ1dGY4XFxcIiAvPlxcbiAgICA8bWV0YSBuYW1lPVxcXCJ2aWV3cG9ydFxcXCIgY29udGVudD1cXFwid2lkdGg9ZGV2aWNlLXdpZHRoXFxcIiAvPlxcblxcbiAgICA8dGl0bGU+U3ZlbHRlIGFwcDwvdGl0bGU+XFxuXFxuICAgIDxsaW5rIHJlbD1cXFwic3R5bGVzaGVldFxcXCIgaHJlZj1cXFwicHVibGljL2J1bmRsZS5jc3NcXFwiIC8+XFxuICA8L2hlYWQ+XFxuXFxuICA8Ym9keT5cXG4gICAgPHNjcmlwdCBzcmM9XFxcImJ1bmRsZS5qc1xcXCI+PC9zY3JpcHQ+XFxuICA8L2JvZHk+XFxuPC9odG1sPlwiXG4gICAgfSxcbiAgICBcIi9wYWNrYWdlLmpzb25cIjoge1xuICAgICAgY29kZTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICBkZXBlbmRlbmNpZXM6IHtcbiAgICAgICAgICBzdmVsdGU6IFwiXjMuMC4wXCJcbiAgICAgICAgfSxcbiAgICAgICAgbWFpbjogXCIvaW5kZXguanNcIlxuICAgICAgfSlcbiAgICB9XG4gIH0pLFxuICBtYWluOiBcIi9BcHAuc3ZlbHRlXCIsXG4gIGVudmlyb25tZW50OiBcInN2ZWx0ZVwiXG59O1xuXG52YXIgVEVTVF9UWVBFU0NSSVBUX1RFTVBMQVRFID0ge1xuICBmaWxlczoge1xuICAgIFwidHNjb25maWcuanNvblwiOiB7XG4gICAgICBjb2RlOiBcIntcXG4gIFxcXCJpbmNsdWRlXFxcIjogW1xcbiAgICBcXFwiLi8qKi8qXFxcIlxcbiAgXSxcXG4gIFxcXCJjb21waWxlck9wdGlvbnNcXFwiOiB7XFxuICAgIFxcXCJzdHJpY3RcXFwiOiB0cnVlLFxcbiAgICBcXFwiZXNNb2R1bGVJbnRlcm9wXFxcIjogdHJ1ZSxcXG4gICAgXFxcImxpYlxcXCI6IFsgXFxcImRvbVxcXCIsIFxcXCJlczIwMTVcXFwiIF0sXFxuICAgIFxcXCJqc3hcXFwiOiBcXFwicmVhY3QtanN4XFxcIlxcbiAgfVxcbn1cIlxuICAgIH0sXG4gICAgXCIvYWRkLnRzXCI6IHtcbiAgICAgIGNvZGU6IFwiZXhwb3J0IGNvbnN0IGFkZCA9IChhOiBudW1iZXIsIGI6IG51bWJlcik6IG51bWJlciA9PiBhICsgYjtcIlxuICAgIH0sXG4gICAgXCIvYWRkLnRlc3QudHNcIjoge1xuICAgICAgY29kZTogXCJpbXBvcnQgeyBhZGQgfSBmcm9tICcuL2FkZCc7XFxuXFxuZGVzY3JpYmUoJ2FkZCcsICgpID0+IHtcXG4gIHRlc3QoJ0NvbW11dGF0aXZlIExhdyBvZiBBZGRpdGlvbicsICgpID0+IHtcXG4gICAgZXhwZWN0KGFkZCgxLCAyKSkudG9CZShhZGQoMiwgMSkpO1xcbiAgfSk7XFxufSk7XCJcbiAgICB9LFxuICAgIFwicGFja2FnZS5qc29uXCI6IHtcbiAgICAgIGNvZGU6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgZGVwZW5kZW5jaWVzOiB7fSxcbiAgICAgICAgZGV2RGVwZW5kZW5jaWVzOiB7XG4gICAgICAgICAgdHlwZXNjcmlwdDogXCJeNC4wLjBcIlxuICAgICAgICB9LFxuICAgICAgICBtYWluOiBcIi9hZGQudHNcIlxuICAgICAgfSlcbiAgICB9XG4gIH0sXG4gIG1haW46IFwiL2FkZC50ZXN0LnRzXCIsXG4gIGVudmlyb25tZW50OiBcInBhcmNlbFwiLFxuICBtb2RlOiBcInRlc3RzXCJcbn07XG5cbnZhciBWQU5JTExBX1RFTVBMQVRFID0ge1xuICBmaWxlczogX19hc3NpZ24oX19hc3NpZ24oe30sIGNvbW1vbkZpbGVzKSwge1xuICAgIFwiL2luZGV4LmpzXCI6IHtcbiAgICAgIGNvZGU6IFwiaW1wb3J0IFxcXCIuL3N0eWxlcy5jc3NcXFwiO1xcblxcbmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFxcXCJhcHBcXFwiKS5pbm5lckhUTUwgPSBgXFxuPGgxPkhlbGxvIHdvcmxkPC9oMT5cXG5gO1xcblwiXG4gICAgfSxcbiAgICBcIi9pbmRleC5odG1sXCI6IHtcbiAgICAgIGNvZGU6IFwiPCFET0NUWVBFIGh0bWw+XFxuPGh0bWw+XFxuXFxuPGhlYWQ+XFxuICA8dGl0bGU+UGFyY2VsIFNhbmRib3g8L3RpdGxlPlxcbiAgPG1ldGEgY2hhcnNldD1cXFwiVVRGLThcXFwiIC8+XFxuPC9oZWFkPlxcblxcbjxib2R5PlxcbiAgPGRpdiBpZD1cXFwiYXBwXFxcIj48L2Rpdj5cXG5cXG4gIDxzY3JpcHQgc3JjPVxcXCJpbmRleC5qc1xcXCI+XFxuICA8L3NjcmlwdD5cXG48L2JvZHk+XFxuXFxuPC9odG1sPlwiXG4gICAgfSxcbiAgICBcIi9wYWNrYWdlLmpzb25cIjoge1xuICAgICAgY29kZTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICBkZXBlbmRlbmNpZXM6IHt9LFxuICAgICAgICBtYWluOiBcIi9pbmRleC5qc1wiXG4gICAgICB9KVxuICAgIH1cbiAgfSksXG4gIG1haW46IFwiL2luZGV4LmpzXCIsXG4gIGVudmlyb25tZW50OiBcInBhcmNlbFwiXG59O1xuXG52YXIgVkFOSUxMQV9UWVBFU0NSSVBUX1RFTVBMQVRFID0ge1xuICBmaWxlczogX19hc3NpZ24oX19hc3NpZ24oe30sIGNvbW1vbkZpbGVzKSwge1xuICAgIFwidHNjb25maWcuanNvblwiOiB7XG4gICAgICBjb2RlOiBcIntcXG4gIFxcXCJjb21waWxlck9wdGlvbnNcXFwiOiB7XFxuICAgIFxcXCJzdHJpY3RcXFwiOiB0cnVlLFxcbiAgICBcXFwibW9kdWxlXFxcIjogXFxcImNvbW1vbmpzXFxcIixcXG4gICAgXFxcImpzeFxcXCI6IFxcXCJwcmVzZXJ2ZVxcXCIsXFxuICAgIFxcXCJlc01vZHVsZUludGVyb3BcXFwiOiB0cnVlLFxcbiAgICBcXFwic291cmNlTWFwXFxcIjogdHJ1ZSxcXG4gICAgXFxcImFsbG93SnNcXFwiOiB0cnVlLFxcbiAgICBcXFwibGliXFxcIjogW1xcbiAgICAgIFxcXCJlczZcXFwiLFxcbiAgICAgIFxcXCJkb21cXFwiXFxuICAgIF0sXFxuICAgIFxcXCJyb290RGlyXFxcIjogXFxcInNyY1xcXCIsXFxuICAgIFxcXCJtb2R1bGVSZXNvbHV0aW9uXFxcIjogXFxcIm5vZGVcXFwiXFxuICB9XFxufVwiXG4gICAgfSxcbiAgICBcIi9pbmRleC50c1wiOiB7XG4gICAgICBjb2RlOiBcImltcG9ydCBcXFwiLi9zdHlsZXMuY3NzXFxcIjtcXG5cXG5kb2N1bWVudC5nZXRFbGVtZW50QnlJZChcXFwiYXBwXFxcIikuaW5uZXJIVE1MID0gYFxcbjxoMT5IZWxsbyB3b3JsZDwvaDE+XFxuYDtcXG5cIlxuICAgIH0sXG4gICAgXCIvaW5kZXguaHRtbFwiOiB7XG4gICAgICBjb2RlOiBcIjwhRE9DVFlQRSBodG1sPlxcbjxodG1sPlxcblxcbjxoZWFkPlxcbiAgPHRpdGxlPlBhcmNlbCBTYW5kYm94PC90aXRsZT5cXG4gIDxtZXRhIGNoYXJzZXQ9XFxcIlVURi04XFxcIiAvPlxcbjwvaGVhZD5cXG5cXG48Ym9keT5cXG4gIDxkaXYgaWQ9XFxcImFwcFxcXCI+PC9kaXY+XFxuXFxuICA8c2NyaXB0IHNyYz1cXFwiaW5kZXgudHNcXFwiPlxcbiAgPC9zY3JpcHQ+XFxuPC9ib2R5PlxcblxcbjwvaHRtbD5cIlxuICAgIH0sXG4gICAgXCIvcGFja2FnZS5qc29uXCI6IHtcbiAgICAgIGNvZGU6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgZGVwZW5kZW5jaWVzOiB7fSxcbiAgICAgICAgZGV2RGVwZW5kZW5jaWVzOiB7XG4gICAgICAgICAgdHlwZXNjcmlwdDogXCJeNC4wLjBcIlxuICAgICAgICB9LFxuICAgICAgICBtYWluOiBcIi9pbmRleC50c1wiXG4gICAgICB9KVxuICAgIH1cbiAgfSksXG4gIG1haW46IFwiL2luZGV4LnRzXCIsXG4gIGVudmlyb25tZW50OiBcInBhcmNlbFwiXG59O1xuXG52YXIgVlVFX1RFTVBMQVRFID0ge1xuICBmaWxlczoge1xuICAgIFwiL3NyYy9zdHlsZXMuY3NzXCI6IGNvbW1vbkZpbGVzW1wiL3N0eWxlcy5jc3NcIl0sXG4gICAgXCIvc3JjL0FwcC52dWVcIjoge1xuICAgICAgY29kZTogXCI8dGVtcGxhdGU+XFxuICA8aDE+SGVsbG8ge3sgbXNnIH19PC9oMT5cXG48L3RlbXBsYXRlPlxcblxcbjxzY3JpcHQgc2V0dXA+XFxuaW1wb3J0IHsgcmVmIH0gZnJvbSAndnVlJztcXG5jb25zdCBtc2cgPSByZWYoJ3dvcmxkJyk7XFxuPC9zY3JpcHQ+XCJcbiAgICB9LFxuICAgIFwiL3NyYy9tYWluLmpzXCI6IHtcbiAgICAgIGNvZGU6IFwiaW1wb3J0IHsgY3JlYXRlQXBwIH0gZnJvbSAndnVlJ1xcbmltcG9ydCBBcHAgZnJvbSAnLi9BcHAudnVlJ1xcbmltcG9ydCBcXFwiLi9zdHlsZXMuY3NzXFxcIjtcXG5cXG5jcmVhdGVBcHAoQXBwKS5tb3VudCgnI2FwcCcpXFxuXCJcbiAgICB9LFxuICAgIFwiL3B1YmxpYy9pbmRleC5odG1sXCI6IHtcbiAgICAgIGNvZGU6IFwiPCFET0NUWVBFIGh0bWw+XFxuPGh0bWwgbGFuZz1cXFwiZW5cXFwiPlxcbiAgPGhlYWQ+XFxuICAgIDxtZXRhIGNoYXJzZXQ9XFxcInV0Zi04XFxcIiAvPlxcbiAgICA8bWV0YSBodHRwLWVxdWl2PVxcXCJYLVVBLUNvbXBhdGlibGVcXFwiIGNvbnRlbnQ9XFxcIklFPWVkZ2VcXFwiIC8+XFxuICAgIDxtZXRhIG5hbWU9XFxcInZpZXdwb3J0XFxcIiBjb250ZW50PVxcXCJ3aWR0aD1kZXZpY2Utd2lkdGgsaW5pdGlhbC1zY2FsZT0xLjBcXFwiIC8+XFxuICAgIDx0aXRsZT5jb2Rlc2FuZGJveDwvdGl0bGU+XFxuICA8L2hlYWQ+XFxuICA8Ym9keT5cXG4gICAgPG5vc2NyaXB0PlxcbiAgICAgIDxzdHJvbmdcXG4gICAgICAgID5XZSdyZSBzb3JyeSBidXQgY29kZXNhbmRib3ggZG9lc24ndCB3b3JrIHByb3Blcmx5IHdpdGhvdXQgSmF2YVNjcmlwdFxcbiAgICAgICAgZW5hYmxlZC4gUGxlYXNlIGVuYWJsZSBpdCB0byBjb250aW51ZS48L3N0cm9uZ1xcbiAgICAgID5cXG4gICAgPC9ub3NjcmlwdD5cXG4gICAgPGRpdiBpZD1cXFwiYXBwXFxcIj48L2Rpdj5cXG4gICAgPCEtLSBidWlsdCBmaWxlcyB3aWxsIGJlIGF1dG8gaW5qZWN0ZWQgLS0+XFxuICA8L2JvZHk+XFxuPC9odG1sPlxcblwiXG4gICAgfSxcbiAgICBcIi9wYWNrYWdlLmpzb25cIjoge1xuICAgICAgY29kZTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICBuYW1lOiBcInZ1ZTNcIixcbiAgICAgICAgdmVyc2lvbjogXCIwLjEuMFwiLFxuICAgICAgICBwcml2YXRlOiB0cnVlLFxuICAgICAgICBtYWluOiBcIi9zcmMvbWFpbi5qc1wiLFxuICAgICAgICBzY3JpcHRzOiB7XG4gICAgICAgICAgc2VydmU6IFwidnVlLWNsaS1zZXJ2aWNlIHNlcnZlXCIsXG4gICAgICAgICAgYnVpbGQ6IFwidnVlLWNsaS1zZXJ2aWNlIGJ1aWxkXCJcbiAgICAgICAgfSxcbiAgICAgICAgZGVwZW5kZW5jaWVzOiB7XG4gICAgICAgICAgXCJjb3JlLWpzXCI6IFwiXjMuMjYuMVwiLFxuICAgICAgICAgIHZ1ZTogXCJeMy4yLjQ1XCJcbiAgICAgICAgfSxcbiAgICAgICAgZGV2RGVwZW5kZW5jaWVzOiB7XG4gICAgICAgICAgXCJAdnVlL2NsaS1wbHVnaW4tYmFiZWxcIjogXCJeNS4wLjhcIixcbiAgICAgICAgICBcIkB2dWUvY2xpLXNlcnZpY2VcIjogXCJeNS4wLjhcIlxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cbiAgfSxcbiAgbWFpbjogXCIvc3JjL0FwcC52dWVcIixcbiAgZW52aXJvbm1lbnQ6IFwidnVlLWNsaVwiXG59O1xuXG52YXIgVlVFX1RTX1RFTVBMQVRFID0ge1xuICBmaWxlczoge1xuICAgIFwiL3NyYy9zdHlsZXMuY3NzXCI6IGNvbW1vbkZpbGVzW1wiL3N0eWxlcy5jc3NcIl0sXG4gICAgXCIvc3JjL0FwcC52dWVcIjoge1xuICAgICAgY29kZTogXCI8dGVtcGxhdGU+XFxuICA8aDE+SGVsbG8ge3sgbXNnIH19PC9oMT5cXG48L3RlbXBsYXRlPlxcblxcbjxzY3JpcHQgc2V0dXAgbGFuZz1cXFwidHNcXFwiPlxcbmltcG9ydCB7IHJlZiB9IGZyb20gJ3Z1ZSc7XFxuY29uc3QgbXNnID0gcmVmPHN0cmluZz4oJ3dvcmxkJyk7XFxuPC9zY3JpcHQ+XCJcbiAgICB9LFxuICAgIFwiL3NyYy9tYWluLnRzXCI6IHtcbiAgICAgIGNvZGU6IFwiaW1wb3J0IHsgY3JlYXRlQXBwIH0gZnJvbSAndnVlJ1xcbmltcG9ydCBBcHAgZnJvbSAnLi9BcHAudnVlJ1xcbmltcG9ydCBcXFwiLi9zdHlsZXMuY3NzXFxcIjtcXG5cXG5jcmVhdGVBcHAoQXBwKS5tb3VudCgnI2FwcCcpXFxuXCJcbiAgICB9LFxuICAgIFwiL3NyYy9zaGltcy12dWUuZC50c1wiOiBcIi8qIGVzbGludC1kaXNhYmxlICovXFxuZGVjbGFyZSBtb2R1bGUgXFxcIioudnVlXFxcIiB7XFxuICBpbXBvcnQgdHlwZSB7IERlZmluZUNvbXBvbmVudCB9IGZyb20gXFxcInZ1ZVxcXCI7XFxuICBjb25zdCBjb21wb25lbnQ6IERlZmluZUNvbXBvbmVudDx7fSwge30sIGFueT47XFxuICBleHBvcnQgZGVmYXVsdCBjb21wb25lbnQ7XFxufVwiLFxuICAgIFwiL3B1YmxpYy9pbmRleC5odG1sXCI6IHtcbiAgICAgIGNvZGU6IFwiPCFET0NUWVBFIGh0bWw+XFxuPGh0bWwgbGFuZz1cXFwiZW5cXFwiPlxcbiAgPGhlYWQ+XFxuICAgIDxtZXRhIGNoYXJzZXQ9XFxcInV0Zi04XFxcIiAvPlxcbiAgICA8bWV0YSBodHRwLWVxdWl2PVxcXCJYLVVBLUNvbXBhdGlibGVcXFwiIGNvbnRlbnQ9XFxcIklFPWVkZ2VcXFwiIC8+XFxuICAgIDxtZXRhIG5hbWU9XFxcInZpZXdwb3J0XFxcIiBjb250ZW50PVxcXCJ3aWR0aD1kZXZpY2Utd2lkdGgsaW5pdGlhbC1zY2FsZT0xLjBcXFwiIC8+XFxuICAgIDx0aXRsZT5jb2Rlc2FuZGJveDwvdGl0bGU+XFxuICA8L2hlYWQ+XFxuICA8Ym9keT5cXG4gICAgPG5vc2NyaXB0PlxcbiAgICAgIDxzdHJvbmdcXG4gICAgICAgID5XZSdyZSBzb3JyeSBidXQgY29kZXNhbmRib3ggZG9lc24ndCB3b3JrIHByb3Blcmx5IHdpdGhvdXQgSmF2YVNjcmlwdFxcbiAgICAgICAgZW5hYmxlZC4gUGxlYXNlIGVuYWJsZSBpdCB0byBjb250aW51ZS48L3N0cm9uZ1xcbiAgICAgID5cXG4gICAgPC9ub3NjcmlwdD5cXG4gICAgPGRpdiBpZD1cXFwiYXBwXFxcIj48L2Rpdj5cXG4gICAgPCEtLSBidWlsdCBmaWxlcyB3aWxsIGJlIGF1dG8gaW5qZWN0ZWQgLS0+XFxuICA8L2JvZHk+XFxuPC9odG1sPlxcblwiXG4gICAgfSxcbiAgICBcIi9wYWNrYWdlLmpzb25cIjoge1xuICAgICAgY29kZTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICBuYW1lOiBcInZ1ZTMtdHNcIixcbiAgICAgICAgdmVyc2lvbjogXCIwLjEuMFwiLFxuICAgICAgICBwcml2YXRlOiB0cnVlLFxuICAgICAgICBtYWluOiBcIi9zcmMvbWFpbi50c1wiLFxuICAgICAgICBzY3JpcHRzOiB7XG4gICAgICAgICAgc2VydmU6IFwidnVlLWNsaS1zZXJ2aWNlIHNlcnZlXCIsXG4gICAgICAgICAgYnVpbGQ6IFwidnVlLWNsaS1zZXJ2aWNlIGJ1aWxkXCJcbiAgICAgICAgfSxcbiAgICAgICAgZGVwZW5kZW5jaWVzOiB7XG4gICAgICAgICAgXCJjb3JlLWpzXCI6IFwiXjMuMjYuMVwiLFxuICAgICAgICAgIHZ1ZTogXCJeMy4yLjQ1XCJcbiAgICAgICAgfSxcbiAgICAgICAgZGV2RGVwZW5kZW5jaWVzOiB7XG4gICAgICAgICAgXCJAdnVlL2NsaS1wbHVnaW4tYmFiZWxcIjogXCJeNS4wLjhcIixcbiAgICAgICAgICBcIkB2dWUvY2xpLXBsdWdpbi10eXBlc2NyaXB0XCI6IFwiXjUuMC44XCIsXG4gICAgICAgICAgXCJAdnVlL2NsaS1zZXJ2aWNlXCI6IFwiXjUuMC44XCIsXG4gICAgICAgICAgdHlwZXNjcmlwdDogXCJeNC45LjNcIlxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0sXG4gICAgXCIvdHNjb25maWcuanNvblwiOiB7XG4gICAgICBjb2RlOiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIGNvbXBpbGVyT3B0aW9uczoge1xuICAgICAgICAgIHRhcmdldDogXCJlc25leHRcIixcbiAgICAgICAgICBtb2R1bGU6IFwiZXNuZXh0XCIsXG4gICAgICAgICAgc3RyaWN0OiB0cnVlLFxuICAgICAgICAgIGpzeDogXCJwcmVzZXJ2ZVwiLFxuICAgICAgICAgIG1vZHVsZVJlc29sdXRpb246IFwibm9kZVwiLFxuICAgICAgICAgIGV4cGVyaW1lbnRhbERlY29yYXRvcnM6IHRydWUsXG4gICAgICAgICAgc2tpcExpYkNoZWNrOiB0cnVlLFxuICAgICAgICAgIGVzTW9kdWxlSW50ZXJvcDogdHJ1ZSxcbiAgICAgICAgICBhbGxvd1N5bnRoZXRpY0RlZmF1bHRJbXBvcnRzOiB0cnVlLFxuICAgICAgICAgIGZvcmNlQ29uc2lzdGVudENhc2luZ0luRmlsZU5hbWVzOiB0cnVlLFxuICAgICAgICAgIHVzZURlZmluZUZvckNsYXNzRmllbGRzOiB0cnVlLFxuICAgICAgICAgIHNvdXJjZU1hcDogZmFsc2UsXG4gICAgICAgICAgYmFzZVVybDogXCIuXCIsXG4gICAgICAgICAgdHlwZXM6IFtcIndlYnBhY2stZW52XCJdLFxuICAgICAgICAgIHBhdGhzOiB7XG4gICAgICAgICAgICBcIkAvKlwiOiBbXCJzcmMvKlwiXVxuICAgICAgICAgIH0sXG4gICAgICAgICAgbGliOiBbXCJlc25leHRcIiwgXCJkb21cIiwgXCJkb20uaXRlcmFibGVcIiwgXCJzY3JpcHRob3N0XCJdXG4gICAgICAgIH0sXG4gICAgICAgIGluY2x1ZGU6IFtcInNyYy8qKi8qLnRzXCIsIFwic3JjLyoqLyoudHN4XCIsIFwic3JjLyoqLyoudnVlXCIsIFwidGVzdHMvKiovKi50c1wiLCBcInRlc3RzLyoqLyoudHN4XCJdLFxuICAgICAgICBleGNsdWRlOiBbXCJub2RlX21vZHVsZXNcIl1cbiAgICAgIH0pXG4gICAgfVxuICB9LFxuICBtYWluOiBcIi9zcmMvQXBwLnZ1ZVwiLFxuICBlbnZpcm9ubWVudDogXCJ2dWUtY2xpXCJcbn07XG5cbnZhciBTVEFUSUNfVEVNUExBVEUgPSB7XG4gIGZpbGVzOiBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgY29tbW9uRmlsZXMpLCB7XG4gICAgXCIvaW5kZXguaHRtbFwiOiB7XG4gICAgICBjb2RlOiBcIjwhRE9DVFlQRSBodG1sPlxcbjxodG1sPlxcblxcbjxoZWFkPlxcbiAgPHRpdGxlPlBhcmNlbCBTYW5kYm94PC90aXRsZT5cXG4gIDxtZXRhIGNoYXJzZXQ9XFxcIlVURi04XFxcIiAvPlxcbiAgPGxpbmsgcmVsPVxcXCJzdHlsZXNoZWV0XFxcIiBocmVmPVxcXCIvc3R5bGVzLmNzc1xcXCIgLz5cXG48L2hlYWQ+XFxuXFxuPGJvZHk+XFxuICA8aDE+SGVsbG8gd29ybGQ8L2gxPlxcbjwvYm9keT5cXG5cXG48L2h0bWw+XCJcbiAgICB9LFxuICAgIFwiL3BhY2thZ2UuanNvblwiOiB7XG4gICAgICBjb2RlOiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIGRlcGVuZGVuY2llczoge30sXG4gICAgICAgIG1haW46IFwiL2luZGV4Lmh0bWxcIlxuICAgICAgfSlcbiAgICB9XG4gIH0pLFxuICBtYWluOiBcIi9pbmRleC5odG1sXCIsXG4gIGVudmlyb25tZW50OiBcInN0YXRpY1wiXG59O1xuXG52YXIgU0FOREJPWF9URU1QTEFURVMgPSB7XG4gIHN0YXRpYzogU1RBVElDX1RFTVBMQVRFLFxuICBhbmd1bGFyOiBBTkdVTEFSX1RFTVBMQVRFLFxuICByZWFjdDogUkVBQ1RfVEVNUExBVEUsXG4gIFwicmVhY3QtdHNcIjogUkVBQ1RfVFlQRVNDUklQVF9URU1QTEFURSxcbiAgc29saWQ6IFNPTElEX1RFTVBMQVRFLFxuICBzdmVsdGU6IFNWRUxURV9URU1QTEFURSxcbiAgXCJ0ZXN0LXRzXCI6IFRFU1RfVFlQRVNDUklQVF9URU1QTEFURSxcbiAgXCJ2YW5pbGxhLXRzXCI6IFZBTklMTEFfVFlQRVNDUklQVF9URU1QTEFURSxcbiAgdmFuaWxsYTogVkFOSUxMQV9URU1QTEFURSxcbiAgdnVlOiBWVUVfVEVNUExBVEUsXG4gIFwidnVlLXRzXCI6IFZVRV9UU19URU1QTEFURSxcbiAgbm9kZTogTk9ERV9URU1QTEFURSxcbiAgbmV4dGpzOiBORVhUSlNfVEVNUExBVEUsXG4gIHZpdGU6IFZJVEVfVEVNUExBVEUsXG4gIFwidml0ZS1yZWFjdFwiOiBWSVRFX1JFQUNUX1RFTVBMQVRFLFxuICBcInZpdGUtcmVhY3QtdHNcIjogVklURV9SRUFDVF9UU19URU1QTEFURSxcbiAgXCJ2aXRlLXByZWFjdFwiOiBWSVRFX1BSRUFDVF9URU1QTEFURSxcbiAgXCJ2aXRlLXByZWFjdC10c1wiOiBWSVRFX1BSRUFDVF9UU19URU1QTEFURSxcbiAgXCJ2aXRlLXZ1ZVwiOiBWSVRFX1ZVRV9URU1QTEFURSxcbiAgXCJ2aXRlLXZ1ZS10c1wiOiBWSVRFX1ZVRV9UU19URU1QTEFURSxcbiAgXCJ2aXRlLXN2ZWx0ZVwiOiBWSVRFX1NWRUxURV9URU1QTEFURSxcbiAgXCJ2aXRlLXN2ZWx0ZS10c1wiOiBWSVRFX1NWRUxURV9UU19URU1QTEFURSxcbiAgYXN0cm86IEFTVFJPX1RFTVBMQVRFXG59O1xuXG52YXIgZ2V0U2FuZHBhY2tTdGF0ZUZyb21Qcm9wcyA9IGZ1bmN0aW9uIChwcm9wcykge1xuICB2YXIgX2EsIF9iLCBfYywgX2QsIF9lLCBfZjtcbiAgdmFyIG5vcm1hbGl6ZWRGaWxlc1BhdGggPSBub3JtYWxpemVQYXRoKHByb3BzLmZpbGVzKTtcbiAgdmFyIHByb2plY3RTZXR1cCA9IGNvbWJpbmVUZW1wbGF0ZUZpbGVzVG9TZXR1cCh7XG4gICAgdGVtcGxhdGU6IHByb3BzLnRlbXBsYXRlLFxuICAgIGN1c3RvbVNldHVwOiBwcm9wcy5jdXN0b21TZXR1cCxcbiAgICBmaWxlczogbm9ybWFsaXplZEZpbGVzUGF0aFxuICB9KTtcbiAgdmFyIHZpc2libGVGaWxlcyA9IG5vcm1hbGl6ZVBhdGgoKF9iID0gKF9hID0gcHJvcHMub3B0aW9ucykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnZpc2libGVGaWxlcykgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogW10pO1xuICB2YXIgYWN0aXZlRmlsZSA9ICgoX2MgPSBwcm9wcy5vcHRpb25zKSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2MuYWN0aXZlRmlsZSkgPyByZXNvbHZlRmlsZSgoX2QgPSBwcm9wcy5vcHRpb25zKSA9PT0gbnVsbCB8fCBfZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2QuYWN0aXZlRmlsZSwgcHJvamVjdFNldHVwLmZpbGVzKSA6IHVuZGVmaW5lZDtcbiAgaWYgKHZpc2libGVGaWxlcy5sZW5ndGggPT09IDAgJiYgbm9ybWFsaXplZEZpbGVzUGF0aCkge1xuICAgIE9iamVjdC5rZXlzKG5vcm1hbGl6ZWRGaWxlc1BhdGgpLmZvckVhY2goZnVuY3Rpb24gKGZpbGVQYXRoKSB7XG4gICAgICB2YXIgZmlsZSA9IG5vcm1hbGl6ZWRGaWxlc1BhdGhbZmlsZVBhdGhdO1xuICAgICAgaWYgKHR5cGVvZiBmaWxlID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHZpc2libGVGaWxlcy5wdXNoKGZpbGVQYXRoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKCFhY3RpdmVGaWxlICYmIGZpbGUuYWN0aXZlKSB7XG4gICAgICAgIGFjdGl2ZUZpbGUgPSBmaWxlUGF0aDtcbiAgICAgICAgaWYgKGZpbGUuaGlkZGVuID09PSB0cnVlKSB7XG4gICAgICAgICAgdmlzaWJsZUZpbGVzLnB1c2goZmlsZVBhdGgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoIWZpbGUuaGlkZGVuKSB7XG4gICAgICAgIHZpc2libGVGaWxlcy5wdXNoKGZpbGVQYXRoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBpZiAodmlzaWJsZUZpbGVzLmxlbmd0aCA9PT0gMCkge1xuICAgIHZpc2libGVGaWxlcyA9IFtwcm9qZWN0U2V0dXAubWFpbl07XG4gIH1cbiAgaWYgKHByb2plY3RTZXR1cC5lbnRyeSAmJiAhcHJvamVjdFNldHVwLmZpbGVzW3Byb2plY3RTZXR1cC5lbnRyeV0pIHtcbiAgICBwcm9qZWN0U2V0dXAuZW50cnkgPSByZXNvbHZlRmlsZShwcm9qZWN0U2V0dXAuZW50cnksIHByb2plY3RTZXR1cC5maWxlcyk7XG4gIH1cbiAgaWYgKCFhY3RpdmVGaWxlICYmIHByb2plY3RTZXR1cC5tYWluKSB7XG4gICAgYWN0aXZlRmlsZSA9IHByb2plY3RTZXR1cC5tYWluO1xuICB9XG4gIGlmICghYWN0aXZlRmlsZSB8fCAhcHJvamVjdFNldHVwLmZpbGVzW2FjdGl2ZUZpbGVdKSB7XG4gICAgYWN0aXZlRmlsZSA9IHZpc2libGVGaWxlc1swXTtcbiAgfVxuICBpZiAoIXZpc2libGVGaWxlcy5pbmNsdWRlcyhhY3RpdmVGaWxlKSkge1xuICAgIHZpc2libGVGaWxlcy5wdXNoKGFjdGl2ZUZpbGUpO1xuICB9XG4gIHZhciBmaWxlcyA9IGFkZFBhY2thZ2VKU09OSWZOZWVkZWQocHJvamVjdFNldHVwLmZpbGVzLCAoX2UgPSBwcm9qZWN0U2V0dXAuZGVwZW5kZW5jaWVzKSAhPT0gbnVsbCAmJiBfZSAhPT0gdm9pZCAwID8gX2UgOiB7fSwgKF9mID0gcHJvamVjdFNldHVwLmRldkRlcGVuZGVuY2llcykgIT09IG51bGwgJiYgX2YgIT09IHZvaWQgMCA/IF9mIDoge30sIHByb2plY3RTZXR1cC5lbnRyeSk7XG4gIHZhciBleGlzdE9wZW5QYXRoID0gdmlzaWJsZUZpbGVzLmZpbHRlcihmdW5jdGlvbiAocGF0aCkge1xuICAgIHJldHVybiBmaWxlc1twYXRoXTtcbiAgfSk7XG4gIHJldHVybiB7XG4gICAgdmlzaWJsZUZpbGVzOiBleGlzdE9wZW5QYXRoLFxuICAgIGFjdGl2ZUZpbGU6IGFjdGl2ZUZpbGUsXG4gICAgZmlsZXM6IGZpbGVzLFxuICAgIGVudmlyb25tZW50OiBwcm9qZWN0U2V0dXAuZW52aXJvbm1lbnQsXG4gICAgc2hvdWxkVXBkYXRlUHJldmlldzogdHJ1ZVxuICB9O1xufTtcbnZhciByZXNvbHZlRmlsZSA9IGZ1bmN0aW9uIChwYXRoLCBmaWxlcykge1xuICB2YXIgbm9ybWFsaXplZEZpbGVzUGF0aCA9IG5vcm1hbGl6ZVBhdGgoZmlsZXMpO1xuICB2YXIgbm9ybWFsaXplZFBhdGggPSBub3JtYWxpemVQYXRoKHBhdGgpO1xuICBpZiAoKG5vcm1hbGl6ZWRQYXRoIGluIG5vcm1hbGl6ZWRGaWxlc1BhdGgpKSB7XG4gICAgcmV0dXJuIG5vcm1hbGl6ZWRQYXRoO1xuICB9XG4gIGlmICghcGF0aCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHZhciByZXNvbHZlZFBhdGggPSBudWxsO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgc3RyYXRlZ2llcyA9IFtcIi5qc1wiLCBcIi5qc3hcIiwgXCIudHNcIiwgXCIudHN4XCJdO1xuICB3aGlsZSAoIXJlc29sdmVkUGF0aCAmJiBpbmRleCA8IHN0cmF0ZWdpZXMubGVuZ3RoKSB7XG4gICAgdmFyIHJlbW92ZUV4dGVuc2lvbiA9IG5vcm1hbGl6ZWRQYXRoLnNwbGl0KFwiLlwiKVswXTtcbiAgICB2YXIgYXR0ZW1wdFBhdGggPSAoXCJcIikuY29uY2F0KHJlbW92ZUV4dGVuc2lvbikuY29uY2F0KHN0cmF0ZWdpZXNbaW5kZXhdKTtcbiAgICBpZiAobm9ybWFsaXplZEZpbGVzUGF0aFthdHRlbXB0UGF0aF0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmVzb2x2ZWRQYXRoID0gYXR0ZW1wdFBhdGg7XG4gICAgfVxuICAgIGluZGV4Kys7XG4gIH1cbiAgcmV0dXJuIHJlc29sdmVkUGF0aDtcbn07XG52YXIgY29tYmluZVRlbXBsYXRlRmlsZXNUb1NldHVwID0gZnVuY3Rpb24gKF9hKSB7XG4gIHZhciBmaWxlcyA9IF9hLmZpbGVzLCB0ZW1wbGF0ZSA9IF9hLnRlbXBsYXRlLCBjdXN0b21TZXR1cCA9IF9hLmN1c3RvbVNldHVwO1xuICBpZiAoIXRlbXBsYXRlKSB7XG4gICAgaWYgKCFjdXN0b21TZXR1cCkge1xuICAgICAgdmFyIGRlZmF1bHRUZW1wbGF0ZSA9IFNBTkRCT1hfVEVNUExBVEVTLnZhbmlsbGE7XG4gICAgICByZXR1cm4gX19hc3NpZ24oX19hc3NpZ24oe30sIGRlZmF1bHRUZW1wbGF0ZSksIHtcbiAgICAgICAgZmlsZXM6IF9fYXNzaWduKF9fYXNzaWduKHt9LCBkZWZhdWx0VGVtcGxhdGUuZmlsZXMpLCBjb252ZXJ0ZWRGaWxlc1RvQnVuZGxlckZpbGVzKGZpbGVzKSlcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoIWZpbGVzIHx8IE9iamVjdC5rZXlzKGZpbGVzKS5sZW5ndGggPT09IDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIltzYW5kcGFjay1yZWFjdF06IHdpdGhvdXQgYSB0ZW1wbGF0ZSwgeW91IG11c3QgcGFzcyBhdCBsZWFzdCBvbmUgZmlsZVwiKTtcbiAgICB9XG4gICAgcmV0dXJuIF9fYXNzaWduKF9fYXNzaWduKHt9LCBjdXN0b21TZXR1cCksIHtcbiAgICAgIGZpbGVzOiBjb252ZXJ0ZWRGaWxlc1RvQnVuZGxlckZpbGVzKGZpbGVzKVxuICAgIH0pO1xuICB9XG4gIHZhciBiYXNlVGVtcGxhdGUgPSBTQU5EQk9YX1RFTVBMQVRFU1t0ZW1wbGF0ZV07XG4gIGlmICghYmFzZVRlbXBsYXRlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKChcIltzYW5kcGFjay1yZWFjdF06IGludmFsaWQgdGVtcGxhdGUgXFxcIlwiKS5jb25jYXQodGVtcGxhdGUsIFwiXFxcIiBwcm92aWRlZFwiKSk7XG4gIH1cbiAgaWYgKCFjdXN0b21TZXR1cCAmJiAhZmlsZXMpIHtcbiAgICByZXR1cm4gYmFzZVRlbXBsYXRlO1xuICB9XG4gIHJldHVybiB7XG4gICAgZmlsZXM6IGNvbnZlcnRlZEZpbGVzVG9CdW5kbGVyRmlsZXMoX19hc3NpZ24oX19hc3NpZ24oe30sIGJhc2VUZW1wbGF0ZS5maWxlcyksIGZpbGVzKSksXG4gICAgZGVwZW5kZW5jaWVzOiBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgYmFzZVRlbXBsYXRlLmRlcGVuZGVuY2llcyksIGN1c3RvbVNldHVwID09PSBudWxsIHx8IGN1c3RvbVNldHVwID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjdXN0b21TZXR1cC5kZXBlbmRlbmNpZXMpLFxuICAgIGRldkRlcGVuZGVuY2llczogX19hc3NpZ24oX19hc3NpZ24oe30sIGJhc2VUZW1wbGF0ZS5kZXZEZXBlbmRlbmNpZXMpLCBjdXN0b21TZXR1cCA9PT0gbnVsbCB8fCBjdXN0b21TZXR1cCA9PT0gdm9pZCAwID8gdm9pZCAwIDogY3VzdG9tU2V0dXAuZGV2RGVwZW5kZW5jaWVzKSxcbiAgICBlbnRyeTogbm9ybWFsaXplUGF0aChjdXN0b21TZXR1cCA9PT0gbnVsbCB8fCBjdXN0b21TZXR1cCA9PT0gdm9pZCAwID8gdm9pZCAwIDogY3VzdG9tU2V0dXAuZW50cnkpLFxuICAgIG1haW46IGJhc2VUZW1wbGF0ZS5tYWluLFxuICAgIGVudmlyb25tZW50OiAoY3VzdG9tU2V0dXAgPT09IG51bGwgfHwgY3VzdG9tU2V0dXAgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGN1c3RvbVNldHVwLmVudmlyb25tZW50KSB8fCBiYXNlVGVtcGxhdGUuZW52aXJvbm1lbnRcbiAgfTtcbn07XG52YXIgY29udmVydGVkRmlsZXNUb0J1bmRsZXJGaWxlcyA9IGZ1bmN0aW9uIChmaWxlcykge1xuICBpZiAoIWZpbGVzKSByZXR1cm4ge307XG4gIHJldHVybiBPYmplY3Qua2V5cyhmaWxlcykucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGtleSkge1xuICAgIGlmICh0eXBlb2YgZmlsZXNba2V5XSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgYWNjW2tleV0gPSB7XG4gICAgICAgIGNvZGU6IGZpbGVzW2tleV1cbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIGFjY1trZXldID0gZmlsZXNba2V5XTtcbiAgICB9XG4gICAgcmV0dXJuIGFjYztcbiAgfSwge30pO1xufTtcblxudmFyIHVzZUFwcFN0YXRlID0gZnVuY3Rpb24gKHByb3BzLCBmaWxlcykge1xuICB2YXIgX2EgPSB1c2VTdGF0ZSh7XG4gICAgZWRpdG9yU3RhdGU6IFwicHJpc3RpbmVcIlxuICB9KSwgc3RhdGUgPSBfYVswXSwgc2V0U3RhdGUgPSBfYVsxXTtcbiAgdmFyIG9yaWdpbmFsU3RhdGVGcm9tUHJvcHMgPSBnZXRTYW5kcGFja1N0YXRlRnJvbVByb3BzKHByb3BzKTtcbiAgdmFyIGVkaXRvclN0YXRlID0gZGVxdWFsKG9yaWdpbmFsU3RhdGVGcm9tUHJvcHMuZmlsZXMsIGZpbGVzKSA/IFwicHJpc3RpbmVcIiA6IFwiZGlydHlcIjtcbiAgaWYgKGVkaXRvclN0YXRlICE9PSBzdGF0ZS5lZGl0b3JTdGF0ZSkge1xuICAgIHNldFN0YXRlKGZ1bmN0aW9uIChwcmV2KSB7XG4gICAgICByZXR1cm4gX19hc3NpZ24oX19hc3NpZ24oe30sIHByZXYpLCB7XG4gICAgICAgIGVkaXRvclN0YXRlOiBlZGl0b3JTdGF0ZVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIHN0YXRlO1xufTtcblxudmFyIE1BWF9JRF9MRU5HVEggPSA5O1xudmFyIHVzZUFzeW5jU2FuZHBhY2tJZCA9IGZ1bmN0aW9uIChmaWxlcykge1xuICBpZiAodHlwZW9mIHVzZUlkID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICB2YXIgcmVhY3REb21JZF8xID0gdXNlSWQoKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF9fYXdhaXRlcih2b2lkIDAsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhbGxDb2RlLCBzaGE7XG4gICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XG4gICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgIGFsbENvZGUgPSBPYmplY3QuZW50cmllcyhmaWxlcykubWFwKGZ1bmN0aW9uIChwYXRoLCBjb2RlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhdGggKyBcInxcIiArIGNvZGU7XG4gICAgICAgICAgICAgIH0pLmpvaW4oXCJ8fHxcIik7XG4gICAgICAgICAgICAgIHJldHVybiBbNCwgZ2VuZXJhdGVTaG9ydElkKGFsbENvZGUgKyByZWFjdERvbUlkXzEpXTtcbiAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgc2hhID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICByZXR1cm4gWzIsIGVuc3VyZUxlbmd0aChzaGEucmVwbGFjZSgvOi9nLCBcInNwXCIpLCBNQVhfSURfTEVOR1RIKV07XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBlbnN1cmVMZW5ndGgoZ2VuZXJhdGVSYW5kb21JZCgpLCBNQVhfSURfTEVOR1RIKTtcbiAgICB9O1xuICB9XG59O1xuZnVuY3Rpb24gZW5zdXJlTGVuZ3RoKHN0ciwgbGVuZ3RoKSB7XG4gIGlmIChzdHIubGVuZ3RoID4gbGVuZ3RoKSB7XG4gICAgcmV0dXJuIHN0ci5zbGljZSgwLCBsZW5ndGgpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBzdHIucGFkRW5kKGxlbmd0aCwgXCJzXCIpO1xuICB9XG59XG5mdW5jdGlvbiBnZW5lcmF0ZVNob3J0SWQoaW5wdXQpIHtcbiAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgIHZhciBlbmNvZGVyLCBkYXRhLCBoYXNoQnVmZmVyLCBoYXNoQXJyYXk7XG4gICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgZW5jb2RlciA9IG5ldyBUZXh0RW5jb2RlcigpO1xuICAgICAgICAgIGRhdGEgPSBlbmNvZGVyLmVuY29kZShpbnB1dCk7XG4gICAgICAgICAgcmV0dXJuIFs0LCBjcnlwdG8uc3VidGxlLmRpZ2VzdChcIlNIQS0yNTZcIiwgZGF0YSldO1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgaGFzaEJ1ZmZlciA9IF9hLnNlbnQoKTtcbiAgICAgICAgICBoYXNoQXJyYXkgPSBBcnJheS5mcm9tKG5ldyBVaW50OEFycmF5KGhhc2hCdWZmZXIpKTtcbiAgICAgICAgICByZXR1cm4gWzIsIGJ0b2EoU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsIGhhc2hBcnJheSkpXTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG59XG5cbnZhciBCVU5ETEVSX1RJTUVPVVQgPSA0MDAwMDtcbnZhciB1c2VDbGllbnQgPSBmdW5jdGlvbiAoX2EsIGZpbGVzU3RhdGUpIHtcbiAgdmFyIF9iLCBfYywgX2Q7XG4gIHZhciBvcHRpb25zID0gX2Eub3B0aW9ucywgY3VzdG9tU2V0dXAgPSBfYS5jdXN0b21TZXR1cCwgdGVhbUlkID0gX2EudGVhbUlkLCBzYW5kYm94SWQgPSBfYS5zYW5kYm94SWQ7XG4gIG9wdGlvbnMgIT09IG51bGwgJiYgb3B0aW9ucyAhPT0gdm9pZCAwID8gb3B0aW9ucyA6IG9wdGlvbnMgPSB7fTtcbiAgY3VzdG9tU2V0dXAgIT09IG51bGwgJiYgY3VzdG9tU2V0dXAgIT09IHZvaWQgMCA/IGN1c3RvbVNldHVwIDogY3VzdG9tU2V0dXAgPSB7fTtcbiAgdmFyIGluaXRNb2RlRnJvbVByb3BzID0gKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5pbml0TW9kZSkgfHwgXCJsYXp5XCI7XG4gIHZhciBfZSA9IHVzZVN0YXRlKHtcbiAgICBzdGFydFJvdXRlOiBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuc3RhcnRSb3V0ZSxcbiAgICBidW5kbGVyU3RhdGU6IHVuZGVmaW5lZCxcbiAgICBlcnJvcjogbnVsbCxcbiAgICBpbml0TW9kZTogaW5pdE1vZGVGcm9tUHJvcHMsXG4gICAgcmVhY3REZXZUb29sczogdW5kZWZpbmVkLFxuICAgIHN0YXR1czogKChfYiA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5hdXRvcnVuKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiB0cnVlKSA/IFwiaW5pdGlhbFwiIDogXCJpZGxlXCJcbiAgfSksIHN0YXRlID0gX2VbMF0sIHNldFN0YXRlID0gX2VbMV07XG4gIHZhciBpbnRlcnNlY3Rpb25PYnNlcnZlckNhbGxiYWNrID0gdXNlUmVmKCk7XG4gIHZhciBpbnRlcnNlY3Rpb25PYnNlcnZlciA9IHVzZVJlZihudWxsKTtcbiAgdmFyIGxhenlBbmNob3JSZWYgPSB1c2VSZWYobnVsbCk7XG4gIHZhciByZWdpc3RlcmVkSWZyYW1lcyA9IHVzZVJlZih7fSk7XG4gIHZhciBjbGllbnRzID0gdXNlUmVmKHt9KTtcbiAgdmFyIHRpbWVvdXRIb29rID0gdXNlUmVmKG51bGwpO1xuICB2YXIgdW5zdWJzY3JpYmVDbGllbnRMaXN0ZW5lcnMgPSB1c2VSZWYoe30pO1xuICB2YXIgdW5zdWJzY3JpYmUgPSB1c2VSZWYoKTtcbiAgdmFyIHF1ZXVlZExpc3RlbmVycyA9IHVzZVJlZih7XG4gICAgZ2xvYmFsOiB7fVxuICB9KTtcbiAgdmFyIGRlYm91bmNlSG9vayA9IHVzZVJlZigpO1xuICB2YXIgcHJldkVudmlyb25tZW50ID0gdXNlUmVmKGZpbGVzU3RhdGUuZW52aXJvbm1lbnQpO1xuICB2YXIgZXhwZXJpbWVudGFsX3N0YWJsZVNlcnZpY2VXb3JrZXJJZCA9IHVzZUFzeW5jU2FuZHBhY2tJZChmaWxlc1N0YXRlLmZpbGVzKTtcbiAgdmFyIGNyZWF0ZUNsaWVudCA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uIChpZnJhbWUsIGNsaWVudElkLCBjbGllbnRQcm9wc092ZXJyaWRlKSB7XG4gICAgcmV0dXJuIF9fYXdhaXRlcih2b2lkIDAsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgdGltZU91dCwgc2hvdWxkU2V0VGltZW91dCwgY2xpZW50LCBfYSwgX2IsIF9jLCBnbG9iYWxMaXN0ZW5lcnM7XG4gICAgICB2YXIgX2Q7XG4gICAgICB2YXIgX2UsIF9mLCBfZztcbiAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2gpIHtcbiAgICAgICAgc3dpdGNoIChfaC5sYWJlbCkge1xuICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgIGlmIChjbGllbnRzLmN1cnJlbnRbY2xpZW50SWRdKSB7XG4gICAgICAgICAgICAgIGNsaWVudHMuY3VycmVudFtjbGllbnRJZF0uZGVzdHJveSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3B0aW9ucyAhPT0gbnVsbCAmJiBvcHRpb25zICE9PSB2b2lkIDAgPyBvcHRpb25zIDogb3B0aW9ucyA9IHt9O1xuICAgICAgICAgICAgY3VzdG9tU2V0dXAgIT09IG51bGwgJiYgY3VzdG9tU2V0dXAgIT09IHZvaWQgMCA/IGN1c3RvbVNldHVwIDogY3VzdG9tU2V0dXAgPSB7fTtcbiAgICAgICAgICAgIHRpbWVPdXQgPSAoX2UgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuYnVuZGxlclRpbWVPdXQpICE9PSBudWxsICYmIF9lICE9PSB2b2lkIDAgPyBfZSA6IEJVTkRMRVJfVElNRU9VVDtcbiAgICAgICAgICAgIGlmICh0aW1lb3V0SG9vay5jdXJyZW50KSB7XG4gICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0SG9vay5jdXJyZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNob3VsZFNldFRpbWVvdXQgPSB0eXBlb2YgdW5zdWJzY3JpYmUuY3VycmVudCAhPT0gXCJmdW5jdGlvblwiO1xuICAgICAgICAgICAgaWYgKHNob3VsZFNldFRpbWVvdXQpIHtcbiAgICAgICAgICAgICAgdGltZW91dEhvb2suY3VycmVudCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHVucmVnaXN0ZXJBbGxDbGllbnRzKCk7XG4gICAgICAgICAgICAgICAgc2V0U3RhdGUoZnVuY3Rpb24gKHByZXYpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgcHJldiksIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiBcInRpbWVvdXRcIlxuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH0sIHRpbWVPdXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgX2EgPSBsb2FkU2FuZHBhY2tDbGllbnQ7XG4gICAgICAgICAgICBfYiA9IFtpZnJhbWUsIHtcbiAgICAgICAgICAgICAgZmlsZXM6IGZpbGVzU3RhdGUuZmlsZXMsXG4gICAgICAgICAgICAgIHRlbXBsYXRlOiBmaWxlc1N0YXRlLmVudmlyb25tZW50XG4gICAgICAgICAgICB9XTtcbiAgICAgICAgICAgIF9kID0ge1xuICAgICAgICAgICAgICBleHRlcm5hbFJlc291cmNlczogb3B0aW9ucy5leHRlcm5hbFJlc291cmNlcyxcbiAgICAgICAgICAgICAgYnVuZGxlclVSTDogb3B0aW9ucy5idW5kbGVyVVJMLFxuICAgICAgICAgICAgICBzdGFydFJvdXRlOiAoX2YgPSBjbGllbnRQcm9wc092ZXJyaWRlID09PSBudWxsIHx8IGNsaWVudFByb3BzT3ZlcnJpZGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNsaWVudFByb3BzT3ZlcnJpZGUuc3RhcnRSb3V0ZSkgIT09IG51bGwgJiYgX2YgIT09IHZvaWQgMCA/IF9mIDogb3B0aW9ucy5zdGFydFJvdXRlLFxuICAgICAgICAgICAgICBmaWxlUmVzb2x2ZXI6IG9wdGlvbnMuZmlsZVJlc29sdmVyLFxuICAgICAgICAgICAgICBza2lwRXZhbDogKF9nID0gb3B0aW9ucy5za2lwRXZhbCkgIT09IG51bGwgJiYgX2cgIT09IHZvaWQgMCA/IF9nIDogZmFsc2UsXG4gICAgICAgICAgICAgIGxvZ0xldmVsOiBvcHRpb25zLmxvZ0xldmVsLFxuICAgICAgICAgICAgICBzaG93T3BlbkluQ29kZVNhbmRib3g6IGZhbHNlLFxuICAgICAgICAgICAgICBzaG93RXJyb3JTY3JlZW46IHRydWUsXG4gICAgICAgICAgICAgIHNob3dMb2FkaW5nU2NyZWVuOiBmYWxzZSxcbiAgICAgICAgICAgICAgcmVhY3REZXZUb29sczogc3RhdGUucmVhY3REZXZUb29scyxcbiAgICAgICAgICAgICAgY3VzdG9tTnBtUmVnaXN0cmllczogY3VzdG9tU2V0dXAgPT09IG51bGwgfHwgY3VzdG9tU2V0dXAgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGN1c3RvbVNldHVwLm5wbVJlZ2lzdHJpZXMsXG4gICAgICAgICAgICAgIHRlYW1JZDogdGVhbUlkLFxuICAgICAgICAgICAgICBleHBlcmltZW50YWxfZW5hYmxlU2VydmljZVdvcmtlcjogISEob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmV4cGVyaW1lbnRhbF9lbmFibGVTZXJ2aWNlV29ya2VyKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmICghKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5leHBlcmltZW50YWxfZW5hYmxlU3RhYmxlU2VydmljZVdvcmtlcklkKSkgcmV0dXJuIFszLCAyXTtcbiAgICAgICAgICAgIHJldHVybiBbNCwgZXhwZXJpbWVudGFsX3N0YWJsZVNlcnZpY2VXb3JrZXJJZCgpXTtcbiAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICBfYyA9IF9oLnNlbnQoKTtcbiAgICAgICAgICAgIHJldHVybiBbMywgM107XG4gICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgX2MgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBfaC5sYWJlbCA9IDM7XG4gICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgcmV0dXJuIFs0LCBfYS5hcHBseSh2b2lkIDAsIF9iLmNvbmNhdChbKF9kLmV4cGVyaW1lbnRhbF9zdGFibGVTZXJ2aWNlV29ya2VySWQgPSBfYywgX2Quc2FuZGJveElkID0gc2FuZGJveElkLCBfZCldKSldO1xuICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgIGNsaWVudCA9IF9oLnNlbnQoKTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdW5zdWJzY3JpYmUuY3VycmVudCAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgIHVuc3Vic2NyaWJlLmN1cnJlbnQgPSBjbGllbnQubGlzdGVuKGhhbmRsZU1lc3NhZ2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdW5zdWJzY3JpYmVDbGllbnRMaXN0ZW5lcnMuY3VycmVudFtjbGllbnRJZF0gPSB1bnN1YnNjcmliZUNsaWVudExpc3RlbmVycy5jdXJyZW50W2NsaWVudElkXSB8fCAoe30pO1xuICAgICAgICAgICAgaWYgKHF1ZXVlZExpc3RlbmVycy5jdXJyZW50W2NsaWVudElkXSkge1xuICAgICAgICAgICAgICBPYmplY3Qua2V5cyhxdWV1ZWRMaXN0ZW5lcnMuY3VycmVudFtjbGllbnRJZF0pLmZvckVhY2goZnVuY3Rpb24gKGxpc3RlbmVySWQpIHtcbiAgICAgICAgICAgICAgICB2YXIgbGlzdGVuZXIgPSBxdWV1ZWRMaXN0ZW5lcnMuY3VycmVudFtjbGllbnRJZF1bbGlzdGVuZXJJZF07XG4gICAgICAgICAgICAgICAgdmFyIHVuc3Vic2NyaWJlID0gY2xpZW50Lmxpc3RlbihsaXN0ZW5lcik7XG4gICAgICAgICAgICAgICAgdW5zdWJzY3JpYmVDbGllbnRMaXN0ZW5lcnMuY3VycmVudFtjbGllbnRJZF1bbGlzdGVuZXJJZF0gPSB1bnN1YnNjcmliZTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIHF1ZXVlZExpc3RlbmVycy5jdXJyZW50W2NsaWVudElkXSA9IHt9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZ2xvYmFsTGlzdGVuZXJzID0gT2JqZWN0LmVudHJpZXMocXVldWVkTGlzdGVuZXJzLmN1cnJlbnQuZ2xvYmFsKTtcbiAgICAgICAgICAgIGdsb2JhbExpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICB2YXIgbGlzdGVuZXJJZCA9IF9hWzBdLCBsaXN0ZW5lciA9IF9hWzFdO1xuICAgICAgICAgICAgICB2YXIgdW5zdWJzY3JpYmUgPSBjbGllbnQubGlzdGVuKGxpc3RlbmVyKTtcbiAgICAgICAgICAgICAgdW5zdWJzY3JpYmVDbGllbnRMaXN0ZW5lcnMuY3VycmVudFtjbGllbnRJZF1bbGlzdGVuZXJJZF0gPSB1bnN1YnNjcmliZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY2xpZW50cy5jdXJyZW50W2NsaWVudElkXSA9IGNsaWVudDtcbiAgICAgICAgICAgIHJldHVybiBbMl07XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9LCBbZmlsZXNTdGF0ZS5lbnZpcm9ubWVudCwgZmlsZXNTdGF0ZS5maWxlcywgc3RhdGUucmVhY3REZXZUb29sc10pO1xuICB2YXIgdW5yZWdpc3RlckFsbENsaWVudHMgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgT2JqZWN0LmtleXMoY2xpZW50cy5jdXJyZW50KS5tYXAodW5yZWdpc3RlckJ1bmRsZXIpO1xuICAgIGlmICh0eXBlb2YgdW5zdWJzY3JpYmUuY3VycmVudCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICB1bnN1YnNjcmliZS5jdXJyZW50KCk7XG4gICAgICB1bnN1YnNjcmliZS5jdXJyZW50ID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfSwgW10pO1xuICB2YXIgcnVuU2FuZHBhY2sgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9fYXdhaXRlcih2b2lkIDAsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICByZXR1cm4gWzQsIFByb21pc2UuYWxsKE9iamVjdC5lbnRyaWVzKHJlZ2lzdGVyZWRJZnJhbWVzLmN1cnJlbnQpLm1hcChmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgdmFyIGNsaWVudElkID0gX2FbMF0sIF9iID0gX2FbMV0sIGlmcmFtZSA9IF9iLmlmcmFtZSwgX2MgPSBfYi5jbGllbnRQcm9wc092ZXJyaWRlLCBjbGllbnRQcm9wc092ZXJyaWRlID0gX2MgPT09IHZvaWQgMCA/IHt9IDogX2M7XG4gICAgICAgICAgICAgIHJldHVybiBfX2F3YWl0ZXIodm9pZCAwLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2QpIHtcbiAgICAgICAgICAgICAgICAgIHN3aXRjaCAoX2QubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCwgY3JlYXRlQ2xpZW50KGlmcmFtZSwgY2xpZW50SWQsIGNsaWVudFByb3BzT3ZlcnJpZGUpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgIF9kLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzJdO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pKV07XG4gICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgX2Euc2VudCgpO1xuICAgICAgICAgICAgc2V0U3RhdGUoZnVuY3Rpb24gKHByZXYpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIF9fYXNzaWduKF9fYXNzaWduKHt9LCBwcmV2KSwge1xuICAgICAgICAgICAgICAgIGVycm9yOiBudWxsLFxuICAgICAgICAgICAgICAgIHN0YXR1czogXCJydW5uaW5nXCJcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBbMl07XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9LCBbY3JlYXRlQ2xpZW50XSk7XG4gIGludGVyc2VjdGlvbk9ic2VydmVyQ2FsbGJhY2suY3VycmVudCA9IGZ1bmN0aW9uIChlbnRyaWVzKSB7XG4gICAgaWYgKGVudHJpZXMuc29tZShmdW5jdGlvbiAoZW50cnkpIHtcbiAgICAgIHJldHVybiBlbnRyeS5pc0ludGVyc2VjdGluZztcbiAgICB9KSkge1xuICAgICAgcnVuU2FuZHBhY2soKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdW5yZWdpc3RlckFsbENsaWVudHMoKTtcbiAgICB9XG4gIH07XG4gIHZhciBpbml0aWFsaXplU2FuZHBhY2tJZnJhbWUgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF9hLCBfYiwgX2M7XG4gICAgdmFyIGF1dG9ydW4gPSAoX2EgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuYXV0b3J1bikgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogdHJ1ZTtcbiAgICBpZiAoIWF1dG9ydW4pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIG9ic2VydmVyT3B0aW9ucyA9IChfYiA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5pbml0TW9kZU9ic2VydmVyT3B0aW9ucykgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDoge1xuICAgICAgcm9vdE1hcmdpbjogXCIxMDAwcHggMHB4XCJcbiAgICB9O1xuICAgIGlmIChpbnRlcnNlY3Rpb25PYnNlcnZlci5jdXJyZW50ICYmIGxhenlBbmNob3JSZWYuY3VycmVudCkge1xuICAgICAgKF9jID0gaW50ZXJzZWN0aW9uT2JzZXJ2ZXIuY3VycmVudCkgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLnVub2JzZXJ2ZShsYXp5QW5jaG9yUmVmLmN1cnJlbnQpO1xuICAgIH1cbiAgICBpZiAobGF6eUFuY2hvclJlZi5jdXJyZW50ICYmIHN0YXRlLmluaXRNb2RlID09PSBcImxhenlcIikge1xuICAgICAgaW50ZXJzZWN0aW9uT2JzZXJ2ZXIuY3VycmVudCA9IG5ldyBJbnRlcnNlY3Rpb25PYnNlcnZlcihmdW5jdGlvbiAoZW50cmllcykge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICBpZiAoZW50cmllcy5zb21lKGZ1bmN0aW9uIChlbnRyeSkge1xuICAgICAgICAgIHJldHVybiBlbnRyeS5pc0ludGVyc2VjdGluZztcbiAgICAgICAgfSkpIHtcbiAgICAgICAgICBpZiAoZW50cmllcy5zb21lKGZ1bmN0aW9uIChlbnRyeSkge1xuICAgICAgICAgICAgcmV0dXJuIGVudHJ5LmlzSW50ZXJzZWN0aW5nO1xuICAgICAgICAgIH0pICYmIGxhenlBbmNob3JSZWYuY3VycmVudCkge1xuICAgICAgICAgICAgKF9hID0gaW50ZXJzZWN0aW9uT2JzZXJ2ZXJDYWxsYmFjay5jdXJyZW50KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY2FsbChpbnRlcnNlY3Rpb25PYnNlcnZlckNhbGxiYWNrLCBlbnRyaWVzKTtcbiAgICAgICAgICAgIChfYiA9IGludGVyc2VjdGlvbk9ic2VydmVyLmN1cnJlbnQpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi51bm9ic2VydmUobGF6eUFuY2hvclJlZi5jdXJyZW50KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sIG9ic2VydmVyT3B0aW9ucyk7XG4gICAgICBpbnRlcnNlY3Rpb25PYnNlcnZlci5jdXJyZW50Lm9ic2VydmUobGF6eUFuY2hvclJlZi5jdXJyZW50KTtcbiAgICB9IGVsc2UgaWYgKGxhenlBbmNob3JSZWYuY3VycmVudCAmJiBzdGF0ZS5pbml0TW9kZSA9PT0gXCJ1c2VyLXZpc2libGVcIikge1xuICAgICAgaW50ZXJzZWN0aW9uT2JzZXJ2ZXIuY3VycmVudCA9IG5ldyBJbnRlcnNlY3Rpb25PYnNlcnZlcihmdW5jdGlvbiAoZW50cmllcykge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIChfYSA9IGludGVyc2VjdGlvbk9ic2VydmVyQ2FsbGJhY2suY3VycmVudCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNhbGwoaW50ZXJzZWN0aW9uT2JzZXJ2ZXJDYWxsYmFjaywgZW50cmllcyk7XG4gICAgICB9LCBvYnNlcnZlck9wdGlvbnMpO1xuICAgICAgaW50ZXJzZWN0aW9uT2JzZXJ2ZXIuY3VycmVudC5vYnNlcnZlKGxhenlBbmNob3JSZWYuY3VycmVudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJ1blNhbmRwYWNrKCk7XG4gICAgfVxuICB9LCBbb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmF1dG9ydW4sIG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5pbml0TW9kZU9ic2VydmVyT3B0aW9ucywgcnVuU2FuZHBhY2ssIHN0YXRlLmluaXRNb2RlLCB1bnJlZ2lzdGVyQWxsQ2xpZW50c10pO1xuICB2YXIgcmVnaXN0ZXJCdW5kbGVyID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gKGlmcmFtZSwgY2xpZW50SWQsIGNsaWVudFByb3BzT3ZlcnJpZGUpIHtcbiAgICByZXR1cm4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgIHJlZ2lzdGVyZWRJZnJhbWVzLmN1cnJlbnRbY2xpZW50SWRdID0ge1xuICAgICAgICAgICAgICBpZnJhbWU6IGlmcmFtZSxcbiAgICAgICAgICAgICAgY2xpZW50UHJvcHNPdmVycmlkZTogY2xpZW50UHJvcHNPdmVycmlkZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmICghKHN0YXRlLnN0YXR1cyA9PT0gXCJydW5uaW5nXCIpKSByZXR1cm4gWzMsIDJdO1xuICAgICAgICAgICAgcmV0dXJuIFs0LCBjcmVhdGVDbGllbnQoaWZyYW1lLCBjbGllbnRJZCwgY2xpZW50UHJvcHNPdmVycmlkZSldO1xuICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgIF9hLnNlbnQoKTtcbiAgICAgICAgICAgIF9hLmxhYmVsID0gMjtcbiAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICByZXR1cm4gWzJdO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSwgW2NyZWF0ZUNsaWVudCwgc3RhdGUuc3RhdHVzXSk7XG4gIHZhciB1bnJlZ2lzdGVyQnVuZGxlciA9IGZ1bmN0aW9uIChjbGllbnRJZCkge1xuICAgIHZhciBfYSwgX2I7XG4gICAgdmFyIGNsaWVudCA9IGNsaWVudHMuY3VycmVudFtjbGllbnRJZF07XG4gICAgaWYgKGNsaWVudCkge1xuICAgICAgY2xpZW50LmRlc3Ryb3koKTtcbiAgICAgIChfYSA9IGNsaWVudC5pZnJhbWUuY29udGVudFdpbmRvdykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmxvY2F0aW9uLnJlcGxhY2UoXCJhYm91dDpibGFua1wiKTtcbiAgICAgIGNsaWVudC5pZnJhbWUucmVtb3ZlQXR0cmlidXRlKFwic3JjXCIpO1xuICAgICAgZGVsZXRlIGNsaWVudHMuY3VycmVudFtjbGllbnRJZF07XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlbGV0ZSByZWdpc3RlcmVkSWZyYW1lcy5jdXJyZW50W2NsaWVudElkXTtcbiAgICB9XG4gICAgaWYgKHRpbWVvdXRIb29rLmN1cnJlbnQpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0SG9vay5jdXJyZW50KTtcbiAgICB9XG4gICAgdmFyIHVuc3Vic2NyaWJlUXVldWVkQ2xpZW50cyA9IE9iamVjdC52YWx1ZXMoKF9iID0gdW5zdWJzY3JpYmVDbGllbnRMaXN0ZW5lcnMuY3VycmVudFtjbGllbnRJZF0pICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IHt9KTtcbiAgICB1bnN1YnNjcmliZVF1ZXVlZENsaWVudHMuZm9yRWFjaChmdW5jdGlvbiAobGlzdGVuZXJPZkNsaWVudCkge1xuICAgICAgdmFyIGxpc3RlbmVyRnVuY3Rpb25zID0gT2JqZWN0LnZhbHVlcyhsaXN0ZW5lck9mQ2xpZW50KTtcbiAgICAgIGxpc3RlbmVyRnVuY3Rpb25zLmZvckVhY2goZnVuY3Rpb24gKHVuc3Vic2NyaWJlKSB7XG4gICAgICAgIHJldHVybiB1bnN1YnNjcmliZSgpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgdmFyIHN0YXR1cyA9IE9iamVjdC5rZXlzKGNsaWVudHMuY3VycmVudCkubGVuZ3RoID4gMCA/IFwicnVubmluZ1wiIDogXCJpZGxlXCI7XG4gICAgc2V0U3RhdGUoZnVuY3Rpb24gKHByZXYpIHtcbiAgICAgIHJldHVybiBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgcHJldiksIHtcbiAgICAgICAgc3RhdHVzOiBzdGF0dXNcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuICB2YXIgaGFuZGxlTWVzc2FnZSA9IGZ1bmN0aW9uIChtc2cpIHtcbiAgICBpZiAobXNnLnR5cGUgPT09IFwic3RhcnRcIikge1xuICAgICAgc2V0U3RhdGUoZnVuY3Rpb24gKHByZXYpIHtcbiAgICAgICAgcmV0dXJuIF9fYXNzaWduKF9fYXNzaWduKHt9LCBwcmV2KSwge1xuICAgICAgICAgIGVycm9yOiBudWxsXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChtc2cudHlwZSA9PT0gXCJzdGF0ZVwiKSB7XG4gICAgICBzZXRTdGF0ZShmdW5jdGlvbiAocHJldikge1xuICAgICAgICByZXR1cm4gX19hc3NpZ24oX19hc3NpZ24oe30sIHByZXYpLCB7XG4gICAgICAgICAgYnVuZGxlclN0YXRlOiBtc2cuc3RhdGVcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKG1zZy50eXBlID09PSBcImRvbmVcIiAmJiAhbXNnLmNvbXBpbGF0b25FcnJvciB8fCBtc2cudHlwZSA9PT0gXCJjb25uZWN0ZWRcIikge1xuICAgICAgaWYgKHRpbWVvdXRIb29rLmN1cnJlbnQpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXRIb29rLmN1cnJlbnQpO1xuICAgICAgfVxuICAgICAgc2V0U3RhdGUoZnVuY3Rpb24gKHByZXYpIHtcbiAgICAgICAgcmV0dXJuIF9fYXNzaWduKF9fYXNzaWduKHt9LCBwcmV2KSwge1xuICAgICAgICAgIGVycm9yOiBudWxsXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChtc2cudHlwZSA9PT0gXCJhY3Rpb25cIiAmJiBtc2cuYWN0aW9uID09PSBcInNob3ctZXJyb3JcIikge1xuICAgICAgaWYgKHRpbWVvdXRIb29rLmN1cnJlbnQpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXRIb29rLmN1cnJlbnQpO1xuICAgICAgfVxuICAgICAgc2V0U3RhdGUoZnVuY3Rpb24gKHByZXYpIHtcbiAgICAgICAgcmV0dXJuIF9fYXNzaWduKF9fYXNzaWduKHt9LCBwcmV2KSwge1xuICAgICAgICAgIGVycm9yOiBleHRyYWN0RXJyb3JEZXRhaWxzKG1zZylcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKG1zZy50eXBlID09PSBcImFjdGlvblwiICYmIG1zZy5hY3Rpb24gPT09IFwibm90aWZpY2F0aW9uXCIgJiYgbXNnLm5vdGlmaWNhdGlvblR5cGUgPT09IFwiZXJyb3JcIikge1xuICAgICAgc2V0U3RhdGUoZnVuY3Rpb24gKHByZXYpIHtcbiAgICAgICAgcmV0dXJuIF9fYXNzaWduKF9fYXNzaWduKHt9LCBwcmV2KSwge1xuICAgICAgICAgIGVycm9yOiB7XG4gICAgICAgICAgICBtZXNzYWdlOiBtc2cudGl0bGVcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xuICB2YXIgcmVnaXN0ZXJSZWFjdERldlRvb2xzID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgc2V0U3RhdGUoZnVuY3Rpb24gKHByZXYpIHtcbiAgICAgIHJldHVybiBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgcHJldiksIHtcbiAgICAgICAgcmVhY3REZXZUb29sczogdmFsdWVcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuICB2YXIgcmVjb21waWxlTW9kZSA9IChfYyA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5yZWNvbXBpbGVNb2RlKSAhPT0gbnVsbCAmJiBfYyAhPT0gdm9pZCAwID8gX2MgOiBcImRlbGF5ZWRcIjtcbiAgdmFyIHJlY29tcGlsZURlbGF5ID0gKF9kID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnJlY29tcGlsZURlbGF5KSAhPT0gbnVsbCAmJiBfZCAhPT0gdm9pZCAwID8gX2QgOiAyMDA7XG4gIHZhciBkaXNwYXRjaE1lc3NhZ2UgPSBmdW5jdGlvbiAobWVzc2FnZSwgY2xpZW50SWQpIHtcbiAgICBpZiAoc3RhdGUuc3RhdHVzICE9PSBcInJ1bm5pbmdcIikge1xuICAgICAgY29uc29sZS53YXJuKFwiW3NhbmRwYWNrLXJlYWN0XTogZGlzcGF0Y2ggY2Fubm90IGJlIGNhbGxlZCB3aGlsZSBpbiBpZGxlIG1vZGVcIik7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChjbGllbnRJZCkge1xuICAgICAgY2xpZW50cy5jdXJyZW50W2NsaWVudElkXS5kaXNwYXRjaChtZXNzYWdlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgT2JqZWN0LnZhbHVlcyhjbGllbnRzLmN1cnJlbnQpLmZvckVhY2goZnVuY3Rpb24gKGNsaWVudCkge1xuICAgICAgICBjbGllbnQuZGlzcGF0Y2gobWVzc2FnZSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG4gIHZhciBhZGRMaXN0ZW5lciA9IGZ1bmN0aW9uIChsaXN0ZW5lciwgY2xpZW50SWQpIHtcbiAgICBpZiAoY2xpZW50SWQpIHtcbiAgICAgIGlmIChjbGllbnRzLmN1cnJlbnRbY2xpZW50SWRdKSB7XG4gICAgICAgIHZhciB1bnN1YnNjcmliZUxpc3RlbmVyID0gY2xpZW50cy5jdXJyZW50W2NsaWVudElkXS5saXN0ZW4obGlzdGVuZXIpO1xuICAgICAgICByZXR1cm4gdW5zdWJzY3JpYmVMaXN0ZW5lcjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBsaXN0ZW5lcklkXzEgPSBnZW5lcmF0ZVJhbmRvbUlkKCk7XG4gICAgICAgIHF1ZXVlZExpc3RlbmVycy5jdXJyZW50W2NsaWVudElkXSA9IHF1ZXVlZExpc3RlbmVycy5jdXJyZW50W2NsaWVudElkXSB8fCAoe30pO1xuICAgICAgICB1bnN1YnNjcmliZUNsaWVudExpc3RlbmVycy5jdXJyZW50W2NsaWVudElkXSA9IHVuc3Vic2NyaWJlQ2xpZW50TGlzdGVuZXJzLmN1cnJlbnRbY2xpZW50SWRdIHx8ICh7fSk7XG4gICAgICAgIHF1ZXVlZExpc3RlbmVycy5jdXJyZW50W2NsaWVudElkXVtsaXN0ZW5lcklkXzFdID0gbGlzdGVuZXI7XG4gICAgICAgIHZhciB1bnN1YnNjcmliZUxpc3RlbmVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmIChxdWV1ZWRMaXN0ZW5lcnMuY3VycmVudFtjbGllbnRJZF1bbGlzdGVuZXJJZF8xXSkge1xuICAgICAgICAgICAgZGVsZXRlIHF1ZXVlZExpc3RlbmVycy5jdXJyZW50W2NsaWVudElkXVtsaXN0ZW5lcklkXzFdO1xuICAgICAgICAgIH0gZWxzZSBpZiAodW5zdWJzY3JpYmVDbGllbnRMaXN0ZW5lcnMuY3VycmVudFtjbGllbnRJZF1bbGlzdGVuZXJJZF8xXSkge1xuICAgICAgICAgICAgdW5zdWJzY3JpYmVDbGllbnRMaXN0ZW5lcnMuY3VycmVudFtjbGllbnRJZF1bbGlzdGVuZXJJZF8xXSgpO1xuICAgICAgICAgICAgZGVsZXRlIHVuc3Vic2NyaWJlQ2xpZW50TGlzdGVuZXJzLmN1cnJlbnRbY2xpZW50SWRdW2xpc3RlbmVySWRfMV07XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gdW5zdWJzY3JpYmVMaXN0ZW5lcjtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGxpc3RlbmVySWRfMiA9IGdlbmVyYXRlUmFuZG9tSWQoKTtcbiAgICAgIHF1ZXVlZExpc3RlbmVycy5jdXJyZW50Lmdsb2JhbFtsaXN0ZW5lcklkXzJdID0gbGlzdGVuZXI7XG4gICAgICB2YXIgY2xpZW50c0xpc3QgPSBPYmplY3QudmFsdWVzKGNsaWVudHMuY3VycmVudCk7XG4gICAgICB2YXIgY3VycmVudENsaWVudFVuc3Vic2NyaWJlTGlzdGVuZXJzXzEgPSBjbGllbnRzTGlzdC5tYXAoZnVuY3Rpb24gKGNsaWVudCkge1xuICAgICAgICByZXR1cm4gY2xpZW50Lmxpc3RlbihsaXN0ZW5lcik7XG4gICAgICB9KTtcbiAgICAgIHZhciB1bnN1YnNjcmliZUxpc3RlbmVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBjdXJyZW50Q2xpZW50VW5zdWJzY3JpYmVMaXN0ZW5lcnNfMS5mb3JFYWNoKGZ1bmN0aW9uICh1bnN1YnNjcmliZSkge1xuICAgICAgICAgIHJldHVybiB1bnN1YnNjcmliZSgpO1xuICAgICAgICB9KTtcbiAgICAgICAgZGVsZXRlIHF1ZXVlZExpc3RlbmVycy5jdXJyZW50Lmdsb2JhbFtsaXN0ZW5lcklkXzJdO1xuICAgICAgICBPYmplY3QudmFsdWVzKHVuc3Vic2NyaWJlQ2xpZW50TGlzdGVuZXJzLmN1cnJlbnQpLmZvckVhY2goZnVuY3Rpb24gKGNsaWVudCkge1xuICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAoX2EgPSBjbGllbnQgPT09IG51bGwgfHwgY2xpZW50ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjbGllbnRbbGlzdGVuZXJJZF8yXSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNhbGwoY2xpZW50KTtcbiAgICAgICAgfSk7XG4gICAgICB9O1xuICAgICAgcmV0dXJuIHVuc3Vic2NyaWJlTGlzdGVuZXI7XG4gICAgfVxuICB9O1xuICB1c2VFZmZlY3QoZnVuY3Rpb24gd2F0Y2hGaWxlQ2hhbmdlcygpIHtcbiAgICBpZiAoc3RhdGUuc3RhdHVzICE9PSBcInJ1bm5pbmdcIiB8fCAhZmlsZXNTdGF0ZS5zaG91bGRVcGRhdGVQcmV2aWV3KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChwcmV2RW52aXJvbm1lbnQuY3VycmVudCAhPT0gZmlsZXNTdGF0ZS5lbnZpcm9ubWVudCkge1xuICAgICAgcHJldkVudmlyb25tZW50LmN1cnJlbnQgPSBmaWxlc1N0YXRlLmVudmlyb25tZW50O1xuICAgICAgT2JqZWN0LmVudHJpZXMoY2xpZW50cy5jdXJyZW50KS5mb3JFYWNoKGZ1bmN0aW9uIChfYSkge1xuICAgICAgICB2YXIga2V5ID0gX2FbMF0sIGNsaWVudCA9IF9hWzFdO1xuICAgICAgICByZWdpc3RlckJ1bmRsZXIoY2xpZW50LmlmcmFtZSwga2V5KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAocmVjb21waWxlTW9kZSA9PT0gXCJpbW1lZGlhdGVcIikge1xuICAgICAgT2JqZWN0LnZhbHVlcyhjbGllbnRzLmN1cnJlbnQpLmZvckVhY2goZnVuY3Rpb24gKGNsaWVudCkge1xuICAgICAgICBpZiAoY2xpZW50LnN0YXR1cyA9PT0gXCJkb25lXCIpIHtcbiAgICAgICAgICBjbGllbnQudXBkYXRlU2FuZGJveCh7XG4gICAgICAgICAgICBmaWxlczogZmlsZXNTdGF0ZS5maWxlcyxcbiAgICAgICAgICAgIHRlbXBsYXRlOiBmaWxlc1N0YXRlLmVudmlyb25tZW50XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAocmVjb21waWxlTW9kZSA9PT0gXCJkZWxheWVkXCIpIHtcbiAgICAgIGlmICh0eXBlb2Ygd2luZG93ID09PSBcInVuZGVmaW5lZFwiKSByZXR1cm47XG4gICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KGRlYm91bmNlSG9vay5jdXJyZW50KTtcbiAgICAgIGRlYm91bmNlSG9vay5jdXJyZW50ID0gd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBPYmplY3QudmFsdWVzKGNsaWVudHMuY3VycmVudCkuZm9yRWFjaChmdW5jdGlvbiAoY2xpZW50KSB7XG4gICAgICAgICAgaWYgKGNsaWVudC5zdGF0dXMgPT09IFwiZG9uZVwiKSB7XG4gICAgICAgICAgICBjbGllbnQudXBkYXRlU2FuZGJveCh7XG4gICAgICAgICAgICAgIGZpbGVzOiBmaWxlc1N0YXRlLmZpbGVzLFxuICAgICAgICAgICAgICB0ZW1wbGF0ZTogZmlsZXNTdGF0ZS5lbnZpcm9ubWVudFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0sIHJlY29tcGlsZURlbGF5KTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHdpbmRvdy5jbGVhclRpbWVvdXQoZGVib3VuY2VIb29rLmN1cnJlbnQpO1xuICAgIH07XG4gIH0sIFtmaWxlc1N0YXRlLmZpbGVzLCBmaWxlc1N0YXRlLmVudmlyb25tZW50LCBmaWxlc1N0YXRlLnNob3VsZFVwZGF0ZVByZXZpZXcsIHJlY29tcGlsZURlbGF5LCByZWNvbXBpbGVNb2RlLCByZWdpc3RlckJ1bmRsZXIsIHN0YXRlLnN0YXR1c10pO1xuICB1c2VFZmZlY3QoZnVuY3Rpb24gd2F0Y2hJbml0TW9kZSgpIHtcbiAgICBpZiAoaW5pdE1vZGVGcm9tUHJvcHMgIT09IHN0YXRlLmluaXRNb2RlKSB7XG4gICAgICBzZXRTdGF0ZShmdW5jdGlvbiAocHJldikge1xuICAgICAgICByZXR1cm4gX19hc3NpZ24oX19hc3NpZ24oe30sIHByZXYpLCB7XG4gICAgICAgICAgaW5pdE1vZGU6IGluaXRNb2RlRnJvbVByb3BzXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICBpbml0aWFsaXplU2FuZHBhY2tJZnJhbWUoKTtcbiAgICB9XG4gIH0sIFtpbml0TW9kZUZyb21Qcm9wcywgaW5pdGlhbGl6ZVNhbmRwYWNrSWZyYW1lLCBzdGF0ZS5pbml0TW9kZV0pO1xuICB1c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBmdW5jdGlvbiB1bm1vdW50Q2xpZW50KCkge1xuICAgICAgaWYgKHR5cGVvZiB1bnN1YnNjcmliZS5jdXJyZW50ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgdW5zdWJzY3JpYmUuY3VycmVudCgpO1xuICAgICAgfVxuICAgICAgaWYgKHRpbWVvdXRIb29rLmN1cnJlbnQpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXRIb29rLmN1cnJlbnQpO1xuICAgICAgfVxuICAgICAgaWYgKGRlYm91bmNlSG9vay5jdXJyZW50KSB7XG4gICAgICAgIGNsZWFyVGltZW91dChkZWJvdW5jZUhvb2suY3VycmVudCk7XG4gICAgICB9XG4gICAgICBpZiAoaW50ZXJzZWN0aW9uT2JzZXJ2ZXIuY3VycmVudCkge1xuICAgICAgICBpbnRlcnNlY3Rpb25PYnNlcnZlci5jdXJyZW50LmRpc2Nvbm5lY3QoKTtcbiAgICAgIH1cbiAgICB9O1xuICB9LCBbXSk7XG4gIHJldHVybiBbc3RhdGUsIHtcbiAgICBjbGllbnRzOiBjbGllbnRzLmN1cnJlbnQsXG4gICAgaW5pdGlhbGl6ZVNhbmRwYWNrSWZyYW1lOiBpbml0aWFsaXplU2FuZHBhY2tJZnJhbWUsXG4gICAgcnVuU2FuZHBhY2s6IHJ1blNhbmRwYWNrLFxuICAgIHJlZ2lzdGVyQnVuZGxlcjogcmVnaXN0ZXJCdW5kbGVyLFxuICAgIHVucmVnaXN0ZXJCdW5kbGVyOiB1bnJlZ2lzdGVyQnVuZGxlcixcbiAgICByZWdpc3RlclJlYWN0RGV2VG9vbHM6IHJlZ2lzdGVyUmVhY3REZXZUb29scyxcbiAgICBhZGRMaXN0ZW5lcjogYWRkTGlzdGVuZXIsXG4gICAgZGlzcGF0Y2hNZXNzYWdlOiBkaXNwYXRjaE1lc3NhZ2UsXG4gICAgbGF6eUFuY2hvclJlZjogbGF6eUFuY2hvclJlZixcbiAgICB1bnN1YnNjcmliZUNsaWVudExpc3RlbmVyc1JlZjogdW5zdWJzY3JpYmVDbGllbnRMaXN0ZW5lcnMsXG4gICAgcXVldWVkTGlzdGVuZXJzUmVmOiBxdWV1ZWRMaXN0ZW5lcnNcbiAgfV07XG59O1xuXG52YXIgdXNlRmlsZXMgPSBmdW5jdGlvbiAocHJvcHMpIHtcbiAgdmFyIG9yaWdpbmFsU3RhdGVGcm9tUHJvcHMgPSBnZXRTYW5kcGFja1N0YXRlRnJvbVByb3BzKHByb3BzKTtcbiAgdmFyIF9hID0gdXNlU3RhdGUob3JpZ2luYWxTdGF0ZUZyb21Qcm9wcyksIHN0YXRlID0gX2FbMF0sIHNldFN0YXRlID0gX2FbMV07XG4gIHZhciBpc01vdW50ZWRSZWYgPSB1c2VSZWYoZmFsc2UpO1xuICB1c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmIChpc01vdW50ZWRSZWYuY3VycmVudCkge1xuICAgICAgc2V0U3RhdGUoZ2V0U2FuZHBhY2tTdGF0ZUZyb21Qcm9wcyhwcm9wcykpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpc01vdW50ZWRSZWYuY3VycmVudCA9IHRydWU7XG4gICAgfVxuICB9LCBbcHJvcHMuZmlsZXMsIHByb3BzLmN1c3RvbVNldHVwLCBwcm9wcy50ZW1wbGF0ZV0pO1xuICB2YXIgdXBkYXRlRmlsZSA9IGZ1bmN0aW9uIChwYXRoT3JGaWxlcywgY29kZSwgc2hvdWxkVXBkYXRlUHJldmlldykge1xuICAgIGlmIChzaG91bGRVcGRhdGVQcmV2aWV3ID09PSB2b2lkIDApIHtcbiAgICAgIHNob3VsZFVwZGF0ZVByZXZpZXcgPSB0cnVlO1xuICAgIH1cbiAgICBzZXRTdGF0ZShmdW5jdGlvbiAocHJldikge1xuICAgICAgdmFyIF9hO1xuICAgICAgdmFyIGZpbGVzID0gcHJldi5maWxlcztcbiAgICAgIGlmICh0eXBlb2YgcGF0aE9yRmlsZXMgPT09IFwic3RyaW5nXCIgJiYgdHlwZW9mIGNvZGUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgZmlsZXMgPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgZmlsZXMpLCAoX2EgPSB7fSwgX2FbcGF0aE9yRmlsZXNdID0gX19hc3NpZ24oX19hc3NpZ24oe30sIGZpbGVzW3BhdGhPckZpbGVzXSksIHtcbiAgICAgICAgICBjb2RlOiBjb2RlXG4gICAgICAgIH0pLCBfYSkpO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgcGF0aE9yRmlsZXMgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgZmlsZXMgPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgZmlsZXMpLCBjb252ZXJ0ZWRGaWxlc1RvQnVuZGxlckZpbGVzKHBhdGhPckZpbGVzKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gX19hc3NpZ24oX19hc3NpZ24oe30sIHByZXYpLCB7XG4gICAgICAgIGZpbGVzOiBub3JtYWxpemVQYXRoKGZpbGVzKSxcbiAgICAgICAgc2hvdWxkVXBkYXRlUHJldmlldzogc2hvdWxkVXBkYXRlUHJldmlld1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG4gIHZhciBvcGVyYXRpb25zID0ge1xuICAgIG9wZW5GaWxlOiBmdW5jdGlvbiAocGF0aCkge1xuICAgICAgc2V0U3RhdGUoZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgIHZhciB2aXNpYmxlRmlsZXMgPSBfYS52aXNpYmxlRmlsZXMsIHJlc3QgPSBfX3Jlc3QoX2EsIFtcInZpc2libGVGaWxlc1wiXSk7XG4gICAgICAgIHZhciBuZXdQYXRocyA9IHZpc2libGVGaWxlcy5pbmNsdWRlcyhwYXRoKSA/IHZpc2libGVGaWxlcyA6IF9fc3ByZWFkQXJyYXkoX19zcHJlYWRBcnJheShbXSwgdmlzaWJsZUZpbGVzLCB0cnVlKSwgW3BhdGhdLCBmYWxzZSk7XG4gICAgICAgIHJldHVybiBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgcmVzdCksIHtcbiAgICAgICAgICBhY3RpdmVGaWxlOiBwYXRoLFxuICAgICAgICAgIHZpc2libGVGaWxlczogbmV3UGF0aHNcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIHJlc2V0RmlsZTogZnVuY3Rpb24gKHBhdGgpIHtcbiAgICAgIHNldFN0YXRlKGZ1bmN0aW9uIChwcmV2U3RhdGUpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICByZXR1cm4gX19hc3NpZ24oX19hc3NpZ24oe30sIHByZXZTdGF0ZSksIHtcbiAgICAgICAgICBmaWxlczogX19hc3NpZ24oX19hc3NpZ24oe30sIHByZXZTdGF0ZS5maWxlcyksIChfYSA9IHt9LCBfYVtwYXRoXSA9IG9yaWdpbmFsU3RhdGVGcm9tUHJvcHMuZmlsZXNbcGF0aF0sIF9hKSlcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIHJlc2V0QWxsRmlsZXM6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHNldFN0YXRlKGZ1bmN0aW9uIChwcmV2KSB7XG4gICAgICAgIHJldHVybiBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgcHJldiksIHtcbiAgICAgICAgICBmaWxlczogb3JpZ2luYWxTdGF0ZUZyb21Qcm9wcy5maWxlc1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgc2V0QWN0aXZlRmlsZTogZnVuY3Rpb24gKGFjdGl2ZUZpbGUpIHtcbiAgICAgIGlmIChzdGF0ZS5maWxlc1thY3RpdmVGaWxlXSkge1xuICAgICAgICBzZXRTdGF0ZShmdW5jdGlvbiAocHJldikge1xuICAgICAgICAgIHJldHVybiBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgcHJldiksIHtcbiAgICAgICAgICAgIGFjdGl2ZUZpbGU6IGFjdGl2ZUZpbGVcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcbiAgICB1cGRhdGVDdXJyZW50RmlsZTogZnVuY3Rpb24gKGNvZGUsIHNob3VsZFVwZGF0ZVByZXZpZXcpIHtcbiAgICAgIGlmIChzaG91bGRVcGRhdGVQcmV2aWV3ID09PSB2b2lkIDApIHtcbiAgICAgICAgc2hvdWxkVXBkYXRlUHJldmlldyA9IHRydWU7XG4gICAgICB9XG4gICAgICB1cGRhdGVGaWxlKHN0YXRlLmFjdGl2ZUZpbGUsIGNvZGUsIHNob3VsZFVwZGF0ZVByZXZpZXcpO1xuICAgIH0sXG4gICAgdXBkYXRlRmlsZTogdXBkYXRlRmlsZSxcbiAgICBhZGRGaWxlOiB1cGRhdGVGaWxlLFxuICAgIGNsb3NlRmlsZTogZnVuY3Rpb24gKHBhdGgpIHtcbiAgICAgIGlmIChzdGF0ZS52aXNpYmxlRmlsZXMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHNldFN0YXRlKGZ1bmN0aW9uIChfYSkge1xuICAgICAgICB2YXIgdmlzaWJsZUZpbGVzID0gX2EudmlzaWJsZUZpbGVzLCBhY3RpdmVGaWxlID0gX2EuYWN0aXZlRmlsZSwgcHJldiA9IF9fcmVzdChfYSwgW1widmlzaWJsZUZpbGVzXCIsIFwiYWN0aXZlRmlsZVwiXSk7XG4gICAgICAgIHZhciBpbmRleE9mUmVtb3ZlZFBhdGggPSB2aXNpYmxlRmlsZXMuaW5kZXhPZihwYXRoKTtcbiAgICAgICAgdmFyIG5ld1BhdGhzID0gdmlzaWJsZUZpbGVzLmZpbHRlcihmdW5jdGlvbiAob3BlblBhdGgpIHtcbiAgICAgICAgICByZXR1cm4gb3BlblBhdGggIT09IHBhdGg7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gX19hc3NpZ24oX19hc3NpZ24oe30sIHByZXYpLCB7XG4gICAgICAgICAgYWN0aXZlRmlsZTogcGF0aCA9PT0gYWN0aXZlRmlsZSA/IGluZGV4T2ZSZW1vdmVkUGF0aCA9PT0gMCA/IHZpc2libGVGaWxlc1sxXSA6IHZpc2libGVGaWxlc1tpbmRleE9mUmVtb3ZlZFBhdGggLSAxXSA6IGFjdGl2ZUZpbGUsXG4gICAgICAgICAgdmlzaWJsZUZpbGVzOiBuZXdQYXRoc1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgZGVsZXRlRmlsZTogZnVuY3Rpb24gKHBhdGgsIHNob3VsZFVwZGF0ZVByZXZpZXcpIHtcbiAgICAgIGlmIChzaG91bGRVcGRhdGVQcmV2aWV3ID09PSB2b2lkIDApIHtcbiAgICAgICAgc2hvdWxkVXBkYXRlUHJldmlldyA9IHRydWU7XG4gICAgICB9XG4gICAgICBzZXRTdGF0ZShmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgdmFyIHZpc2libGVGaWxlcyA9IF9hLnZpc2libGVGaWxlcywgZmlsZXMgPSBfYS5maWxlcywgYWN0aXZlRmlsZSA9IF9hLmFjdGl2ZUZpbGUsIHJlc3QgPSBfX3Jlc3QoX2EsIFtcInZpc2libGVGaWxlc1wiLCBcImZpbGVzXCIsIFwiYWN0aXZlRmlsZVwiXSk7XG4gICAgICAgIHZhciBuZXdGaWxlcyA9IF9fYXNzaWduKHt9LCBmaWxlcyk7XG4gICAgICAgIGRlbGV0ZSBuZXdGaWxlc1twYXRoXTtcbiAgICAgICAgdmFyIHJlbWFpbmluZ1Zpc2libGVGaWxlcyA9IHZpc2libGVGaWxlcy5maWx0ZXIoZnVuY3Rpb24gKG9wZW5QYXRoKSB7XG4gICAgICAgICAgcmV0dXJuIG9wZW5QYXRoICE9PSBwYXRoO1xuICAgICAgICB9KTtcbiAgICAgICAgdmFyIGRlbGV0ZWRMYXN0VmlzaWJsZUZpbGUgPSByZW1haW5pbmdWaXNpYmxlRmlsZXMubGVuZ3RoID09PSAwO1xuICAgICAgICBpZiAoZGVsZXRlZExhc3RWaXNpYmxlRmlsZSkge1xuICAgICAgICAgIHZhciBuZXh0RmlsZSA9IE9iamVjdC5rZXlzKGZpbGVzKVtPYmplY3Qua2V5cyhmaWxlcykubGVuZ3RoIC0gMV07XG4gICAgICAgICAgcmV0dXJuIF9fYXNzaWduKF9fYXNzaWduKHt9LCByZXN0KSwge1xuICAgICAgICAgICAgdmlzaWJsZUZpbGVzOiBbbmV4dEZpbGVdLFxuICAgICAgICAgICAgYWN0aXZlRmlsZTogbmV4dEZpbGUsXG4gICAgICAgICAgICBmaWxlczogbmV3RmlsZXMsXG4gICAgICAgICAgICBzaG91bGRVcGRhdGVQcmV2aWV3OiBzaG91bGRVcGRhdGVQcmV2aWV3XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIF9fYXNzaWduKF9fYXNzaWduKHt9LCByZXN0KSwge1xuICAgICAgICAgIHZpc2libGVGaWxlczogcmVtYWluaW5nVmlzaWJsZUZpbGVzLFxuICAgICAgICAgIGFjdGl2ZUZpbGU6IHBhdGggPT09IGFjdGl2ZUZpbGUgPyByZW1haW5pbmdWaXNpYmxlRmlsZXNbcmVtYWluaW5nVmlzaWJsZUZpbGVzLmxlbmd0aCAtIDFdIDogYWN0aXZlRmlsZSxcbiAgICAgICAgICBmaWxlczogbmV3RmlsZXMsXG4gICAgICAgICAgc2hvdWxkVXBkYXRlUHJldmlldzogc2hvdWxkVXBkYXRlUHJldmlld1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIFtfX2Fzc2lnbihfX2Fzc2lnbih7fSwgc3RhdGUpLCB7XG4gICAgdmlzaWJsZUZpbGVzRnJvbVByb3BzOiBvcmlnaW5hbFN0YXRlRnJvbVByb3BzLnZpc2libGVGaWxlc1xuICB9KSwgb3BlcmF0aW9uc107XG59O1xuXG52YXIgU2FuZHBhY2skMSA9IFJlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG52YXIgU2FuZHBhY2tQcm92aWRlciA9IGZ1bmN0aW9uIChwcm9wcykge1xuICB2YXIgX2EsIF9iLCBfYztcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sIG9wdGlvbnMgPSBwcm9wcy5vcHRpb25zLCBzdHlsZSA9IHByb3BzLnN0eWxlLCBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsIHRoZW1lID0gcHJvcHMudGhlbWU7XG4gIHZhciBfZCA9IHVzZUZpbGVzKHByb3BzKSwgZmlsZVN0YXRlID0gX2RbMF0sIGZpbGVPcGVyYXRpb25zID0gX2RbMV07XG4gIHZhciBfZSA9IHVzZUNsaWVudChwcm9wcywgZmlsZVN0YXRlKSwgY2xpZW50U3RhdGUgPSBfZVswXSwgX2YgPSBfZVsxXSwgZGlzcGF0Y2hNZXNzYWdlID0gX2YuZGlzcGF0Y2hNZXNzYWdlLCBhZGRMaXN0ZW5lciA9IF9mLmFkZExpc3RlbmVyLCBjbGllbnRPcGVyYXRpb25zID0gX19yZXN0KF9mLCBbXCJkaXNwYXRjaE1lc3NhZ2VcIiwgXCJhZGRMaXN0ZW5lclwiXSk7XG4gIHZhciBhcHBTdGF0ZSA9IHVzZUFwcFN0YXRlKHByb3BzLCBmaWxlU3RhdGUuZmlsZXMpO1xuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGNsaWVudE9wZXJhdGlvbnMuaW5pdGlhbGl6ZVNhbmRwYWNrSWZyYW1lKCk7XG4gIH0sIFtdKTtcbiAgcmV0dXJuIGpzeChTYW5kcGFjayQxLlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IF9fYXNzaWduKF9fYXNzaWduKF9fYXNzaWduKF9fYXNzaWduKF9fYXNzaWduKF9fYXNzaWduKHt9LCBmaWxlU3RhdGUpLCBjbGllbnRTdGF0ZSksIGFwcFN0YXRlKSwgZmlsZU9wZXJhdGlvbnMpLCBjbGllbnRPcGVyYXRpb25zKSwge1xuICAgICAgYXV0b1JlbG9hZDogKF9iID0gKF9hID0gcHJvcHMub3B0aW9ucykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmF1dG9SZWxvYWQpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IHRydWUsXG4gICAgICB0ZWFtSWQ6IHByb3BzID09PSBudWxsIHx8IHByb3BzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwcm9wcy50ZWFtSWQsXG4gICAgICBleHBvcnRPcHRpb25zOiAoX2MgPSBwcm9wcyA9PT0gbnVsbCB8fCBwcm9wcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogcHJvcHMuY3VzdG9tU2V0dXApID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy5leHBvcnRPcHRpb25zLFxuICAgICAgbGlzdGVuOiBhZGRMaXN0ZW5lcixcbiAgICAgIGRpc3BhdGNoOiBkaXNwYXRjaE1lc3NhZ2VcbiAgICB9KSxcbiAgICBjaGlsZHJlbjoganN4KENsYXNzTmFtZXNQcm92aWRlciwge1xuICAgICAgY2xhc3Nlczogb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmNsYXNzZXMsXG4gICAgICBjaGlsZHJlbjoganN4KFNhbmRwYWNrVGhlbWVQcm92aWRlciwge1xuICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSxcbiAgICAgICAgc3R5bGU6IHN0eWxlLFxuICAgICAgICB0aGVtZTogdGhlbWUsXG4gICAgICAgIGNoaWxkcmVuOiBjaGlsZHJlblxuICAgICAgfSlcbiAgICB9KVxuICB9KTtcbn07XG52YXIgU2FuZHBhY2tDb25zdW1lciA9IFNhbmRwYWNrJDEuQ29uc3VtZXI7XG5cbmZ1bmN0aW9uIHVzZVNhbmRwYWNrKCkge1xuICB2YXIgc2FuZHBhY2sgPSBSZWFjdC51c2VDb250ZXh0KFNhbmRwYWNrJDEpO1xuICBpZiAoc2FuZHBhY2sgPT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJbc2FuZHBhY2stcmVhY3RdOiBcXFwidXNlU2FuZHBhY2tcXFwiIG11c3QgYmUgd3JhcHBlZCBieSBhIFxcXCJTYW5kcGFja1Byb3ZpZGVyXFxcIlwiKTtcbiAgfVxuICB2YXIgZGlzcGF0Y2ggPSBzYW5kcGFjay5kaXNwYXRjaCwgbGlzdGVuID0gc2FuZHBhY2subGlzdGVuLCByZXN0ID0gX19yZXN0KHNhbmRwYWNrLCBbXCJkaXNwYXRjaFwiLCBcImxpc3RlblwiXSk7XG4gIHJldHVybiB7XG4gICAgc2FuZHBhY2s6IF9fYXNzaWduKHt9LCByZXN0KSxcbiAgICBkaXNwYXRjaDogZGlzcGF0Y2gsXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcbn1cblxudmFyIHVzZUFjdGl2ZUNvZGUgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBfYSwgX2IsIF9jO1xuICB2YXIgc2FuZHBhY2sgPSB1c2VTYW5kcGFjaygpLnNhbmRwYWNrO1xuICByZXR1cm4ge1xuICAgIGNvZGU6IChfYSA9IHNhbmRwYWNrLmZpbGVzW3NhbmRwYWNrLmFjdGl2ZUZpbGVdKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY29kZSxcbiAgICByZWFkT25seTogKF9jID0gKF9iID0gc2FuZHBhY2suZmlsZXNbc2FuZHBhY2suYWN0aXZlRmlsZV0pID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5yZWFkT25seSkgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogZmFsc2UsXG4gICAgdXBkYXRlQ29kZTogc2FuZHBhY2sudXBkYXRlQ3VycmVudEZpbGVcbiAgfTtcbn07XG5cbnZhciBpY29uU3RhbmRhbG9uZUNsYXNzTmFtZSA9IGZha2VDc3M7XG52YXIgYnV0dG9uQ2xhc3NOYW1lID0gZmFrZUNzcztcbnZhciByb3VuZGVkQnV0dG9uQ2xhc3NOYW1lID0gZmFrZUNzcztcbnZhciBpY29uQ2xhc3NOYW1lID0gZmFrZUNzcztcbmtleWZyYW1lcyh7XG4gIFwiMCVcIjoge1xuICAgIG9wYWNpdHk6IDBcbiAgfSxcbiAgXCIxMDAlXCI6IHtcbiAgICBvcGFjaXR5OiAxXG4gIH1cbn0pO1xudmFyIGFic29sdXRlQ2xhc3NOYW1lID0gZmFrZUNzcztcbnZhciBlcnJvckNsYXNzTmFtZSA9IGZha2VDc3M7XG52YXIgZXJyb3JCdW5kbGVyQ2xhc3NOYW1lID0gZmFrZUNzcztcbnZhciBlcnJvck1lc3NhZ2VDbGFzc05hbWUgPSBmYWtlQ3NzO1xuXG52YXIgdGFic0NsYXNzTmFtZSA9IGZha2VDc3M7XG52YXIgdGFic1Njcm9sbGFibGVDbGFzc05hbWUgPSBmYWtlQ3NzO1xudmFyIGNsb3NlQnV0dG9uQ2xhc3NOYW1lID0gZmFrZUNzcztcbnZhciB0YWJCdXR0b24gPSBmYWtlQ3NzO1xudmFyIEZpbGVUYWJzID0gZnVuY3Rpb24gKF9hKSB7XG4gIHZhciBjbG9zYWJsZVRhYnMgPSBfYS5jbG9zYWJsZVRhYnMsIGNsYXNzTmFtZSA9IF9hLmNsYXNzTmFtZSwgcHJvcHMgPSBfX3Jlc3QoX2EsIFtcImNsb3NhYmxlVGFic1wiLCBcImNsYXNzTmFtZVwiXSk7XG4gIHZhciBzYW5kcGFjayA9IHVzZVNhbmRwYWNrKCkuc2FuZHBhY2s7XG4gIHZhciBjbGFzc05hbWVzID0gdXNlQ2xhc3NOYW1lcygpO1xuICB2YXIgYWN0aXZlRmlsZSA9IHNhbmRwYWNrLmFjdGl2ZUZpbGUsIHZpc2libGVGaWxlcyA9IHNhbmRwYWNrLnZpc2libGVGaWxlcywgc2V0QWN0aXZlRmlsZSA9IHNhbmRwYWNrLnNldEFjdGl2ZUZpbGU7XG4gIHZhciBoYW5kbGVDbG9zZUZpbGUgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB2YXIgdGFiRWxtID0gZXYudGFyZ2V0LmNsb3Nlc3QoXCJbZGF0YS1hY3RpdmVdXCIpO1xuICAgIHZhciBwYXRoVG9DbG9zZSA9IHRhYkVsbSA9PT0gbnVsbCB8fCB0YWJFbG0gPT09IHZvaWQgMCA/IHZvaWQgMCA6IHRhYkVsbS5nZXRBdHRyaWJ1dGUoXCJ0aXRsZVwiKTtcbiAgICBpZiAoIXBhdGhUb0Nsb3NlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHNhbmRwYWNrLmNsb3NlRmlsZShwYXRoVG9DbG9zZSk7XG4gIH07XG4gIHZhciBnZXRUcmlnZ2VyVGV4dCA9IGZ1bmN0aW9uIChjdXJyZW50UGF0aCkge1xuICAgIHZhciBkb2N1bWVudEZpbGVOYW1lID0gZ2V0RmlsZU5hbWUoY3VycmVudFBhdGgpO1xuICAgIHZhciBwYXRoc1dpdGhEdXBsaWNhdGVGaWxlTmFtZXMgPSB2aXNpYmxlRmlsZXMucmVkdWNlKGZ1bmN0aW9uIChwcmV2LCBjdXJyKSB7XG4gICAgICBpZiAoY3VyciA9PT0gY3VycmVudFBhdGgpIHtcbiAgICAgICAgcmV0dXJuIHByZXY7XG4gICAgICB9XG4gICAgICB2YXIgZmlsZU5hbWUgPSBnZXRGaWxlTmFtZShjdXJyKTtcbiAgICAgIGlmIChmaWxlTmFtZSA9PT0gZG9jdW1lbnRGaWxlTmFtZSkge1xuICAgICAgICBwcmV2LnB1c2goY3Vycik7XG4gICAgICAgIHJldHVybiBwcmV2O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHByZXY7XG4gICAgfSwgW10pO1xuICAgIGlmIChwYXRoc1dpdGhEdXBsaWNhdGVGaWxlTmFtZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gZG9jdW1lbnRGaWxlTmFtZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGNhbGN1bGF0ZU5lYXJlc3RVbmlxdWVQYXRoKGN1cnJlbnRQYXRoLCBwYXRoc1dpdGhEdXBsaWNhdGVGaWxlTmFtZXMpO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIGpzeChcImRpdlwiLCBfX2Fzc2lnbih7XG4gICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKFwidGFic1wiLCBbdGFic0NsYXNzTmFtZSwgY2xhc3NOYW1lXSksXG4gICAgdHJhbnNsYXRlOiBcIm5vXCJcbiAgfSwgcHJvcHMsIHtcbiAgICBjaGlsZHJlbjoganN4KFwiZGl2XCIsIHtcbiAgICAgIFwiYXJpYS1sYWJlbFwiOiBcIlNlbGVjdCBhY3RpdmUgZmlsZVwiLFxuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKFwidGFicy1zY3JvbGxhYmxlLWNvbnRhaW5lclwiLCBbdGFic1Njcm9sbGFibGVDbGFzc05hbWVdKSxcbiAgICAgIHJvbGU6IFwidGFibGlzdFwiLFxuICAgICAgY2hpbGRyZW46IHZpc2libGVGaWxlcy5tYXAoZnVuY3Rpb24gKGZpbGVQYXRoKSB7XG4gICAgICAgIHJldHVybiBqc3hzKFwiYnV0dG9uXCIsIHtcbiAgICAgICAgICBcImFyaWEtc2VsZWN0ZWRcIjogZmlsZVBhdGggPT09IGFjdGl2ZUZpbGUsXG4gICAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKFwidGFiLWJ1dHRvblwiLCBbYnV0dG9uQ2xhc3NOYW1lLCB0YWJCdXR0b25dKSxcbiAgICAgICAgICBcImRhdGEtYWN0aXZlXCI6IGZpbGVQYXRoID09PSBhY3RpdmVGaWxlLFxuICAgICAgICAgIG9uQ2xpY2s6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBzZXRBY3RpdmVGaWxlKGZpbGVQYXRoKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIHJvbGU6IFwidGFiXCIsXG4gICAgICAgICAgdGl0bGU6IGZpbGVQYXRoLFxuICAgICAgICAgIHR5cGU6IFwiYnV0dG9uXCIsXG4gICAgICAgICAgY2hpbGRyZW46IFtnZXRUcmlnZ2VyVGV4dChmaWxlUGF0aCksIGNsb3NhYmxlVGFicyAmJiB2aXNpYmxlRmlsZXMubGVuZ3RoID4gMSAmJiBqc3goXCJzcGFuXCIsIHtcbiAgICAgICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhcImNsb3NlLWJ1dHRvblwiLCBbY2xvc2VCdXR0b25DbGFzc05hbWVdKSxcbiAgICAgICAgICAgIG9uQ2xpY2s6IGhhbmRsZUNsb3NlRmlsZSxcbiAgICAgICAgICAgIGNoaWxkcmVuOiBqc3goQ2xvc2VJY29uLCB7fSlcbiAgICAgICAgICB9KV1cbiAgICAgICAgfSwgZmlsZVBhdGgpO1xuICAgICAgfSlcbiAgICB9KVxuICB9KSk7XG59O1xuXG52YXIgUm91bmRlZEJ1dHRvbiA9IGZ1bmN0aW9uIChfYSkge1xuICB2YXIgb25DbGljayA9IF9hLm9uQ2xpY2ssIGNsYXNzTmFtZSA9IF9hLmNsYXNzTmFtZSwgY2hpbGRyZW4gPSBfYS5jaGlsZHJlbjtcbiAgdmFyIGNsYXNzTmFtZXMgPSB1c2VDbGFzc05hbWVzKCk7XG4gIHJldHVybiBqc3goXCJidXR0b25cIiwge1xuICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhcImJ1dHRvblwiLCBbY2xhc3NOYW1lcyhcImljb24tc3RhbmRhbG9uZVwiKSwgYnV0dG9uQ2xhc3NOYW1lLCBpY29uU3RhbmRhbG9uZUNsYXNzTmFtZSwgcm91bmRlZEJ1dHRvbkNsYXNzTmFtZSwgY2xhc3NOYW1lXSksXG4gICAgb25DbGljazogb25DbGljayxcbiAgICB0eXBlOiBcImJ1dHRvblwiLFxuICAgIGNoaWxkcmVuOiBjaGlsZHJlblxuICB9KTtcbn07XG5cbnZhciBydW5CdXR0b25DbGFzc05hbWUgPSBmYWtlQ3NzO1xudmFyIFJ1bkJ1dHRvbiQxID0gZnVuY3Rpb24gKF9hKSB7XG4gIHZhciBvbkNsaWNrID0gX2Eub25DbGljaywgcHJvcHMgPSBfX3Jlc3QoX2EsIFtcImNsYXNzTmFtZVwiLCBcIm9uQ2xpY2tcIl0pO1xuICB2YXIgc2FuZHBhY2sgPSB1c2VTYW5kcGFjaygpLnNhbmRwYWNrO1xuICByZXR1cm4ganN4cyhSb3VuZGVkQnV0dG9uLCBfX2Fzc2lnbih7XG4gICAgY2xhc3NOYW1lOiBydW5CdXR0b25DbGFzc05hbWUudG9TdHJpbmcoKSxcbiAgICBvbkNsaWNrOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIHNhbmRwYWNrLnJ1blNhbmRwYWNrKCk7XG4gICAgICBvbkNsaWNrID09PSBudWxsIHx8IG9uQ2xpY2sgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9uQ2xpY2soZXZlbnQpO1xuICAgIH1cbiAgfSwgcHJvcHMsIHtcbiAgICBjaGlsZHJlbjogW2pzeChSdW5JY29uLCB7fSksIGpzeChcInNwYW5cIiwge1xuICAgICAgY2hpbGRyZW46IFwiUnVuXCJcbiAgICB9KV1cbiAgfSkpO1xufTtcblxudmFyIHN0YWNrQ2xhc3NOYW1lID0gZmFrZUNzcztcbnZhciBTYW5kcGFja1N0YWNrID0gZnVuY3Rpb24gKF9hKSB7XG4gIHZhciBjbGFzc05hbWUgPSBfYS5jbGFzc05hbWUsIHByb3BzID0gX19yZXN0KF9hLCBbXCJjbGFzc05hbWVcIl0pO1xuICB2YXIgY2xhc3NOYW1lcyA9IHVzZUNsYXNzTmFtZXMoKTtcbiAgcmV0dXJuIGpzeChcImRpdlwiLCBfX2Fzc2lnbih7XG4gICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKFwic3RhY2tcIiwgW3N0YWNrQ2xhc3NOYW1lLCBjbGFzc05hbWVdKVxuICB9LCBwcm9wcykpO1xufTtcblxudmFyIHVzZVNhbmRwYWNrVGhlbWUgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBfYSA9IFJlYWN0LnVzZUNvbnRleHQoU2FuZHBhY2tUaGVtZUNvbnRleHQpLCB0aGVtZSA9IF9hLnRoZW1lLCBpZCA9IF9hLmlkLCBtb2RlID0gX2EubW9kZTtcbiAgcmV0dXJuIHtcbiAgICB0aGVtZTogdGhlbWUsXG4gICAgdGhlbWVJZDogaWQsXG4gICAgdGhlbWVNb2RlOiBtb2RlXG4gIH07XG59O1xuXG52YXIgc2hhbGxvd0VxdWFsID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgaWYgKGEubGVuZ3RoICE9PSBiLmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuICB2YXIgcmVzdWx0ID0gdHJ1ZTtcbiAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IGEubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgaWYgKGFbaW5kZXhdICE9PSBiW2luZGV4XSkge1xuICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbnZhciBnZXRDb2RlTWlycm9yUG9zaXRpb24gPSBmdW5jdGlvbiAoZG9jLCBfYSkge1xuICB2YXIgbGluZSA9IF9hLmxpbmUsIGNvbHVtbiA9IF9hLmNvbHVtbjtcbiAgcmV0dXJuIGRvYy5saW5lKGxpbmUpLmZyb20gKyAoY29sdW1uICE9PSBudWxsICYmIGNvbHVtbiAhPT0gdm9pZCAwID8gY29sdW1uIDogMCkgLSAxO1xufTtcbnZhciBnZXRFZGl0b3JUaGVtZSA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIEVkaXRvclZpZXcudGhlbWUoe1xuICAgIFwiJlwiOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IChcInZhcigtLVwiKS5jb25jYXQoVEhFTUVfUFJFRklYLCBcIi1jb2xvcnMtc3VyZmFjZTEpXCIpLFxuICAgICAgY29sb3I6IChcInZhcigtLVwiKS5jb25jYXQoVEhFTUVfUFJFRklYLCBcIi1zeW50YXgtY29sb3ItcGxhaW4pXCIpLFxuICAgICAgaGVpZ2h0OiBcIjEwMCVcIlxuICAgIH0sXG4gICAgXCIuY20tbWF0Y2hpbmdCcmFja2V0LCAuY20tbm9ubWF0Y2hpbmdCcmFja2V0LCAmLmNtLWZvY3VzZWQgLmNtLW1hdGNoaW5nQnJhY2tldCwgJi5jbS1mb2N1c2VkIC5jbS1ub25tYXRjaGluZ0JyYWNrZXRcIjoge1xuICAgICAgY29sb3I6IFwiaW5oZXJpdFwiLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiBcInJnYmEoMTI4LDEyOCwxMjgsLjI1KVwiLFxuICAgICAgYmFja2dyb3VuZEJsZW5kTW9kZTogXCJkaWZmZXJlbmNlXCJcbiAgICB9LFxuICAgIFwiJi5jbS1lZGl0b3IuY20tZm9jdXNlZFwiOiB7XG4gICAgICBvdXRsaW5lOiBcIm5vbmVcIlxuICAgIH0sXG4gICAgXCIuY20tYWN0aXZlTGluZVwiOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IChcInZhcigtLVwiKS5jb25jYXQoVEhFTUVfUFJFRklYLCBcIi1jb2xvcnMtc3VyZmFjZTMpXCIpLFxuICAgICAgYm9yZGVyUmFkaXVzOiAoXCJ2YXIoLS1cIikuY29uY2F0KFRIRU1FX1BSRUZJWCwgXCItYm9yZGVyLXJhZGl1cylcIilcbiAgICB9LFxuICAgIFwiLmNtLWVycm9yTGluZVwiOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IChcInZhcigtLVwiKS5jb25jYXQoVEhFTUVfUFJFRklYLCBcIi1jb2xvcnMtZXJyb3JTdXJmYWNlKVwiKSxcbiAgICAgIGJvcmRlclJhZGl1czogKFwidmFyKC0tXCIpLmNvbmNhdChUSEVNRV9QUkVGSVgsIFwiLWJvcmRlci1yYWRpdXMpXCIpXG4gICAgfSxcbiAgICBcIi5jbS1jb250ZW50XCI6IHtcbiAgICAgIGNhcmV0Q29sb3I6IChcInZhcigtLVwiKS5jb25jYXQoVEhFTUVfUFJFRklYLCBcIi1jb2xvcnMtYWNjZW50KVwiKSxcbiAgICAgIHBhZGRpbmc6IChcIjAgdmFyKC0tXCIpLmNvbmNhdChUSEVNRV9QUkVGSVgsIFwiLXNwYWNlLTQpXCIpXG4gICAgfSxcbiAgICBcIi5jbS1zY3JvbGxlclwiOiB7XG4gICAgICBmb250RmFtaWx5OiAoXCJ2YXIoLS1cIikuY29uY2F0KFRIRU1FX1BSRUZJWCwgXCItZm9udC1tb25vKVwiKSxcbiAgICAgIGxpbmVIZWlnaHQ6IChcInZhcigtLVwiKS5jb25jYXQoVEhFTUVfUFJFRklYLCBcIi1mb250LWxpbmVIZWlnaHQpXCIpXG4gICAgfSxcbiAgICBcIi5jbS1ndXR0ZXJzXCI6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogKFwidmFyKC0tXCIpLmNvbmNhdChUSEVNRV9QUkVGSVgsIFwiLWNvbG9ycy1zdXJmYWNlMSlcIiksXG4gICAgICBjb2xvcjogKFwidmFyKC0tXCIpLmNvbmNhdChUSEVNRV9QUkVGSVgsIFwiLWNvbG9ycy1kaXNhYmxlZClcIiksXG4gICAgICBib3JkZXI6IFwibm9uZVwiLFxuICAgICAgcGFkZGluZ0xlZnQ6IChcInZhcigtLVwiKS5jb25jYXQoVEhFTUVfUFJFRklYLCBcIi1zcGFjZS0xKVwiKVxuICAgIH0sXG4gICAgXCIuY20tZ3V0dGVyLmNtLWxpbmVOdW1iZXJzXCI6IHtcbiAgICAgIGZvbnRTaXplOiBcIi42ZW1cIlxuICAgIH0sXG4gICAgXCIuY20tbGluZU51bWJlcnMgLmNtLWd1dHRlckVsZW1lbnRcIjoge1xuICAgICAgbGluZUhlaWdodDogKFwidmFyKC0tXCIpLmNvbmNhdChUSEVNRV9QUkVGSVgsIFwiLWZvbnQtbGluZUhlaWdodClcIiksXG4gICAgICBtaW5XaWR0aDogKFwidmFyKC0tXCIpLmNvbmNhdChUSEVNRV9QUkVGSVgsIFwiLXNwYWNlLTUpXCIpXG4gICAgfSxcbiAgICBcIi5jbS1jb250ZW50IC5jbS1saW5lXCI6IHtcbiAgICAgIHBhZGRpbmdMZWZ0OiAoXCJ2YXIoLS1cIikuY29uY2F0KFRIRU1FX1BSRUZJWCwgXCItc3BhY2UtMSlcIilcbiAgICB9LFxuICAgIFwiLmNtLWNvbnRlbnQuY20tcmVhZG9ubHkgLmNtLWxpbmVcIjoge1xuICAgICAgcGFkZGluZ0xlZnQ6IDBcbiAgICB9XG4gIH0pO1xufTtcbnZhciBjbGFzc05hbWVUb2tlbiA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiAoXCJcIikuY29uY2F0KFRIRU1FX1BSRUZJWCwgXCItc3ludGF4LVwiKS5jb25jYXQobmFtZSk7XG59O1xudmFyIGdldFN5bnRheEhpZ2hsaWdodCA9IGZ1bmN0aW9uICh0aGVtZSkge1xuICByZXR1cm4gSGlnaGxpZ2h0U3R5bGUuZGVmaW5lKFt7XG4gICAgdGFnOiB0YWdzLmxpbmssXG4gICAgdGV4dERlY29yYXRpb246IFwidW5kZXJsaW5lXCJcbiAgfSwge1xuICAgIHRhZzogdGFncy5lbXBoYXNpcyxcbiAgICBmb250U3R5bGU6IFwiaXRhbGljXCJcbiAgfSwge1xuICAgIHRhZzogdGFncy5zdHJvbmcsXG4gICAgZm9udFdlaWdodDogXCJib2xkXCJcbiAgfSwge1xuICAgIHRhZzogdGFncy5rZXl3b3JkLFxuICAgIGNsYXNzOiBjbGFzc05hbWVUb2tlbihcImtleXdvcmRcIilcbiAgfSwge1xuICAgIHRhZzogW3RhZ3MuYXRvbSwgdGFncy5udW1iZXIsIHRhZ3MuYm9vbF0sXG4gICAgY2xhc3M6IGNsYXNzTmFtZVRva2VuKFwic3RhdGljXCIpXG4gIH0sIHtcbiAgICB0YWc6IHRhZ3MudmFyaWFibGVOYW1lLFxuICAgIGNsYXNzOiBjbGFzc05hbWVUb2tlbihcInBsYWluXCIpXG4gIH0sIHtcbiAgICB0YWc6IHRhZ3Muc3RhbmRhcmQodGFncy50YWdOYW1lKSxcbiAgICBjbGFzczogY2xhc3NOYW1lVG9rZW4oXCJ0YWdcIilcbiAgfSwge1xuICAgIHRhZzogW3RhZ3MuZnVuY3Rpb24odGFncy52YXJpYWJsZU5hbWUpLCB0YWdzLmRlZmluaXRpb24odGFncy5mdW5jdGlvbih0YWdzLnZhcmlhYmxlTmFtZSkpLCB0YWdzLnRhZ05hbWVdLFxuICAgIGNsYXNzOiBjbGFzc05hbWVUb2tlbihcImRlZmluaXRpb25cIilcbiAgfSwge1xuICAgIHRhZzogdGFncy5wcm9wZXJ0eU5hbWUsXG4gICAgY2xhc3M6IGNsYXNzTmFtZVRva2VuKFwicHJvcGVydHlcIilcbiAgfSwge1xuICAgIHRhZzogW3RhZ3MubGl0ZXJhbCwgdGFncy5pbnNlcnRlZF0sXG4gICAgY2xhc3M6IGNsYXNzTmFtZVRva2VuKHRoZW1lLnN5bnRheC5zdHJpbmcgPyBcInN0cmluZ1wiIDogXCJzdGF0aWNcIilcbiAgfSwge1xuICAgIHRhZzogdGFncy5wdW5jdHVhdGlvbixcbiAgICBjbGFzczogY2xhc3NOYW1lVG9rZW4oXCJwdW5jdHVhdGlvblwiKVxuICB9LCB7XG4gICAgdGFnOiBbdGFncy5jb21tZW50LCB0YWdzLnF1b3RlXSxcbiAgICBjbGFzczogY2xhc3NOYW1lVG9rZW4oXCJjb21tZW50XCIpXG4gIH1dKTtcbn07XG52YXIgZ2V0TGFuZ3VhZ2VGcm9tRmlsZSA9IGZ1bmN0aW9uIChmaWxlUGF0aCwgZmlsZVR5cGUsIGFkZGl0aW9uYWxMYW5ndWFnZXMpIHtcbiAgaWYgKCFmaWxlUGF0aCAmJiAhZmlsZVR5cGUpIHJldHVybiBcImphdmFzY3JpcHRcIjtcbiAgdmFyIGV4dGVuc2lvbiA9IGZpbGVUeXBlO1xuICBpZiAoIWV4dGVuc2lvbiAmJiBmaWxlUGF0aCkge1xuICAgIHZhciBleHRlbnNpb25Eb3RJbmRleCA9IGZpbGVQYXRoLmxhc3RJbmRleE9mKFwiLlwiKTtcbiAgICBleHRlbnNpb24gPSBmaWxlUGF0aC5zbGljZShleHRlbnNpb25Eb3RJbmRleCArIDEpO1xuICB9XG4gIGZvciAodmFyIF9pID0gMCwgYWRkaXRpb25hbExhbmd1YWdlc18xID0gYWRkaXRpb25hbExhbmd1YWdlczsgX2kgPCBhZGRpdGlvbmFsTGFuZ3VhZ2VzXzEubGVuZ3RoOyBfaSsrKSB7XG4gICAgdmFyIGFkZGl0aW9uYWxMYW5ndWFnZSA9IGFkZGl0aW9uYWxMYW5ndWFnZXNfMVtfaV07XG4gICAgaWYgKGV4dGVuc2lvbiA9PT0gYWRkaXRpb25hbExhbmd1YWdlLm5hbWUgfHwgYWRkaXRpb25hbExhbmd1YWdlLmV4dGVuc2lvbnMuaW5jbHVkZXMoZXh0ZW5zaW9uIHx8IFwiXCIpKSB7XG4gICAgICByZXR1cm4gYWRkaXRpb25hbExhbmd1YWdlLm5hbWU7XG4gICAgfVxuICB9XG4gIHN3aXRjaCAoZXh0ZW5zaW9uKSB7XG4gICAgY2FzZSBcInRzXCI6XG4gICAgY2FzZSBcInRzeFwiOlxuICAgICAgcmV0dXJuIFwidHlwZXNjcmlwdFwiO1xuICAgIGNhc2UgXCJodG1sXCI6XG4gICAgY2FzZSBcInN2ZWx0ZVwiOlxuICAgIGNhc2UgXCJ2dWVcIjpcbiAgICBjYXNlIFwiYXN0cm9cIjpcbiAgICAgIHJldHVybiBcImh0bWxcIjtcbiAgICBjYXNlIFwiY3NzXCI6XG4gICAgY2FzZSBcImxlc3NcIjpcbiAgICBjYXNlIFwic2Nzc1wiOlxuICAgICAgcmV0dXJuIFwiY3NzXCI7XG4gICAgY2FzZSBcImpzXCI6XG4gICAgY2FzZSBcImpzeFwiOlxuICAgIGNhc2UgXCJqc29uXCI6XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBcImphdmFzY3JpcHRcIjtcbiAgfVxufTtcbnZhciBnZXRDb2RlTWlycm9yTGFuZ3VhZ2UgPSBmdW5jdGlvbiAoZXh0ZW5zaW9uLCBhZGRpdGlvbmFsTGFuZ3VhZ2VzKSB7XG4gIHZhciBvcHRpb25zID0ge1xuICAgIGphdmFzY3JpcHQ6IGphdmFzY3JpcHQoe1xuICAgICAganN4OiB0cnVlLFxuICAgICAgdHlwZXNjcmlwdDogZmFsc2VcbiAgICB9KSxcbiAgICB0eXBlc2NyaXB0OiBqYXZhc2NyaXB0KHtcbiAgICAgIGpzeDogdHJ1ZSxcbiAgICAgIHR5cGVzY3JpcHQ6IHRydWVcbiAgICB9KSxcbiAgICBodG1sOiBodG1sKCksXG4gICAgY3NzOiBjc3MoKVxuICB9O1xuICBmb3IgKHZhciBfaSA9IDAsIGFkZGl0aW9uYWxMYW5ndWFnZXNfMiA9IGFkZGl0aW9uYWxMYW5ndWFnZXM7IF9pIDwgYWRkaXRpb25hbExhbmd1YWdlc18yLmxlbmd0aDsgX2krKykge1xuICAgIHZhciBhZGRpdGlvbmFsTGFuZ3VhZ2UgPSBhZGRpdGlvbmFsTGFuZ3VhZ2VzXzJbX2ldO1xuICAgIGlmIChleHRlbnNpb24gPT09IGFkZGl0aW9uYWxMYW5ndWFnZS5uYW1lKSB7XG4gICAgICByZXR1cm4gYWRkaXRpb25hbExhbmd1YWdlLmxhbmd1YWdlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gb3B0aW9uc1tleHRlbnNpb25dO1xufTtcbnZhciB1c2VDb21iaW5lZFJlZnMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciByZWZzID0gW107XG4gIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgcmVmc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICB9XG4gIHJldHVybiBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgIHJldHVybiByZWZzLmZvckVhY2goZnVuY3Rpb24gKHJlZikge1xuICAgICAgaWYgKCFyZWYpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiByZWYgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gcmVmKGVsZW1lbnQpO1xuICAgICAgfVxuICAgICAgcmVmLmN1cnJlbnQgPSBlbGVtZW50O1xuICAgIH0pO1xuICB9LCByZWZzKTtcbn07XG5cbmZ1bmN0aW9uIGhpZ2hsaWdodERlY29yYXRvcnMocG9zaXRpb25zKSB7XG4gIHJldHVybiBWaWV3UGx1Z2luLmZyb21DbGFzcygoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIGNsYXNzXzEodmlldykge1xuICAgICAgdGhpcy5kZWNvcmF0aW9ucyA9IHRoaXMuZ2V0RGVjb3JhdGlvbih2aWV3KTtcbiAgICB9XG4gICAgY2xhc3NfMS5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKHVwZGF0ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH07XG4gICAgY2xhc3NfMS5wcm90b3R5cGUuZ2V0RGVjb3JhdGlvbiA9IGZ1bmN0aW9uICh2aWV3KSB7XG4gICAgICBpZiAoIXBvc2l0aW9ucykgcmV0dXJuIERlY29yYXRpb24ubm9uZTtcbiAgICAgIHZhciByYW5nZXNEZWNvcmF0b3JzID0gcG9zaXRpb25zLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICB2YXIgX2EsIF9iLCBfYztcbiAgICAgICAgdmFyIGxpbmVEZWNvID0gRGVjb3JhdGlvbi5saW5lKHtcbiAgICAgICAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICAgICAgICBjbGFzczogKF9hID0gaXRlbS5jbGFzc05hbWUpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IFwiXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgbWFya0RlY28gPSBEZWNvcmF0aW9uLm1hcmsoe1xuICAgICAgICAgIGNsYXNzOiAoX2IgPSBpdGVtLmNsYXNzTmFtZSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogXCJcIixcbiAgICAgICAgICBhdHRyaWJ1dGVzOiAoX2MgPSBpdGVtLmVsZW1lbnRBdHRyaWJ1dGVzKSAhPT0gbnVsbCAmJiBfYyAhPT0gdm9pZCAwID8gX2MgOiB1bmRlZmluZWRcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBwb3NpdGlvbkxpbmVTdGFydCA9IGdldENvZGVNaXJyb3JQb3NpdGlvbih2aWV3LnN0YXRlLmRvYywge1xuICAgICAgICAgIGxpbmU6IGl0ZW0ubGluZSxcbiAgICAgICAgICBjb2x1bW46IGl0ZW0uc3RhcnRDb2x1bW5cbiAgICAgICAgfSkgKyAxO1xuICAgICAgICBpZiAoaXRlbS5zdGFydENvbHVtbiAmJiBpdGVtLmVuZENvbHVtbikge1xuICAgICAgICAgIHZhciBwb3NpdGlvbkxpbmVFbmQgPSBnZXRDb2RlTWlycm9yUG9zaXRpb24odmlldy5zdGF0ZS5kb2MsIHtcbiAgICAgICAgICAgIGxpbmU6IGl0ZW0ubGluZSxcbiAgICAgICAgICAgIGNvbHVtbjogaXRlbS5lbmRDb2x1bW5cbiAgICAgICAgICB9KSArIDE7XG4gICAgICAgICAgcmV0dXJuIG1hcmtEZWNvLnJhbmdlKHBvc2l0aW9uTGluZVN0YXJ0LCBwb3NpdGlvbkxpbmVFbmQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsaW5lRGVjby5yYW5nZShwb3NpdGlvbkxpbmVTdGFydCk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBEZWNvcmF0aW9uLnNldChyYW5nZXNEZWNvcmF0b3JzKTtcbiAgICB9O1xuICAgIHJldHVybiBjbGFzc18xO1xuICB9KSgpLCB7XG4gICAgZGVjb3JhdGlvbnM6IGZ1bmN0aW9uICh2KSB7XG4gICAgICByZXR1cm4gdi5kZWNvcmF0aW9ucztcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBoaWdobGlnaHRJbmxpbmVFcnJvcigpIHtcbiAgcmV0dXJuIGFjdGl2ZUxpbmVIaWdobGlnaHRlcjtcbn1cbnZhciBsaW5lRGVjbyA9IERlY29yYXRpb24ubGluZSh7XG4gIGF0dHJpYnV0ZXM6IHtcbiAgICBjbGFzczogXCJjbS1lcnJvckxpbmVcIlxuICB9XG59KTtcbnZhciBhY3RpdmVMaW5lSGlnaGxpZ2h0ZXIgPSBWaWV3UGx1Z2luLmZyb21DbGFzcygoZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBjbGFzc18xKCkge1xuICAgIHRoaXMuZGVjb3JhdGlvbnMgPSBEZWNvcmF0aW9uLm5vbmU7XG4gIH1cbiAgY2xhc3NfMS5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKHVwZGF0ZSkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgdXBkYXRlLnRyYW5zYWN0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uICh0cmFucykge1xuICAgICAgdmFyIGVycm9yVmFsdWUgPSB0cmFucy5hbm5vdGF0aW9uKFwic2hvdy1lcnJvclwiKTtcbiAgICAgIGlmIChlcnJvclZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdmFyIHBvc2l0aW9uID0gZ2V0Q29kZU1pcnJvclBvc2l0aW9uKHVwZGF0ZS52aWV3LnN0YXRlLmRvYywge1xuICAgICAgICAgIGxpbmU6IGVycm9yVmFsdWVcbiAgICAgICAgfSkgKyAxO1xuICAgICAgICBfdGhpcy5kZWNvcmF0aW9ucyA9IERlY29yYXRpb24uc2V0KFtsaW5lRGVjby5yYW5nZShwb3NpdGlvbildKTtcbiAgICAgIH0gZWxzZSBpZiAodHJhbnMuYW5ub3RhdGlvbihcInJlbW92ZS1lcnJvcnNcIikpIHtcbiAgICAgICAgX3RoaXMuZGVjb3JhdGlvbnMgPSBEZWNvcmF0aW9uLm5vbmU7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG4gIHJldHVybiBjbGFzc18xO1xufSkoKSwge1xuICBkZWNvcmF0aW9uczogZnVuY3Rpb24gKHYpIHtcbiAgICByZXR1cm4gdi5kZWNvcmF0aW9ucztcbiAgfVxufSk7XG5cbnZhciBwbGFjZWhvbGRlckNsYXNzTmFtZSA9IGZha2VDc3M7XG52YXIgdG9rZW5zQ2xhc3NOYW1lID0gZmFrZUNzcztcbnZhciBlZGl0b3JDbGFzc05hbWUgPSBmYWtlQ3NzO1xudmFyIGNtQ2xhc3NOYW1lID0gZmFrZUNzcztcbnZhciByZWFkT25seUNsYXNzTmFtZSA9IGZha2VDc3M7XG5cbnZhciB1c2VTeW50YXhIaWdobGlnaHQgPSBmdW5jdGlvbiAoX2EpIHtcbiAgdmFyIGxhbmdTdXBwb3J0ID0gX2EubGFuZ1N1cHBvcnQsIGhpZ2hsaWdodFRoZW1lID0gX2EuaGlnaGxpZ2h0VGhlbWUsIF9iID0gX2EuY29kZSwgY29kZSA9IF9iID09PSB2b2lkIDAgPyBcIlwiIDogX2I7XG4gIHZhciB0cmVlID0gbGFuZ1N1cHBvcnQubGFuZ3VhZ2UucGFyc2VyLnBhcnNlKGNvZGUpO1xuICB2YXIgb2ZmU2V0ID0gMDtcbiAgdmFyIGNvZGVFbGVtZW50c1JlbmRlciA9IFtdO1xuICB2YXIgYWRkRWxlbWVudCA9IGZ1bmN0aW9uICh0bywgY2xhc3NOYW1lKSB7XG4gICAgaWYgKHRvID4gb2ZmU2V0KSB7XG4gICAgICB2YXIgY2hpbGRyZW4gPSBjb2RlLnNsaWNlKG9mZlNldCwgdG8pO1xuICAgICAgY29kZUVsZW1lbnRzUmVuZGVyLnB1c2goY2xhc3NOYW1lID8gY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgICAgICBjaGlsZHJlbjogY2hpbGRyZW4sXG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lLFxuICAgICAgICBrZXk6IChcIlwiKS5jb25jYXQodG8pLmNvbmNhdChvZmZTZXQpXG4gICAgICB9KSA6IGNoaWxkcmVuKTtcbiAgICAgIG9mZlNldCA9IHRvO1xuICAgIH1cbiAgfTtcbiAgaGlnaGxpZ2h0VHJlZSh0cmVlLCBoaWdobGlnaHRUaGVtZSwgZnVuY3Rpb24gKGZyb20sIHRvLCBjbGFzc05hbWUpIHtcbiAgICBhZGRFbGVtZW50KGZyb20sIFwiXCIpO1xuICAgIGFkZEVsZW1lbnQodG8sIGNsYXNzTmFtZSk7XG4gIH0pO1xuICBpZiAob2ZmU2V0IDwgY29kZS5sZW5ndGggJiYgKGNvZGUgPT09IG51bGwgfHwgY29kZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogY29kZS5pbmNsdWRlcyhcIlxcblwiKSkpIHtcbiAgICBjb2RlRWxlbWVudHNSZW5kZXIucHVzaChcIlxcblxcblwiKTtcbiAgfVxuICByZXR1cm4gY29kZUVsZW1lbnRzUmVuZGVyO1xufTtcblxudmFyIENvZGVNaXJyb3IgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIChfYSwgcmVmKSB7XG4gIHZhciBfYiA9IF9hLmNvZGUsIGNvZGUgPSBfYiA9PT0gdm9pZCAwID8gXCJcIiA6IF9iLCBmaWxlUGF0aCA9IF9hLmZpbGVQYXRoLCBmaWxlVHlwZSA9IF9hLmZpbGVUeXBlLCBvbkNvZGVVcGRhdGUgPSBfYS5vbkNvZGVVcGRhdGUsIF9jID0gX2Euc2hvd0xpbmVOdW1iZXJzLCBzaG93TGluZU51bWJlcnMgPSBfYyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfYywgX2QgPSBfYS5zaG93SW5saW5lRXJyb3JzLCBzaG93SW5saW5lRXJyb3JzID0gX2QgPT09IHZvaWQgMCA/IGZhbHNlIDogX2QsIF9lID0gX2Eud3JhcENvbnRlbnQsIHdyYXBDb250ZW50ID0gX2UgPT09IHZvaWQgMCA/IGZhbHNlIDogX2UsIF9mID0gX2EuZWRpdG9yU3RhdGUsIGVkaXRvclN0YXRlID0gX2YgPT09IHZvaWQgMCA/IFwicHJpc3RpbmVcIiA6IF9mLCBfZyA9IF9hLnJlYWRPbmx5LCByZWFkT25seSA9IF9nID09PSB2b2lkIDAgPyBmYWxzZSA6IF9nLCBfaCA9IF9hLnNob3dSZWFkT25seSwgc2hvd1JlYWRPbmx5ID0gX2ggPT09IHZvaWQgMCA/IHRydWUgOiBfaCwgZGVjb3JhdG9ycyA9IF9hLmRlY29yYXRvcnMsIF9qID0gX2EuaW5pdE1vZGUsIGluaXRNb2RlID0gX2ogPT09IHZvaWQgMCA/IFwibGF6eVwiIDogX2osIF9rID0gX2EuZXh0ZW5zaW9ucywgZXh0ZW5zaW9ucyA9IF9rID09PSB2b2lkIDAgPyBbXSA6IF9rLCBfbCA9IF9hLmV4dGVuc2lvbnNLZXltYXAsIGV4dGVuc2lvbnNLZXltYXAgPSBfbCA9PT0gdm9pZCAwID8gW10gOiBfbCwgX20gPSBfYS5hZGRpdGlvbmFsTGFuZ3VhZ2VzLCBhZGRpdGlvbmFsTGFuZ3VhZ2VzID0gX20gPT09IHZvaWQgMCA/IFtdIDogX207XG4gIHZhciB3cmFwcGVyID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICB2YXIgY29tYmluZWRSZWYgPSB1c2VDb21iaW5lZFJlZnMod3JhcHBlciwgcmVmKTtcbiAgdmFyIGNtVmlldyA9IFJlYWN0LnVzZVJlZigpO1xuICB2YXIgX28gPSB1c2VTYW5kcGFja1RoZW1lKCksIHRoZW1lID0gX28udGhlbWUsIHRoZW1lSWQgPSBfby50aGVtZUlkO1xuICB2YXIgX3AgPSBSZWFjdC51c2VTdGF0ZShjb2RlKSwgaW50ZXJuYWxDb2RlID0gX3BbMF0sIHNldEludGVybmFsQ29kZSA9IF9wWzFdO1xuICB2YXIgX3EgPSBSZWFjdC51c2VTdGF0ZShpbml0TW9kZSA9PT0gXCJpbW1lZGlhdGVcIiksIHNob3VsZEluaXRFZGl0b3IgPSBfcVswXSwgc2V0U2hvdWxkSW5pdEVkaXRvciA9IF9xWzFdO1xuICB2YXIgY2xhc3NOYW1lcyA9IHVzZUNsYXNzTmFtZXMoKTtcbiAgdmFyIF9yID0gdXNlU2FuZHBhY2soKSwgbGlzdGVuID0gX3IubGlzdGVuLCBhdXRvUmVsb2FkID0gX3Iuc2FuZHBhY2suYXV0b1JlbG9hZDtcbiAgdmFyIHByZXZFeHRlbnNpb24gPSBSZWFjdC51c2VSZWYoW10pO1xuICB2YXIgcHJldkV4dGVuc2lvbktleW1hcCA9IFJlYWN0LnVzZVJlZihbXSk7XG4gIHZhciBpc0ludGVyc2VjdGluZyA9IHVzZUludGVyc2VjdGlvbk9ic2VydmVyKHdyYXBwZXIsIHtcbiAgICByb290TWFyZ2luOiBcIjYwMHB4IDBweFwiLFxuICAgIHRocmVzaG9sZDogMC4yXG4gIH0pLmlzSW50ZXJzZWN0aW5nO1xuICBSZWFjdC51c2VJbXBlcmF0aXZlSGFuZGxlKHJlZiwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICBnZXRDb2RlbWlycm9yOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBjbVZpZXcuY3VycmVudDtcbiAgICAgIH1cbiAgICB9O1xuICB9KTtcbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgbW9kZSA9IGluaXRNb2RlID09PSBcImxhenlcIiB8fCBpbml0TW9kZSA9PT0gXCJ1c2VyLXZpc2libGVcIjtcbiAgICBpZiAobW9kZSAmJiBpc0ludGVyc2VjdGluZykge1xuICAgICAgc2V0U2hvdWxkSW5pdEVkaXRvcih0cnVlKTtcbiAgICB9XG4gIH0sIFtpbml0TW9kZSwgaXNJbnRlcnNlY3RpbmddKTtcbiAgdmFyIGxhbmd1YWdlRXh0ZW5zaW9uID0gZ2V0TGFuZ3VhZ2VGcm9tRmlsZShmaWxlUGF0aCwgZmlsZVR5cGUsIGFkZGl0aW9uYWxMYW5ndWFnZXMpO1xuICB2YXIgbGFuZ1N1cHBvcnQgPSBnZXRDb2RlTWlycm9yTGFuZ3VhZ2UobGFuZ3VhZ2VFeHRlbnNpb24sIGFkZGl0aW9uYWxMYW5ndWFnZXMpO1xuICB2YXIgaGlnaGxpZ2h0VGhlbWUgPSBnZXRTeW50YXhIaWdobGlnaHQodGhlbWUpO1xuICB2YXIgc3ludGF4SGlnaGxpZ2h0UmVuZGVyID0gdXNlU3ludGF4SGlnaGxpZ2h0KHtcbiAgICBsYW5nU3VwcG9ydDogbGFuZ1N1cHBvcnQsXG4gICAgaGlnaGxpZ2h0VGhlbWU6IGhpZ2hsaWdodFRoZW1lLFxuICAgIGNvZGU6IGNvZGVcbiAgfSk7XG4gIHZhciBzb3J0ZWREZWNvcmF0b3JzID0gUmVhY3QudXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGRlY29yYXRvcnMgPyBkZWNvcmF0b3JzLnNvcnQoZnVuY3Rpb24gKGQxLCBkMikge1xuICAgICAgcmV0dXJuIGQxLmxpbmUgLSBkMi5saW5lO1xuICAgIH0pIDogZGVjb3JhdG9ycztcbiAgfSwgW2RlY29yYXRvcnNdKTtcbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXdyYXBwZXIuY3VycmVudCB8fCAhc2hvdWxkSW5pdEVkaXRvcikgcmV0dXJuO1xuICAgIHZhciBwYXJlbnREaXYgPSB3cmFwcGVyLmN1cnJlbnQ7XG4gICAgdmFyIGV4aXN0aW5nUGxhY2Vob2xkZXIgPSBwYXJlbnREaXYucXVlcnlTZWxlY3RvcihcIi5zcC1wcmUtcGxhY2Vob2xkZXJcIik7XG4gICAgaWYgKGV4aXN0aW5nUGxhY2Vob2xkZXIpIHtcbiAgICAgIHBhcmVudERpdi5yZW1vdmVDaGlsZChleGlzdGluZ1BsYWNlaG9sZGVyKTtcbiAgICB9XG4gICAgdmFyIHZpZXcgPSBuZXcgRWRpdG9yVmlldyh7XG4gICAgICBkb2M6IGNvZGUsXG4gICAgICBleHRlbnNpb25zOiBbXSxcbiAgICAgIHBhcmVudDogcGFyZW50RGl2LFxuICAgICAgZGlzcGF0Y2g6IGZ1bmN0aW9uICh0cikge1xuICAgICAgICB2aWV3LnVwZGF0ZShbdHJdKTtcbiAgICAgICAgaWYgKHRyLmRvY0NoYW5nZWQpIHtcbiAgICAgICAgICB2YXIgbmV3Q29kZSA9IHRyLm5ld0RvYy5zbGljZVN0cmluZygwLCB0ci5uZXdEb2MubGVuZ3RoKTtcbiAgICAgICAgICBzZXRJbnRlcm5hbENvZGUobmV3Q29kZSk7XG4gICAgICAgICAgb25Db2RlVXBkYXRlID09PSBudWxsIHx8IG9uQ29kZVVwZGF0ZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogb25Db2RlVXBkYXRlKG5ld0NvZGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgdmlldy5jb250ZW50RE9NLnNldEF0dHJpYnV0ZShcImRhdGEtZ3JhbW1cIiwgXCJmYWxzZVwiKTtcbiAgICB2aWV3LmNvbnRlbnRET00uc2V0QXR0cmlidXRlKFwiZGF0YS1sdC1hY3RpdmVcIiwgXCJmYWxzZVwiKTtcbiAgICB2aWV3LmNvbnRlbnRET00uc2V0QXR0cmlidXRlKFwiYXJpYS1sYWJlbFwiLCBmaWxlUGF0aCA/IChcIkNvZGUgRWRpdG9yIGZvciBcIikuY29uY2F0KGdldEZpbGVOYW1lKGZpbGVQYXRoKSkgOiBcIkNvZGUgRWRpdG9yXCIpO1xuICAgIGlmIChyZWFkT25seSkge1xuICAgICAgdmlldy5jb250ZW50RE9NLmNsYXNzTGlzdC5hZGQoXCJjbS1yZWFkb25seVwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmlldy5jb250ZW50RE9NLnNldEF0dHJpYnV0ZShcInRhYkluZGV4XCIsIFwiLTFcIik7XG4gICAgfVxuICAgIGNtVmlldy5jdXJyZW50ID0gdmlldztcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIF9hO1xuICAgICAgKF9hID0gY21WaWV3LmN1cnJlbnQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5kZXN0cm95KCk7XG4gICAgfTtcbiAgfSwgW3Nob3VsZEluaXRFZGl0b3JdKTtcbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoY21WaWV3LmN1cnJlbnQpIHtcbiAgICAgIHZhciBjdXN0b21Db21tYW5kc0tleW1hcCA9IFt7XG4gICAgICAgIGtleTogXCJUYWJcIixcbiAgICAgICAgcnVuOiBmdW5jdGlvbiAodmlldykge1xuICAgICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgICAgaW5kZW50TW9yZSh2aWV3KTtcbiAgICAgICAgICB2YXIgY3VzdG9tS2V5ID0gZXh0ZW5zaW9uc0tleW1hcC5maW5kKGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgdmFyIGtleSA9IF9hLmtleTtcbiAgICAgICAgICAgIHJldHVybiBrZXkgPT09IFwiVGFiXCI7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuIChfYiA9IChfYSA9IGN1c3RvbUtleSA9PT0gbnVsbCB8fCBjdXN0b21LZXkgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGN1c3RvbUtleS5ydW4pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jYWxsKGN1c3RvbUtleSwgdmlldykpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0sIHtcbiAgICAgICAga2V5OiBcIlNoaWZ0LVRhYlwiLFxuICAgICAgICBydW46IGZ1bmN0aW9uICh2aWV3KSB7XG4gICAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgICBpbmRlbnRMZXNzKHtcbiAgICAgICAgICAgIHN0YXRlOiB2aWV3LnN0YXRlLFxuICAgICAgICAgICAgZGlzcGF0Y2g6IHZpZXcuZGlzcGF0Y2hcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB2YXIgY3VzdG9tS2V5ID0gZXh0ZW5zaW9uc0tleW1hcC5maW5kKGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgdmFyIGtleSA9IF9hLmtleTtcbiAgICAgICAgICAgIHJldHVybiBrZXkgPT09IFwiU2hpZnQtVGFiXCI7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuIChfYiA9IChfYSA9IGN1c3RvbUtleSA9PT0gbnVsbCB8fCBjdXN0b21LZXkgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGN1c3RvbUtleS5ydW4pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jYWxsKGN1c3RvbUtleSwgdmlldykpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0sIHtcbiAgICAgICAga2V5OiBcIkVzY2FwZVwiLFxuICAgICAgICBydW46IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAocmVhZE9ubHkpIHJldHVybiB0cnVlO1xuICAgICAgICAgIGlmICh3cmFwcGVyLmN1cnJlbnQpIHtcbiAgICAgICAgICAgIHdyYXBwZXIuY3VycmVudC5mb2N1cygpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBrZXk6IFwibW9kLUJhY2tzcGFjZVwiLFxuICAgICAgICBydW46IGRlbGV0ZUdyb3VwQmFja3dhcmRcbiAgICAgIH1dO1xuICAgICAgdmFyIGV4dGVuc2lvbkxpc3QgPSBfX3NwcmVhZEFycmF5KF9fc3ByZWFkQXJyYXkoW2hpZ2hsaWdodFNwZWNpYWxDaGFycygpLCBoaXN0b3J5KCksIGNsb3NlQnJhY2tldHMoKV0sIGV4dGVuc2lvbnMsIHRydWUpLCBba2V5bWFwLm9mKF9fc3ByZWFkQXJyYXkoX19zcHJlYWRBcnJheShfX3NwcmVhZEFycmF5KF9fc3ByZWFkQXJyYXkoX19zcHJlYWRBcnJheShbXSwgY2xvc2VCcmFja2V0c0tleW1hcCwgdHJ1ZSksIGRlZmF1bHRLZXltYXAsIHRydWUpLCBoaXN0b3J5S2V5bWFwLCB0cnVlKSwgY3VzdG9tQ29tbWFuZHNLZXltYXAsIHRydWUpLCBleHRlbnNpb25zS2V5bWFwLCB0cnVlKSksIGxhbmdTdXBwb3J0LCBnZXRFZGl0b3JUaGVtZSgpLCBzeW50YXhIaWdobGlnaHRpbmcoaGlnaGxpZ2h0VGhlbWUpXSwgZmFsc2UpO1xuICAgICAgaWYgKHJlYWRPbmx5KSB7XG4gICAgICAgIGV4dGVuc2lvbkxpc3QucHVzaChFZGl0b3JTdGF0ZS5yZWFkT25seS5vZih0cnVlKSk7XG4gICAgICAgIGV4dGVuc2lvbkxpc3QucHVzaChFZGl0b3JWaWV3LmVkaXRhYmxlLm9mKGZhbHNlKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBleHRlbnNpb25MaXN0LnB1c2goYnJhY2tldE1hdGNoaW5nKCkpO1xuICAgICAgICBleHRlbnNpb25MaXN0LnB1c2goaGlnaGxpZ2h0QWN0aXZlTGluZSgpKTtcbiAgICAgIH1cbiAgICAgIGlmIChzb3J0ZWREZWNvcmF0b3JzKSB7XG4gICAgICAgIGV4dGVuc2lvbkxpc3QucHVzaChoaWdobGlnaHREZWNvcmF0b3JzKHNvcnRlZERlY29yYXRvcnMpKTtcbiAgICAgIH1cbiAgICAgIGlmICh3cmFwQ29udGVudCkge1xuICAgICAgICBleHRlbnNpb25MaXN0LnB1c2goRWRpdG9yVmlldy5saW5lV3JhcHBpbmcpO1xuICAgICAgfVxuICAgICAgaWYgKHNob3dMaW5lTnVtYmVycykge1xuICAgICAgICBleHRlbnNpb25MaXN0LnB1c2gobGluZU51bWJlcnMoKSk7XG4gICAgICB9XG4gICAgICBpZiAoc2hvd0lubGluZUVycm9ycykge1xuICAgICAgICBleHRlbnNpb25MaXN0LnB1c2goaGlnaGxpZ2h0SW5saW5lRXJyb3IoKSk7XG4gICAgICB9XG4gICAgICBjbVZpZXcuY3VycmVudC5kaXNwYXRjaCh7XG4gICAgICAgIGVmZmVjdHM6IFN0YXRlRWZmZWN0LnJlY29uZmlndXJlLm9mKGV4dGVuc2lvbkxpc3QpXG4gICAgICB9KTtcbiAgICB9XG4gIH0sIFtzaG91bGRJbml0RWRpdG9yLCBzb3J0ZWREZWNvcmF0b3JzLCBzaG93TGluZU51bWJlcnMsIHdyYXBDb250ZW50LCB0aGVtZUlkLCByZWFkT25seSwgYXV0b1JlbG9hZF0pO1xuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gYXBwbHlFeHRlbnNpb25zKCkge1xuICAgIHZhciB2aWV3ID0gY21WaWV3LmN1cnJlbnQ7XG4gICAgdmFyIGRlcGVuZGVuY2llc0FyZURpZmYgPSAhc2hhbGxvd0VxdWFsKGV4dGVuc2lvbnMsIHByZXZFeHRlbnNpb24uY3VycmVudCkgfHwgIXNoYWxsb3dFcXVhbChleHRlbnNpb25zS2V5bWFwLCBwcmV2RXh0ZW5zaW9uS2V5bWFwLmN1cnJlbnQpO1xuICAgIGlmICh2aWV3ICYmIGRlcGVuZGVuY2llc0FyZURpZmYpIHtcbiAgICAgIHZpZXcuZGlzcGF0Y2goe1xuICAgICAgICBlZmZlY3RzOiBTdGF0ZUVmZmVjdC5hcHBlbmRDb25maWcub2YoZXh0ZW5zaW9ucylcbiAgICAgIH0pO1xuICAgICAgdmlldy5kaXNwYXRjaCh7XG4gICAgICAgIGVmZmVjdHM6IFN0YXRlRWZmZWN0LmFwcGVuZENvbmZpZy5vZihrZXltYXAub2YoX19zcHJlYWRBcnJheShbXSwgZXh0ZW5zaW9uc0tleW1hcCwgdHJ1ZSkpKVxuICAgICAgfSk7XG4gICAgICBwcmV2RXh0ZW5zaW9uLmN1cnJlbnQgPSBleHRlbnNpb25zO1xuICAgICAgcHJldkV4dGVuc2lvbktleW1hcC5jdXJyZW50ID0gZXh0ZW5zaW9uc0tleW1hcDtcbiAgICB9XG4gIH0sIFtleHRlbnNpb25zLCBleHRlbnNpb25zS2V5bWFwXSk7XG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGNtVmlldy5jdXJyZW50ICYmIGVkaXRvclN0YXRlID09PSBcImRpcnR5XCIgJiYgd2luZG93Lm1hdGNoTWVkaWEoXCIobWluLXdpZHRoOiA3NjhweClcIikubWF0Y2hlcykge1xuICAgICAgY21WaWV3LmN1cnJlbnQuY29udGVudERPTS5mb2N1cygpO1xuICAgIH1cbiAgfSwgW10pO1xuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmIChjbVZpZXcuY3VycmVudCAmJiB0eXBlb2YgY29kZSA9PT0gXCJzdHJpbmdcIiAmJiBjb2RlICE9PSBpbnRlcm5hbENvZGUpIHtcbiAgICAgIHZhciB2aWV3ID0gY21WaWV3LmN1cnJlbnQ7XG4gICAgICB2YXIgc2VsZWN0aW9uID0gdmlldy5zdGF0ZS5zZWxlY3Rpb24ucmFuZ2VzLnNvbWUoZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgIHZhciB0byA9IF9hLnRvLCBmcm9tID0gX2EuZnJvbTtcbiAgICAgICAgcmV0dXJuIHRvID4gY29kZS5sZW5ndGggfHwgZnJvbSA+IGNvZGUubGVuZ3RoO1xuICAgICAgfSkgPyBFZGl0b3JTZWxlY3Rpb24uY3Vyc29yKGNvZGUubGVuZ3RoKSA6IHZpZXcuc3RhdGUuc2VsZWN0aW9uO1xuICAgICAgdmFyIGNoYW5nZXMgPSB7XG4gICAgICAgIGZyb206IDAsXG4gICAgICAgIHRvOiB2aWV3LnN0YXRlLmRvYy5sZW5ndGgsXG4gICAgICAgIGluc2VydDogY29kZVxuICAgICAgfTtcbiAgICAgIHZpZXcuZGlzcGF0Y2goe1xuICAgICAgICBjaGFuZ2VzOiBjaGFuZ2VzLFxuICAgICAgICBzZWxlY3Rpb246IHNlbGVjdGlvblxuICAgICAgfSk7XG4gICAgfVxuICB9LCBbY29kZV0pO1xuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gbWVzc2FnZVRvSW5saW5lRXJyb3IoKSB7XG4gICAgaWYgKCFzaG93SW5saW5lRXJyb3JzKSByZXR1cm47XG4gICAgdmFyIHVuc3Vic2NyaWJlID0gbGlzdGVuKGZ1bmN0aW9uIChtZXNzYWdlKSB7XG4gICAgICB2YXIgdmlldyA9IGNtVmlldy5jdXJyZW50O1xuICAgICAgaWYgKG1lc3NhZ2UudHlwZSA9PT0gXCJzdWNjZXNzXCIpIHtcbiAgICAgICAgdmlldyA9PT0gbnVsbCB8fCB2aWV3ID09PSB2b2lkIDAgPyB2b2lkIDAgOiB2aWV3LmRpc3BhdGNoKHtcbiAgICAgICAgICBhbm5vdGF0aW9uczogW25ldyBBbm5vdGF0aW9uKFwicmVtb3ZlLWVycm9yc1wiLCB0cnVlKV1cbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKG1lc3NhZ2UudHlwZSA9PT0gXCJhY3Rpb25cIiAmJiBtZXNzYWdlLmFjdGlvbiA9PT0gXCJzaG93LWVycm9yXCIgJiYgbWVzc2FnZS5wYXRoID09PSBmaWxlUGF0aCAmJiBtZXNzYWdlLmxpbmUpIHtcbiAgICAgICAgdmlldyA9PT0gbnVsbCB8fCB2aWV3ID09PSB2b2lkIDAgPyB2b2lkIDAgOiB2aWV3LmRpc3BhdGNoKHtcbiAgICAgICAgICBhbm5vdGF0aW9uczogW25ldyBBbm5vdGF0aW9uKFwic2hvdy1lcnJvclwiLCBtZXNzYWdlLmxpbmUpXVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHVuc3Vic2NyaWJlKCk7XG4gICAgfTtcbiAgfSwgW2xpc3Rlbiwgc2hvd0lubGluZUVycm9yc10pO1xuICB2YXIgaGFuZGxlQ29udGFpbmVyS2V5RG93biA9IGZ1bmN0aW9uIChldnQpIHtcbiAgICBpZiAoZXZ0LmtleSA9PT0gXCJFbnRlclwiICYmIGNtVmlldy5jdXJyZW50KSB7XG4gICAgICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGNtVmlldy5jdXJyZW50LmNvbnRlbnRET00uZm9jdXMoKTtcbiAgICB9XG4gIH07XG4gIHZhciBndXR0ZXJMaW5lT2Zmc2V0ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBvZmZzZXQgPSA0O1xuICAgIGlmIChzaG93TGluZU51bWJlcnMpIHtcbiAgICAgIG9mZnNldCArPSA2O1xuICAgIH1cbiAgICBpZiAoIXJlYWRPbmx5KSB7XG4gICAgICBvZmZzZXQgKz0gMTtcbiAgICB9XG4gICAgcmV0dXJuIChcInZhcigtLVwiKS5jb25jYXQoVEhFTUVfUFJFRklYLCBcIi1zcGFjZS1cIikuY29uY2F0KG9mZnNldCwgXCIpXCIpO1xuICB9O1xuICBpZiAocmVhZE9ubHkpIHtcbiAgICByZXR1cm4ganN4cyhGcmFnbWVudCwge1xuICAgICAgY2hpbGRyZW46IFtqc3goXCJwcmVcIiwge1xuICAgICAgICByZWY6IGNvbWJpbmVkUmVmLFxuICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoXCJjbVwiLCBbY2xhc3NOYW1lcyhlZGl0b3JTdGF0ZSksIGNsYXNzTmFtZXMobGFuZ3VhZ2VFeHRlbnNpb24pLCBjbUNsYXNzTmFtZSwgdG9rZW5zQ2xhc3NOYW1lXSksXG4gICAgICAgIHRyYW5zbGF0ZTogXCJub1wiLFxuICAgICAgICBjaGlsZHJlbjoganN4KFwiY29kZVwiLCB7XG4gICAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKFwicHJlLXBsYWNlaG9sZGVyXCIsIFtwbGFjZWhvbGRlckNsYXNzTmFtZV0pLFxuICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICBtYXJnaW5MZWZ0OiBndXR0ZXJMaW5lT2Zmc2V0KClcbiAgICAgICAgICB9LFxuICAgICAgICAgIGNoaWxkcmVuOiBzeW50YXhIaWdobGlnaHRSZW5kZXJcbiAgICAgICAgfSlcbiAgICAgIH0pLCByZWFkT25seSAmJiBzaG93UmVhZE9ubHkgJiYganN4KFwic3BhblwiLCBfX2Fzc2lnbih7XG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhcInJlYWQtb25seVwiLCBbcmVhZE9ubHlDbGFzc05hbWVdKVxuICAgICAgfSwge30sIHtcbiAgICAgICAgY2hpbGRyZW46IFwiUmVhZC1vbmx5XCJcbiAgICAgIH0pKV1cbiAgICB9KTtcbiAgfVxuICByZXR1cm4ganN4KFwiZGl2XCIsIHtcbiAgICByZWY6IGNvbWJpbmVkUmVmLFxuICAgIFwiYXJpYS1hdXRvY29tcGxldGVcIjogXCJsaXN0XCIsXG4gICAgXCJhcmlhLWxhYmVsXCI6IGZpbGVQYXRoID8gKFwiQ29kZSBFZGl0b3IgZm9yIFwiKS5jb25jYXQoZ2V0RmlsZU5hbWUoZmlsZVBhdGgpKSA6IFwiQ29kZSBFZGl0b3JcIixcbiAgICBcImFyaWEtbXVsdGlsaW5lXCI6IFwidHJ1ZVwiLFxuICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhcImNtXCIsIFtjbGFzc05hbWVzKGVkaXRvclN0YXRlKSwgY2xhc3NOYW1lcyhsYW5ndWFnZUV4dGVuc2lvbiksIGNtQ2xhc3NOYW1lLCB0b2tlbnNDbGFzc05hbWVdKSxcbiAgICBvbktleURvd246IGhhbmRsZUNvbnRhaW5lcktleURvd24sXG4gICAgcm9sZTogXCJ0ZXh0Ym94XCIsXG4gICAgdGFiSW5kZXg6IDAsXG4gICAgdHJhbnNsYXRlOiBcIm5vXCIsXG4gICAgc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nOiB0cnVlLFxuICAgIGNoaWxkcmVuOiBqc3goXCJwcmVcIiwge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKFwicHJlLXBsYWNlaG9sZGVyXCIsIFtwbGFjZWhvbGRlckNsYXNzTmFtZV0pLFxuICAgICAgc3R5bGU6IHtcbiAgICAgICAgbWFyZ2luTGVmdDogZ3V0dGVyTGluZU9mZnNldCgpXG4gICAgICB9LFxuICAgICAgY2hpbGRyZW46IHN5bnRheEhpZ2hsaWdodFJlbmRlclxuICAgIH0pXG4gIH0pO1xufSk7XG5cbnZhciBTYW5kcGFja0NvZGVFZGl0b3IgPSBmb3J3YXJkUmVmKGZ1bmN0aW9uIChfYSwgcmVmKSB7XG4gIHZhciBzaG93VGFicyA9IF9hLnNob3dUYWJzLCBfYiA9IF9hLnNob3dMaW5lTnVtYmVycywgc2hvd0xpbmVOdW1iZXJzID0gX2IgPT09IHZvaWQgMCA/IGZhbHNlIDogX2IsIF9jID0gX2Euc2hvd0lubGluZUVycm9ycywgc2hvd0lubGluZUVycm9ycyA9IF9jID09PSB2b2lkIDAgPyBmYWxzZSA6IF9jLCBfZCA9IF9hLnNob3dSdW5CdXR0b24sIHNob3dSdW5CdXR0b24gPSBfZCA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9kLCBfZSA9IF9hLndyYXBDb250ZW50LCB3cmFwQ29udGVudCA9IF9lID09PSB2b2lkIDAgPyBmYWxzZSA6IF9lLCBfZiA9IF9hLmNsb3NhYmxlVGFicywgY2xvc2FibGVUYWJzID0gX2YgPT09IHZvaWQgMCA/IGZhbHNlIDogX2YsIGluaXRNb2RlID0gX2EuaW5pdE1vZGUsIGV4dGVuc2lvbnMgPSBfYS5leHRlbnNpb25zLCBleHRlbnNpb25zS2V5bWFwID0gX2EuZXh0ZW5zaW9uc0tleW1hcCwgcmVhZE9ubHkgPSBfYS5yZWFkT25seSwgc2hvd1JlYWRPbmx5ID0gX2Euc2hvd1JlYWRPbmx5LCBhZGRpdGlvbmFsTGFuZ3VhZ2VzID0gX2EuYWRkaXRpb25hbExhbmd1YWdlcywgY2xhc3NOYW1lID0gX2EuY2xhc3NOYW1lLCBwcm9wcyA9IF9fcmVzdChfYSwgW1wic2hvd1RhYnNcIiwgXCJzaG93TGluZU51bWJlcnNcIiwgXCJzaG93SW5saW5lRXJyb3JzXCIsIFwic2hvd1J1bkJ1dHRvblwiLCBcIndyYXBDb250ZW50XCIsIFwiY2xvc2FibGVUYWJzXCIsIFwiaW5pdE1vZGVcIiwgXCJleHRlbnNpb25zXCIsIFwiZXh0ZW5zaW9uc0tleW1hcFwiLCBcInJlYWRPbmx5XCIsIFwic2hvd1JlYWRPbmx5XCIsIFwiYWRkaXRpb25hbExhbmd1YWdlc1wiLCBcImNsYXNzTmFtZVwiXSk7XG4gIHZhciBzYW5kcGFjayA9IHVzZVNhbmRwYWNrKCkuc2FuZHBhY2s7XG4gIHZhciBfZyA9IHVzZUFjdGl2ZUNvZGUoKSwgY29kZSA9IF9nLmNvZGUsIHVwZGF0ZUNvZGUgPSBfZy51cGRhdGVDb2RlLCByZWFkT25seUZpbGUgPSBfZy5yZWFkT25seTtcbiAgdmFyIGFjdGl2ZUZpbGUgPSBzYW5kcGFjay5hY3RpdmVGaWxlLCBzdGF0dXMgPSBzYW5kcGFjay5zdGF0dXMsIGVkaXRvclN0YXRlID0gc2FuZHBhY2suZWRpdG9yU3RhdGU7XG4gIHZhciBzaG91bGRTaG93VGFicyA9IHNob3dUYWJzICE9PSBudWxsICYmIHNob3dUYWJzICE9PSB2b2lkIDAgPyBzaG93VGFicyA6IHNhbmRwYWNrLnZpc2libGVGaWxlcy5sZW5ndGggPiAxO1xuICB2YXIgY2xhc3NOYW1lcyA9IHVzZUNsYXNzTmFtZXMoKTtcbiAgdmFyIGhhbmRsZUNvZGVVcGRhdGUgPSBmdW5jdGlvbiAobmV3Q29kZSwgc2hvdWxkVXBkYXRlUHJldmlldykge1xuICAgIGlmIChzaG91bGRVcGRhdGVQcmV2aWV3ID09PSB2b2lkIDApIHtcbiAgICAgIHNob3VsZFVwZGF0ZVByZXZpZXcgPSB0cnVlO1xuICAgIH1cbiAgICB1cGRhdGVDb2RlKG5ld0NvZGUsIHNob3VsZFVwZGF0ZVByZXZpZXcpO1xuICB9O1xuICByZXR1cm4ganN4cyhTYW5kcGFja1N0YWNrLCBfX2Fzc2lnbih7XG4gICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKFwiZWRpdG9yXCIsIFtjbGFzc05hbWVdKVxuICB9LCBwcm9wcywge1xuICAgIGNoaWxkcmVuOiBbc2hvdWxkU2hvd1RhYnMgJiYganN4KEZpbGVUYWJzLCB7XG4gICAgICBjbG9zYWJsZVRhYnM6IGNsb3NhYmxlVGFic1xuICAgIH0pLCBqc3hzKFwiZGl2XCIsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhcImNvZGUtZWRpdG9yXCIsIFtlZGl0b3JDbGFzc05hbWVdKSxcbiAgICAgIGNoaWxkcmVuOiBbanN4KENvZGVNaXJyb3IsIHtcbiAgICAgICAgcmVmOiByZWYsXG4gICAgICAgIGFkZGl0aW9uYWxMYW5ndWFnZXM6IGFkZGl0aW9uYWxMYW5ndWFnZXMsXG4gICAgICAgIGNvZGU6IGNvZGUsXG4gICAgICAgIGVkaXRvclN0YXRlOiBlZGl0b3JTdGF0ZSxcbiAgICAgICAgZXh0ZW5zaW9uczogZXh0ZW5zaW9ucyxcbiAgICAgICAgZXh0ZW5zaW9uc0tleW1hcDogZXh0ZW5zaW9uc0tleW1hcCxcbiAgICAgICAgZmlsZVBhdGg6IGFjdGl2ZUZpbGUsXG4gICAgICAgIGluaXRNb2RlOiBpbml0TW9kZSB8fCBzYW5kcGFjay5pbml0TW9kZSxcbiAgICAgICAgb25Db2RlVXBkYXRlOiBmdW5jdGlvbiAobmV3Q29kZSkge1xuICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICByZXR1cm4gaGFuZGxlQ29kZVVwZGF0ZShuZXdDb2RlLCAoX2EgPSBzYW5kcGFjay5hdXRvUmVsb2FkKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiB0cnVlKTtcbiAgICAgICAgfSxcbiAgICAgICAgcmVhZE9ubHk6IHJlYWRPbmx5IHx8IHJlYWRPbmx5RmlsZSxcbiAgICAgICAgc2hvd0lubGluZUVycm9yczogc2hvd0lubGluZUVycm9ycyxcbiAgICAgICAgc2hvd0xpbmVOdW1iZXJzOiBzaG93TGluZU51bWJlcnMsXG4gICAgICAgIHNob3dSZWFkT25seTogc2hvd1JlYWRPbmx5LFxuICAgICAgICB3cmFwQ29udGVudDogd3JhcENvbnRlbnRcbiAgICAgIH0sIGFjdGl2ZUZpbGUpLCBzaG93UnVuQnV0dG9uICYmICghc2FuZHBhY2suYXV0b1JlbG9hZCB8fCBzdGF0dXMgPT09IFwiaWRsZVwiKSA/IGpzeChSdW5CdXR0b24kMSwge30pIDogbnVsbF1cbiAgICB9KV1cbiAgfSkpO1xufSk7XG5cbnZhciBTYW5kcGFja0NvZGVWaWV3ZXIgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIChfYSwgcmVmKSB7XG4gIHZhciBzaG93VGFicyA9IF9hLnNob3dUYWJzLCBzaG93TGluZU51bWJlcnMgPSBfYS5zaG93TGluZU51bWJlcnMsIGRlY29yYXRvcnMgPSBfYS5kZWNvcmF0b3JzLCBwcm9wQ29kZSA9IF9hLmNvZGUsIGluaXRNb2RlID0gX2EuaW5pdE1vZGUsIHdyYXBDb250ZW50ID0gX2Eud3JhcENvbnRlbnQsIGFkZGl0aW9uYWxMYW5ndWFnZXMgPSBfYS5hZGRpdGlvbmFsTGFuZ3VhZ2VzLCBwcm9wcyA9IF9fcmVzdChfYSwgW1wic2hvd1RhYnNcIiwgXCJzaG93TGluZU51bWJlcnNcIiwgXCJkZWNvcmF0b3JzXCIsIFwiY29kZVwiLCBcImluaXRNb2RlXCIsIFwid3JhcENvbnRlbnRcIiwgXCJhZGRpdGlvbmFsTGFuZ3VhZ2VzXCJdKTtcbiAgdmFyIHNhbmRwYWNrID0gdXNlU2FuZHBhY2soKS5zYW5kcGFjaztcbiAgdmFyIGNvZGUgPSB1c2VBY3RpdmVDb2RlKCkuY29kZTtcbiAgdmFyIGNsYXNzTmFtZXMgPSB1c2VDbGFzc05hbWVzKCk7XG4gIHZhciBzaG91bGRTaG93VGFicyA9IHNob3dUYWJzICE9PSBudWxsICYmIHNob3dUYWJzICE9PSB2b2lkIDAgPyBzaG93VGFicyA6IHNhbmRwYWNrLnZpc2libGVGaWxlcy5sZW5ndGggPiAxO1xuICByZXR1cm4ganN4cyhTYW5kcGFja1N0YWNrLCBfX2Fzc2lnbih7XG4gICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKFwiZWRpdG9yLXZpZXdlclwiKVxuICB9LCBwcm9wcywge1xuICAgIGNoaWxkcmVuOiBbc2hvdWxkU2hvd1RhYnMgPyBqc3goRmlsZVRhYnMsIHt9KSA6IG51bGwsIGpzeChcImRpdlwiLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoXCJjb2RlLWVkaXRvclwiLCBbZWRpdG9yQ2xhc3NOYW1lXSksXG4gICAgICBjaGlsZHJlbjoganN4KENvZGVNaXJyb3IsIHtcbiAgICAgICAgcmVmOiByZWYsXG4gICAgICAgIGFkZGl0aW9uYWxMYW5ndWFnZXM6IGFkZGl0aW9uYWxMYW5ndWFnZXMsXG4gICAgICAgIGNvZGU6IHByb3BDb2RlICE9PSBudWxsICYmIHByb3BDb2RlICE9PSB2b2lkIDAgPyBwcm9wQ29kZSA6IGNvZGUsXG4gICAgICAgIGRlY29yYXRvcnM6IGRlY29yYXRvcnMsXG4gICAgICAgIGZpbGVQYXRoOiBzYW5kcGFjay5hY3RpdmVGaWxlLFxuICAgICAgICBpbml0TW9kZTogaW5pdE1vZGUgfHwgc2FuZHBhY2suaW5pdE1vZGUsXG4gICAgICAgIHNob3dMaW5lTnVtYmVyczogc2hvd0xpbmVOdW1iZXJzLFxuICAgICAgICBzaG93UmVhZE9ubHk6IGZhbHNlLFxuICAgICAgICB3cmFwQ29udGVudDogd3JhcENvbnRlbnQsXG4gICAgICAgIHJlYWRPbmx5OiB0cnVlXG4gICAgICB9KVxuICAgIH0pLCBzYW5kcGFjay5zdGF0dXMgPT09IFwiaWRsZVwiID8ganN4KFJ1bkJ1dHRvbiQxLCB7fSkgOiBudWxsXVxuICB9KSk7XG59KTtcblxudmFyIGxheW91dENsYXNzTmFtZSA9IGZha2VDc3M7XG52YXIgU2FuZHBhY2tMYXlvdXQgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIChfYSwgcmVmKSB7XG4gIHZhciBjaGlsZHJlbiA9IF9hLmNoaWxkcmVuLCBjbGFzc05hbWUgPSBfYS5jbGFzc05hbWUsIHByb3BzID0gX19yZXN0KF9hLCBbXCJjaGlsZHJlblwiLCBcImNsYXNzTmFtZVwiXSk7XG4gIHZhciBzYW5kcGFjayA9IHVzZVNhbmRwYWNrKCkuc2FuZHBhY2s7XG4gIHZhciBjbGFzc05hbWVzID0gdXNlQ2xhc3NOYW1lcygpO1xuICB2YXIgY29tYmluZWRSZWYgPSB1c2VDb21iaW5lZFJlZnMoc2FuZHBhY2subGF6eUFuY2hvclJlZiwgcmVmKTtcbiAgcmV0dXJuIGpzeChcImRpdlwiLCBfX2Fzc2lnbih7XG4gICAgcmVmOiBjb21iaW5lZFJlZixcbiAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoXCJsYXlvdXRcIiwgW2xheW91dENsYXNzTmFtZSwgY2xhc3NOYW1lXSlcbiAgfSwgcHJvcHMsIHtcbiAgICBjaGlsZHJlbjogY2hpbGRyZW5cbiAgfSkpO1xufSk7XG5cbnZhciB1c2VFcnJvck1lc3NhZ2UgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBfYTtcbiAgdmFyIHNhbmRwYWNrID0gdXNlU2FuZHBhY2soKS5zYW5kcGFjaztcbiAgdmFyIGVycm9yID0gc2FuZHBhY2suZXJyb3I7XG4gIHJldHVybiAoX2EgPSBlcnJvciA9PT0gbnVsbCB8fCBlcnJvciA9PT0gdm9pZCAwID8gdm9pZCAwIDogZXJyb3IubWVzc2FnZSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogbnVsbDtcbn07XG5cbnZhciBGQURFX0FOSU1BVElPTl9EVVJBVElPTiA9IDIwMDtcbnZhciB1c2VMb2FkaW5nT3ZlcmxheVN0YXRlID0gZnVuY3Rpb24gKGNsaWVudElkLCBleHRlcm5hbExvYWRpbmcpIHtcbiAgdmFyIF9hID0gdXNlU2FuZHBhY2soKSwgc2FuZHBhY2sgPSBfYS5zYW5kcGFjaywgbGlzdGVuID0gX2EubGlzdGVuO1xuICB2YXIgX2IgPSBSZWFjdC51c2VTdGF0ZShcIkxPQURJTkdcIiksIHN0YXRlID0gX2JbMF0sIHNldFN0YXRlID0gX2JbMV07XG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHVuc3Vic2NyaWJlID0gbGlzdGVuKGZ1bmN0aW9uIChtZXNzYWdlKSB7XG4gICAgICBpZiAobWVzc2FnZS50eXBlID09PSBcInN0YXJ0XCIgJiYgbWVzc2FnZS5maXJzdExvYWQgPT09IHRydWUpIHtcbiAgICAgICAgc2V0U3RhdGUoXCJMT0FESU5HXCIpO1xuICAgICAgfVxuICAgICAgaWYgKG1lc3NhZ2UudHlwZSA9PT0gXCJkb25lXCIpIHtcbiAgICAgICAgc2V0U3RhdGUoZnVuY3Rpb24gKHByZXYpIHtcbiAgICAgICAgICByZXR1cm4gcHJldiA9PT0gXCJMT0FESU5HXCIgPyBcIlBSRV9GQURJTkdcIiA6IFwiSElEREVOXCI7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sIGNsaWVudElkKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgdW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuICB9LCBbY2xpZW50SWQsIHNhbmRwYWNrLnN0YXR1cyA9PT0gXCJpZGxlXCJdKTtcbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZmFkZVRpbWVvdXQ7XG4gICAgaWYgKHN0YXRlID09PSBcIlBSRV9GQURJTkdcIiAmJiAhZXh0ZXJuYWxMb2FkaW5nKSB7XG4gICAgICBzZXRTdGF0ZShcIkZBRElOR1wiKTtcbiAgICB9IGVsc2UgaWYgKHN0YXRlID09PSBcIkZBRElOR1wiKSB7XG4gICAgICBmYWRlVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gc2V0U3RhdGUoXCJISURERU5cIik7XG4gICAgICB9LCBGQURFX0FOSU1BVElPTl9EVVJBVElPTik7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBjbGVhclRpbWVvdXQoZmFkZVRpbWVvdXQpO1xuICAgIH07XG4gIH0sIFtzdGF0ZSwgZXh0ZXJuYWxMb2FkaW5nXSk7XG4gIGlmIChzYW5kcGFjay5zdGF0dXMgPT09IFwidGltZW91dFwiKSB7XG4gICAgcmV0dXJuIFwiVElNRU9VVFwiO1xuICB9XG4gIGlmIChzYW5kcGFjay5zdGF0dXMgIT09IFwicnVubmluZ1wiKSB7XG4gICAgcmV0dXJuIFwiSElEREVOXCI7XG4gIH1cbiAgcmV0dXJuIHN0YXRlO1xufTtcblxudmFyIHVzZVNhbmRwYWNrTmF2aWdhdGlvbiA9IGZ1bmN0aW9uIChjbGllbnRJZCkge1xuICB2YXIgZGlzcGF0Y2ggPSB1c2VTYW5kcGFjaygpLmRpc3BhdGNoO1xuICByZXR1cm4ge1xuICAgIHJlZnJlc2g6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBkaXNwYXRjaCh7XG4gICAgICAgIHR5cGU6IFwicmVmcmVzaFwiXG4gICAgICB9LCBjbGllbnRJZCk7XG4gICAgfSxcbiAgICBiYWNrOiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gZGlzcGF0Y2goe1xuICAgICAgICB0eXBlOiBcInVybGJhY2tcIlxuICAgICAgfSwgY2xpZW50SWQpO1xuICAgIH0sXG4gICAgZm9yd2FyZDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGRpc3BhdGNoKHtcbiAgICAgICAgdHlwZTogXCJ1cmxmb3J3YXJkXCJcbiAgICAgIH0sIGNsaWVudElkKTtcbiAgICB9XG4gIH07XG59O1xuXG5mdW5jdGlvbiBnZXRUcmFuc3BpbGVkQ29kZShzYW5kcGFjaykge1xuICB2YXIgX2EsIF9iO1xuICB2YXIgYWN0aXZlRmlsZSA9IHNhbmRwYWNrLmFjdGl2ZUZpbGUsIGJ1bmRsZXJTdGF0ZSA9IHNhbmRwYWNrLmJ1bmRsZXJTdGF0ZTtcbiAgaWYgKGJ1bmRsZXJTdGF0ZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgdmFyIHRNb2R1bGUgPSBidW5kbGVyU3RhdGUudHJhbnNwaWxlZE1vZHVsZXNbYWN0aXZlRmlsZSArIFwiOlwiXTtcbiAgcmV0dXJuIChfYiA9IChfYSA9IHRNb2R1bGUgPT09IG51bGwgfHwgdE1vZHVsZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogdE1vZHVsZS5zb3VyY2UpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jb21waWxlZENvZGUpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IG51bGw7XG59XG52YXIgdXNlVHJhbnNwaWxlZENvZGUgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzYW5kcGFjayA9IHVzZVNhbmRwYWNrKCkuc2FuZHBhY2s7XG4gIGlmIChzYW5kcGFjay5zdGF0dXMgIT09IFwicnVubmluZ1wiKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgcmV0dXJuIGdldFRyYW5zcGlsZWRDb2RlKHNhbmRwYWNrKTtcbn07XG5cbnZhciB1c2VTYW5kcGFja0NsaWVudCA9IGZ1bmN0aW9uIChjbGllbnRQcm9wc092ZXJyaWRlKSB7XG4gIHZhciBfYSA9IHVzZVNhbmRwYWNrKCksIHNhbmRwYWNrID0gX2Euc2FuZHBhY2ssIGxpc3RlbiA9IF9hLmxpc3RlbiwgZGlzcGF0Y2ggPSBfYS5kaXNwYXRjaDtcbiAgdmFyIGlmcmFtZVJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgdmFyIGNsaWVudElkID0gUmVhY3QudXNlUmVmKGdlbmVyYXRlUmFuZG9tSWQoKSk7XG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGlmcmFtZUVsZW1lbnQgPSBpZnJhbWVSZWYuY3VycmVudDtcbiAgICB2YXIgY2xpZW50SWRWYWx1ZSA9IGNsaWVudElkLmN1cnJlbnQ7XG4gICAgaWYgKGlmcmFtZUVsZW1lbnQgIT09IG51bGwpIHtcbiAgICAgIHNhbmRwYWNrLnJlZ2lzdGVyQnVuZGxlcihpZnJhbWVFbGVtZW50LCBjbGllbnRJZFZhbHVlLCBjbGllbnRQcm9wc092ZXJyaWRlKTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBzYW5kcGFjay51bnJlZ2lzdGVyQnVuZGxlcihjbGllbnRJZFZhbHVlKTtcbiAgICB9O1xuICB9LCBbXSk7XG4gIHZhciBnZXRDbGllbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHNhbmRwYWNrLmNsaWVudHNbY2xpZW50SWQuY3VycmVudF0gfHwgbnVsbDtcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICBzYW5kcGFjazogc2FuZHBhY2ssXG4gICAgZ2V0Q2xpZW50OiBnZXRDbGllbnQsXG4gICAgY2xpZW50SWQ6IGNsaWVudElkLmN1cnJlbnQsXG4gICAgaWZyYW1lOiBpZnJhbWVSZWYsXG4gICAgbGlzdGVuOiBmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICAgIHJldHVybiBsaXN0ZW4obGlzdGVuZXIsIGNsaWVudElkLmN1cnJlbnQpO1xuICAgIH0sXG4gICAgZGlzcGF0Y2g6IGZ1bmN0aW9uIChtZXNzYWdlKSB7XG4gICAgICByZXR1cm4gZGlzcGF0Y2gobWVzc2FnZSwgY2xpZW50SWQuY3VycmVudCk7XG4gICAgfVxuICB9O1xufTtcblxudmFyIHVzZVNhbmRwYWNrU2hlbGwgPSBmdW5jdGlvbiAoY2xpZW50SWQpIHtcbiAgdmFyIGRpc3BhdGNoID0gdXNlU2FuZHBhY2soKS5kaXNwYXRjaDtcbiAgcmV0dXJuIHtcbiAgICByZXN0YXJ0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gZGlzcGF0Y2goe1xuICAgICAgICB0eXBlOiBcInNoZWxsL3Jlc3RhcnRcIlxuICAgICAgfSwgY2xpZW50SWQpO1xuICAgIH0sXG4gICAgb3BlblByZXZpZXc6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBkaXNwYXRjaCh7XG4gICAgICAgIHR5cGU6IFwic2hlbGwvb3BlblByZXZpZXdcIlxuICAgICAgfSwgY2xpZW50SWQpO1xuICAgIH1cbiAgfTtcbn07XG5cbnZhciBtYXBQcm9ncmVzc01lc3NhZ2UgPSBmdW5jdGlvbiAob3JpZ2luYWxNZXNzYWdlLCBmaXJzdFRvdGFsUGVuZGluZykge1xuICB2YXIgX2E7XG4gIHN3aXRjaCAob3JpZ2luYWxNZXNzYWdlLnN0YXRlKSB7XG4gICAgY2FzZSBcImRvd25sb2FkaW5nX21hbmlmZXN0XCI6XG4gICAgICByZXR1cm4gXCJbMS8zXSBEb3dubG9hZGluZyBtYW5pZmVzdFwiO1xuICAgIGNhc2UgXCJkb3dubG9hZGVkX21vZHVsZVwiOlxuICAgICAgcmV0dXJuIChcIlsyLzNdIERvd25sb2FkZWQgXCIpLmNvbmNhdChvcmlnaW5hbE1lc3NhZ2UubmFtZSwgXCIgKFwiKS5jb25jYXQoZmlyc3RUb3RhbFBlbmRpbmcgLSBvcmlnaW5hbE1lc3NhZ2UudG90YWxQZW5kaW5nLCBcIi9cIikuY29uY2F0KGZpcnN0VG90YWxQZW5kaW5nLCBcIilcIik7XG4gICAgY2FzZSBcInN0YXJ0aW5nX2NvbW1hbmRcIjpcbiAgICAgIHJldHVybiBcIlszLzNdIFN0YXJ0aW5nIGNvbW1hbmRcIjtcbiAgICBjYXNlIFwiY29tbWFuZF9ydW5uaW5nXCI6XG4gICAgICByZXR1cm4gKFwiWzMvM10gUnVubmluZyBcXFwiXCIpLmNvbmNhdCgoX2EgPSBvcmlnaW5hbE1lc3NhZ2UuY29tbWFuZCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnRyaW0oKSwgXCJcXFwiXCIpO1xuICB9XG59O1xudmFyIHVzZVNhbmRwYWNrUHJldmlld1Byb2dyZXNzID0gZnVuY3Rpb24gKHByb3BzKSB7XG4gIHZhciBfYSA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKSwgaXNSZWFkeSA9IF9hWzBdLCBzZXRJc1JlYWR5ID0gX2FbMV07XG4gIHZhciBfYiA9IFJlYWN0LnVzZVN0YXRlKCksIHRvdGFsRGVwZW5kZW5jaWVzID0gX2JbMF0sIHNldFRvdGFsRGVwZW5kZW5jaWVzID0gX2JbMV07XG4gIHZhciBfYyA9IFJlYWN0LnVzZVN0YXRlKG51bGwpLCBsb2FkaW5nTWVzc2FnZSA9IF9jWzBdLCBzZXRMb2FkaW5nTWVzc2FnZSA9IF9jWzFdO1xuICB2YXIgdGltZW91dCA9IHByb3BzID09PSBudWxsIHx8IHByb3BzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwcm9wcy50aW1lb3V0O1xuICB2YXIgY2xpZW50SWQgPSBwcm9wcyA9PT0gbnVsbCB8fCBwcm9wcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogcHJvcHMuY2xpZW50SWQ7XG4gIHZhciBsaXN0ZW4gPSB1c2VTYW5kcGFjaygpLmxpc3RlbjtcbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdGltZXI7XG4gICAgdmFyIHVuc3Vic2NyaWJlID0gbGlzdGVuKGZ1bmN0aW9uIChtZXNzYWdlKSB7XG4gICAgICBpZiAobWVzc2FnZS50eXBlID09PSBcInN0YXJ0XCIgJiYgbWVzc2FnZS5maXJzdExvYWQpIHtcbiAgICAgICAgc2V0SXNSZWFkeShmYWxzZSk7XG4gICAgICB9XG4gICAgICBpZiAodGltZW91dCkge1xuICAgICAgICB0aW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHNldExvYWRpbmdNZXNzYWdlKG51bGwpO1xuICAgICAgICB9LCB0aW1lb3V0KTtcbiAgICAgIH1cbiAgICAgIGlmIChtZXNzYWdlLnR5cGUgPT09IFwiZGVwZW5kZW5jaWVzXCIpIHtcbiAgICAgICAgc2V0TG9hZGluZ01lc3NhZ2UoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHN3aXRjaCAobWVzc2FnZS5kYXRhLnN0YXRlKSB7XG4gICAgICAgICAgICBjYXNlIFwiZG93bmxvYWRpbmdfbWFuaWZlc3RcIjpcbiAgICAgICAgICAgICAgcmV0dXJuIFwiWzEvM10gRG93bmxvYWRpbmcgbWFuaWZlc3RcIjtcbiAgICAgICAgICAgIGNhc2UgXCJkb3dubG9hZGVkX21vZHVsZVwiOlxuICAgICAgICAgICAgICByZXR1cm4gKFwiWzIvM10gRG93bmxvYWRlZCBcIikuY29uY2F0KG1lc3NhZ2UuZGF0YS5uYW1lLCBcIiAoXCIpLmNvbmNhdChtZXNzYWdlLmRhdGEucHJvZ3Jlc3MsIFwiL1wiKS5jb25jYXQobWVzc2FnZS5kYXRhLnRvdGFsLCBcIilcIik7XG4gICAgICAgICAgICBjYXNlIFwic3RhcnRpbmdcIjpcbiAgICAgICAgICAgICAgcmV0dXJuIFwiWzMvM10gU3RhcnRpbmdcIjtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIGlmIChtZXNzYWdlLnR5cGUgPT09IFwic2hlbGwvcHJvZ3Jlc3NcIiAmJiAhaXNSZWFkeSkge1xuICAgICAgICBpZiAoIXRvdGFsRGVwZW5kZW5jaWVzICYmIG1lc3NhZ2UuZGF0YS5zdGF0ZSA9PT0gXCJkb3dubG9hZGVkX21vZHVsZVwiKSB7XG4gICAgICAgICAgc2V0VG90YWxEZXBlbmRlbmNpZXMobWVzc2FnZS5kYXRhLnRvdGFsUGVuZGluZyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRvdGFsRGVwZW5kZW5jaWVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBzZXRMb2FkaW5nTWVzc2FnZShtYXBQcm9ncmVzc01lc3NhZ2UobWVzc2FnZS5kYXRhLCB0b3RhbERlcGVuZGVuY2llcykpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobWVzc2FnZS50eXBlID09PSBcImRvbmVcIiAmJiBtZXNzYWdlLmNvbXBpbGF0b25FcnJvciA9PT0gZmFsc2UpIHtcbiAgICAgICAgc2V0TG9hZGluZ01lc3NhZ2UobnVsbCk7XG4gICAgICAgIHNldElzUmVhZHkodHJ1ZSk7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aW1lcik7XG4gICAgICB9XG4gICAgfSwgY2xpZW50SWQpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAodGltZXIpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyKTtcbiAgICAgIH1cbiAgICAgIHVuc3Vic2NyaWJlKCk7XG4gICAgfTtcbiAgfSwgW2NsaWVudElkLCBpc1JlYWR5LCB0b3RhbERlcGVuZGVuY2llcywgdGltZW91dF0pO1xuICByZXR1cm4gbG9hZGluZ01lc3NhZ2U7XG59O1xuXG52YXIgTUFYX01FU1NBR0VfQ09VTlQkMSA9IDQwMCAqIDI7XG52YXIgdXNlU2FuZHBhY2tTaGVsbFN0ZG91dCA9IGZ1bmN0aW9uIChfYSkge1xuICB2YXIgY2xpZW50SWQgPSBfYS5jbGllbnRJZCwgX2IgPSBfYS5tYXhNZXNzYWdlQ291bnQsIG1heE1lc3NhZ2VDb3VudCA9IF9iID09PSB2b2lkIDAgPyBNQVhfTUVTU0FHRV9DT1VOVCQxIDogX2I7XG4gIHZhciBfZCA9IFJlYWN0LnVzZVN0YXRlKFtdKSwgbG9ncyA9IF9kWzBdLCBzZXRMb2dzID0gX2RbMV07XG4gIHZhciBsaXN0ZW4gPSB1c2VTYW5kcGFjaygpLmxpc3RlbjtcbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdW5zdWJzY3JpYmUgPSBsaXN0ZW4oZnVuY3Rpb24gKG1lc3NhZ2UpIHtcbiAgICAgIGlmIChtZXNzYWdlLnR5cGUgPT09IFwic3RhcnRcIikge1xuICAgICAgICBzZXRMb2dzKFtdKTtcbiAgICAgIH0gZWxzZSBpZiAobWVzc2FnZS50eXBlID09PSBcInN0ZG91dFwiICYmIG1lc3NhZ2UucGF5bG9hZC5kYXRhICYmIEJvb2xlYW4obWVzc2FnZS5wYXlsb2FkLmRhdGEudHJpbSgpKSkge1xuICAgICAgICBzZXRMb2dzKGZ1bmN0aW9uIChwcmV2KSB7XG4gICAgICAgICAgdmFyIG1lc3NhZ2VzID0gX19zcHJlYWRBcnJheShfX3NwcmVhZEFycmF5KFtdLCBwcmV2LCB0cnVlKSwgW3tcbiAgICAgICAgICAgIGRhdGE6IG1lc3NhZ2UucGF5bG9hZC5kYXRhLFxuICAgICAgICAgICAgaWQ6IGdlbmVyYXRlUmFuZG9tSWQoKVxuICAgICAgICAgIH1dLCBmYWxzZSk7XG4gICAgICAgICAgd2hpbGUgKG1lc3NhZ2VzLmxlbmd0aCA+IG1heE1lc3NhZ2VDb3VudCkge1xuICAgICAgICAgICAgbWVzc2FnZXMuc2hpZnQoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIG1lc3NhZ2VzO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LCBjbGllbnRJZCk7XG4gICAgcmV0dXJuIHVuc3Vic2NyaWJlO1xuICB9LCBbbWF4TWVzc2FnZUNvdW50LCBjbGllbnRJZF0pO1xuICByZXR1cm4ge1xuICAgIGxvZ3M6IGxvZ3MsXG4gICAgcmVzZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBzZXRMb2dzKFtdKTtcbiAgICB9XG4gIH07XG59O1xuXG52YXIgbWFwQnVuZGxlckVycm9ycyA9IGZ1bmN0aW9uIChvcmlnaW5hbE1lc3NhZ2UpIHtcbiAgdmFyIGVycm9yTWVzc2FnZSA9IG9yaWdpbmFsTWVzc2FnZS5yZXBsYWNlKFwiW3NhbmRwYWNrLWNsaWVudF06IFwiLCBcIlwiKTtcbiAgaWYgKCgvcHJvY2Vzcy5leGl0LykudGVzdChlcnJvck1lc3NhZ2UpKSB7XG4gICAgdmFyIGV4aXRDb2RlID0gZXJyb3JNZXNzYWdlLm1hdGNoKC9wcm9jZXNzLmV4aXRcXCgoXFxkKylcXCkvKTtcbiAgICBpZiAoIWV4aXRDb2RlKSByZXR1cm4gZXJyb3JNZXNzYWdlO1xuICAgIGlmIChOdW1iZXIoZXhpdENvZGVbMV0pID09PSAwKSB7XG4gICAgICByZXR1cm4gXCJTZXJ2ZXIgaXMgbm90IHJ1bm5pbmcsIHdvdWxkIHlvdSBsaWtlIHRvIHN0YXJ0IGl0IGFnYWluP1wiO1xuICAgIH1cbiAgICByZXR1cm4gKFwiU2VydmVyIGhhcyBjcmFzaGVkIHdpdGggc3RhdHVzIGNvZGUgXCIpLmNvbmNhdChleGl0Q29kZVsxXSwgXCIsIHdvdWxkIHlvdSBsaWtlIHRvIHJlc3RhcnQgdGhlIHNlcnZlcj9cIik7XG4gIH1cbiAgcmV0dXJuIGVycm9yTWVzc2FnZTtcbn07XG52YXIgRXJyb3JPdmVybGF5ID0gZnVuY3Rpb24gKHByb3BzKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLCBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsIG90aGVyUHJvcHMgPSBfX3Jlc3QocHJvcHMsIFtcImNoaWxkcmVuXCIsIFwiY2xhc3NOYW1lXCJdKTtcbiAgdmFyIGVycm9yTWVzc2FnZSA9IHVzZUVycm9yTWVzc2FnZSgpO1xuICB2YXIgcmVzdGFydCA9IHVzZVNhbmRwYWNrU2hlbGwoKS5yZXN0YXJ0O1xuICB2YXIgY2xhc3NOYW1lcyA9IHVzZUNsYXNzTmFtZXMoKTtcbiAgdmFyIF9hID0gdXNlU2FuZHBhY2soKS5zYW5kcGFjaywgcnVuU2FuZHBhY2sgPSBfYS5ydW5TYW5kcGFjaywgdGVhbUlkID0gX2EudGVhbUlkO1xuICB2YXIgZGlzcGF0Y2ggPSB1c2VTYW5kcGFjaygpLmRpc3BhdGNoO1xuICBpZiAoIWVycm9yTWVzc2FnZSAmJiAhY2hpbGRyZW4pIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICB2YXIgaXNTYW5kcGFja0J1bmRsZXJFcnJvciA9IGVycm9yTWVzc2FnZSA9PT0gbnVsbCB8fCBlcnJvck1lc3NhZ2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGVycm9yTWVzc2FnZS5zdGFydHNXaXRoKFwiW3NhbmRwYWNrLWNsaWVudF1cIik7XG4gIHZhciBwcml2YXRlRGVwZW5kZW5jeUVycm9yID0gZXJyb3JNZXNzYWdlID09PSBudWxsIHx8IGVycm9yTWVzc2FnZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZXJyb3JNZXNzYWdlLmluY2x1ZGVzKFwiTlBNX1JFR0lTVFJZX1VOQVVUSEVOVElDQVRFRF9SRVFVRVNUXCIpO1xuICB2YXIgb25TaWduSW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRlYW1JZCkge1xuICAgICAgZGlzcGF0Y2goe1xuICAgICAgICB0eXBlOiBcInNpZ24taW5cIixcbiAgICAgICAgdGVhbUlkOiB0ZWFtSWRcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbiAgaWYgKHByaXZhdGVEZXBlbmRlbmN5RXJyb3IpIHtcbiAgICByZXR1cm4ganN4cyhcImRpdlwiLCBfX2Fzc2lnbih7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoXCJvdmVybGF5XCIsIFtjbGFzc05hbWVzKFwiZXJyb3JcIiksIGFic29sdXRlQ2xhc3NOYW1lLCBlcnJvckJ1bmRsZXJDbGFzc05hbWUsIGNsYXNzTmFtZV0pXG4gICAgfSwgcHJvcHMsIHtcbiAgICAgIGNoaWxkcmVuOiBbanN4KFwicFwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhcImVycm9yLW1lc3NhZ2VcIiwgW2Vycm9yTWVzc2FnZUNsYXNzTmFtZV0pLFxuICAgICAgICBjaGlsZHJlbjoganN4KFwic3Ryb25nXCIsIHtcbiAgICAgICAgICBjaGlsZHJlbjogXCJVbmFibGUgdG8gZmV0Y2ggcmVxdWlyZWQgZGVwZW5kZW5jeS5cIlxuICAgICAgICB9KVxuICAgICAgfSksIGpzeChcImRpdlwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhcImVycm9yLW1lc3NhZ2VcIiwgW2Vycm9yTWVzc2FnZUNsYXNzTmFtZV0pLFxuICAgICAgICBjaGlsZHJlbjoganN4cyhcInBcIiwge1xuICAgICAgICAgIGNoaWxkcmVuOiBbXCJBdXRoZW50aWNhdGlvbiByZXF1aXJlZC4gUGxlYXNlIHNpZ24gaW4gdG8geW91ciBhY2NvdW50IChtYWtlIHN1cmUgdG8gYWxsb3cgcG9wLXVwcyB0byB0aGlzIHBhZ2UpIGFuZCB0cnkgYWdhaW4uIElmIHRoZSBpc3N1ZSBwZXJzaXN0cywgY29udGFjdFwiLCBcIiBcIiwganN4KFwiYVwiLCB7XG4gICAgICAgICAgICBocmVmOiBcIm1haWx0bzpoZWxsb0Bjb2Rlc2FuZGJveC5pbz9zdWJqZWN0PVNhbmRwYWNrIFRpbWVvdXQgRXJyb3JcIixcbiAgICAgICAgICAgIGNoaWxkcmVuOiBcInN1cHBvcnRcIlxuICAgICAgICAgIH0pLCBcIiBcIiwgXCJmb3IgZnVydGhlciBhc3Npc3RhbmNlLlwiXVxuICAgICAgICB9KVxuICAgICAgfSksIGpzeChcImRpdlwiLCB7XG4gICAgICAgIGNoaWxkcmVuOiBqc3hzKFwiYnV0dG9uXCIsIHtcbiAgICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoXCJidXR0b25cIiwgW2J1dHRvbkNsYXNzTmFtZSwgaWNvblN0YW5kYWxvbmVDbGFzc05hbWUsIHJvdW5kZWRCdXR0b25DbGFzc05hbWVdKSxcbiAgICAgICAgICBvbkNsaWNrOiBvblNpZ25JbixcbiAgICAgICAgICBjaGlsZHJlbjogW2pzeChTaWduSW5JY29uLCB7fSksIGpzeChcInNwYW5cIiwge1xuICAgICAgICAgICAgY2hpbGRyZW46IFwiU2lnbiBpblwiXG4gICAgICAgICAgfSldXG4gICAgICAgIH0pXG4gICAgICB9KV1cbiAgICB9KSk7XG4gIH1cbiAgaWYgKGlzU2FuZHBhY2tCdW5kbGVyRXJyb3IgJiYgZXJyb3JNZXNzYWdlKSB7XG4gICAgcmV0dXJuIGpzeChcImRpdlwiLCBfX2Fzc2lnbih7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoXCJvdmVybGF5XCIsIFtjbGFzc05hbWVzKFwiZXJyb3JcIiksIGFic29sdXRlQ2xhc3NOYW1lLCBlcnJvckJ1bmRsZXJDbGFzc05hbWUsIGNsYXNzTmFtZV0pXG4gICAgfSwgb3RoZXJQcm9wcywge1xuICAgICAgY2hpbGRyZW46IGpzeHMoXCJkaXZcIiwge1xuICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoXCJlcnJvci1tZXNzYWdlXCIsIFtlcnJvck1lc3NhZ2VDbGFzc05hbWVdKSxcbiAgICAgICAgY2hpbGRyZW46IFtqc3goXCJwXCIsIHtcbiAgICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoXCJlcnJvci10aXRsZVwiLCBbZmFrZUNzc10pLFxuICAgICAgICAgIGNoaWxkcmVuOiBcIkNvdWxkbid0IGNvbm5lY3QgdG8gc2VydmVyXCJcbiAgICAgICAgfSksIGpzeChcInBcIiwge1xuICAgICAgICAgIGNoaWxkcmVuOiBtYXBCdW5kbGVyRXJyb3JzKGVycm9yTWVzc2FnZSlcbiAgICAgICAgfSksIGpzeChcImRpdlwiLCB7XG4gICAgICAgICAgY2hpbGRyZW46IGpzeHMoXCJidXR0b25cIiwge1xuICAgICAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKFwiYnV0dG9uXCIsIFtjbGFzc05hbWVzKFwiaWNvbi1zdGFuZGFsb25lXCIpLCBidXR0b25DbGFzc05hbWUsIGljb25TdGFuZGFsb25lQ2xhc3NOYW1lLCByb3VuZGVkQnV0dG9uQ2xhc3NOYW1lXSksXG4gICAgICAgICAgICBvbkNsaWNrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHJlc3RhcnQoKTtcbiAgICAgICAgICAgICAgcnVuU2FuZHBhY2soKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0aXRsZTogXCJSZXN0YXJ0IHNjcmlwdFwiLFxuICAgICAgICAgICAgdHlwZTogXCJidXR0b25cIixcbiAgICAgICAgICAgIGNoaWxkcmVuOiBbanN4KFJlc3RhcnRJY29uLCB7fSksIFwiIFwiLCBqc3goXCJzcGFuXCIsIHtcbiAgICAgICAgICAgICAgY2hpbGRyZW46IFwiUmVzdGFydFwiXG4gICAgICAgICAgICB9KV1cbiAgICAgICAgICB9KVxuICAgICAgICB9KV1cbiAgICAgIH0pXG4gICAgfSkpO1xuICB9XG4gIHJldHVybiBqc3hzKFwiZGl2XCIsIF9fYXNzaWduKHtcbiAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoXCJvdmVybGF5XCIsIFtjbGFzc05hbWVzKFwiZXJyb3JcIiksIGFic29sdXRlQ2xhc3NOYW1lLCBlcnJvckNsYXNzTmFtZSgpLCBjbGFzc05hbWVdKSxcbiAgICB0cmFuc2xhdGU6IFwibm9cIlxuICB9LCBvdGhlclByb3BzLCB7XG4gICAgY2hpbGRyZW46IFtqc3goXCJwXCIsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhcImVycm9yLW1lc3NhZ2VcIiwgW2Vycm9yTWVzc2FnZUNsYXNzTmFtZV0pLFxuICAgICAgY2hpbGRyZW46IGpzeChcInN0cm9uZ1wiLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcIlNvbWV0aGluZyB3ZW50IHdyb25nXCJcbiAgICAgIH0pXG4gICAgfSksIGpzeChcInBcIiwge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKFwiZXJyb3ItbWVzc2FnZVwiLCBbZXJyb3JNZXNzYWdlQ2xhc3NOYW1lKCldKSxcbiAgICAgIGNoaWxkcmVuOiBlcnJvck1lc3NhZ2UgfHwgY2hpbGRyZW5cbiAgICB9KV1cbiAgfSkpO1xufTtcblxuZnVuY3Rpb24gYW5zaVRvSlNPTihpbnB1dCwgdXNlX2NsYXNzZXMpIHtcbiAgaWYgKHVzZV9jbGFzc2VzID09PSB2b2lkIDApIHtcbiAgICB1c2VfY2xhc3NlcyA9IGZhbHNlO1xuICB9XG4gIGlucHV0ID0gZXNjYXBlQ2FycmlhZ2VSZXR1cm4oZml4QmFja3NwYWNlKGlucHV0KSk7XG4gIHJldHVybiBBbnNlci5hbnNpVG9Kc29uKGlucHV0LCB7XG4gICAganNvbjogdHJ1ZSxcbiAgICByZW1vdmVfZW1wdHk6IHRydWUsXG4gICAgdXNlX2NsYXNzZXM6IHVzZV9jbGFzc2VzXG4gIH0pO1xufVxuZnVuY3Rpb24gY3JlYXRlQ2xhc3MoYnVuZGxlKSB7XG4gIHZhciBjbGFzc05hbWVzID0gXCJcIjtcbiAgaWYgKGJ1bmRsZS5iZykge1xuICAgIGNsYXNzTmFtZXMgKz0gKFwiXCIpLmNvbmNhdChidW5kbGUuYmcsIFwiLWJnIFwiKTtcbiAgfVxuICBpZiAoYnVuZGxlLmZnKSB7XG4gICAgY2xhc3NOYW1lcyArPSAoXCJcIikuY29uY2F0KGJ1bmRsZS5mZywgXCItZmcgXCIpO1xuICB9XG4gIGlmIChidW5kbGUuZGVjb3JhdGlvbikge1xuICAgIGNsYXNzTmFtZXMgKz0gKFwiYW5zaS1cIikuY29uY2F0KGJ1bmRsZS5kZWNvcmF0aW9uLCBcIiBcIik7XG4gIH1cbiAgaWYgKGNsYXNzTmFtZXMgPT09IFwiXCIpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBjbGFzc05hbWVzID0gY2xhc3NOYW1lcy5zdWJzdHJpbmcoMCwgY2xhc3NOYW1lcy5sZW5ndGggLSAxKTtcbiAgcmV0dXJuIGNsYXNzTmFtZXM7XG59XG5mdW5jdGlvbiBjcmVhdGVTdHlsZShidW5kbGUpIHtcbiAgdmFyIHN0eWxlID0ge307XG4gIGlmIChidW5kbGUuYmcpIHtcbiAgICBzdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAoXCJyZ2IoXCIpLmNvbmNhdChidW5kbGUuYmcsIFwiKVwiKTtcbiAgfVxuICBpZiAoYnVuZGxlLmZnKSB7XG4gICAgc3R5bGUuY29sb3IgPSAoXCJyZ2IoXCIpLmNvbmNhdChidW5kbGUuZmcsIFwiKVwiKTtcbiAgfVxuICBzd2l0Y2ggKGJ1bmRsZS5kZWNvcmF0aW9uKSB7XG4gICAgY2FzZSBcImJvbGRcIjpcbiAgICAgIHN0eWxlLmZvbnRXZWlnaHQgPSBcImJvbGRcIjtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJkaW1cIjpcbiAgICAgIHN0eWxlLm9wYWNpdHkgPSBcIjAuNVwiO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcIml0YWxpY1wiOlxuICAgICAgc3R5bGUuZm9udFN0eWxlID0gXCJpdGFsaWNcIjtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJoaWRkZW5cIjpcbiAgICAgIHN0eWxlLnZpc2liaWxpdHkgPSBcImhpZGRlblwiO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcInN0cmlrZXRocm91Z2hcIjpcbiAgICAgIHN0eWxlLnRleHREZWNvcmF0aW9uID0gXCJsaW5lLXRocm91Z2hcIjtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJ1bmRlcmxpbmVcIjpcbiAgICAgIHN0eWxlLnRleHREZWNvcmF0aW9uID0gXCJ1bmRlcmxpbmVcIjtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJibGlua1wiOlxuICAgICAgc3R5bGUudGV4dERlY29yYXRpb24gPSBcImJsaW5rXCI7XG4gICAgICBicmVhaztcbiAgfVxuICByZXR1cm4gc3R5bGU7XG59XG5mdW5jdGlvbiBjb252ZXJ0QnVuZGxlSW50b1JlYWN0KGxpbmtpZnksIHVzZUNsYXNzZXMsIGJ1bmRsZSwga2V5KSB7XG4gIHZhciBzdHlsZSA9IHVzZUNsYXNzZXMgPyBudWxsIDogY3JlYXRlU3R5bGUoYnVuZGxlKTtcbiAgdmFyIGNsYXNzTmFtZSA9IHVzZUNsYXNzZXMgPyBjcmVhdGVDbGFzcyhidW5kbGUpIDogbnVsbDtcbiAgaWYgKCFsaW5raWZ5KSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICAgIHN0eWxlOiBzdHlsZSxcbiAgICAgIGtleToga2V5LFxuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVcbiAgICB9LCBidW5kbGUuY29udGVudCk7XG4gIH1cbiAgdmFyIGNvbnRlbnQgPSBbXTtcbiAgdmFyIGxpbmtSZWdleCA9IC8oXFxzfF4pKGh0dHBzPzpcXC9cXC8oPzp3d3dcXC58KD8hd3d3KSlbXlxccy5dK1xcLlteXFxzXXsyLH18d3d3XFwuW15cXHNdK1xcLlteXFxzXXsyLH0pL2c7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBtYXRjaDtcbiAgd2hpbGUgKChtYXRjaCA9IGxpbmtSZWdleC5leGVjKGJ1bmRsZS5jb250ZW50KSkgIT09IG51bGwpIHtcbiAgICB2YXIgcHJlID0gbWF0Y2hbMV0sIHVybCA9IG1hdGNoWzJdO1xuICAgIHZhciBzdGFydEluZGV4ID0gbWF0Y2guaW5kZXggKyBwcmUubGVuZ3RoO1xuICAgIGlmIChzdGFydEluZGV4ID4gaW5kZXgpIHtcbiAgICAgIGNvbnRlbnQucHVzaChidW5kbGUuY29udGVudC5zdWJzdHJpbmcoaW5kZXgsIHN0YXJ0SW5kZXgpKTtcbiAgICB9XG4gICAgdmFyIGhyZWYgPSB1cmwuc3RhcnRzV2l0aChcInd3dy5cIikgPyAoXCJodHRwOi8vXCIpLmNvbmNhdCh1cmwpIDogdXJsO1xuICAgIGNvbnRlbnQucHVzaChSZWFjdC5jcmVhdGVFbGVtZW50KFwiYVwiLCB7XG4gICAgICBrZXk6IGluZGV4LFxuICAgICAgaHJlZjogaHJlZixcbiAgICAgIHRhcmdldDogXCJfYmxhbmtcIlxuICAgIH0sIChcIlwiKS5jb25jYXQodXJsKSkpO1xuICAgIGluZGV4ID0gbGlua1JlZ2V4Lmxhc3RJbmRleDtcbiAgfVxuICBpZiAoaW5kZXggPCBidW5kbGUuY29udGVudC5sZW5ndGgpIHtcbiAgICBjb250ZW50LnB1c2goYnVuZGxlLmNvbnRlbnQuc3Vic3RyaW5nKGluZGV4KSk7XG4gIH1cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICBzdHlsZTogc3R5bGUsXG4gICAga2V5OiBrZXksXG4gICAgY2xhc3NOYW1lOiBjbGFzc05hbWVcbiAgfSwgY29udGVudCk7XG59XG5mdW5jdGlvbiBBbnNpKHByb3BzKSB7XG4gIHZhciBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsIHVzZUNsYXNzZXMgPSBwcm9wcy51c2VDbGFzc2VzLCBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLCBsaW5raWZ5ID0gcHJvcHMubGlua2lmeTtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJjb2RlXCIsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzTmFtZVxuICB9LCBhbnNpVG9KU09OKGNoaWxkcmVuICE9PSBudWxsICYmIGNoaWxkcmVuICE9PSB2b2lkIDAgPyBjaGlsZHJlbiA6IFwiXCIsIHVzZUNsYXNzZXMgIT09IG51bGwgJiYgdXNlQ2xhc3NlcyAhPT0gdm9pZCAwID8gdXNlQ2xhc3NlcyA6IGZhbHNlKS5tYXAoY29udmVydEJ1bmRsZUludG9SZWFjdC5iaW5kKG51bGwsIGxpbmtpZnkgIT09IG51bGwgJiYgbGlua2lmeSAhPT0gdm9pZCAwID8gbGlua2lmeSA6IGZhbHNlLCB1c2VDbGFzc2VzICE9PSBudWxsICYmIHVzZUNsYXNzZXMgIT09IHZvaWQgMCA/IHVzZUNsYXNzZXMgOiBmYWxzZSkpKTtcbn1cbmZ1bmN0aW9uIGZpeEJhY2tzcGFjZSh0eHQpIHtcbiAgdmFyIHRtcCA9IHR4dDtcbiAgZG8ge1xuICAgIHR4dCA9IHRtcDtcbiAgICB0bXAgPSB0eHQucmVwbGFjZSgvW15cXG5dXFx4MDgvZ20sIFwiXCIpO1xuICB9IHdoaWxlICh0bXAubGVuZ3RoIDwgdHh0Lmxlbmd0aCk7XG4gIHJldHVybiB0eHQ7XG59XG5cbnZhciBTdGRvdXRMaXN0ID0gZnVuY3Rpb24gKF9hKSB7XG4gIHZhciBkYXRhID0gX2EuZGF0YTtcbiAgdmFyIGNsYXNzTmFtZXMgPSB1c2VDbGFzc05hbWVzKCk7XG4gIHJldHVybiBqc3goRnJhZ21lbnQsIHtcbiAgICBjaGlsZHJlbjogZGF0YS5tYXAoZnVuY3Rpb24gKF9hKSB7XG4gICAgICB2YXIgZGF0YSA9IF9hLmRhdGEsIGlkID0gX2EuaWQ7XG4gICAgICByZXR1cm4ganN4KFwiZGl2XCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKFwiY29uc29sZS1pdGVtXCIsIFtjb25zb2xlSXRlbUNsYXNzTmFtZSQxXSksXG4gICAgICAgIGNoaWxkcmVuOiBqc3goQW5zaSwge1xuICAgICAgICAgIGNoaWxkcmVuOiBkYXRhXG4gICAgICAgIH0pXG4gICAgICB9LCBpZCk7XG4gICAgfSlcbiAgfSk7XG59O1xudmFyIGNvbnNvbGVJdGVtQ2xhc3NOYW1lJDEgPSBmYWtlQ3NzO1xuXG52YXIgZ2V0UGFyYW1ldGVycyA9IGZ1bmN0aW9uIChwYXJhbWV0ZXJzKSB7XG4gIHJldHVybiBMWlN0cmluZy5jb21wcmVzc1RvQmFzZTY0KEpTT04uc3RyaW5naWZ5KHBhcmFtZXRlcnMpKS5yZXBsYWNlKC9cXCsvZywgXCItXCIpLnJlcGxhY2UoL1xcLy9nLCBcIl9cIikucmVwbGFjZSgvPSskLywgXCJcIik7XG59O1xudmFyIENTQl9VUkwgPSBcImh0dHBzOi8vY29kZXNhbmRib3guaW8vYXBpL3YxL3NhbmRib3hlcy9kZWZpbmVcIjtcbnZhciBnZXRGaWxlUGFyYW1ldGVycyA9IGZ1bmN0aW9uIChmaWxlcywgZW52aXJvbm1lbnQpIHtcbiAgdmFyIG5vcm1hbGl6ZWRGaWxlcyA9IE9iamVjdC5rZXlzKGZpbGVzKS5yZWR1Y2UoZnVuY3Rpb24gKHByZXYsIG5leHQpIHtcbiAgICB2YXIgX2E7XG4gICAgdmFyIGZpbGVOYW1lID0gbmV4dC5yZXBsYWNlKFwiL1wiLCBcIlwiKTtcbiAgICB2YXIgdmFsdWUgPSB7XG4gICAgICBjb250ZW50OiBmaWxlc1tuZXh0XS5jb2RlLFxuICAgICAgaXNCaW5hcnk6IGZhbHNlXG4gICAgfTtcbiAgICByZXR1cm4gX19hc3NpZ24oX19hc3NpZ24oe30sIHByZXYpLCAoX2EgPSB7fSwgX2FbZmlsZU5hbWVdID0gdmFsdWUsIF9hKSk7XG4gIH0sIHt9KTtcbiAgcmV0dXJuIGdldFBhcmFtZXRlcnMoX19hc3NpZ24oe1xuICAgIGZpbGVzOiBub3JtYWxpemVkRmlsZXNcbiAgfSwgZW52aXJvbm1lbnQgPyB7XG4gICAgdGVtcGxhdGU6IGVudmlyb25tZW50XG4gIH0gOiBudWxsKSk7XG59O1xudmFyIFVuc3R5bGVkT3BlbkluQ29kZVNhbmRib3hCdXR0b24gPSBmdW5jdGlvbiAocHJvcHMpIHtcbiAgdmFyIHNhbmRwYWNrID0gdXNlU2FuZHBhY2soKS5zYW5kcGFjaztcbiAgaWYgKHNhbmRwYWNrLmV4cG9ydE9wdGlvbnMpIHtcbiAgICByZXR1cm4ganN4KEV4cG9ydFRvV29ya3NwYWNlQnV0dG9uLCBfX2Fzc2lnbih7XG4gICAgICBzdGF0ZTogc2FuZHBhY2tcbiAgICB9LCBwcm9wcykpO1xuICB9XG4gIHJldHVybiBqc3goUmVndWxhckV4cG9ydEJ1dHRvbiwgX19hc3NpZ24oe1xuICAgIHN0YXRlOiBzYW5kcGFja1xuICB9LCBwcm9wcykpO1xufTtcbnZhciBFeHBvcnRUb1dvcmtzcGFjZUJ1dHRvbiA9IGZ1bmN0aW9uIChfYSkge1xuICB2YXIgY2hpbGRyZW4gPSBfYS5jaGlsZHJlbiwgc3RhdGUgPSBfYS5zdGF0ZSwgcHJvcHMgPSBfX3Jlc3QoX2EsIFtcImNoaWxkcmVuXCIsIFwic3RhdGVcIl0pO1xuICB2YXIgc3VibWl0ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfX2F3YWl0ZXIodm9pZCAwLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIG5vcm1hbGl6ZWRGaWxlcywgcmVzcG9uc2UsIGRhdGE7XG4gICAgICB2YXIgX2E7XG4gICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9iKSB7XG4gICAgICAgIHN3aXRjaCAoX2IubGFiZWwpIHtcbiAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICBpZiAoISgoX2EgPSBzdGF0ZS5leHBvcnRPcHRpb25zKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuYXBpVG9rZW4pKSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1pc3NpbmcgYGFwaVRva2VuYCBwcm9wZXJ0eVwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG5vcm1hbGl6ZWRGaWxlcyA9IE9iamVjdC5rZXlzKHN0YXRlLmZpbGVzKS5yZWR1Y2UoZnVuY3Rpb24gKHByZXYsIG5leHQpIHtcbiAgICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgICB2YXIgZmlsZU5hbWUgPSBuZXh0LnJlcGxhY2UoXCIvXCIsIFwiXCIpO1xuICAgICAgICAgICAgICByZXR1cm4gX19hc3NpZ24oX19hc3NpZ24oe30sIHByZXYpLCAoX2EgPSB7fSwgX2FbZmlsZU5hbWVdID0gc3RhdGUuZmlsZXNbbmV4dF0sIF9hKSk7XG4gICAgICAgICAgICB9LCB7fSk7XG4gICAgICAgICAgICByZXR1cm4gWzQsIGZldGNoKFwiaHR0cHM6Ly9hcGkuY29kZXNhbmRib3guaW8vc2FuZGJveFwiLCB7XG4gICAgICAgICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogc3RhdGUuZW52aXJvbm1lbnQsXG4gICAgICAgICAgICAgICAgZmlsZXM6IG5vcm1hbGl6ZWRGaWxlcyxcbiAgICAgICAgICAgICAgICBwcml2YWN5OiBzdGF0ZS5leHBvcnRPcHRpb25zLnByaXZhY3kgPT09IFwicHVibGljXCIgPyAwIDogMlxuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgIEF1dGhvcml6YXRpb246IChcIkJlYXJlciBcIikuY29uY2F0KHN0YXRlLmV4cG9ydE9wdGlvbnMuYXBpVG9rZW4pLFxuICAgICAgICAgICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgICAgICAgICAgICAgIFwiWC1DU0ItQVBJLVZlcnNpb25cIjogXCIyMDIzLTA3LTAxXCJcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSldO1xuICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgIHJlc3BvbnNlID0gX2Iuc2VudCgpO1xuICAgICAgICAgICAgcmV0dXJuIFs0LCByZXNwb25zZS5qc29uKCldO1xuICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgIGRhdGEgPSBfYi5zZW50KCk7XG4gICAgICAgICAgICB3aW5kb3cub3BlbigoXCJodHRwczovL2NvZGVzYW5kYm94LmlvL3Avc2FuZGJveC9cIikuY29uY2F0KGRhdGEuZGF0YS5hbGlhcywgXCI/ZmlsZT0vXCIpLmNvbmNhdChzdGF0ZS5hY3RpdmVGaWxlLCBcIiZ1dG0tc291cmNlPXN0b3J5Ym9vay1hZGRvblwiKSwgXCJfYmxhbmtcIik7XG4gICAgICAgICAgICByZXR1cm4gWzJdO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcbiAgcmV0dXJuIGpzeChcImJ1dHRvblwiLCBfX2Fzc2lnbih7XG4gICAgb25DbGljazogc3VibWl0LFxuICAgIHRpdGxlOiBcIkV4cG9ydCB0byB3b3Jrc3BhY2UgaW4gQ29kZVNhbmRib3hcIixcbiAgICB0eXBlOiBcImJ1dHRvblwiXG4gIH0sIHByb3BzLCB7XG4gICAgY2hpbGRyZW46IGNoaWxkcmVuXG4gIH0pKTtcbn07XG52YXIgUmVndWxhckV4cG9ydEJ1dHRvbiA9IGZ1bmN0aW9uIChfYSkge1xuICB2YXIgX2IsIF9jLCBfZDtcbiAgdmFyIGNoaWxkcmVuID0gX2EuY2hpbGRyZW4sIHN0YXRlID0gX2Euc3RhdGUsIHByb3BzID0gX19yZXN0KF9hLCBbXCJjaGlsZHJlblwiLCBcInN0YXRlXCJdKTtcbiAgdmFyIGZvcm1SZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIHZhciBfZSA9IFJlYWN0LnVzZVN0YXRlKCksIHBhcmFtc1ZhbHVlcyA9IF9lWzBdLCBzZXRQYXJhbXNWYWx1ZXMgPSBfZVsxXTtcbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uIGRlYm91bmNlKCkge1xuICAgIHZhciB0aW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHBhcmFtcyA9IGdldEZpbGVQYXJhbWV0ZXJzKHN0YXRlLmZpbGVzLCBzdGF0ZS5lbnZpcm9ubWVudCk7XG4gICAgICB2YXIgc2VhcmNoUGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyh7XG4gICAgICAgIHBhcmFtZXRlcnM6IHBhcmFtcyxcbiAgICAgICAgcXVlcnk6IG5ldyBVUkxTZWFyY2hQYXJhbXMoe1xuICAgICAgICAgIGZpbGU6IHN0YXRlLmFjdGl2ZUZpbGUsXG4gICAgICAgICAgdXRtX21lZGl1bTogXCJzYW5kcGFja1wiXG4gICAgICAgIH0pLnRvU3RyaW5nKClcbiAgICAgIH0pO1xuICAgICAgc2V0UGFyYW1zVmFsdWVzKHNlYXJjaFBhcmFtcyk7XG4gICAgfSwgNjAwKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyKTtcbiAgICB9O1xuICB9LCBbc3RhdGUuYWN0aXZlRmlsZSwgc3RhdGUuZW52aXJvbm1lbnQsIHN0YXRlLmZpbGVzXSk7XG4gIGlmICgoKF9kID0gKF9jID0gKF9iID0gcGFyYW1zVmFsdWVzID09PSBudWxsIHx8IHBhcmFtc1ZhbHVlcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogcGFyYW1zVmFsdWVzLmdldCkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmNhbGwocGFyYW1zVmFsdWVzLCBcInBhcmFtZXRlcnNcIikpID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy5sZW5ndGgpICE9PSBudWxsICYmIF9kICE9PSB2b2lkIDAgPyBfZCA6IDApID4gMTUwMCkge1xuICAgIHJldHVybiBqc3hzKFwiYnV0dG9uXCIsIF9fYXNzaWduKHtcbiAgICAgIG9uQ2xpY2s6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICByZXR1cm4gKF9hID0gZm9ybVJlZi5jdXJyZW50KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc3VibWl0KCk7XG4gICAgICB9LFxuICAgICAgdGl0bGU6IFwiT3BlbiBpbiBDb2RlU2FuZGJveFwiLFxuICAgICAgdHlwZTogXCJidXR0b25cIlxuICAgIH0sIHByb3BzLCB7XG4gICAgICBjaGlsZHJlbjogW2pzeHMoXCJmb3JtXCIsIHtcbiAgICAgICAgcmVmOiBmb3JtUmVmLFxuICAgICAgICBhY3Rpb246IENTQl9VUkwsXG4gICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgdmlzaWJpbGl0eTogXCJoaWRkZW5cIlxuICAgICAgICB9LFxuICAgICAgICB0YXJnZXQ6IFwiX2JsYW5rXCIsXG4gICAgICAgIGNoaWxkcmVuOiBbanN4KFwiaW5wdXRcIiwge1xuICAgICAgICAgIG5hbWU6IFwiZW52aXJvbm1lbnRcIixcbiAgICAgICAgICB0eXBlOiBcImhpZGRlblwiLFxuICAgICAgICAgIHZhbHVlOiBzdGF0ZS5lbnZpcm9ubWVudCA9PT0gXCJub2RlXCIgPyBcInNlcnZlclwiIDogc3RhdGUuZW52aXJvbm1lbnRcbiAgICAgICAgfSksIEFycmF5LmZyb20ocGFyYW1zVmFsdWVzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICB2YXIga2V5ID0gX2FbMF0sIHZhbHVlID0gX2FbMV07XG4gICAgICAgICAgcmV0dXJuIGpzeChcImlucHV0XCIsIHtcbiAgICAgICAgICAgIG5hbWU6IGtleSxcbiAgICAgICAgICAgIHR5cGU6IFwiaGlkZGVuXCIsXG4gICAgICAgICAgICB2YWx1ZTogdmFsdWVcbiAgICAgICAgICB9LCBrZXkpO1xuICAgICAgICB9KV1cbiAgICAgIH0pLCBjaGlsZHJlbl1cbiAgICB9KSk7XG4gIH1cbiAgcmV0dXJuIGpzeChcImFcIiwgX19hc3NpZ24oe1xuICAgIGhyZWY6IChcIlwiKS5jb25jYXQoQ1NCX1VSTCwgXCI/XCIpLmNvbmNhdChwYXJhbXNWYWx1ZXMgPT09IG51bGwgfHwgcGFyYW1zVmFsdWVzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwYXJhbXNWYWx1ZXMudG9TdHJpbmcoKSwgXCImZW52aXJvbm1lbnQ9XCIpLmNvbmNhdChzdGF0ZS5lbnZpcm9ubWVudCA9PT0gXCJub2RlXCIgPyBcInNlcnZlclwiIDogc3RhdGUuZW52aXJvbm1lbnQpLFxuICAgIHJlbDogXCJub3JlZmVycmVyIG5vb3BlbmVyXCIsXG4gICAgdGFyZ2V0OiBcIl9ibGFua1wiLFxuICAgIHRpdGxlOiBcIk9wZW4gaW4gQ29kZVNhbmRib3hcIlxuICB9LCBwcm9wcywge1xuICAgIGNoaWxkcmVuOiBjaGlsZHJlblxuICB9KSk7XG59O1xuXG52YXIgT3BlbkluQ29kZVNhbmRib3hCdXR0b24gPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBjbGFzc05hbWVzID0gdXNlQ2xhc3NOYW1lcygpO1xuICByZXR1cm4ganN4cyhVbnN0eWxlZE9wZW5JbkNvZGVTYW5kYm94QnV0dG9uLCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKFwiYnV0dG9uXCIsIFtjbGFzc05hbWVzKFwiaWNvbi1zdGFuZGFsb25lXCIpLCBidXR0b25DbGFzc05hbWUsIGljb25TdGFuZGFsb25lQ2xhc3NOYW1lLCByb3VuZGVkQnV0dG9uQ2xhc3NOYW1lXSksXG4gICAgY2hpbGRyZW46IFtqc3goRXhwb3J0SWNvbiwge30pLCBqc3goXCJzcGFuXCIsIHtcbiAgICAgIGNoaWxkcmVuOiBcIk9wZW4gU2FuZGJveFwiXG4gICAgfSldXG4gIH0pO1xufTtcblxudmFyIGN1YmVDbGFzc05hbWUgPSBmYWtlQ3NzO1xudmFyIHdyYXBwZXJDbGFzc05hbWUkMiA9IGZha2VDc3M7XG5rZXlmcmFtZXMoe1xuICBcIjAlXCI6IHtcbiAgICB0cmFuc2Zvcm06IFwicm90YXRlWCgtMjUuNWRlZykgcm90YXRlWSg0NWRlZylcIlxuICB9LFxuICBcIjEwMCVcIjoge1xuICAgIHRyYW5zZm9ybTogXCJyb3RhdGVYKC0yNS41ZGVnKSByb3RhdGVZKDQwNWRlZylcIlxuICB9XG59KTtcbnZhciBzaWRlc0NsYXNzTmFtZXMgPSBmYWtlQ3NzO1xudmFyIExvYWRpbmcgPSBmdW5jdGlvbiAoX2EpIHtcbiAgdmFyIGNsYXNzTmFtZSA9IF9hLmNsYXNzTmFtZSwgc2hvd09wZW5JbkNvZGVTYW5kYm94ID0gX2Euc2hvd09wZW5JbkNvZGVTYW5kYm94LCBwcm9wcyA9IF9fcmVzdChfYSwgW1wiY2xhc3NOYW1lXCIsIFwic2hvd09wZW5JbkNvZGVTYW5kYm94XCJdKTtcbiAgdmFyIGNsYXNzTmFtZXMgPSB1c2VDbGFzc05hbWVzKCk7XG4gIHJldHVybiBqc3hzKFwiZGl2XCIsIF9fYXNzaWduKHtcbiAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoXCJjdWJlLXdyYXBwZXJcIiwgW3dyYXBwZXJDbGFzc05hbWUkMiwgY2xhc3NOYW1lXSksXG4gICAgdGl0bGU6IFwiT3BlbiBpbiBDb2RlU2FuZGJveFwiXG4gIH0sIHByb3BzLCB7XG4gICAgY2hpbGRyZW46IFtzaG93T3BlbkluQ29kZVNhbmRib3ggJiYganN4KE9wZW5JbkNvZGVTYW5kYm94QnV0dG9uLCB7fSksIGpzeChcImRpdlwiLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoXCJjdWJlXCIsIFtjdWJlQ2xhc3NOYW1lXSksXG4gICAgICBjaGlsZHJlbjoganN4cyhcImRpdlwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhcInNpZGVzXCIsIFtzaWRlc0NsYXNzTmFtZXNdKSxcbiAgICAgICAgY2hpbGRyZW46IFtqc3goXCJkaXZcIiwge1xuICAgICAgICAgIGNsYXNzTmFtZTogXCJ0b3BcIlxuICAgICAgICB9KSwganN4KFwiZGl2XCIsIHtcbiAgICAgICAgICBjbGFzc05hbWU6IFwicmlnaHRcIlxuICAgICAgICB9KSwganN4KFwiZGl2XCIsIHtcbiAgICAgICAgICBjbGFzc05hbWU6IFwiYm90dG9tXCJcbiAgICAgICAgfSksIGpzeChcImRpdlwiLCB7XG4gICAgICAgICAgY2xhc3NOYW1lOiBcImxlZnRcIlxuICAgICAgICB9KSwganN4KFwiZGl2XCIsIHtcbiAgICAgICAgICBjbGFzc05hbWU6IFwiZnJvbnRcIlxuICAgICAgICB9KSwganN4KFwiZGl2XCIsIHtcbiAgICAgICAgICBjbGFzc05hbWU6IFwiYmFja1wiXG4gICAgICAgIH0pXVxuICAgICAgfSlcbiAgICB9KV1cbiAgfSkpO1xufTtcblxudmFyIGxvYWRpbmdDbGFzc05hbWUgPSBmYWtlQ3NzO1xudmFyIExvYWRpbmdPdmVybGF5ID0gZnVuY3Rpb24gKF9hKSB7XG4gIHZhciBjbGllbnRJZCA9IF9hLmNsaWVudElkLCBsb2FkaW5nID0gX2EubG9hZGluZywgY2xhc3NOYW1lID0gX2EuY2xhc3NOYW1lLCBzdHlsZSA9IF9hLnN0eWxlLCBzaG93T3BlbkluQ29kZVNhbmRib3ggPSBfYS5zaG93T3BlbkluQ29kZVNhbmRib3gsIHByb3BzID0gX19yZXN0KF9hLCBbXCJjbGllbnRJZFwiLCBcImxvYWRpbmdcIiwgXCJjbGFzc05hbWVcIiwgXCJzdHlsZVwiLCBcInNob3dPcGVuSW5Db2RlU2FuZGJveFwiXSk7XG4gIHZhciBjbGFzc05hbWVzID0gdXNlQ2xhc3NOYW1lcygpO1xuICB2YXIgX2IgPSB1c2VTYW5kcGFjaygpLnNhbmRwYWNrLCBydW5TYW5kcGFjayA9IF9iLnJ1blNhbmRwYWNrLCBlbnZpcm9ubWVudCA9IF9iLmVudmlyb25tZW50O1xuICB2YXIgX2MgPSBSZWFjdC51c2VTdGF0ZShmYWxzZSksIHNob3VsZFNob3dTdGRvdXQgPSBfY1swXSwgc2V0U2hvdWxkU2hvd1N0ZG91dCA9IF9jWzFdO1xuICB2YXIgbG9hZGluZ092ZXJsYXlTdGF0ZSA9IHVzZUxvYWRpbmdPdmVybGF5U3RhdGUoY2xpZW50SWQsIGxvYWRpbmcpO1xuICB2YXIgcHJvZ3Jlc3NNZXNzYWdlID0gdXNlU2FuZHBhY2tQcmV2aWV3UHJvZ3Jlc3Moe1xuICAgIGNsaWVudElkOiBjbGllbnRJZFxuICB9KTtcbiAgdmFyIHN0ZG91dERhdGEgPSB1c2VTYW5kcGFja1NoZWxsU3Rkb3V0KHtcbiAgICBjbGllbnRJZDogY2xpZW50SWRcbiAgfSkubG9ncztcbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdGltZXI7XG4gICAgaWYgKHByb2dyZXNzTWVzc2FnZSA9PT0gbnVsbCB8fCBwcm9ncmVzc01lc3NhZ2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHByb2dyZXNzTWVzc2FnZS5pbmNsdWRlcyhcIlJ1bm5pbmdcIikpIHtcbiAgICAgIHRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHNldFNob3VsZFNob3dTdGRvdXQodHJ1ZSk7XG4gICAgICB9LCAzMDAwKTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICh0aW1lcikge1xuICAgICAgICBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgICAgfVxuICAgIH07XG4gIH0sIFtwcm9ncmVzc01lc3NhZ2VdKTtcbiAgaWYgKGxvYWRpbmdPdmVybGF5U3RhdGUgPT09IFwiSElEREVOXCIpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBpZiAobG9hZGluZ092ZXJsYXlTdGF0ZSA9PT0gXCJUSU1FT1VUXCIpIHtcbiAgICByZXR1cm4ganN4KFwiZGl2XCIsIF9fYXNzaWduKHtcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhcIm92ZXJsYXlcIiwgW2NsYXNzTmFtZXMoXCJlcnJvclwiKSwgYWJzb2x1dGVDbGFzc05hbWUsIGVycm9yQ2xhc3NOYW1lLCBlcnJvckJ1bmRsZXJDbGFzc05hbWUsIGNsYXNzTmFtZV0pXG4gICAgfSwgcHJvcHMsIHtcbiAgICAgIGNoaWxkcmVuOiBqc3hzKFwiZGl2XCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKFwiZXJyb3ItbWVzc2FnZVwiLCBbZXJyb3JNZXNzYWdlQ2xhc3NOYW1lXSksXG4gICAgICAgIGNoaWxkcmVuOiBbanN4KFwicFwiLCB7XG4gICAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKFwiZXJyb3ItdGl0bGVcIiwgW2Zha2VDc3NdKSxcbiAgICAgICAgICBjaGlsZHJlbjogXCJDb3VsZG4ndCBjb25uZWN0IHRvIHNlcnZlclwiXG4gICAgICAgIH0pLCBqc3goXCJkaXZcIiwge1xuICAgICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhcImVycm9yLW1lc3NhZ2VcIiwgW2Vycm9yTWVzc2FnZUNsYXNzTmFtZV0pLFxuICAgICAgICAgIGNoaWxkcmVuOiBqc3hzKFwicFwiLCB7XG4gICAgICAgICAgICBjaGlsZHJlbjogW1wiVGhpcyBtZWFucyBzYW5kcGFjayBjYW5ub3QgY29ubmVjdCB0byB0aGUgcnVudGltZSBvciB5b3VyIG5ldHdvcmsgaXMgaGF2aW5nIHNvbWUgaXNzdWVzLiBQbGVhc2UgY2hlY2sgdGhlIG5ldHdvcmsgdGFiIGluIHlvdXIgYnJvd3NlciBhbmQgdHJ5IGFnYWluLiBJZiB0aGUgcHJvYmxlbSBwZXJzaXN0cywgcmVwb3J0IGl0IHZpYVwiLCBcIiBcIiwganN4KFwiYVwiLCB7XG4gICAgICAgICAgICAgIGhyZWY6IFwibWFpbHRvOmhlbGxvQGNvZGVzYW5kYm94LmlvP3N1YmplY3Q9U2FuZHBhY2sgVGltZW91dCBFcnJvclwiLFxuICAgICAgICAgICAgICBjaGlsZHJlbjogXCJlbWFpbFwiXG4gICAgICAgICAgICB9KSwgXCIgXCIsIFwib3Igc3VibWl0IGFuIGlzc3VlIG9uXCIsIFwiIFwiLCBqc3goXCJhXCIsIHtcbiAgICAgICAgICAgICAgaHJlZjogXCJodHRwczovL2dpdGh1Yi5jb20vY29kZXNhbmRib3gvc2FuZHBhY2svaXNzdWVzXCIsXG4gICAgICAgICAgICAgIHJlbDogXCJub3JlZmVycmVyIG5vb3BlbmVyXCIsXG4gICAgICAgICAgICAgIHRhcmdldDogXCJfYmxhbmtcIixcbiAgICAgICAgICAgICAgY2hpbGRyZW46IFwiR2l0SHViLlwiXG4gICAgICAgICAgICB9KV1cbiAgICAgICAgICB9KVxuICAgICAgICB9KSwganN4cyhcInBcIiwge1xuICAgICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhcImVycm9yLW1lc3NhZ2VcIiwgW2Vycm9yTWVzc2FnZUNsYXNzTmFtZSgpXSksXG4gICAgICAgICAgY2hpbGRyZW46IFtcIkVOVjogXCIsIGVudmlyb25tZW50LCBqc3goXCJiclwiLCB7fSksIFwiRVJST1I6IFRJTUVfT1VUXCJdXG4gICAgICAgIH0pLCBqc3goXCJkaXZcIiwge1xuICAgICAgICAgIGNoaWxkcmVuOiBqc3hzKFwiYnV0dG9uXCIsIHtcbiAgICAgICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhcImJ1dHRvblwiLCBbY2xhc3NOYW1lcyhcImljb24tc3RhbmRhbG9uZVwiKSwgYnV0dG9uQ2xhc3NOYW1lLCBpY29uU3RhbmRhbG9uZUNsYXNzTmFtZSwgcm91bmRlZEJ1dHRvbkNsYXNzTmFtZV0pLFxuICAgICAgICAgICAgb25DbGljazogcnVuU2FuZHBhY2ssXG4gICAgICAgICAgICB0aXRsZTogXCJSZXN0YXJ0IHNjcmlwdFwiLFxuICAgICAgICAgICAgdHlwZTogXCJidXR0b25cIixcbiAgICAgICAgICAgIGNoaWxkcmVuOiBbanN4KFJlc3RhcnRJY29uLCB7fSksIFwiIFwiLCBqc3goXCJzcGFuXCIsIHtcbiAgICAgICAgICAgICAgY2hpbGRyZW46IFwiVHJ5IGFnYWluXCJcbiAgICAgICAgICAgIH0pXVxuICAgICAgICAgIH0pXG4gICAgICAgIH0pXVxuICAgICAgfSlcbiAgICB9KSk7XG4gIH1cbiAgdmFyIHN0aWxsTG9hZGluZyA9IGxvYWRpbmdPdmVybGF5U3RhdGUgPT09IFwiTE9BRElOR1wiIHx8IGxvYWRpbmdPdmVybGF5U3RhdGUgPT09IFwiUFJFX0ZBRElOR1wiO1xuICByZXR1cm4ganN4cyhGcmFnbWVudCwge1xuICAgIGNoaWxkcmVuOiBbanN4cyhcImRpdlwiLCBfX2Fzc2lnbih7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoXCJvdmVybGF5XCIsIFtjbGFzc05hbWVzKFwibG9hZGluZ1wiKSwgYWJzb2x1dGVDbGFzc05hbWUsIGxvYWRpbmdDbGFzc05hbWUsIGNsYXNzTmFtZV0pLFxuICAgICAgc3R5bGU6IF9fYXNzaWduKF9fYXNzaWduKHt9LCBzdHlsZSksIHtcbiAgICAgICAgb3BhY2l0eTogc3RpbGxMb2FkaW5nID8gMSA6IDAsXG4gICAgICAgIHRyYW5zaXRpb246IChcIm9wYWNpdHkgXCIpLmNvbmNhdChGQURFX0FOSU1BVElPTl9EVVJBVElPTiwgXCJtcyBlYXNlLW91dFwiKVxuICAgICAgfSlcbiAgICB9LCBwcm9wcywge1xuICAgICAgY2hpbGRyZW46IFtzaG91bGRTaG93U3Rkb3V0ICYmIGpzeChcImRpdlwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogc3Rkb3V0UHJldmlldy50b1N0cmluZygpLFxuICAgICAgICBjaGlsZHJlbjoganN4KFN0ZG91dExpc3QsIHtcbiAgICAgICAgICBkYXRhOiBzdGRvdXREYXRhXG4gICAgICAgIH0pXG4gICAgICB9KSwganN4KExvYWRpbmcsIHtcbiAgICAgICAgc2hvd09wZW5JbkNvZGVTYW5kYm94OiBzaG93T3BlbkluQ29kZVNhbmRib3hcbiAgICAgIH0pXVxuICAgIH0pKSwgcHJvZ3Jlc3NNZXNzYWdlICYmIGpzeChcImRpdlwiLCB7XG4gICAgICBjbGFzc05hbWU6IHByb2dyZXNzQ2xhc3NOYW1lJDEudG9TdHJpbmcoKSxcbiAgICAgIGNoaWxkcmVuOiBqc3goXCJwXCIsIHtcbiAgICAgICAgY2hpbGRyZW46IHByb2dyZXNzTWVzc2FnZVxuICAgICAgfSlcbiAgICB9KV1cbiAgfSk7XG59O1xudmFyIHN0ZG91dFByZXZpZXcgPSBmYWtlQ3NzO1xudmFyIHByb2dyZXNzQ2xhc3NOYW1lJDEgPSBmYWtlQ3NzO1xuXG52YXIgRGVwZW5kZW5jaWVzUHJvZ3Jlc3MgPSBmdW5jdGlvbiAoX2EpIHtcbiAgdmFyIGNsaWVudElkID0gX2EuY2xpZW50SWQ7XG4gIHZhciBwcm9ncmVzc01lc3NhZ2UgPSB1c2VTYW5kcGFja1ByZXZpZXdQcm9ncmVzcyh7XG4gICAgdGltZW91dDogMzAwMCxcbiAgICBjbGllbnRJZDogY2xpZW50SWRcbiAgfSk7XG4gIGlmICghcHJvZ3Jlc3NNZXNzYWdlKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgcmV0dXJuIGpzeChcImRpdlwiLCB7XG4gICAgY2xhc3NOYW1lOiBwcm9ncmVzc0NsYXNzTmFtZS50b1N0cmluZygpLFxuICAgIGNoaWxkcmVuOiBqc3goXCJwXCIsIHtcbiAgICAgIGNoaWxkcmVuOiBwcm9ncmVzc01lc3NhZ2VcbiAgICB9KVxuICB9KTtcbn07XG52YXIgcHJvZ3Jlc3NDbGFzc05hbWUgPSBmYWtlQ3NzO1xuXG52YXIgZXhwbG9yZXJDbGFzc05hbWUgPSBmYWtlQ3NzO1xudmFyIEZpbGUgPSBmdW5jdGlvbiAoX2EpIHtcbiAgdmFyIHNlbGVjdEZpbGUgPSBfYS5zZWxlY3RGaWxlLCBwYXRoID0gX2EucGF0aCwgYWN0aXZlID0gX2EuYWN0aXZlLCBvbkNsaWNrID0gX2Eub25DbGljaywgZGVwdGggPSBfYS5kZXB0aCwgaXNEaXJPcGVuID0gX2EuaXNEaXJPcGVuO1xuICB2YXIgY2xhc3NOYW1lcyA9IHVzZUNsYXNzTmFtZXMoKTtcbiAgdmFyIG9uQ2xpY2tCdXR0b24gPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICBpZiAoc2VsZWN0RmlsZSkge1xuICAgICAgc2VsZWN0RmlsZShwYXRoKTtcbiAgICB9XG4gICAgb25DbGljayA9PT0gbnVsbCB8fCBvbkNsaWNrID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvbkNsaWNrKGV2ZW50KTtcbiAgfTtcbiAgdmFyIGZpbGVOYW1lID0gcGF0aC5zcGxpdChcIi9cIikuZmlsdGVyKEJvb2xlYW4pLnBvcCgpO1xuICB2YXIgZ2V0SWNvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoc2VsZWN0RmlsZSkgcmV0dXJuIGpzeChGaWxlSWNvbiwge30pO1xuICAgIHJldHVybiBpc0Rpck9wZW4gPyBqc3goRGlyZWN0b3J5SWNvbk9wZW4sIHt9KSA6IGpzeChEaXJlY3RvcnlJY29uQ2xvc2VkLCB7fSk7XG4gIH07XG4gIHJldHVybiBqc3hzKFwiYnV0dG9uXCIsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoXCJidXR0b25cIiwgW2NsYXNzTmFtZXMoXCJleHBsb3JlclwiKSwgYnV0dG9uQ2xhc3NOYW1lLCBleHBsb3JlckNsYXNzTmFtZV0pLFxuICAgIFwiZGF0YS1hY3RpdmVcIjogYWN0aXZlLFxuICAgIG9uQ2xpY2s6IG9uQ2xpY2tCdXR0b24sXG4gICAgc3R5bGU6IHtcbiAgICAgIHBhZGRpbmdMZWZ0OiAxOCAqIGRlcHRoICsgXCJweFwiXG4gICAgfSxcbiAgICB0aXRsZTogZmlsZU5hbWUsXG4gICAgdHlwZTogXCJidXR0b25cIixcbiAgICBjaGlsZHJlbjogW2dldEljb24oKSwganN4KFwic3BhblwiLCB7XG4gICAgICBjaGlsZHJlbjogZmlsZU5hbWVcbiAgICB9KV1cbiAgfSk7XG59O1xuXG52YXIgRGlyZWN0b3J5ID0gZnVuY3Rpb24gKF9hKSB7XG4gIHZhciBwcmVmaXhlZFBhdGggPSBfYS5wcmVmaXhlZFBhdGgsIGZpbGVzID0gX2EuZmlsZXMsIHNlbGVjdEZpbGUgPSBfYS5zZWxlY3RGaWxlLCBhY3RpdmVGaWxlID0gX2EuYWN0aXZlRmlsZSwgZGVwdGggPSBfYS5kZXB0aCwgYXV0b0hpZGRlbkZpbGVzID0gX2EuYXV0b0hpZGRlbkZpbGVzLCB2aXNpYmxlRmlsZXMgPSBfYS52aXNpYmxlRmlsZXMsIGluaXRpYWxDb2xsYXBzZWRGb2xkZXIgPSBfYS5pbml0aWFsQ29sbGFwc2VkRm9sZGVyO1xuICB2YXIgX2IgPSBSZWFjdC51c2VTdGF0ZSghKGluaXRpYWxDb2xsYXBzZWRGb2xkZXIgPT09IG51bGwgfHwgaW5pdGlhbENvbGxhcHNlZEZvbGRlciA9PT0gdm9pZCAwID8gdm9pZCAwIDogaW5pdGlhbENvbGxhcHNlZEZvbGRlci5pbmNsdWRlcyhwcmVmaXhlZFBhdGgpKSksIG9wZW4gPSBfYlswXSwgc2V0T3BlbiA9IF9iWzFdO1xuICB2YXIgdG9nZ2xlID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBzZXRPcGVuKGZ1bmN0aW9uIChwcmV2KSB7XG4gICAgICByZXR1cm4gIXByZXY7XG4gICAgfSk7XG4gIH07XG4gIHJldHVybiBqc3hzKFwiZGl2XCIsIHtcbiAgICBjaGlsZHJlbjogW2pzeChGaWxlLCB7XG4gICAgICBkZXB0aDogZGVwdGgsXG4gICAgICBpc0Rpck9wZW46IG9wZW4sXG4gICAgICBvbkNsaWNrOiB0b2dnbGUsXG4gICAgICBwYXRoOiBwcmVmaXhlZFBhdGggKyBcIi9cIlxuICAgIH0pLCBvcGVuICYmIGpzeChNb2R1bGVMaXN0LCB7XG4gICAgICBhY3RpdmVGaWxlOiBhY3RpdmVGaWxlLFxuICAgICAgYXV0b0hpZGRlbkZpbGVzOiBhdXRvSGlkZGVuRmlsZXMsXG4gICAgICBkZXB0aDogZGVwdGggKyAxLFxuICAgICAgZmlsZXM6IGZpbGVzLFxuICAgICAgaW5pdGlhbENvbGxhcHNlZEZvbGRlcjogaW5pdGlhbENvbGxhcHNlZEZvbGRlcixcbiAgICAgIHByZWZpeGVkUGF0aDogcHJlZml4ZWRQYXRoLFxuICAgICAgc2VsZWN0RmlsZTogc2VsZWN0RmlsZSxcbiAgICAgIHZpc2libGVGaWxlczogdmlzaWJsZUZpbGVzXG4gICAgfSldXG4gIH0sIHByZWZpeGVkUGF0aCk7XG59O1xuXG52YXIgZnJvbVByb3BzVG9Nb2R1bGVzID0gZnVuY3Rpb24gKF9hKSB7XG4gIHZhciBhdXRvSGlkZGVuRmlsZXMgPSBfYS5hdXRvSGlkZGVuRmlsZXMsIHZpc2libGVGaWxlcyA9IF9hLnZpc2libGVGaWxlcywgZmlsZXMgPSBfYS5maWxlcywgcHJlZml4ZWRQYXRoID0gX2EucHJlZml4ZWRQYXRoO1xuICB2YXIgaGFzVmlzaWJsZUZpbGVzT3B0aW9uID0gdmlzaWJsZUZpbGVzLmxlbmd0aCA+IDA7XG4gIHZhciBmaWx0ZXJCeUhpZGRlblByb3BlcnR5ID0gYXV0b0hpZGRlbkZpbGVzICYmICFoYXNWaXNpYmxlRmlsZXNPcHRpb247XG4gIHZhciBmaWx0ZXJCeVZpc2libGVGaWxlc09wdGlvbiA9IGF1dG9IaWRkZW5GaWxlcyAmJiAhIWhhc1Zpc2libGVGaWxlc09wdGlvbjtcbiAgdmFyIGZpbGVMaXN0V2l0aG91dFByZWZpeCA9IE9iamVjdC5rZXlzKGZpbGVzKS5maWx0ZXIoZnVuY3Rpb24gKGZpbGVQYXRoKSB7XG4gICAgdmFyIF9hO1xuICAgIHZhciBpc1ZhbGlkYXRlZFBhdGggPSBmaWxlUGF0aC5zdGFydHNXaXRoKHByZWZpeGVkUGF0aCk7XG4gICAgaWYgKGZpbHRlckJ5VmlzaWJsZUZpbGVzT3B0aW9uKSB7XG4gICAgICByZXR1cm4gaXNWYWxpZGF0ZWRQYXRoICYmIHZpc2libGVGaWxlcy5pbmNsdWRlcyhmaWxlUGF0aCk7XG4gICAgfVxuICAgIGlmIChmaWx0ZXJCeUhpZGRlblByb3BlcnR5KSB7XG4gICAgICByZXR1cm4gaXNWYWxpZGF0ZWRQYXRoICYmICEoKF9hID0gZmlsZXNbZmlsZVBhdGhdKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuaGlkZGVuKTtcbiAgICB9XG4gICAgcmV0dXJuIGlzVmFsaWRhdGVkUGF0aDtcbiAgfSkubWFwKGZ1bmN0aW9uIChmaWxlKSB7XG4gICAgcmV0dXJuIGZpbGUuc3Vic3RyaW5nKHByZWZpeGVkUGF0aC5sZW5ndGgpO1xuICB9KTtcbiAgdmFyIGRpcmVjdG9yaWVzID0gbmV3IFNldChmaWxlTGlzdFdpdGhvdXRQcmVmaXguZmlsdGVyKGZ1bmN0aW9uIChmaWxlKSB7XG4gICAgcmV0dXJuIGZpbGUuaW5jbHVkZXMoXCIvXCIpO1xuICB9KS5tYXAoZnVuY3Rpb24gKGZpbGUpIHtcbiAgICByZXR1cm4gKFwiXCIpLmNvbmNhdChwcmVmaXhlZFBhdGgpLmNvbmNhdChmaWxlLnNwbGl0KFwiL1wiKVswXSwgXCIvXCIpO1xuICB9KSk7XG4gIHZhciBtb2R1bGVzID0gZmlsZUxpc3RXaXRob3V0UHJlZml4LmZpbHRlcihmdW5jdGlvbiAoZmlsZSkge1xuICAgIHJldHVybiAhZmlsZS5pbmNsdWRlcyhcIi9cIik7XG4gIH0pLm1hcChmdW5jdGlvbiAoZmlsZSkge1xuICAgIHJldHVybiAoXCJcIikuY29uY2F0KHByZWZpeGVkUGF0aCkuY29uY2F0KGZpbGUpO1xuICB9KTtcbiAgcmV0dXJuIHtcbiAgICBkaXJlY3RvcmllczogQXJyYXkuZnJvbShkaXJlY3RvcmllcyksXG4gICAgbW9kdWxlczogbW9kdWxlc1xuICB9O1xufTtcblxudmFyIE1vZHVsZUxpc3QgPSBmdW5jdGlvbiAoX2EpIHtcbiAgdmFyIF9iID0gX2EuZGVwdGgsIGRlcHRoID0gX2IgPT09IHZvaWQgMCA/IDAgOiBfYiwgYWN0aXZlRmlsZSA9IF9hLmFjdGl2ZUZpbGUsIHNlbGVjdEZpbGUgPSBfYS5zZWxlY3RGaWxlLCBwcmVmaXhlZFBhdGggPSBfYS5wcmVmaXhlZFBhdGgsIGZpbGVzID0gX2EuZmlsZXMsIGF1dG9IaWRkZW5GaWxlcyA9IF9hLmF1dG9IaWRkZW5GaWxlcywgdmlzaWJsZUZpbGVzID0gX2EudmlzaWJsZUZpbGVzLCBpbml0aWFsQ29sbGFwc2VkRm9sZGVyID0gX2EuaW5pdGlhbENvbGxhcHNlZEZvbGRlcjtcbiAgdmFyIF9jID0gZnJvbVByb3BzVG9Nb2R1bGVzKHtcbiAgICB2aXNpYmxlRmlsZXM6IHZpc2libGVGaWxlcyxcbiAgICBhdXRvSGlkZGVuRmlsZXM6IGF1dG9IaWRkZW5GaWxlcyxcbiAgICBwcmVmaXhlZFBhdGg6IHByZWZpeGVkUGF0aCxcbiAgICBmaWxlczogZmlsZXNcbiAgfSksIGRpcmVjdG9yaWVzID0gX2MuZGlyZWN0b3JpZXMsIG1vZHVsZXMgPSBfYy5tb2R1bGVzO1xuICByZXR1cm4ganN4cyhcImRpdlwiLCB7XG4gICAgY2hpbGRyZW46IFtkaXJlY3Rvcmllcy5tYXAoZnVuY3Rpb24gKGRpcikge1xuICAgICAgcmV0dXJuIGpzeChEaXJlY3RvcnksIHtcbiAgICAgICAgYWN0aXZlRmlsZTogYWN0aXZlRmlsZSxcbiAgICAgICAgYXV0b0hpZGRlbkZpbGVzOiBhdXRvSGlkZGVuRmlsZXMsXG4gICAgICAgIGRlcHRoOiBkZXB0aCxcbiAgICAgICAgZmlsZXM6IGZpbGVzLFxuICAgICAgICBpbml0aWFsQ29sbGFwc2VkRm9sZGVyOiBpbml0aWFsQ29sbGFwc2VkRm9sZGVyLFxuICAgICAgICBwcmVmaXhlZFBhdGg6IGRpcixcbiAgICAgICAgc2VsZWN0RmlsZTogc2VsZWN0RmlsZSxcbiAgICAgICAgdmlzaWJsZUZpbGVzOiB2aXNpYmxlRmlsZXNcbiAgICAgIH0sIGRpcik7XG4gICAgfSksIG1vZHVsZXMubWFwKGZ1bmN0aW9uIChmaWxlKSB7XG4gICAgICByZXR1cm4ganN4KEZpbGUsIHtcbiAgICAgICAgYWN0aXZlOiBhY3RpdmVGaWxlID09PSBmaWxlLFxuICAgICAgICBkZXB0aDogZGVwdGgsXG4gICAgICAgIHBhdGg6IGZpbGUsXG4gICAgICAgIHNlbGVjdEZpbGU6IHNlbGVjdEZpbGVcbiAgICAgIH0sIGZpbGUpO1xuICAgIH0pXVxuICB9KTtcbn07XG5cbnZhciBmaWxlRXhwbG9yZXJDbGFzc05hbWUgPSBmYWtlQ3NzO1xudmFyIFNhbmRwYWNrRmlsZUV4cGxvcmVyID0gZnVuY3Rpb24gKF9hKSB7XG4gIHZhciBjbGFzc05hbWUgPSBfYS5jbGFzc05hbWUsIF9iID0gX2EuYXV0b0hpZGRlbkZpbGVzLCBhdXRvSGlkZGVuRmlsZXMgPSBfYiA9PT0gdm9pZCAwID8gZmFsc2UgOiBfYiwgX2MgPSBfYS5pbml0aWFsQ29sbGFwc2VkRm9sZGVyLCBpbml0aWFsQ29sbGFwc2VkRm9sZGVyID0gX2MgPT09IHZvaWQgMCA/IFtdIDogX2MsIHByb3BzID0gX19yZXN0KF9hLCBbXCJjbGFzc05hbWVcIiwgXCJhdXRvSGlkZGVuRmlsZXNcIiwgXCJpbml0aWFsQ29sbGFwc2VkRm9sZGVyXCJdKTtcbiAgdmFyIF9kID0gdXNlU2FuZHBhY2soKSwgX2UgPSBfZC5zYW5kcGFjaywgc3RhdHVzID0gX2Uuc3RhdHVzLCB1cGRhdGVGaWxlID0gX2UudXBkYXRlRmlsZSwgZGVsZXRlRmlsZSA9IF9lLmRlbGV0ZUZpbGUsIGFjdGl2ZUZpbGUgPSBfZS5hY3RpdmVGaWxlLCBmaWxlcyA9IF9lLmZpbGVzLCBvcGVuRmlsZSA9IF9lLm9wZW5GaWxlLCB2aXNpYmxlRmlsZXNGcm9tUHJvcHMgPSBfZS52aXNpYmxlRmlsZXNGcm9tUHJvcHMsIGxpc3RlbiA9IF9kLmxpc3RlbjtcbiAgdmFyIGNsYXNzTmFtZXMgPSB1c2VDbGFzc05hbWVzKCk7XG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiB3YXRjaEZTRmlsZXNDaGFuZ2VzKCkge1xuICAgIGlmIChzdGF0dXMgIT09IFwicnVubmluZ1wiKSByZXR1cm47XG4gICAgdmFyIHVuc3Vic2NyaWJlID0gbGlzdGVuKGZ1bmN0aW9uIChtZXNzYWdlKSB7XG4gICAgICBpZiAobWVzc2FnZS50eXBlID09PSBcImZzL2NoYW5nZVwiKSB7XG4gICAgICAgIHVwZGF0ZUZpbGUobWVzc2FnZS5wYXRoLCBtZXNzYWdlLmNvbnRlbnQsIGZhbHNlKTtcbiAgICAgIH1cbiAgICAgIGlmIChtZXNzYWdlLnR5cGUgPT09IFwiZnMvcmVtb3ZlXCIpIHtcbiAgICAgICAgZGVsZXRlRmlsZShtZXNzYWdlLnBhdGgsIGZhbHNlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gdW5zdWJzY3JpYmU7XG4gIH0sIFtzdGF0dXNdKTtcbiAgdmFyIG9yZGVyZWRGaWxlcyA9IE9iamVjdC5rZXlzKGZpbGVzKS5zb3J0KCkucmVkdWNlKGZ1bmN0aW9uIChvYmosIGtleSkge1xuICAgIG9ialtrZXldID0gZmlsZXNba2V5XTtcbiAgICByZXR1cm4gb2JqO1xuICB9LCB7fSk7XG4gIHJldHVybiBqc3goXCJkaXZcIiwgX19hc3NpZ24oe1xuICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhcImZpbGUtZXhwbG9yZXJcIiwgW3N0YWNrQ2xhc3NOYW1lLCBjbGFzc05hbWVdKVxuICB9LCBwcm9wcywge1xuICAgIGNoaWxkcmVuOiBqc3goXCJkaXZcIiwge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKFwiZmlsZS1leHBsb3Jlci1saXN0XCIsIFtmaWxlRXhwbG9yZXJDbGFzc05hbWVdKSxcbiAgICAgIGNoaWxkcmVuOiBqc3goTW9kdWxlTGlzdCwge1xuICAgICAgICBhY3RpdmVGaWxlOiBhY3RpdmVGaWxlLFxuICAgICAgICBhdXRvSGlkZGVuRmlsZXM6IGF1dG9IaWRkZW5GaWxlcyxcbiAgICAgICAgZmlsZXM6IG9yZGVyZWRGaWxlcyxcbiAgICAgICAgaW5pdGlhbENvbGxhcHNlZEZvbGRlcjogaW5pdGlhbENvbGxhcHNlZEZvbGRlcixcbiAgICAgICAgcHJlZml4ZWRQYXRoOiBcIi9cIixcbiAgICAgICAgc2VsZWN0RmlsZTogb3BlbkZpbGUsXG4gICAgICAgIHZpc2libGVGaWxlczogdmlzaWJsZUZpbGVzRnJvbVByb3BzXG4gICAgICB9KVxuICAgIH0pXG4gIH0pKTtcbn07XG5cbnZhciBzcGxpdFVybCA9IGZ1bmN0aW9uICh1cmwpIHtcbiAgdmFyIG1hdGNoID0gdXJsLm1hdGNoKC8oaHR0cHM/OlxcL1xcLy4qPylcXC8vKTtcbiAgaWYgKG1hdGNoICYmIG1hdGNoWzFdKSB7XG4gICAgcmV0dXJuIFttYXRjaFsxXSwgdXJsLnJlcGxhY2UobWF0Y2hbMV0sIFwiXCIpXTtcbiAgfVxuICByZXR1cm4gW3VybCwgXCIvXCJdO1xufTtcblxudmFyIG5hdmlnYXRvckNsYXNzTmFtZSA9IGZha2VDc3M7XG52YXIgaW5wdXRDbGFzc05hbWUgPSBmYWtlQ3NzO1xudmFyIE5hdmlnYXRvciA9IGZ1bmN0aW9uIChfYSkge1xuICB2YXIgX2I7XG4gIHZhciBjbGllbnRJZCA9IF9hLmNsaWVudElkLCBvblVSTENoYW5nZSA9IF9hLm9uVVJMQ2hhbmdlLCBjbGFzc05hbWUgPSBfYS5jbGFzc05hbWUsIHN0YXJ0Um91dGUgPSBfYS5zdGFydFJvdXRlLCBwcm9wcyA9IF9fcmVzdChfYSwgW1wiY2xpZW50SWRcIiwgXCJvblVSTENoYW5nZVwiLCBcImNsYXNzTmFtZVwiLCBcInN0YXJ0Um91dGVcIl0pO1xuICB2YXIgX2MgPSBSZWFjdC51c2VTdGF0ZShcIlwiKSwgYmFzZVVybCA9IF9jWzBdLCBzZXRCYXNlVXJsID0gX2NbMV07XG4gIHZhciBfZCA9IHVzZVNhbmRwYWNrKCksIHNhbmRwYWNrID0gX2Quc2FuZHBhY2ssIGRpc3BhdGNoID0gX2QuZGlzcGF0Y2gsIGxpc3RlbiA9IF9kLmxpc3RlbjtcbiAgdmFyIF9lID0gUmVhY3QudXNlU3RhdGUoKF9iID0gc3RhcnRSb3V0ZSAhPT0gbnVsbCAmJiBzdGFydFJvdXRlICE9PSB2b2lkIDAgPyBzdGFydFJvdXRlIDogc2FuZHBhY2suc3RhcnRSb3V0ZSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogXCIvXCIpLCByZWxhdGl2ZVVybCA9IF9lWzBdLCBzZXRSZWxhdGl2ZVVybCA9IF9lWzFdO1xuICB2YXIgX2YgPSBSZWFjdC51c2VTdGF0ZShmYWxzZSksIGJhY2tFbmFibGVkID0gX2ZbMF0sIHNldEJhY2tFbmFibGVkID0gX2ZbMV07XG4gIHZhciBfZyA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKSwgZm9yd2FyZEVuYWJsZWQgPSBfZ1swXSwgc2V0Rm9yd2FyZEVuYWJsZWQgPSBfZ1sxXTtcbiAgdmFyIGNsYXNzTmFtZXMgPSB1c2VDbGFzc05hbWVzKCk7XG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHVuc3ViID0gbGlzdGVuKGZ1bmN0aW9uIChtZXNzYWdlKSB7XG4gICAgICBpZiAobWVzc2FnZS50eXBlID09PSBcInVybGNoYW5nZVwiKSB7XG4gICAgICAgIHZhciB1cmwgPSBtZXNzYWdlLnVybCwgYmFjayA9IG1lc3NhZ2UuYmFjaywgZm9yd2FyZCA9IG1lc3NhZ2UuZm9yd2FyZDtcbiAgICAgICAgdmFyIF9hID0gc3BsaXRVcmwodXJsKSwgbmV3QmFzZVVybCA9IF9hWzBdLCBuZXdSZWxhdGl2ZVVybCA9IF9hWzFdO1xuICAgICAgICBzZXRCYXNlVXJsKG5ld0Jhc2VVcmwpO1xuICAgICAgICBzZXRSZWxhdGl2ZVVybChuZXdSZWxhdGl2ZVVybCk7XG4gICAgICAgIHNldEJhY2tFbmFibGVkKGJhY2spO1xuICAgICAgICBzZXRGb3J3YXJkRW5hYmxlZChmb3J3YXJkKTtcbiAgICAgIH1cbiAgICB9LCBjbGllbnRJZCk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB1bnN1YigpO1xuICAgIH07XG4gIH0sIFtdKTtcbiAgdmFyIGhhbmRsZUlucHV0Q2hhbmdlID0gZnVuY3Rpb24gKGUpIHtcbiAgICB2YXIgcGF0aCA9IGUudGFyZ2V0LnZhbHVlLnN0YXJ0c1dpdGgoXCIvXCIpID8gZS50YXJnZXQudmFsdWUgOiAoXCIvXCIpLmNvbmNhdChlLnRhcmdldC52YWx1ZSk7XG4gICAgc2V0UmVsYXRpdmVVcmwocGF0aCk7XG4gIH07XG4gIHZhciBoYW5kbGVLZXlEb3duID0gZnVuY3Rpb24gKGUpIHtcbiAgICBpZiAoZS5jb2RlID09PSBcIkVudGVyXCIpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICBpZiAodHlwZW9mIG9uVVJMQ2hhbmdlID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgb25VUkxDaGFuZ2UoYmFzZVVybCArIGUuY3VycmVudFRhcmdldC52YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICB2YXIgaGFuZGxlUmVmcmVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICBkaXNwYXRjaCh7XG4gICAgICB0eXBlOiBcInJlZnJlc2hcIlxuICAgIH0pO1xuICB9O1xuICB2YXIgaGFuZGxlQmFjayA9IGZ1bmN0aW9uICgpIHtcbiAgICBkaXNwYXRjaCh7XG4gICAgICB0eXBlOiBcInVybGJhY2tcIlxuICAgIH0pO1xuICB9O1xuICB2YXIgaGFuZGxlRm9yd2FyZCA9IGZ1bmN0aW9uICgpIHtcbiAgICBkaXNwYXRjaCh7XG4gICAgICB0eXBlOiBcInVybGZvcndhcmRcIlxuICAgIH0pO1xuICB9O1xuICB2YXIgYnV0dG9uc0NsYXNzTmFtZXMgPSBjbGFzc05hbWVzKFwiYnV0dG9uXCIsIFtjbGFzc05hbWVzKFwiaWNvblwiKSwgYnV0dG9uQ2xhc3NOYW1lLCBpY29uQ2xhc3NOYW1lLCBmYWtlQ3NzXSk7XG4gIHJldHVybiBqc3hzKFwiZGl2XCIsIF9fYXNzaWduKHtcbiAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoXCJuYXZpZ2F0b3JcIiwgW25hdmlnYXRvckNsYXNzTmFtZSwgY2xhc3NOYW1lXSlcbiAgfSwgcHJvcHMsIHtcbiAgICBjaGlsZHJlbjogW2pzeChcImJ1dHRvblwiLCB7XG4gICAgICBcImFyaWEtbGFiZWxcIjogXCJHbyBiYWNrIG9uZSBwYWdlXCIsXG4gICAgICBjbGFzc05hbWU6IGJ1dHRvbnNDbGFzc05hbWVzLFxuICAgICAgZGlzYWJsZWQ6ICFiYWNrRW5hYmxlZCxcbiAgICAgIG9uQ2xpY2s6IGhhbmRsZUJhY2ssXG4gICAgICB0eXBlOiBcImJ1dHRvblwiLFxuICAgICAgY2hpbGRyZW46IGpzeChCYWNrd2FyZEljb24sIHt9KVxuICAgIH0pLCBqc3goXCJidXR0b25cIiwge1xuICAgICAgXCJhcmlhLWxhYmVsXCI6IFwiR28gZm9yd2FyZCBvbmUgcGFnZVwiLFxuICAgICAgY2xhc3NOYW1lOiBidXR0b25zQ2xhc3NOYW1lcyxcbiAgICAgIGRpc2FibGVkOiAhZm9yd2FyZEVuYWJsZWQsXG4gICAgICBvbkNsaWNrOiBoYW5kbGVGb3J3YXJkLFxuICAgICAgdHlwZTogXCJidXR0b25cIixcbiAgICAgIGNoaWxkcmVuOiBqc3goRm9yd2FyZEljb24sIHt9KVxuICAgIH0pLCBqc3goXCJidXR0b25cIiwge1xuICAgICAgXCJhcmlhLWxhYmVsXCI6IFwiUmVmcmVzaCBwYWdlXCIsXG4gICAgICBjbGFzc05hbWU6IGJ1dHRvbnNDbGFzc05hbWVzLFxuICAgICAgb25DbGljazogaGFuZGxlUmVmcmVzaCxcbiAgICAgIHR5cGU6IFwiYnV0dG9uXCIsXG4gICAgICBjaGlsZHJlbjoganN4KFJlZnJlc2hJY29uLCB7fSlcbiAgICB9KSwganN4KFwiaW5wdXRcIiwge1xuICAgICAgXCJhcmlhLWxhYmVsXCI6IFwiQ3VycmVudCBTYW5kcGFjayBVUkxcIixcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhcImlucHV0XCIsIFtpbnB1dENsYXNzTmFtZV0pLFxuICAgICAgbmFtZTogXCJDdXJyZW50IFNhbmRwYWNrIFVSTFwiLFxuICAgICAgb25DaGFuZ2U6IGhhbmRsZUlucHV0Q2hhbmdlLFxuICAgICAgb25LZXlEb3duOiBoYW5kbGVLZXlEb3duLFxuICAgICAgdHlwZTogXCJ0ZXh0XCIsXG4gICAgICB2YWx1ZTogcmVsYXRpdmVVcmxcbiAgICB9KV1cbiAgfSkpO1xufTtcblxudmFyIHByZXZpZXdDbGFzc05hbWUgPSBmYWtlQ3NzO1xudmFyIHByZXZpZXdJZnJhbWUgPSBmYWtlQ3NzO1xudmFyIHByZXZpZXdBY3Rpb25zQ2xhc3NOYW1lJDEgPSBmYWtlQ3NzO1xudmFyIFNhbmRwYWNrUHJldmlldyA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gKF9hLCByZWYpIHtcbiAgdmFyIF9iID0gX2Euc2hvd05hdmlnYXRvciwgc2hvd05hdmlnYXRvciA9IF9iID09PSB2b2lkIDAgPyBmYWxzZSA6IF9iLCBfYyA9IF9hLnNob3dSZWZyZXNoQnV0dG9uLCBzaG93UmVmcmVzaEJ1dHRvbiA9IF9jID09PSB2b2lkIDAgPyB0cnVlIDogX2MsIF9kID0gX2Euc2hvd09wZW5JbkNvZGVTYW5kYm94LCBzaG93T3BlbkluQ29kZVNhbmRib3ggPSBfZCA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9kLCBfZSA9IF9hLnNob3dTYW5kcGFja0Vycm9yT3ZlcmxheSwgc2hvd1NhbmRwYWNrRXJyb3JPdmVybGF5ID0gX2UgPT09IHZvaWQgMCA/IHRydWUgOiBfZSwgX2cgPSBfYS5zaG93UmVzdGFydEJ1dHRvbiwgc2hvd1Jlc3RhcnRCdXR0b24gPSBfZyA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9nLCBfaCA9IF9hLmFjdGlvbnNDaGlsZHJlbiwgYWN0aW9uc0NoaWxkcmVuID0gX2ggPT09IHZvaWQgMCA/IGpzeChGcmFnbWVudCwge30pIDogX2gsIGNoaWxkcmVuID0gX2EuY2hpbGRyZW4sIGNsYXNzTmFtZSA9IF9hLmNsYXNzTmFtZSwgX2ogPSBfYS5zdGFydFJvdXRlLCBzdGFydFJvdXRlID0gX2ogPT09IHZvaWQgMCA/IFwiL1wiIDogX2osIHByb3BzID0gX19yZXN0KF9hLCBbXCJzaG93TmF2aWdhdG9yXCIsIFwic2hvd1JlZnJlc2hCdXR0b25cIiwgXCJzaG93T3BlbkluQ29kZVNhbmRib3hcIiwgXCJzaG93U2FuZHBhY2tFcnJvck92ZXJsYXlcIiwgXCJzaG93T3Blbk5ld3RhYlwiLCBcInNob3dSZXN0YXJ0QnV0dG9uXCIsIFwiYWN0aW9uc0NoaWxkcmVuXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc05hbWVcIiwgXCJzdGFydFJvdXRlXCJdKTtcbiAgdmFyIF9rID0gdXNlU2FuZHBhY2tDbGllbnQoe1xuICAgIHN0YXJ0Um91dGU6IHN0YXJ0Um91dGVcbiAgfSksIHNhbmRwYWNrID0gX2suc2FuZHBhY2ssIGxpc3RlbiA9IF9rLmxpc3RlbiwgaWZyYW1lID0gX2suaWZyYW1lLCBnZXRDbGllbnQgPSBfay5nZXRDbGllbnQsIGNsaWVudElkID0gX2suY2xpZW50SWQsIGRpc3BhdGNoID0gX2suZGlzcGF0Y2g7XG4gIHZhciBfbCA9IFJlYWN0LnVzZVN0YXRlKG51bGwpLCBpZnJhbWVDb21wdXRlZEhlaWdodCA9IF9sWzBdLCBzZXRDb21wdXRlZEF1dG9IZWlnaHQgPSBfbFsxXTtcbiAgdmFyIHN0YXR1cyA9IHNhbmRwYWNrLnN0YXR1cztcbiAgdmFyIHJlZnJlc2ggPSB1c2VTYW5kcGFja05hdmlnYXRpb24oY2xpZW50SWQpLnJlZnJlc2g7XG4gIHZhciByZXN0YXJ0ID0gdXNlU2FuZHBhY2tTaGVsbChjbGllbnRJZCkucmVzdGFydDtcbiAgdmFyIGNsYXNzTmFtZXMgPSB1c2VDbGFzc05hbWVzKCk7XG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHVuc3Vic2NyaWJlID0gbGlzdGVuKGZ1bmN0aW9uIChtZXNzYWdlKSB7XG4gICAgICBpZiAobWVzc2FnZS50eXBlID09PSBcInJlc2l6ZVwiKSB7XG4gICAgICAgIHNldENvbXB1dGVkQXV0b0hlaWdodChtZXNzYWdlLmhlaWdodCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHVuc3Vic2NyaWJlO1xuICB9LCBbXSk7XG4gIFJlYWN0LnVzZUltcGVyYXRpdmVIYW5kbGUocmVmLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNsaWVudElkOiBjbGllbnRJZCxcbiAgICAgIGdldENsaWVudDogZ2V0Q2xpZW50XG4gICAgfTtcbiAgfSwgW2dldENsaWVudCwgY2xpZW50SWRdKTtcbiAgdmFyIGhhbmRsZU5ld1VSTCA9IGZ1bmN0aW9uIChuZXdVcmwpIHtcbiAgICBpZiAoIWlmcmFtZS5jdXJyZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmcmFtZS5jdXJyZW50LnNyYyA9IG5ld1VybDtcbiAgfTtcbiAgcmV0dXJuIGpzeHMoU2FuZHBhY2tTdGFjaywgX19hc3NpZ24oe1xuICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhcInByZXZpZXdcIiwgW2NsYXNzTmFtZV0pXG4gIH0sIHByb3BzLCB7XG4gICAgY2hpbGRyZW46IFtzaG93TmF2aWdhdG9yICYmIGpzeChOYXZpZ2F0b3IsIHtcbiAgICAgIGNsaWVudElkOiBjbGllbnRJZCxcbiAgICAgIG9uVVJMQ2hhbmdlOiBoYW5kbGVOZXdVUkwsXG4gICAgICBzdGFydFJvdXRlOiBzdGFydFJvdXRlXG4gICAgfSksIGpzeHMoXCJkaXZcIiwge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKFwicHJldmlldy1jb250YWluZXJcIiwgW3ByZXZpZXdDbGFzc05hbWVdKSxcbiAgICAgIGNoaWxkcmVuOiBbanN4KFwiaWZyYW1lXCIsIHtcbiAgICAgICAgcmVmOiBpZnJhbWUsXG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhcInByZXZpZXctaWZyYW1lXCIsIFtwcmV2aWV3SWZyYW1lXSksXG4gICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgaGVpZ2h0OiBpZnJhbWVDb21wdXRlZEhlaWdodCA/IGlmcmFtZUNvbXB1dGVkSGVpZ2h0IDogdW5kZWZpbmVkXG4gICAgICAgIH0sXG4gICAgICAgIHRpdGxlOiBcIlNhbmRwYWNrIFByZXZpZXdcIlxuICAgICAgfSksIGpzeHMoXCJkaXZcIiwge1xuICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoXCJwcmV2aWV3LWFjdGlvbnNcIiwgW3ByZXZpZXdBY3Rpb25zQ2xhc3NOYW1lJDFdKSxcbiAgICAgICAgY2hpbGRyZW46IFthY3Rpb25zQ2hpbGRyZW4sIHNob3dSZXN0YXJ0QnV0dG9uICYmIHNhbmRwYWNrLmVudmlyb25tZW50ID09PSBcIm5vZGVcIiAmJiBqc3goUm91bmRlZEJ1dHRvbiwge1xuICAgICAgICAgIG9uQ2xpY2s6IHJlc3RhcnQsXG4gICAgICAgICAgY2hpbGRyZW46IGpzeChSZXN0YXJ0SWNvbiwge30pXG4gICAgICAgIH0pLCAhc2hvd05hdmlnYXRvciAmJiBzaG93UmVmcmVzaEJ1dHRvbiAmJiBzdGF0dXMgPT09IFwicnVubmluZ1wiICYmIGpzeChSb3VuZGVkQnV0dG9uLCB7XG4gICAgICAgICAgb25DbGljazogcmVmcmVzaCxcbiAgICAgICAgICBjaGlsZHJlbjoganN4KFJlZnJlc2hJY29uLCB7fSlcbiAgICAgICAgfSksIHNhbmRwYWNrLnRlYW1JZCAmJiBqc3goXCJidXR0b25cIiwge1xuICAgICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhcImJ1dHRvblwiLCBbY2xhc3NOYW1lcyhcImljb24tc3RhbmRhbG9uZVwiKSwgYnV0dG9uQ2xhc3NOYW1lLCBpY29uU3RhbmRhbG9uZUNsYXNzTmFtZSwgcm91bmRlZEJ1dHRvbkNsYXNzTmFtZV0pLFxuICAgICAgICAgIG9uQ2xpY2s6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBkaXNwYXRjaCh7XG4gICAgICAgICAgICAgIHR5cGU6IFwic2lnbi1vdXRcIlxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICB0aXRsZTogXCJTaWduIG91dFwiLFxuICAgICAgICAgIHR5cGU6IFwiYnV0dG9uXCIsXG4gICAgICAgICAgY2hpbGRyZW46IGpzeChTaWduT3V0SWNvbiwge30pXG4gICAgICAgIH0pLCBzaG93T3BlbkluQ29kZVNhbmRib3ggJiYganN4KE9wZW5JbkNvZGVTYW5kYm94QnV0dG9uLCB7fSldXG4gICAgICB9KSwganN4KExvYWRpbmdPdmVybGF5LCB7XG4gICAgICAgIGNsaWVudElkOiBjbGllbnRJZCxcbiAgICAgICAgc2hvd09wZW5JbkNvZGVTYW5kYm94OiBzaG93T3BlbkluQ29kZVNhbmRib3hcbiAgICAgIH0pLCBzaG93U2FuZHBhY2tFcnJvck92ZXJsYXkgJiYganN4KEVycm9yT3ZlcmxheSwge30pLCBjaGlsZHJlbl1cbiAgICB9KV1cbiAgfSkpO1xufSk7XG5cbnZhciB0cmFuc3BpbGVkQ29kZUNsYXNzTmFtZSA9IGZha2VDc3M7XG52YXIgU2FuZHBhY2tUcmFuc3BpbGVkQ29kZSA9IGZ1bmN0aW9uIChfYSkge1xuICB2YXIgY2xhc3NOYW1lID0gX2EuY2xhc3NOYW1lLCBwcm9wcyA9IF9fcmVzdChfYSwgW1wiY2xhc3NOYW1lXCJdKTtcbiAgdmFyIHNhbmRwYWNrID0gdXNlU2FuZHBhY2soKS5zYW5kcGFjaztcbiAgdmFyIHRyYW5zcGlsZWRDb2RlID0gdXNlVHJhbnNwaWxlZENvZGUoKTtcbiAgdmFyIGNsYXNzTmFtZXMgPSB1c2VDbGFzc05hbWVzKCk7XG4gIHZhciBoaWRkZW5JZnJhbWVSZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGhpZGRlbklmcmFtZSA9IGhpZGRlbklmcmFtZVJlZi5jdXJyZW50O1xuICAgIGlmIChoaWRkZW5JZnJhbWUpIHtcbiAgICAgIHNhbmRwYWNrLnJlZ2lzdGVyQnVuZGxlcihoaWRkZW5JZnJhbWUsIFwiaGlkZGVuXCIpO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgc2FuZHBhY2sudW5yZWdpc3RlckJ1bmRsZXIoXCJoaWRkZW5cIik7XG4gICAgfTtcbiAgfSwgW10pO1xuICByZXR1cm4ganN4cyhcImRpdlwiLCBfX2Fzc2lnbih7XG4gICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKFwidHJhbnNwaWxlZC1jb2RlXCIsIFtzdGFja0NsYXNzTmFtZSwgdHJhbnNwaWxlZENvZGVDbGFzc05hbWUsIGNsYXNzTmFtZV0pXG4gIH0sIHByb3BzLCB7XG4gICAgY2hpbGRyZW46IFtqc3goU2FuZHBhY2tDb2RlVmlld2VyLCBfX2Fzc2lnbih7XG4gICAgICBjb2RlOiB0cmFuc3BpbGVkQ29kZSAhPT0gbnVsbCAmJiB0cmFuc3BpbGVkQ29kZSAhPT0gdm9pZCAwID8gdHJhbnNwaWxlZENvZGUgOiBcIlwiLFxuICAgICAgaW5pdE1vZGU6IHNhbmRwYWNrLmluaXRNb2RlXG4gICAgfSwgcHJvcHMpKSwganN4KFwiaWZyYW1lXCIsIHtcbiAgICAgIHJlZjogaGlkZGVuSWZyYW1lUmVmLFxuICAgICAgc3R5bGU6IHtcbiAgICAgICAgZGlzcGxheTogXCJub25lXCJcbiAgICAgIH0sXG4gICAgICB0aXRsZTogXCJ0cmFuc3BpbGVkIHNhbmRwYWNrIGNvZGVcIlxuICAgIH0pLCBqc3goRXJyb3JPdmVybGF5LCB7fSksIGpzeChMb2FkaW5nT3ZlcmxheSwge1xuICAgICAgY2xpZW50SWQ6IFwiaGlkZGVuXCIsXG4gICAgICBzaG93T3BlbkluQ29kZVNhbmRib3g6IGZhbHNlXG4gICAgfSldXG4gIH0pKTtcbn07XG5cbnZhciB3cmFwcGVyQ2xhc3NOYW1lJDEgPSBmYWtlQ3NzO1xudmFyIGZsZXhDbGFzc05hbWUkMSA9IGZha2VDc3M7XG52YXIgSGVhZGVyJDEgPSBmdW5jdGlvbiAoX2EpIHtcbiAgdmFyIHN0YXR1cyA9IF9hLnN0YXR1cywgc3VpdGVPbmx5ID0gX2Euc3VpdGVPbmx5LCBzZXRTdWl0ZU9ubHkgPSBfYS5zZXRTdWl0ZU9ubHksIHNldFZlcmJvc2UgPSBfYS5zZXRWZXJib3NlLCB2ZXJib3NlID0gX2EudmVyYm9zZSwgd2F0Y2hNb2RlID0gX2Eud2F0Y2hNb2RlLCBzZXRXYXRjaE1vZGUgPSBfYS5zZXRXYXRjaE1vZGUsIHNob3dTdWl0ZXNPbmx5ID0gX2Euc2hvd1N1aXRlc09ubHksIHNob3dXYXRjaEJ1dHRvbiA9IF9hLnNob3dXYXRjaEJ1dHRvbiwgc2hvd1ZlcmJvc2VCdXR0b24gPSBfYS5zaG93VmVyYm9zZUJ1dHRvbiwgaGlkZVRlc3RzQW5kU3VwcmVzc0xvZ3MgPSBfYS5oaWRlVGVzdHNBbmRTdXByZXNzTG9ncztcbiAgdmFyIGNsYXNzTmFtZXMgPSB1c2VDbGFzc05hbWVzKCk7XG4gIHZhciBidXR0b25zQ2xhc3NOYW1lID0gY2xhc3NOYW1lcyhcInRlc3QtaGVhZGVyLWJ1dHRvblwiLCBbYnV0dG9uQ2xhc3NOYW1lLCByb3VuZGVkQnV0dG9uQ2xhc3NOYW1lLCBmYWtlQ3NzXSk7XG4gIHJldHVybiBqc3hzKFwiZGl2XCIsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoXCJ0ZXN0LWhlYWRlclwiLCBbd3JhcHBlckNsYXNzTmFtZSQxLCBmbGV4Q2xhc3NOYW1lJDFdKSxcbiAgICBjaGlsZHJlbjogW2pzeChcImRpdlwiLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoXCJ0ZXN0LWhlYWRlci13cmFwcGVyXCIsIFtmbGV4Q2xhc3NOYW1lJDFdKSxcbiAgICAgIGNoaWxkcmVuOiBqc3hzKFwicFwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhcInRlc3QtaGVhZGVyLXRpdGxlXCIsIFtmYWtlQ3NzXSksXG4gICAgICAgIGNoaWxkcmVuOiBbanN4KENvbnNvbGVJY29uLCB7fSksIFwiVGVzdHNcIl1cbiAgICAgIH0pXG4gICAgfSksIGpzeHMoXCJkaXZcIiwge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKFwidGVzdC1oZWFkZXItYWN0aW9uc1wiLCBbZmxleENsYXNzTmFtZSQxXSksXG4gICAgICBjaGlsZHJlbjogW3Nob3dTdWl0ZXNPbmx5ICYmIGpzeChcImJ1dHRvblwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogYnV0dG9uc0NsYXNzTmFtZSxcbiAgICAgICAgXCJkYXRhLWFjdGl2ZVwiOiBzdWl0ZU9ubHksXG4gICAgICAgIGRpc2FibGVkOiBzdGF0dXMgPT09IFwiaW5pdGlhbGlzaW5nXCIsXG4gICAgICAgIG9uQ2xpY2s6IHNldFN1aXRlT25seSxcbiAgICAgICAgdHlwZTogXCJidXR0b25cIixcbiAgICAgICAgY2hpbGRyZW46IFwiU3VpdGUgb25seVwiXG4gICAgICB9KSwgc2hvd1ZlcmJvc2VCdXR0b24gJiYganN4KFwiYnV0dG9uXCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBidXR0b25zQ2xhc3NOYW1lLFxuICAgICAgICBcImRhdGEtYWN0aXZlXCI6IHZlcmJvc2UsXG4gICAgICAgIGRpc2FibGVkOiBzdGF0dXMgPT09IFwiaW5pdGlhbGlzaW5nXCIgfHwgaGlkZVRlc3RzQW5kU3VwcmVzc0xvZ3MsXG4gICAgICAgIG9uQ2xpY2s6IHNldFZlcmJvc2UsXG4gICAgICAgIHR5cGU6IFwiYnV0dG9uXCIsXG4gICAgICAgIGNoaWxkcmVuOiBcIlZlcmJvc2VcIlxuICAgICAgfSksIHNob3dXYXRjaEJ1dHRvbiAmJiBqc3goXCJidXR0b25cIiwge1xuICAgICAgICBjbGFzc05hbWU6IGJ1dHRvbnNDbGFzc05hbWUsXG4gICAgICAgIFwiZGF0YS1hY3RpdmVcIjogd2F0Y2hNb2RlLFxuICAgICAgICBkaXNhYmxlZDogc3RhdHVzID09PSBcImluaXRpYWxpc2luZ1wiLFxuICAgICAgICBvbkNsaWNrOiBzZXRXYXRjaE1vZGUsXG4gICAgICAgIHR5cGU6IFwiYnV0dG9uXCIsXG4gICAgICAgIGNoaWxkcmVuOiBcIldhdGNoXCJcbiAgICAgIH0pXVxuICAgIH0pXVxuICB9KTtcbn07XG5cbnZhciBSdW5CdXR0b24gPSBmdW5jdGlvbiAoX2EpIHtcbiAgdmFyIG9uQ2xpY2sgPSBfYS5vbkNsaWNrO1xuICByZXR1cm4ganN4KFJvdW5kZWRCdXR0b24sIHtcbiAgICBvbkNsaWNrOiBvbkNsaWNrLFxuICAgIHRpdGxlOiBcIlJ1biB0ZXN0c1wiLFxuICAgIGNoaWxkcmVuOiBqc3goUnVuSWNvbiwge30pXG4gIH0pO1xufTtcblxudmFyIHNldFRlc3RUaGVtZSA9IGZ1bmN0aW9uIChpc0RhcmspIHtcbiAgcmV0dXJuIHtcbiAgICBcIi0tdGVzdC1wYXNzXCI6IGlzRGFyayA/IFwiIzE4ZGYxNlwiIDogXCIjMTVjMjEzXCIsXG4gICAgXCItLXRlc3QtZmFpbFwiOiBpc0RhcmsgPyBcIiNkZjE2MmJcIiA6IFwiI2MyMTMyNVwiLFxuICAgIFwiLS10ZXN0LXNraXBcIjogaXNEYXJrID8gXCIjZWFjZTJiXCIgOiBcIiNjMmE4MTNcIixcbiAgICBcIi0tdGVzdC1ydW5cIjogaXNEYXJrID8gXCIjZWFjZTJiXCIgOiBcIiNjMmE4MTNcIixcbiAgICBcIi0tdGVzdC10aXRsZVwiOiBpc0RhcmsgPyBcIiMzZmJhYmVcIiA6IFwiIzI1NmM2ZlwiXG4gIH07XG59O1xudmFyIGNvbG9yID0gZmFrZUNzcztcbnZhciBwYXNzVGV4dENsYXNzTmFtZSA9IGNvbG9yKCk7XG52YXIgZmFpbFRleHRDbGFzc05hbWUgPSBjb2xvcigpO1xudmFyIHNraXBUZXh0Q2xhc3NOYW1lID0gY29sb3IoKTtcbnZhciB0aXRsZVRleHRDbGFzc05hbWUgPSBjb2xvcigpO1xudmFyIGJhY2tncm91bmQgPSBmYWtlQ3NzO1xudmFyIHJ1bkJhY2tncm91bmRDbGFzc05hbWUgPSBiYWNrZ3JvdW5kKCk7XG52YXIgcGFzc0JhY2tncm91bmRDbGFzc05hbWUgPSBiYWNrZ3JvdW5kKCk7XG52YXIgZmFpbEJhY2tncm91bmRDbGFzc05hbWUgPSBiYWNrZ3JvdW5kKCk7XG5cbnZhciB0ZXN0Q29udGFpbmVyQ2xhc3NOYW1lID0gZmFrZUNzcztcbnZhciBjb250YWluZXJDbGFzc05hbWUkNCA9IGZha2VDc3M7XG52YXIgdGVzdENsYXNzTmFtZSA9IGZha2VDc3M7XG52YXIgZHVyYXRpb25DbGFzc05hbWUgPSBmYWtlQ3NzO1xudmFyIGdhcFJpZ2h0Q2xhc3NOYW1lID0gZmFrZUNzcztcbnZhciBUZXN0cyA9IGZ1bmN0aW9uIChfYSkge1xuICB2YXIgdGVzdHMgPSBfYS50ZXN0cztcbiAgdmFyIGNsYXNzTmFtZXMgPSB1c2VDbGFzc05hbWVzKCk7XG4gIHJldHVybiBqc3goXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhcInRlc3RcIiwgW3Rlc3RDb250YWluZXJDbGFzc05hbWVdKSxcbiAgICBjaGlsZHJlbjogdGVzdHMubWFwKGZ1bmN0aW9uICh0ZXN0KSB7XG4gICAgICByZXR1cm4ganN4cyhcImRpdlwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhcInRlc3QtcmVzdWx0XCIsIFtjb250YWluZXJDbGFzc05hbWUkNF0pLFxuICAgICAgICBjaGlsZHJlbjogW3Rlc3Quc3RhdHVzID09PSBcInBhc3NcIiAmJiBqc3goXCJzcGFuXCIsIHtcbiAgICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoXCJ0ZXN0LXBhc3MtdGV4dFwiLCBbcGFzc1RleHRDbGFzc05hbWUsIGdhcFJpZ2h0Q2xhc3NOYW1lXSksXG4gICAgICAgICAgY2hpbGRyZW46IFwiXFx1MjcxM1wiXG4gICAgICAgIH0pLCB0ZXN0LnN0YXR1cyA9PT0gXCJmYWlsXCIgJiYganN4KFwic3BhblwiLCB7XG4gICAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKFwidGVzdC1mYWlsLXRleHRcIiwgW2ZhaWxUZXh0Q2xhc3NOYW1lLCBnYXBSaWdodENsYXNzTmFtZV0pLFxuICAgICAgICAgIGNoaWxkcmVuOiBcIlxcdTI3MTVcIlxuICAgICAgICB9KSwgdGVzdC5zdGF0dXMgPT09IFwiaWRsZVwiICYmIGpzeChcInNwYW5cIiwge1xuICAgICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhcInRlc3QtaWRsZS10ZXh0XCIsIFtza2lwVGV4dENsYXNzTmFtZSwgZ2FwUmlnaHRDbGFzc05hbWVdKSxcbiAgICAgICAgICBjaGlsZHJlbjogXCJcXHUyNUNCXCJcbiAgICAgICAgfSksIGpzeChcInNwYW5cIiwge1xuICAgICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhcInRlc3QtbmFtZS10ZXh0XCIsIFt0ZXN0Q2xhc3NOYW1lXSksXG4gICAgICAgICAgY2hpbGRyZW46IHRlc3QubmFtZVxuICAgICAgICB9KSwgdGVzdC5kdXJhdGlvbiAhPT0gdW5kZWZpbmVkICYmIGpzeHMoXCJzcGFuXCIsIHtcbiAgICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoXCJ0ZXN0LWR1cmF0aW9uLXRleHRcIiwgW2R1cmF0aW9uQ2xhc3NOYW1lXSksXG4gICAgICAgICAgY2hpbGRyZW46IFtcIihcIiwgdGVzdC5kdXJhdGlvbiwgXCIgbXMpXCJdXG4gICAgICAgIH0pXVxuICAgICAgfSwgdGVzdC5uYW1lKTtcbiAgICB9KVxuICB9KTtcbn07XG5cbnZhciBnZXRUZXN0cyA9IGZ1bmN0aW9uIChibG9jaykge1xuICB2YXIgX2E7XG4gIHZhciBfYiwgX2M7XG4gIHJldHVybiAoX2EgPSBPYmplY3QudmFsdWVzKChfYiA9IGJsb2NrLnRlc3RzKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiB7fSkpLmNvbmNhdC5hcHBseShfYSwgT2JqZWN0LnZhbHVlcygoX2MgPSBibG9jay5kZXNjcmliZXMpICE9PSBudWxsICYmIF9jICE9PSB2b2lkIDAgPyBfYyA6IHt9KS5tYXAoZ2V0VGVzdHMpKTtcbn07XG52YXIgZ2V0RmFpbGluZ1Rlc3RzID0gZnVuY3Rpb24gKGJsb2NrKSB7XG4gIHJldHVybiBnZXRUZXN0cyhibG9jaykuZmlsdGVyKGZ1bmN0aW9uICh0KSB7XG4gICAgcmV0dXJuIHQuc3RhdHVzID09PSBcImZhaWxcIjtcbiAgfSk7XG59O1xudmFyIGdldEFsbFRlc3RSZXN1bHRzID0gZnVuY3Rpb24gKHNwZWNzKSB7XG4gIHJldHVybiBzcGVjcy5tYXAoZ2V0U3BlY1Rlc3RSZXN1bHRzKS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgc3RhdHMpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcGFzczogYWNjLnBhc3MgKyBzdGF0cy5wYXNzLFxuICAgICAgZmFpbDogYWNjLmZhaWwgKyBzdGF0cy5mYWlsLFxuICAgICAgc2tpcDogYWNjLnNraXAgKyBzdGF0cy5za2lwLFxuICAgICAgdG90YWw6IGFjYy50b3RhbCArIHN0YXRzLnRvdGFsXG4gICAgfTtcbiAgfSwge1xuICAgIHBhc3M6IDAsXG4gICAgc2tpcDogMCxcbiAgICBmYWlsOiAwLFxuICAgIHRvdGFsOiAwXG4gIH0pO1xufTtcbnZhciBnZXRTcGVjVGVzdFJlc3VsdHMgPSBmdW5jdGlvbiAoc3BlYykge1xuICByZXR1cm4gZ2V0VGVzdHMoc3BlYykucmVkdWNlKGZ1bmN0aW9uIChhY2MsIHRlc3QpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcGFzczogdGVzdC5zdGF0dXMgPT09IFwicGFzc1wiID8gYWNjLnBhc3MgKyAxIDogYWNjLnBhc3MsXG4gICAgICBmYWlsOiB0ZXN0LnN0YXR1cyA9PT0gXCJmYWlsXCIgPyBhY2MuZmFpbCArIDEgOiBhY2MuZmFpbCxcbiAgICAgIHNraXA6IHRlc3Quc3RhdHVzID09PSBcImlkbGVcIiB8fCB0ZXN0LnN0YXR1cyA9PT0gXCJydW5uaW5nXCIgPyBhY2Muc2tpcCArIDEgOiBhY2Muc2tpcCxcbiAgICAgIHRvdGFsOiBhY2MudG90YWwgKyAxXG4gICAgfTtcbiAgfSwge1xuICAgIHBhc3M6IDAsXG4gICAgZmFpbDogMCxcbiAgICBza2lwOiAwLFxuICAgIHRvdGFsOiAwXG4gIH0pO1xufTtcbnZhciBnZXRBbGxTdWl0ZVJlc3VsdHMgPSBmdW5jdGlvbiAoc3BlY3MpIHtcbiAgcmV0dXJuIHNwZWNzLmZpbHRlcihmdW5jdGlvbiAoc3BlYykge1xuICAgIHZhciBfYSwgX2I7XG4gICAgcmV0dXJuIE9iamVjdC52YWx1ZXMoKF9hID0gc3BlYy5kZXNjcmliZXMpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHt9KS5sZW5ndGggPiAwIHx8IE9iamVjdC52YWx1ZXMoKF9iID0gc3BlYy50ZXN0cykgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDoge30pLmxlbmd0aCA+IDA7XG4gIH0pLm1hcChnZXRTcGVjVGVzdFJlc3VsdHMpLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBzdGF0cykge1xuICAgIHJldHVybiB7XG4gICAgICBwYXNzOiBhY2MucGFzcyArIChzdGF0cy5mYWlsID09PSAwID8gMSA6IDApLFxuICAgICAgZmFpbDogYWNjLmZhaWwgKyAoc3RhdHMuZmFpbCA+IDAgPyAxIDogMCksXG4gICAgICB0b3RhbDogYWNjLnRvdGFsICsgMVxuICAgIH07XG4gIH0sIHtcbiAgICBwYXNzOiAwLFxuICAgIGZhaWw6IDAsXG4gICAgdG90YWw6IDBcbiAgfSk7XG59O1xudmFyIGdldER1cmF0aW9uID0gZnVuY3Rpb24gKHNwZWNzKSB7XG4gIHJldHVybiBmbGF0TWFwKHNwZWNzLCBnZXRUZXN0cykucmVkdWNlKGZ1bmN0aW9uIChhY2MsIHRlc3QpIHtcbiAgICByZXR1cm4gYWNjICsgKHRlc3QuZHVyYXRpb24gfHwgMCk7XG4gIH0sIDApO1xufTtcbnZhciBpc0VtcHR5ID0gZnVuY3Rpb24gKGJsb2NrKSB7XG4gIHZhciBfYSwgX2I7XG4gIHJldHVybiBPYmplY3QudmFsdWVzKChfYSA9IGJsb2NrLmRlc2NyaWJlcykgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDoge30pLmxlbmd0aCA9PT0gMCAmJiBPYmplY3QudmFsdWVzKChfYiA9IGJsb2NrLnRlc3RzKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiB7fSkubGVuZ3RoID09PSAwO1xufTtcbnZhciBzcGxpdFRhaWwgPSBmdW5jdGlvbiAoYXMpIHtcbiAgdmFyIGxhc3RJbmRleCA9IGFzLmxlbmd0aCAtIDE7XG4gIHZhciBoZWFkID0gYXMuc2xpY2UoMCwgbGFzdEluZGV4KTtcbiAgdmFyIHRhaWwgPSBhc1tsYXN0SW5kZXhdO1xuICByZXR1cm4gW2hlYWQsIHRhaWxdO1xufTtcbnZhciBmbGF0TWFwID0gZnVuY3Rpb24gKGFzLCBmKSB7XG4gIHJldHVybiBhcy5tYXAoZikucmVkdWNlKGZ1bmN0aW9uIChhY2MsIG5leHQpIHtcbiAgICByZXR1cm4gYWNjLmNvbmNhdChuZXh0KTtcbiAgfSwgW10pO1xufTtcbnZhciBzZXQgPSBmdW5jdGlvbiAocGF0aCwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChvYmplY3QpIHtcbiAgICByZXR1cm4gY2xlYW5TZXQob2JqZWN0LCBwYXRoLCB2YWx1ZSk7XG4gIH07XG59O1xuXG52YXIgbmFtZUNsYXNzTmFtZSA9IGZha2VDc3M7XG52YXIgY29udGFpbmVyQ2xhc3NOYW1lJDMgPSBmYWtlQ3NzO1xudmFyIERlc2NyaWJlcyA9IGZ1bmN0aW9uIChfYSkge1xuICB2YXIgZGVzY3JpYmVzID0gX2EuZGVzY3JpYmVzO1xuICB2YXIgY2xhc3NOYW1lcyA9IHVzZUNsYXNzTmFtZXMoKTtcbiAgcmV0dXJuIGpzeChGcmFnbWVudCwge1xuICAgIGNoaWxkcmVuOiBkZXNjcmliZXMubWFwKGZ1bmN0aW9uIChkZXNjcmliZSkge1xuICAgICAgdmFyIF9hLCBfYjtcbiAgICAgIGlmIChpc0VtcHR5KGRlc2NyaWJlKSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIHZhciB0ZXN0cyA9IE9iamVjdC52YWx1ZXMoKF9hID0gZGVzY3JpYmUudGVzdHMpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHt9KTtcbiAgICAgIHZhciBkZXNjcmliZXMgPSBPYmplY3QudmFsdWVzKChfYiA9IGRlc2NyaWJlLmRlc2NyaWJlcykgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDoge30pO1xuICAgICAgcmV0dXJuIGpzeHMoXCJkaXZcIiwge1xuICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoXCJ0ZXN0LWRlc2NyaWJlXCIsIFtjb250YWluZXJDbGFzc05hbWUkM10pLFxuICAgICAgICBjaGlsZHJlbjogW2pzeChcImRpdlwiLCB7XG4gICAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKFwidGVzdC1uYW1lXCIsIFtuYW1lQ2xhc3NOYW1lXSksXG4gICAgICAgICAgY2hpbGRyZW46IGRlc2NyaWJlLm5hbWVcbiAgICAgICAgfSksIGpzeChUZXN0cywge1xuICAgICAgICAgIHRlc3RzOiB0ZXN0c1xuICAgICAgICB9KSwganN4KERlc2NyaWJlcywge1xuICAgICAgICAgIGRlc2NyaWJlczogZGVzY3JpYmVzXG4gICAgICAgIH0pXVxuICAgICAgfSwgZGVzY3JpYmUubmFtZSk7XG4gICAgfSlcbiAgfSk7XG59O1xuXG52YXIgY29udGFpbmVyQ2xhc3NOYW1lJDIgPSBmYWtlQ3NzO1xudmFyIEZvcm1hdHRlZEVycm9yID0gZnVuY3Rpb24gKF9hKSB7XG4gIHZhciBlcnJvciA9IF9hLmVycm9yLCBwYXRoID0gX2EucGF0aDtcbiAgdmFyIGNsYXNzTmFtZXMgPSB1c2VDbGFzc05hbWVzKCk7XG4gIHJldHVybiBqc3goXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhcInRlc3QtZXJyb3JcIiwgW2NvbnRhaW5lckNsYXNzTmFtZSQyXSksXG4gICAgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw6IHtcbiAgICAgIF9faHRtbDogZm9ybWF0RGlmZk1lc3NhZ2UoZXJyb3IsIHBhdGgpXG4gICAgfVxuICB9KTtcbn07XG52YXIgZXNjYXBlSHRtbCA9IGZ1bmN0aW9uICh1bnNhZmUpIHtcbiAgcmV0dXJuIHVuc2FmZS5yZXBsYWNlKC8mL2csIFwiJmFtcDtcIikucmVwbGFjZSgvPC9nLCBcIiZsdDtcIikucmVwbGFjZSgvPi9nLCBcIiZndDtcIikucmVwbGFjZSgvXCIvZywgXCImcXVvdDtcIikucmVwbGFjZSgvJy9nLCBcIiYjMDM5O1wiKTtcbn07XG52YXIgZm9ybWF0RGlmZk1lc3NhZ2UgPSBmdW5jdGlvbiAoZXJyb3IsIHBhdGgpIHtcbiAgdmFyIGZpbmFsTWVzc2FnZSA9IFwiXCI7XG4gIGlmIChlcnJvci5tYXRjaGVyUmVzdWx0KSB7XG4gICAgZmluYWxNZXNzYWdlID0gKFwiPHNwYW4+XCIpLmNvbmNhdChlc2NhcGVIdG1sKGVycm9yLm1lc3NhZ2UpLnJlcGxhY2UoLyhleHBlY3RlZCkvbSwgKFwiPHNwYW4gY2xhc3M9XFxcIlwiKS5jb25jYXQocGFzc1RleHRDbGFzc05hbWUsIFwiXFxcIj4kMTwvc3Bhbj5cIikpLnJlcGxhY2UoLyhyZWNlaXZlZCkvbSwgKFwiPHNwYW4gY2xhc3M9XFxcIlwiKS5jb25jYXQoZmFpbFRleHRDbGFzc05hbWUsIFwiXFxcIj4kMTwvc3Bhbj5cIikpLnJlcGxhY2UoLyhEaWZmZXJlbmNlOikvbSwgXCI8c3Bhbj4kMTwvc3Bhbj5cIikucmVwbGFjZSgvKEV4cGVjdGVkOikoLiopL20sIChcIjxzcGFuPiQxPC9zcGFuPjxzcGFuIGNsYXNzPVxcXCJcIikuY29uY2F0KHBhc3NUZXh0Q2xhc3NOYW1lLCBcIlxcXCI+JDI8L3NwYW4+XCIpKS5yZXBsYWNlKC8oUmVjZWl2ZWQ6KSguKikvbSwgKFwiPHNwYW4+JDE8L3NwYW4+PHNwYW4gY2xhc3M9XFxcIlwiKS5jb25jYXQoZmFpbFRleHRDbGFzc05hbWUsIFwiXFxcIj4kMjwvc3Bhbj5cIikpLnJlcGxhY2UoL14oLS4qKS9nbSwgKFwiPHNwYW4gY2xhc3M9XFxcIlwiKS5jb25jYXQoZmFpbFRleHRDbGFzc05hbWUsIFwiXFxcIj4kMTwvc3Bhbj5cIikpLnJlcGxhY2UoL14oXFwrLiopL2dtLCAoXCI8c3BhbiBjbGFzcz1cXFwiXCIpLmNvbmNhdChwYXNzVGV4dENsYXNzTmFtZSwgXCJcXFwiPiQxPC9zcGFuPlwiKSksIFwiPC9zcGFuPlwiKTtcbiAgfSBlbHNlIHtcbiAgICBmaW5hbE1lc3NhZ2UgPSBlc2NhcGVIdG1sKGVycm9yLm1lc3NhZ2UpO1xuICB9XG4gIGlmIChlcnJvci5tYXBwZWRFcnJvcnMgJiYgZXJyb3IubWFwcGVkRXJyb3JzWzBdICYmIGVycm9yLm1hcHBlZEVycm9yc1swXS5maWxlTmFtZS5lbmRzV2l0aChwYXRoKSAmJiBlcnJvci5tYXBwZWRFcnJvcnNbMF0uX29yaWdpbmFsU2NyaXB0Q29kZSkge1xuICAgIHZhciBtYXBwZWRFcnJvciA9IGVycm9yLm1hcHBlZEVycm9yc1swXTtcbiAgICB2YXIgX29yaWdpbmFsU2NyaXB0Q29kZSA9IG1hcHBlZEVycm9yLl9vcmlnaW5hbFNjcmlwdENvZGUgfHwgW107XG4gICAgdmFyIHdpZGVzdE51bWJlcl8xID0gTWF0aC5tYXguYXBwbHkoTWF0aCwgX29yaWdpbmFsU2NyaXB0Q29kZS5tYXAoZnVuY3Rpb24gKGNvZGUpIHtcbiAgICAgIHJldHVybiAoY29kZS5saW5lTnVtYmVyICsgXCJcIikubGVuZ3RoO1xuICAgIH0pKSArIDI7XG4gICAgdmFyIG1hcmdpbl8xID0gQXJyYXkuZnJvbSh7XG4gICAgICBsZW5ndGg6IHdpZGVzdE51bWJlcl8xXG4gICAgfSkubWFwKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBcIiBcIjtcbiAgICB9KTtcbiAgICBmaW5hbE1lc3NhZ2UgKz0gXCI8YnIgLz5cIjtcbiAgICBmaW5hbE1lc3NhZ2UgKz0gXCI8YnIgLz5cIjtcbiAgICBmaW5hbE1lc3NhZ2UgKz0gXCI8ZGl2PlwiO1xuICAgIF9vcmlnaW5hbFNjcmlwdENvZGUuZmlsdGVyKGZ1bmN0aW9uIChzKSB7XG4gICAgICByZXR1cm4gcy5jb250ZW50LnRyaW0oKTtcbiAgICB9KS5mb3JFYWNoKGZ1bmN0aW9uIChjb2RlKSB7XG4gICAgICB2YXIgY3VycmVudExpbmVNYXJnaW4gPSAoY29kZS5saW5lTnVtYmVyICsgXCJcIikubGVuZ3RoO1xuICAgICAgdmFyIG5ld01hcmdpbiA9IF9fc3ByZWFkQXJyYXkoW10sIG1hcmdpbl8xLCB0cnVlKTtcbiAgICAgIG5ld01hcmdpbi5sZW5ndGggLT0gY3VycmVudExpbmVNYXJnaW47XG4gICAgICBpZiAoY29kZS5oaWdobGlnaHQpIHtcbiAgICAgICAgbmV3TWFyZ2luLmxlbmd0aCAtPSAyO1xuICAgICAgfVxuICAgICAgdmFyIHRvQmVJbmRleCA9IGNvZGUuY29udGVudC5pbmRleE9mKFwiLnRvXCIpO1xuICAgICAgdmFyIHRvQmVNYXJnaW4gPSBBcnJheS5mcm9tKHtcbiAgICAgICAgbGVuZ3RoOiBtYXJnaW5fMS5sZW5ndGggKyB0b0JlSW5kZXggLSAod2lkZXN0TnVtYmVyXzEgLSAxKVxuICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gXCIgXCI7XG4gICAgICB9KTtcbiAgICAgIHZhciBjb250ZW50ID0gZXNjYXBlSHRtbChjb2RlLmNvbnRlbnQpLnJlcGxhY2UoLyhkZXNjcmliZXx0ZXN0fGl0KShcXCgpKCYjMDM5O3wmcXVvdDt8YCkoLiopKCYjMDM5O3wmcXVvdDt8YCkvbSwgKFwiPHNwYW4+JDEkMiQzPC9zcGFuPjxzcGFuIGNsYXNzPVxcXCJcIikuY29uY2F0KHRpdGxlVGV4dENsYXNzTmFtZSwgXCJcXFwiPiQ0PC9zcGFuPjxzcGFuPiQ1PC9zcGFuPlwiKSkucmVwbGFjZSgvKGV4cGVjdFxcKCkoLiopKFxcKVxcLi4qKSh0b1tcXHdcXGRdKikoXFwoKSguKikoXFwpKS9tLCAoXCI8c3Bhbj4kMTwvc3Bhbj48c3BhbiBjbGFzcz1cXFwiXCIpLmNvbmNhdChmYWlsVGV4dENsYXNzTmFtZSwgXCJcXFwiPiQyPC9zcGFuPjxzcGFuPiQzPC9zcGFuPjxzcGFuIHN0eWxlPVxcXCJ0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTsgZm9udC13ZWlnaHQ6IDkwMFxcXCI+JDQ8L3NwYW4+PHNwYW4+JDU8L3NwYW4+PHNwYW4gY2xhc3M9XFxcIlwiKS5jb25jYXQocGFzc1RleHRDbGFzc05hbWUsIFwiXFxcIj4kNjwvc3Bhbj48c3Bhbj4kNzwvc3Bhbj5cIikpO1xuICAgICAgZmluYWxNZXNzYWdlICs9IChcIjxkaXYgXCIpLmNvbmNhdChjb2RlLmhpZ2hsaWdodCA/IFwic3R5bGU9XFxcImZvbnQtd2VpZ2h0OjIwMDtcXFwiXCIgOiBcIlwiLCBcIj5cIikgKyAoY29kZS5oaWdobGlnaHQgPyAoXCI8c3BhbiBjbGFzcz1cXFwiXCIpLmNvbmNhdChmYWlsVGV4dENsYXNzTmFtZSwgXCJcXFwiPj48L3NwYW4+IFwiKSA6IFwiXCIpICsgbmV3TWFyZ2luLmpvaW4oXCJcIikgKyBlc2NhcGVIdG1sKFwiXCIgKyBjb2RlLmxpbmVOdW1iZXIpICsgXCIgfCBcIiArIGNvbnRlbnQgKyBcIjwvZGl2PlwiICsgKGNvZGUuaGlnaGxpZ2h0ID8gXCI8ZGl2PlwiICsgbWFyZ2luXzEuam9pbihcIlwiKSArIFwiIHwgXCIgKyB0b0JlTWFyZ2luLmpvaW4oXCJcIikgKyAoXCI8c3BhbiBjbGFzcz1cXFwiXCIpLmNvbmNhdChmYWlsVGV4dENsYXNzTmFtZSwgXCJcXFwiPl48L3NwYW4+XCIpICsgXCI8L2Rpdj5cIiA6IFwiXCIpO1xuICAgIH0pO1xuICAgIGZpbmFsTWVzc2FnZSArPSBcIjwvZGl2PlwiO1xuICB9XG4gIHJldHVybiBmaW5hbE1lc3NhZ2UucmVwbGFjZSgvKD86XFxyXFxufFxccnxcXG4pL2csIFwiPGJyIC8+XCIpO1xufTtcblxudmFyIGZpbGVDb250YWluZXIgPSBmYWtlQ3NzO1xudmFyIGdhcEJvdHRvbUNsYXNzTmFtZSQxID0gZmFrZUNzcztcbnZhciBmYWlsVGVzdENsYXNzTmFtZSA9IGZha2VDc3M7XG52YXIgbGFiZWxDbGFzc05hbWUkMSA9IGZha2VDc3M7XG52YXIgc3BlY0xhYmVsQ2xhc3NOYW1lID0gZmFrZUNzcztcbnZhciBmaWxlUGF0aEJ1dHRvbkNsYXNzTmFtZSA9IGZha2VDc3M7XG52YXIgZmlsZVBhdGhDbGFzc05hbWUgPSBmYWtlQ3NzO1xudmFyIGZpbGVOYW1lQ2xhc3NOYW1lID0gZmFrZUNzcztcbnZhciBTcGVjcyA9IGZ1bmN0aW9uIChfYSkge1xuICB2YXIgc3BlY3MgPSBfYS5zcGVjcywgb3BlblNwZWMgPSBfYS5vcGVuU3BlYywgc3RhdHVzID0gX2Euc3RhdHVzLCB2ZXJib3NlID0gX2EudmVyYm9zZSwgaGlkZVRlc3RzQW5kU3VwcmVzc0xvZ3MgPSBfYS5oaWRlVGVzdHNBbmRTdXByZXNzTG9ncztcbiAgdmFyIGNsYXNzTmFtZXMgPSB1c2VDbGFzc05hbWVzKCk7XG4gIHJldHVybiBqc3goRnJhZ21lbnQsIHtcbiAgICBjaGlsZHJlbjogc3BlY3MubWFwKGZ1bmN0aW9uIChzcGVjKSB7XG4gICAgICBpZiAoc3BlYy5lcnJvcikge1xuICAgICAgICByZXR1cm4ganN4cyhcImRpdlwiLCB7XG4gICAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKFwidGVzdC1zcGVjXCIsIFtnYXBCb3R0b21DbGFzc05hbWUkMV0pLFxuICAgICAgICAgIGNoaWxkcmVuOiBbanN4KFNwZWNMYWJlbCwge1xuICAgICAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKFwidGVzdC1zcGVjLWVycm9yXCIsIFtsYWJlbENsYXNzTmFtZSQxLCBmYWlsQmFja2dyb3VuZENsYXNzTmFtZV0pLFxuICAgICAgICAgICAgY2hpbGRyZW46IFwiRXJyb3JcIlxuICAgICAgICAgIH0pLCBqc3goRmlsZVBhdGgsIHtcbiAgICAgICAgICAgIG9uQ2xpY2s6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIG9wZW5TcGVjKHNwZWMubmFtZSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcGF0aDogc3BlYy5uYW1lXG4gICAgICAgICAgfSksIGpzeChGb3JtYXR0ZWRFcnJvciwge1xuICAgICAgICAgICAgZXJyb3I6IHNwZWMuZXJyb3IsXG4gICAgICAgICAgICBwYXRoOiBzcGVjLm5hbWVcbiAgICAgICAgICB9KV1cbiAgICAgICAgfSwgc3BlYy5uYW1lKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc0VtcHR5KHNwZWMpKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgdmFyIHRlc3RzID0gT2JqZWN0LnZhbHVlcyhzcGVjLnRlc3RzKTtcbiAgICAgIHZhciBkZXNjcmliZXMgPSBPYmplY3QudmFsdWVzKHNwZWMuZGVzY3JpYmVzKTtcbiAgICAgIHZhciBzdGF0cyA9IGdldFNwZWNUZXN0UmVzdWx0cyhzcGVjKTtcbiAgICAgIHJldHVybiBqc3hzKFwiZGl2XCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKFwidGVzdC1zcGVjLW5hbWVcIiwgW2dhcEJvdHRvbUNsYXNzTmFtZSQxXSksXG4gICAgICAgIGNoaWxkcmVuOiBbanN4cyhcImRpdlwiLCB7XG4gICAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKFwidGVzdC1zcGVjLW5hbWUtY29udGFpbmVyXCIsIFtmaWxlQ29udGFpbmVyXSksXG4gICAgICAgICAgY2hpbGRyZW46IFtzdGF0dXMgPT09IFwiY29tcGxldGVcIiA/IHN0YXRzLmZhaWwgPiAwID8ganN4KFNwZWNMYWJlbCwge1xuICAgICAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKFwidGVzdC1zcGVjLWNvbXBsZXRlXCIsIFtsYWJlbENsYXNzTmFtZSQxLCBmYWlsQmFja2dyb3VuZENsYXNzTmFtZV0pLFxuICAgICAgICAgICAgY2hpbGRyZW46IFwiRmFpbFwiXG4gICAgICAgICAgfSkgOiBqc3goU3BlY0xhYmVsLCB7XG4gICAgICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoXCJ0ZXN0LXNwZWMtcGFzc1wiLCBbbGFiZWxDbGFzc05hbWUkMSwgcGFzc0JhY2tncm91bmRDbGFzc05hbWVdKSxcbiAgICAgICAgICAgIGNoaWxkcmVuOiBcIlBhc3NcIlxuICAgICAgICAgIH0pIDoganN4KFNwZWNMYWJlbCwge1xuICAgICAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKFwidGVzdC1zcGVjLXJ1blwiLCBbbGFiZWxDbGFzc05hbWUkMSwgcnVuQmFja2dyb3VuZENsYXNzTmFtZV0pLFxuICAgICAgICAgICAgY2hpbGRyZW46IFwiUnVuXCJcbiAgICAgICAgICB9KSwganN4KEZpbGVQYXRoLCB7XG4gICAgICAgICAgICBvbkNsaWNrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIGlmICghaGlkZVRlc3RzQW5kU3VwcmVzc0xvZ3MpIHtcbiAgICAgICAgICAgICAgICBvcGVuU3BlYyhzcGVjLm5hbWUpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcGF0aDogc3BlYy5uYW1lXG4gICAgICAgICAgfSldXG4gICAgICAgIH0pLCB2ZXJib3NlICYmICFoaWRlVGVzdHNBbmRTdXByZXNzTG9ncyAmJiBqc3goVGVzdHMsIHtcbiAgICAgICAgICB0ZXN0czogdGVzdHNcbiAgICAgICAgfSksIHZlcmJvc2UgJiYgIWhpZGVUZXN0c0FuZFN1cHJlc3NMb2dzICYmIGpzeChEZXNjcmliZXMsIHtcbiAgICAgICAgICBkZXNjcmliZXM6IGRlc2NyaWJlc1xuICAgICAgICB9KSwgIWhpZGVUZXN0c0FuZFN1cHJlc3NMb2dzICYmIGdldEZhaWxpbmdUZXN0cyhzcGVjKS5tYXAoZnVuY3Rpb24gKHRlc3QpIHtcbiAgICAgICAgICByZXR1cm4ganN4cyhcImRpdlwiLCB7XG4gICAgICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoXCJ0ZXN0LXNwZWMtZXJyb3JcIiwgW2dhcEJvdHRvbUNsYXNzTmFtZSQxXSksXG4gICAgICAgICAgICBjaGlsZHJlbjogW2pzeHMoXCJkaXZcIiwge1xuICAgICAgICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoXCJ0ZXN0LXNwZWMtZXJyb3ItdGV4dFwiLCBbZmFpbFRlc3RDbGFzc05hbWUsIGZhaWxUZXh0Q2xhc3NOYW1lXSksXG4gICAgICAgICAgICAgIGNoaWxkcmVuOiBbXCJcXHUyNUNGIFwiLCB0ZXN0LmJsb2Nrcy5qb2luKFwiIOKAuiBcIiksIFwiIFxcdTIwM0EgXCIsIHRlc3QubmFtZV1cbiAgICAgICAgICAgIH0pLCB0ZXN0LmVycm9ycy5tYXAoZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGpzeChGb3JtYXR0ZWRFcnJvciwge1xuICAgICAgICAgICAgICAgIGVycm9yOiBlLFxuICAgICAgICAgICAgICAgIHBhdGg6IHRlc3QucGF0aFxuICAgICAgICAgICAgICB9LCAoXCJmYWlsaW5nLVwiKS5jb25jYXQodGVzdC5uYW1lLCBcIi1lcnJvclwiKSk7XG4gICAgICAgICAgICB9KV1cbiAgICAgICAgICB9LCAoXCJmYWlsaW5nLVwiKS5jb25jYXQodGVzdC5uYW1lKSk7XG4gICAgICAgIH0pXVxuICAgICAgfSwgc3BlYy5uYW1lKTtcbiAgICB9KVxuICB9KTtcbn07XG52YXIgU3BlY0xhYmVsID0gZnVuY3Rpb24gKF9hKSB7XG4gIHZhciBjaGlsZHJlbiA9IF9hLmNoaWxkcmVuLCBjbGFzc05hbWUgPSBfYS5jbGFzc05hbWU7XG4gIHZhciBjbGFzc05hbWVzID0gdXNlQ2xhc3NOYW1lcygpO1xuICByZXR1cm4ganN4KFwic3BhblwiLCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKFwidGVzdC1zcGVjLWxhYmVsXCIsIFtzcGVjTGFiZWxDbGFzc05hbWUsIGNsYXNzTmFtZV0pLFxuICAgIGNoaWxkcmVuOiBjaGlsZHJlblxuICB9KTtcbn07XG52YXIgRmlsZVBhdGggPSBmdW5jdGlvbiAoX2EpIHtcbiAgdmFyIG9uQ2xpY2sgPSBfYS5vbkNsaWNrLCBwYXRoID0gX2EucGF0aDtcbiAgdmFyIHBhcnRzID0gcGF0aC5zcGxpdChcIi9cIik7XG4gIHZhciBiYXNlUGF0aCA9IHBhcnRzLnNsaWNlKDAsIHBhcnRzLmxlbmd0aCAtIDEpLmpvaW4oXCIvXCIpICsgXCIvXCI7XG4gIHZhciBmaWxlTmFtZSA9IHBhcnRzW3BhcnRzLmxlbmd0aCAtIDFdO1xuICB2YXIgY2xhc3NOYW1lcyA9IHVzZUNsYXNzTmFtZXMoKTtcbiAgcmV0dXJuIGpzeHMoXCJidXR0b25cIiwge1xuICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhcInRlc3QtZmlsZW5hbWVcIiwgW2J1dHRvbkNsYXNzTmFtZSwgZmlsZVBhdGhCdXR0b25DbGFzc05hbWVdKSxcbiAgICBvbkNsaWNrOiBvbkNsaWNrLFxuICAgIHR5cGU6IFwiYnV0dG9uXCIsXG4gICAgY2hpbGRyZW46IFtqc3goXCJzcGFuXCIsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhcInRlc3QtZmlsZW5hbWUtYmFzZVwiLCBbZmlsZVBhdGhDbGFzc05hbWVdKSxcbiAgICAgIGNoaWxkcmVuOiBiYXNlUGF0aFxuICAgIH0pLCBqc3goXCJzcGFuXCIsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhcInRlc3QtZmlsZW5hbWUtZmlsZVwiLCBbZmlsZU5hbWVDbGFzc05hbWVdKSxcbiAgICAgIGNoaWxkcmVuOiBmaWxlTmFtZVxuICAgIH0pXVxuICB9KTtcbn07XG5cbnZhciBnYXBCb3R0b21DbGFzc05hbWUgPSBmYWtlQ3NzO1xudmFyIGxhYmVsQ2xhc3NOYW1lID0gZmFrZUNzcztcbnZhciBjb250YWluZXJDbGFzc05hbWUkMSA9IGZha2VDc3M7XG52YXIgU3VtbWFyeSA9IGZ1bmN0aW9uIChfYSkge1xuICB2YXIgc3VpdGVzID0gX2Euc3VpdGVzLCB0ZXN0cyA9IF9hLnRlc3RzLCBkdXJhdGlvbiA9IF9hLmR1cmF0aW9uO1xuICB2YXIgd2lkZXN0TGFiZWwgPSBcIlRlc3Qgc3VpdGVzOiBcIjtcbiAgdmFyIHdpdGhNYXJnaW4gPSBmdW5jdGlvbiAobGFiZWwpIHtcbiAgICB2YXIgZGlmZmVyZW5jZSA9IHdpZGVzdExhYmVsLmxlbmd0aCAtIGxhYmVsLmxlbmd0aDtcbiAgICB2YXIgbWFyZ2luID0gQXJyYXkuZnJvbSh7XG4gICAgICBsZW5ndGg6IGRpZmZlcmVuY2VcbiAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gXCIgXCI7XG4gICAgfSkuam9pbihcIlwiKTtcbiAgICByZXR1cm4gbGFiZWwgKyBtYXJnaW47XG4gIH07XG4gIHZhciBjbGFzc05hbWVzID0gdXNlQ2xhc3NOYW1lcygpO1xuICByZXR1cm4ganN4cyhcImRpdlwiLCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKFwidGVzdC1zdW1tYXJ5XCIsIFtjb250YWluZXJDbGFzc05hbWUkMV0pLFxuICAgIGNoaWxkcmVuOiBbanN4cyhcImRpdlwiLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoXCJ0ZXN0LXN1bW1hcnlcIiwgW2dhcEJvdHRvbUNsYXNzTmFtZV0pLFxuICAgICAgY2hpbGRyZW46IFtqc3goXCJzcGFuXCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKFwidGVzdC1zdW1tYXJ5LXN1aXRlcy1sYWJlbFwiLCBbbGFiZWxDbGFzc05hbWVdKSxcbiAgICAgICAgY2hpbGRyZW46IHdpZGVzdExhYmVsXG4gICAgICB9KSwgc3VpdGVzLmZhaWwgPiAwICYmIGpzeHMoXCJzcGFuXCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKFwidGVzdC1zdW1tYXJ5LXN1aXRlcy1mYWlsXCIsIFtmYWlsVGV4dENsYXNzTmFtZV0pLFxuICAgICAgICBjaGlsZHJlbjogW3N1aXRlcy5mYWlsLCBcIiBmYWlsZWQsXCIsIFwiIFwiXVxuICAgICAgfSksIHN1aXRlcy5wYXNzID4gMCAmJiBqc3hzKFwic3BhblwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhcInRlc3Qtc3VtbWFyeS1zdWl0ZXMtcGFzc1wiLCBbcGFzc1RleHRDbGFzc05hbWVdKSxcbiAgICAgICAgY2hpbGRyZW46IFtzdWl0ZXMucGFzcywgXCIgcGFzc2VkLFwiLCBcIiBcIl1cbiAgICAgIH0pLCBqc3hzKFwic3BhblwiLCB7XG4gICAgICAgIGNoaWxkcmVuOiBbc3VpdGVzLnRvdGFsLCBcIiB0b3RhbFwiXVxuICAgICAgfSldXG4gICAgfSksIGpzeHMoXCJkaXZcIiwge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKFwidGVzdC1zdW1tYXJ5XCIsIFtnYXBCb3R0b21DbGFzc05hbWVdKSxcbiAgICAgIGNoaWxkcmVuOiBbanN4KFwic3BhblwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhcInRlc3Qtc3VtbWFyeS1sYWJlbFwiLCBbbGFiZWxDbGFzc05hbWVdKSxcbiAgICAgICAgY2hpbGRyZW46IHdpdGhNYXJnaW4oXCJUZXN0czpcIilcbiAgICAgIH0pLCB0ZXN0cy5mYWlsID4gMCAmJiBqc3hzKFwic3BhblwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhcInRlc3Qtc3VtbWFyeS1mYWlsXCIsIFtmYWlsVGV4dENsYXNzTmFtZV0pLFxuICAgICAgICBjaGlsZHJlbjogW3Rlc3RzLmZhaWwsIFwiIGZhaWxlZCxcIiwgXCIgXCJdXG4gICAgICB9KSwgdGVzdHMuc2tpcCA+IDAgJiYganN4cyhcInNwYW5cIiwge1xuICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoXCJ0ZXN0LXN1bW1hcnktc2tpcFwiLCBbc2tpcFRleHRDbGFzc05hbWVdKSxcbiAgICAgICAgY2hpbGRyZW46IFt0ZXN0cy5za2lwLCBcIiBza2lwcGVkLFwiLCBcIiBcIl1cbiAgICAgIH0pLCB0ZXN0cy5wYXNzID4gMCAmJiBqc3hzKFwic3BhblwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhcInRlc3Qtc3VtbWFyeS1wYXNzXCIsIFtwYXNzVGV4dENsYXNzTmFtZV0pLFxuICAgICAgICBjaGlsZHJlbjogW3Rlc3RzLnBhc3MsIFwiIHBhc3NlZCxcIiwgXCIgXCJdXG4gICAgICB9KSwganN4cyhcInNwYW5cIiwge1xuICAgICAgICBjaGlsZHJlbjogW3Rlc3RzLnRvdGFsLCBcIiB0b3RhbFwiXVxuICAgICAgfSldXG4gICAgfSksIGpzeHMoXCJkaXZcIiwge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKFwidGVzdC1zdW1tYXJ5LWN1cmF0aW9uXCIsIFtsYWJlbENsYXNzTmFtZV0pLFxuICAgICAgY2hpbGRyZW46IFt3aXRoTWFyZ2luKFwiVGltZTpcIiksIGR1cmF0aW9uIC8gMTAwMCwgXCJzXCJdXG4gICAgfSldXG4gIH0pO1xufTtcblxudmFyIHByZXZpZXdBY3Rpb25zQ2xhc3NOYW1lID0gZmFrZUNzcztcbnZhciBJTklUSUFMX1NUQVRFID0ge1xuICBzcGVjczoge30sXG4gIHN0YXR1czogXCJpbml0aWFsaXNpbmdcIixcbiAgdmVyYm9zZTogZmFsc2UsXG4gIHdhdGNoTW9kZTogdHJ1ZSxcbiAgc3VpdGVPbmx5OiBmYWxzZSxcbiAgc3BlY3NDb3VudDogMFxufTtcbnZhciBTYW5kcGFja1Rlc3RzID0gZnVuY3Rpb24gKF9hKSB7XG4gIHZhciBfYiA9IF9hLnZlcmJvc2UsIHZlcmJvc2UgPSBfYiA9PT0gdm9pZCAwID8gZmFsc2UgOiBfYiwgX2MgPSBfYS53YXRjaE1vZGUsIHdhdGNoTW9kZSA9IF9jID09PSB2b2lkIDAgPyB0cnVlIDogX2MsIHN0eWxlID0gX2Euc3R5bGUsIGNsYXNzTmFtZSA9IF9hLmNsYXNzTmFtZSwgb25Db21wbGV0ZSA9IF9hLm9uQ29tcGxldGUsIGFjdGlvbnNDaGlsZHJlbiA9IF9hLmFjdGlvbnNDaGlsZHJlbiwgX2QgPSBfYS5zaG93VmVyYm9zZUJ1dHRvbiwgc2hvd1ZlcmJvc2VCdXR0b24gPSBfZCA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9kLCBfZSA9IF9hLnNob3dXYXRjaEJ1dHRvbiwgc2hvd1dhdGNoQnV0dG9uID0gX2UgPT09IHZvaWQgMCA/IHRydWUgOiBfZSwgX2YgPSBfYS5oaWRlVGVzdHNBbmRTdXByZXNzTG9ncywgaGlkZVRlc3RzQW5kU3VwcmVzc0xvZ3MgPSBfZiA9PT0gdm9pZCAwID8gZmFsc2UgOiBfZiwgcHJvcHMgPSBfX3Jlc3QoX2EsIFtcInZlcmJvc2VcIiwgXCJ3YXRjaE1vZGVcIiwgXCJzdHlsZVwiLCBcImNsYXNzTmFtZVwiLCBcIm9uQ29tcGxldGVcIiwgXCJhY3Rpb25zQ2hpbGRyZW5cIiwgXCJzaG93VmVyYm9zZUJ1dHRvblwiLCBcInNob3dXYXRjaEJ1dHRvblwiLCBcImhpZGVUZXN0c0FuZFN1cHJlc3NMb2dzXCJdKTtcbiAgdmFyIHRoZW1lID0gdXNlU2FuZHBhY2tUaGVtZSgpO1xuICB2YXIgX2cgPSB1c2VTYW5kcGFja0NsaWVudCgpLCBnZXRDbGllbnQgPSBfZy5nZXRDbGllbnQsIGlmcmFtZSA9IF9nLmlmcmFtZSwgbGlzdGVuID0gX2cubGlzdGVuLCBzYW5kcGFjayA9IF9nLnNhbmRwYWNrO1xuICB2YXIgX2ggPSBSZWFjdC51c2VTdGF0ZShfX2Fzc2lnbihfX2Fzc2lnbih7fSwgSU5JVElBTF9TVEFURSksIHtcbiAgICB2ZXJib3NlOiB2ZXJib3NlLFxuICAgIHdhdGNoTW9kZTogd2F0Y2hNb2RlXG4gIH0pKSwgc3RhdGUgPSBfaFswXSwgc2V0U3RhdGUgPSBfaFsxXTtcbiAgdmFyIHJ1bkFsbFRlc3RzID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgIHNldFN0YXRlKGZ1bmN0aW9uIChvbGRTdGF0ZSkge1xuICAgICAgcmV0dXJuIF9fYXNzaWduKF9fYXNzaWduKHt9LCBvbGRTdGF0ZSksIHtcbiAgICAgICAgc3RhdHVzOiBcInJ1bm5pbmdcIixcbiAgICAgICAgc3BlY3M6IHt9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICB2YXIgY2xpZW50ID0gZ2V0Q2xpZW50KCk7XG4gICAgaWYgKGNsaWVudCkge1xuICAgICAgY2xpZW50LmRpc3BhdGNoKHtcbiAgICAgICAgdHlwZTogXCJydW4tYWxsLXRlc3RzXCJcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwgW2dldENsaWVudF0pO1xuICB2YXIgcnVuU3BlYyA9IFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICBzZXRTdGF0ZShmdW5jdGlvbiAob2xkU3RhdGUpIHtcbiAgICAgIHJldHVybiBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgb2xkU3RhdGUpLCB7XG4gICAgICAgIHN0YXR1czogXCJydW5uaW5nXCIsXG4gICAgICAgIHNwZWNzOiB7fVxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgdmFyIGNsaWVudCA9IGdldENsaWVudCgpO1xuICAgIGlmIChjbGllbnQpIHtcbiAgICAgIGNsaWVudC5kaXNwYXRjaCh7XG4gICAgICAgIHR5cGU6IFwicnVuLXRlc3RzXCIsXG4gICAgICAgIHBhdGg6IHNhbmRwYWNrLmFjdGl2ZUZpbGVcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwgW2dldENsaWVudCwgc2FuZHBhY2suYWN0aXZlRmlsZV0pO1xuICB2YXIgdGVzdEZpbGVSZWdleCA9IC8uKlxcLih0ZXN0fHNwZWMpXFwuW3RqXXN4PyQvO1xuICB2YXIgaXNTcGVjT3BlbiA9IHNhbmRwYWNrLmFjdGl2ZUZpbGUubWF0Y2godGVzdEZpbGVSZWdleCkgIT09IG51bGw7XG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGN1cnJlbnREZXNjcmliZUJsb2NrcyA9IFtdO1xuICAgIHZhciBjdXJyZW50U3BlYyA9IFwiXCI7XG4gICAgdmFyIHVuc3Vic2NyaWJlID0gbGlzdGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICBpZiAoc3RhdGUuc3VpdGVPbmx5ICYmICgoXCJwYXRoXCIgaW4gZGF0YSkgJiYgZGF0YS5wYXRoICE9PSBzYW5kcGFjay5hY3RpdmVGaWxlIHx8IChcInRlc3RcIiBpbiBkYXRhKSAmJiAoXCJwYXRoXCIgaW4gZGF0YS50ZXN0KSAmJiBkYXRhLnRlc3QucGF0aCAhPT0gc2FuZHBhY2suYWN0aXZlRmlsZSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGRhdGEudHlwZSA9PT0gXCJhY3Rpb25cIiAmJiBkYXRhLmFjdGlvbiA9PT0gXCJjbGVhci1lcnJvcnNcIiAmJiBkYXRhLnNvdXJjZSA9PT0gXCJqZXN0XCIpIHtcbiAgICAgICAgY3VycmVudFNwZWMgPSBkYXRhLnBhdGg7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChkYXRhLnR5cGUgPT09IFwidGVzdFwiKSB7XG4gICAgICAgIGlmIChkYXRhLmV2ZW50ID09PSBcImluaXRpYWxpemVfdGVzdHNcIikge1xuICAgICAgICAgIGN1cnJlbnREZXNjcmliZUJsb2NrcyA9IFtdO1xuICAgICAgICAgIGN1cnJlbnRTcGVjID0gXCJcIjtcbiAgICAgICAgICBpZiAoc3RhdGUud2F0Y2hNb2RlKSB7XG4gICAgICAgICAgICByZXR1cm4gcnVuQWxsVGVzdHMoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHNldFN0YXRlKGZ1bmN0aW9uIChvbGRTdGF0ZSkge1xuICAgICAgICAgICAgICByZXR1cm4gX19hc3NpZ24oX19hc3NpZ24oe30sIG9sZFN0YXRlKSwge1xuICAgICAgICAgICAgICAgIHN0YXR1czogXCJpZGxlXCIsXG4gICAgICAgICAgICAgICAgc3BlY3M6IHt9XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRhLmV2ZW50ID09PSBcInRlc3RfY291bnRcIikge1xuICAgICAgICAgIHJldHVybiBzZXRTdGF0ZShmdW5jdGlvbiAob2xkU3RhdGUpIHtcbiAgICAgICAgICAgIHJldHVybiBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgb2xkU3RhdGUpLCB7XG4gICAgICAgICAgICAgIHNwZWNzQ291bnQ6IGRhdGEuY291bnRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRhLmV2ZW50ID09PSBcInRvdGFsX3Rlc3Rfc3RhcnRcIikge1xuICAgICAgICAgIGN1cnJlbnREZXNjcmliZUJsb2NrcyA9IFtdO1xuICAgICAgICAgIHJldHVybiBzZXRTdGF0ZShmdW5jdGlvbiAob2xkU3RhdGUpIHtcbiAgICAgICAgICAgIHJldHVybiBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgb2xkU3RhdGUpLCB7XG4gICAgICAgICAgICAgIHN0YXR1czogXCJydW5uaW5nXCJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRhLmV2ZW50ID09PSBcInRvdGFsX3Rlc3RfZW5kXCIpIHtcbiAgICAgICAgICByZXR1cm4gc2V0U3RhdGUoZnVuY3Rpb24gKG9sZFN0YXRlKSB7XG4gICAgICAgICAgICBpZiAob25Db21wbGV0ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgIG9uQ29tcGxldGUob2xkU3RhdGUuc3BlY3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIF9fYXNzaWduKF9fYXNzaWduKHt9LCBvbGRTdGF0ZSksIHtcbiAgICAgICAgICAgICAgc3RhdHVzOiBcImNvbXBsZXRlXCJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRhLmV2ZW50ID09PSBcImFkZF9maWxlXCIpIHtcbiAgICAgICAgICByZXR1cm4gc2V0U3RhdGUoc2V0KFtcInNwZWNzXCIsIGRhdGEucGF0aF0sIHtcbiAgICAgICAgICAgIGRlc2NyaWJlczoge30sXG4gICAgICAgICAgICB0ZXN0czoge30sXG4gICAgICAgICAgICBuYW1lOiBkYXRhLnBhdGhcbiAgICAgICAgICB9KSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGEuZXZlbnQgPT09IFwicmVtb3ZlX2ZpbGVcIikge1xuICAgICAgICAgIHJldHVybiBzZXRTdGF0ZShmdW5jdGlvbiAob2xkU3RhdGUpIHtcbiAgICAgICAgICAgIHZhciBzcGVjcyA9IE9iamVjdC5lbnRyaWVzKG9sZFN0YXRlLnNwZWNzKS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgX2EpIHtcbiAgICAgICAgICAgICAgdmFyIF9iO1xuICAgICAgICAgICAgICB2YXIga2V5ID0gX2FbMF0sIHZhbHVlID0gX2FbMV07XG4gICAgICAgICAgICAgIGlmIChrZXkgPT09IGRhdGEucGF0aCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhY2M7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9fYXNzaWduKF9fYXNzaWduKHt9LCBhY2MpLCAoX2IgPSB7fSwgX2Jba2V5XSA9IHZhbHVlLCBfYikpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCB7fSk7XG4gICAgICAgICAgICByZXR1cm4gX19hc3NpZ24oX19hc3NpZ24oe30sIG9sZFN0YXRlKSwge1xuICAgICAgICAgICAgICBzcGVjczogc3BlY3NcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRhLmV2ZW50ID09PSBcImZpbGVfZXJyb3JcIikge1xuICAgICAgICAgIHJldHVybiBzZXRTdGF0ZShzZXQoW1wic3BlY3NcIiwgZGF0YS5wYXRoLCBcImVycm9yXCJdLCBkYXRhLmVycm9yKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGEuZXZlbnQgPT09IFwiZGVzY3JpYmVfc3RhcnRcIikge1xuICAgICAgICAgIGN1cnJlbnREZXNjcmliZUJsb2Nrcy5wdXNoKGRhdGEuYmxvY2tOYW1lKTtcbiAgICAgICAgICB2YXIgX2EgPSBzcGxpdFRhaWwoY3VycmVudERlc2NyaWJlQmxvY2tzKSwgZGVzY3JpYmVQYXRoID0gX2FbMF0sIGN1cnJlbnREZXNjcmliZSA9IF9hWzFdO1xuICAgICAgICAgIHZhciBzcGVjID0gY3VycmVudFNwZWM7XG4gICAgICAgICAgaWYgKGN1cnJlbnREZXNjcmliZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBzZXRTdGF0ZShzZXQoX19zcHJlYWRBcnJheShfX3NwcmVhZEFycmF5KFtcInNwZWNzXCIsIHNwZWMsIFwiZGVzY3JpYmVzXCJdLCBmbGF0TWFwKGRlc2NyaWJlUGF0aCwgZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgICAgIHJldHVybiBbbmFtZSwgXCJkZXNjcmliZXNcIl07XG4gICAgICAgICAgfSksIHRydWUpLCBbY3VycmVudERlc2NyaWJlXSwgZmFsc2UpLCB7XG4gICAgICAgICAgICBuYW1lOiBkYXRhLmJsb2NrTmFtZSxcbiAgICAgICAgICAgIHRlc3RzOiB7fSxcbiAgICAgICAgICAgIGRlc2NyaWJlczoge31cbiAgICAgICAgICB9KSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGEuZXZlbnQgPT09IFwiZGVzY3JpYmVfZW5kXCIpIHtcbiAgICAgICAgICBjdXJyZW50RGVzY3JpYmVCbG9ja3MucG9wKCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRhLmV2ZW50ID09PSBcImFkZF90ZXN0XCIpIHtcbiAgICAgICAgICB2YXIgX2IgPSBzcGxpdFRhaWwoY3VycmVudERlc2NyaWJlQmxvY2tzKSwgZGVzY3JpYmVQYXRoID0gX2JbMF0sIGN1cnJlbnREZXNjcmliZSA9IF9iWzFdO1xuICAgICAgICAgIHZhciB0ZXN0XzEgPSB7XG4gICAgICAgICAgICBzdGF0dXM6IFwiaWRsZVwiLFxuICAgICAgICAgICAgZXJyb3JzOiBbXSxcbiAgICAgICAgICAgIG5hbWU6IGRhdGEudGVzdE5hbWUsXG4gICAgICAgICAgICBibG9ja3M6IF9fc3ByZWFkQXJyYXkoW10sIGN1cnJlbnREZXNjcmliZUJsb2NrcywgdHJ1ZSksXG4gICAgICAgICAgICBwYXRoOiBkYXRhLnBhdGhcbiAgICAgICAgICB9O1xuICAgICAgICAgIGlmIChjdXJyZW50RGVzY3JpYmUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIHNldFN0YXRlKHNldChbXCJzcGVjc1wiLCBkYXRhLnBhdGgsIFwidGVzdHNcIiwgZGF0YS50ZXN0TmFtZV0sIHRlc3RfMSkpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gc2V0U3RhdGUoc2V0KF9fc3ByZWFkQXJyYXkoX19zcHJlYWRBcnJheShbXCJzcGVjc1wiLCBkYXRhLnBhdGgsIFwiZGVzY3JpYmVzXCJdLCBmbGF0TWFwKGRlc2NyaWJlUGF0aCwgZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIFtuYW1lLCBcImRlc2NyaWJlc1wiXTtcbiAgICAgICAgICAgIH0pLCB0cnVlKSwgW2N1cnJlbnREZXNjcmliZSwgXCJ0ZXN0c1wiLCBkYXRhLnRlc3ROYW1lXSwgZmFsc2UpLCB0ZXN0XzEpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGEuZXZlbnQgPT09IFwidGVzdF9zdGFydFwiKSB7XG4gICAgICAgICAgdmFyIHRlc3RfMiA9IGRhdGEudGVzdDtcbiAgICAgICAgICB2YXIgX2MgPSBzcGxpdFRhaWwodGVzdF8yLmJsb2NrcyksIGRlc2NyaWJlUGF0aCA9IF9jWzBdLCBjdXJyZW50RGVzY3JpYmUgPSBfY1sxXTtcbiAgICAgICAgICB2YXIgc3RhcnRlZFRlc3QgPSB7XG4gICAgICAgICAgICBzdGF0dXM6IFwicnVubmluZ1wiLFxuICAgICAgICAgICAgbmFtZTogdGVzdF8yLm5hbWUsXG4gICAgICAgICAgICBibG9ja3M6IHRlc3RfMi5ibG9ja3MsXG4gICAgICAgICAgICBwYXRoOiB0ZXN0XzIucGF0aCxcbiAgICAgICAgICAgIGVycm9yczogW11cbiAgICAgICAgICB9O1xuICAgICAgICAgIGlmIChjdXJyZW50RGVzY3JpYmUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIHNldFN0YXRlKHNldChbXCJzcGVjc1wiLCB0ZXN0XzIucGF0aCwgXCJ0ZXN0c1wiLCB0ZXN0XzIubmFtZV0sIHN0YXJ0ZWRUZXN0KSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBzZXRTdGF0ZShzZXQoX19zcHJlYWRBcnJheShfX3NwcmVhZEFycmF5KFtcInNwZWNzXCIsIHRlc3RfMi5wYXRoLCBcImRlc2NyaWJlc1wiXSwgZmxhdE1hcChkZXNjcmliZVBhdGgsIGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgICAgICAgIHJldHVybiBbbmFtZSwgXCJkZXNjcmliZXNcIl07XG4gICAgICAgICAgICB9KSwgdHJ1ZSksIFtjdXJyZW50RGVzY3JpYmUsIFwidGVzdHNcIiwgdGVzdF8yLm5hbWVdLCBmYWxzZSksIHN0YXJ0ZWRUZXN0KSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRhLmV2ZW50ID09PSBcInRlc3RfZW5kXCIpIHtcbiAgICAgICAgICB2YXIgdGVzdF8zID0gZGF0YS50ZXN0O1xuICAgICAgICAgIHZhciBfZCA9IHNwbGl0VGFpbCh0ZXN0XzMuYmxvY2tzKSwgZGVzY3JpYmVQYXRoID0gX2RbMF0sIGN1cnJlbnREZXNjcmliZSA9IF9kWzFdO1xuICAgICAgICAgIHZhciBlbmRlZFRlc3QgPSB7XG4gICAgICAgICAgICBzdGF0dXM6IHRlc3RfMy5zdGF0dXMsXG4gICAgICAgICAgICBlcnJvcnM6IHRlc3RfMy5lcnJvcnMsXG4gICAgICAgICAgICBkdXJhdGlvbjogdGVzdF8zLmR1cmF0aW9uLFxuICAgICAgICAgICAgbmFtZTogdGVzdF8zLm5hbWUsXG4gICAgICAgICAgICBibG9ja3M6IHRlc3RfMy5ibG9ja3MsXG4gICAgICAgICAgICBwYXRoOiB0ZXN0XzMucGF0aFxuICAgICAgICAgIH07XG4gICAgICAgICAgaWYgKGN1cnJlbnREZXNjcmliZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gc2V0U3RhdGUoc2V0KFtcInNwZWNzXCIsIHRlc3RfMy5wYXRoLCBcInRlc3RzXCIsIHRlc3RfMy5uYW1lXSwgZW5kZWRUZXN0KSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBzZXRTdGF0ZShzZXQoX19zcHJlYWRBcnJheShfX3NwcmVhZEFycmF5KFtcInNwZWNzXCIsIHRlc3RfMy5wYXRoLCBcImRlc2NyaWJlc1wiXSwgZmxhdE1hcChkZXNjcmliZVBhdGgsIGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgICAgICAgIHJldHVybiBbbmFtZSwgXCJkZXNjcmliZXNcIl07XG4gICAgICAgICAgICB9KSwgdHJ1ZSksIFtjdXJyZW50RGVzY3JpYmUsIFwidGVzdHNcIiwgdGVzdF8zLm5hbWVdLCBmYWxzZSksIGVuZGVkVGVzdCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiB1bnN1YnNjcmliZTtcbiAgfSwgW3N0YXRlLnN1aXRlT25seSwgc3RhdGUud2F0Y2hNb2RlLCBzYW5kcGFjay5hY3RpdmVGaWxlXSk7XG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiB3YXRjaE1vZGUoKSB7XG4gICAgdmFyIHVuc3Vuc2NyaWJlID0gbGlzdGVuKGZ1bmN0aW9uIChfYSkge1xuICAgICAgdmFyIHR5cGUgPSBfYS50eXBlO1xuICAgICAgaWYgKHR5cGUgPT09IFwiZG9uZVwiICYmIHN0YXRlLndhdGNoTW9kZSkge1xuICAgICAgICBpZiAoaXNTcGVjT3Blbikge1xuICAgICAgICAgIHJ1blNwZWMoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBydW5BbGxUZXN0cygpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHVuc3Vuc2NyaWJlO1xuICB9LCBbcnVuU3BlYywgcnVuQWxsVGVzdHMsIHN0YXRlLndhdGNoTW9kZSwgaXNTcGVjT3Blbl0pO1xuICB2YXIgb3BlblNwZWMgPSBmdW5jdGlvbiAoZmlsZSkge1xuICAgIHNhbmRwYWNrLnNldEFjdGl2ZUZpbGUoZmlsZSk7XG4gIH07XG4gIHZhciBzcGVjcyA9IE9iamVjdC52YWx1ZXMoc3RhdGUuc3BlY3MpO1xuICB2YXIgZHVyYXRpb24gPSBnZXREdXJhdGlvbihzcGVjcyk7XG4gIHZhciB0ZXN0UmVzdWx0cyA9IGdldEFsbFRlc3RSZXN1bHRzKHNwZWNzKTtcbiAgdmFyIHN1aXRlUmVzdWx0cyA9IGdldEFsbFN1aXRlUmVzdWx0cyhzcGVjcyk7XG4gIHZhciBjbGFzc05hbWVzID0gdXNlQ2xhc3NOYW1lcygpO1xuICByZXR1cm4ganN4cyhTYW5kcGFja1N0YWNrLCBfX2Fzc2lnbih7XG4gICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKFwidGVzdHNcIiwgW2NsYXNzTmFtZV0pLFxuICAgIHN0eWxlOiBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgc2V0VGVzdFRoZW1lKHRoZW1lLnRoZW1lTW9kZSA9PT0gXCJkYXJrXCIpKSwgc3R5bGUpXG4gIH0sIHByb3BzLCB7XG4gICAgY2hpbGRyZW46IFtqc3goXCJpZnJhbWVcIiwge1xuICAgICAgcmVmOiBpZnJhbWUsXG4gICAgICBzdHlsZToge1xuICAgICAgICBkaXNwbGF5OiBcIm5vbmVcIlxuICAgICAgfSxcbiAgICAgIHRpdGxlOiBcIlNhbmRwYWNrIFRlc3RzXCJcbiAgICB9KSwganN4KEhlYWRlciQxLCB7XG4gICAgICBoaWRlVGVzdHNBbmRTdXByZXNzTG9nczogaGlkZVRlc3RzQW5kU3VwcmVzc0xvZ3MsXG4gICAgICBzZXRTdWl0ZU9ubHk6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHNldFN0YXRlKGZ1bmN0aW9uIChzKSB7XG4gICAgICAgICAgcmV0dXJuIF9fYXNzaWduKF9fYXNzaWduKHt9LCBzKSwge1xuICAgICAgICAgICAgc3VpdGVPbmx5OiAhcy5zdWl0ZU9ubHlcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgICAgc2V0VmVyYm9zZTogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gc2V0U3RhdGUoZnVuY3Rpb24gKHMpIHtcbiAgICAgICAgICByZXR1cm4gX19hc3NpZ24oX19hc3NpZ24oe30sIHMpLCB7XG4gICAgICAgICAgICB2ZXJib3NlOiAhcy52ZXJib3NlXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIHNldFdhdGNoTW9kZTogZnVuY3Rpb24gKCkge1xuICAgICAgICBzZXRTdGF0ZShmdW5jdGlvbiAocykge1xuICAgICAgICAgIHJldHVybiBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgcyksIHtcbiAgICAgICAgICAgIHdhdGNoTW9kZTogIXMud2F0Y2hNb2RlXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIHNob3dTdWl0ZXNPbmx5OiBzdGF0ZS5zcGVjc0NvdW50ID4gMSxcbiAgICAgIHNob3dWZXJib3NlQnV0dG9uOiBzaG93VmVyYm9zZUJ1dHRvbixcbiAgICAgIHNob3dXYXRjaEJ1dHRvbjogc2hvd1dhdGNoQnV0dG9uLFxuICAgICAgc3RhdHVzOiBzdGF0ZS5zdGF0dXMsXG4gICAgICBzdWl0ZU9ubHk6IHN0YXRlLnN1aXRlT25seSxcbiAgICAgIHZlcmJvc2U6IHN0YXRlLnZlcmJvc2UsXG4gICAgICB3YXRjaE1vZGU6IHN0YXRlLndhdGNoTW9kZVxuICAgIH0pLCBzdGF0ZS5zdGF0dXMgPT09IFwicnVubmluZ1wiIHx8IHN0YXRlLnN0YXR1cyA9PT0gXCJpbml0aWFsaXNpbmdcIiA/IGpzeChMb2FkaW5nLCB7XG4gICAgICBzaG93T3BlbkluQ29kZVNhbmRib3g6IGZhbHNlXG4gICAgfSkgOiBqc3hzKFwiZGl2XCIsIHtcbiAgICAgIGNsYXNzTmFtZTogcHJldmlld0FjdGlvbnNDbGFzc05hbWUudG9TdHJpbmcoKSxcbiAgICAgIGNoaWxkcmVuOiBbYWN0aW9uc0NoaWxkcmVuLCBqc3goUnVuQnV0dG9uLCB7XG4gICAgICAgIG9uQ2xpY2s6IHN0YXRlLnN1aXRlT25seSA/IHJ1blNwZWMgOiBydW5BbGxUZXN0c1xuICAgICAgfSldXG4gICAgfSksIGpzeChcImRpdlwiLCB7XG4gICAgICBjbGFzc05hbWU6IGNvbnRhaW5lckNsYXNzTmFtZS50b1N0cmluZygpLFxuICAgICAgY2hpbGRyZW46IHNwZWNzLmxlbmd0aCA9PT0gMCAmJiBzdGF0ZS5zdGF0dXMgPT09IFwiY29tcGxldGVcIiA/IGpzeHMoXCJkaXZcIiwge1xuICAgICAgICBjbGFzc05hbWU6IGZpbGVFcnJvckNvbnRhaW5lckNsYXNzTmFtZS50b1N0cmluZygpLFxuICAgICAgICBjaGlsZHJlbjogW2pzeChcInBcIiwge1xuICAgICAgICAgIGNoaWxkcmVuOiBcIk5vIHRlc3QgZmlsZXMgZm91bmQuXCJcbiAgICAgICAgfSksIGpzeHMoXCJwXCIsIHtcbiAgICAgICAgICBjaGlsZHJlbjogW1wiVGVzdCBtYXRjaDpcIiwgXCIgXCIsIGpzeChcInNwYW5cIiwge1xuICAgICAgICAgICAgY2xhc3NOYW1lOiBmYWlsVGV4dENsYXNzTmFtZS50b1N0cmluZygpLFxuICAgICAgICAgICAgY2hpbGRyZW46IHRlc3RGaWxlUmVnZXgudG9TdHJpbmcoKVxuICAgICAgICAgIH0pXVxuICAgICAgICB9KV1cbiAgICAgIH0pIDoganN4cyhGcmFnbWVudCwge1xuICAgICAgICBjaGlsZHJlbjogW2pzeChTcGVjcywge1xuICAgICAgICAgIGhpZGVUZXN0c0FuZFN1cHJlc3NMb2dzOiBoaWRlVGVzdHNBbmRTdXByZXNzTG9ncyxcbiAgICAgICAgICBvcGVuU3BlYzogb3BlblNwZWMsXG4gICAgICAgICAgc3BlY3M6IHNwZWNzLFxuICAgICAgICAgIHN0YXR1czogc3RhdGUuc3RhdHVzLFxuICAgICAgICAgIHZlcmJvc2U6IHN0YXRlLnZlcmJvc2VcbiAgICAgICAgfSksIHN0YXRlLnN0YXR1cyA9PT0gXCJjb21wbGV0ZVwiICYmIHRlc3RSZXN1bHRzLnRvdGFsID4gMCAmJiBqc3goU3VtbWFyeSwge1xuICAgICAgICAgIGR1cmF0aW9uOiBkdXJhdGlvbixcbiAgICAgICAgICBzdWl0ZXM6IHN1aXRlUmVzdWx0cyxcbiAgICAgICAgICB0ZXN0czogdGVzdFJlc3VsdHNcbiAgICAgICAgfSldXG4gICAgICB9KVxuICAgIH0pXVxuICB9KSk7XG59O1xudmFyIGNvbnRhaW5lckNsYXNzTmFtZSA9IGZha2VDc3M7XG52YXIgZmlsZUVycm9yQ29udGFpbmVyQ2xhc3NOYW1lID0gZmFrZUNzcztcblxudmFyIFNZTlRBWF9FUlJPUl9QQVRURVJOID0gW1wiU3ludGF4RXJyb3I6IFwiLCBcIkVycm9yIGluIHNhbmRib3g6XCJdO1xudmFyIENMRUFSX0xPRyA9IHtcbiAgaWQ6IFwicmFuZG9tXCIsXG4gIG1ldGhvZDogXCJjbGVhclwiLFxuICBkYXRhOiBbXCJDb25zb2xlIHdhcyBjbGVhcmVkXCJdXG59O1xudmFyIFRSQU5TRk9STUVEX1RZUEVfS0VZID0gXCJAdFwiO1xudmFyIFRSQU5TRk9STUVEX1RZUEVfS0VZX0FMVEVSTkFURSA9IFwiI0B0XCI7XG52YXIgQ0lSQ1VMQVJfUkVGX0tFWSA9IFwiQHJcIjtcbnZhciBNQVhfTEVOR1RIX1NUUklORyA9IDEwMDAwO1xudmFyIE1BWF9ORVNUX0xFVkVMID0gMjtcbnZhciBNQVhfS0VZUyA9IDQwMDtcbnZhciBNQVhfTUVTU0FHRV9DT1VOVCA9IE1BWF9LRVlTICogMjtcblxudmFyIEdMT0JBTCA9IChmdW5jdGlvbiBnZXRHbG9iYWwoKSB7XG4gIHZhciBzYXZlZEV2YWwgPSBldmFsO1xuICByZXR1cm4gc2F2ZWRFdmFsKFwidGhpc1wiKTtcbn0pKCk7XG52YXIgQVJSQVlfQlVGRkVSX1NVUFBPUlRFRCA9IHR5cGVvZiBBcnJheUJ1ZmZlciA9PT0gXCJmdW5jdGlvblwiO1xudmFyIE1BUF9TVVBQT1JURUQgPSB0eXBlb2YgTWFwID09PSBcImZ1bmN0aW9uXCI7XG52YXIgU0VUX1NVUFBPUlRFRCA9IHR5cGVvZiBTZXQgPT09IFwiZnVuY3Rpb25cIjtcbnZhciBBcml0aG1ldGljO1xuKGZ1bmN0aW9uIChBcml0aG1ldGljKSB7XG4gIEFyaXRobWV0aWNbQXJpdGhtZXRpY1tcImluZmluaXR5XCJdID0gMF0gPSBcImluZmluaXR5XCI7XG4gIEFyaXRobWV0aWNbQXJpdGhtZXRpY1tcIm1pbnVzSW5maW5pdHlcIl0gPSAxXSA9IFwibWludXNJbmZpbml0eVwiO1xuICBBcml0aG1ldGljW0FyaXRobWV0aWNbXCJtaW51c1plcm9cIl0gPSAyXSA9IFwibWludXNaZXJvXCI7XG59KShBcml0aG1ldGljIHx8IChBcml0aG1ldGljID0ge30pKTtcbnZhciB0cmFuc2Zvcm1lcnMgPSB7XG4gIEFyaXRobWV0aWM6IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgaWYgKGRhdGEgPT09IEFyaXRobWV0aWMuaW5maW5pdHkpIHJldHVybiBJbmZpbml0eTtcbiAgICBpZiAoZGF0YSA9PT0gQXJpdGhtZXRpYy5taW51c0luZmluaXR5KSByZXR1cm4gLUluZmluaXR5O1xuICAgIGlmIChkYXRhID09PSBBcml0aG1ldGljLm1pbnVzWmVybykgcmV0dXJuIC0wO1xuICAgIHJldHVybiBkYXRhO1xuICB9LFxuICBIVE1MRWxlbWVudDogZnVuY3Rpb24gKGRhdGEpIHtcbiAgICB2YXIgc2FuZGJveCA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudChcInNhbmRib3hcIik7XG4gICAgdHJ5IHtcbiAgICAgIHZhciBlbGVtZW50ID0gc2FuZGJveC5jcmVhdGVFbGVtZW50KGRhdGEudGFnTmFtZSk7XG4gICAgICBlbGVtZW50LmlubmVySFRNTCA9IGRhdGEuaW5uZXJIVE1MO1xuICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IE9iamVjdC5rZXlzKGRhdGEuYXR0cmlidXRlcyk7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIHZhciBhdHRyaWJ1dGUgPSBfYVtfaV07XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoYXR0cmlidXRlLCBkYXRhLmF0dHJpYnV0ZXNbYXR0cmlidXRlXSk7XG4gICAgICAgIH0gY2F0Y2ggKF9iKSB7fVxuICAgICAgfVxuICAgICAgcmV0dXJuIGVsZW1lbnQ7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICB9LFxuICBGdW5jdGlvbjogZnVuY3Rpb24gKGRhdGEpIHtcbiAgICB2YXIgdGVtcEZ1biA9IGZ1bmN0aW9uICgpIHt9O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0ZW1wRnVuLCBcInRvU3RyaW5nXCIsIHtcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAoXCJmdW5jdGlvbiBcIikuY29uY2F0KGRhdGEubmFtZSwgXCIoKSB7XCIpLmNvbmNhdChkYXRhLmJvZHksIFwifVwiKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gdGVtcEZ1bjtcbiAgfSxcbiAgXCJbW05hTl1dXCI6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gTmFOO1xuICB9LFxuICBcIltbdW5kZWZpbmVkXV1cIjogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB2b2lkIDA7XG4gIH0sXG4gIFwiW1tEYXRlXV1cIjogZnVuY3Rpb24gKHZhbCkge1xuICAgIHZhciBkYXRlID0gbmV3IERhdGUoKTtcbiAgICBkYXRlLnNldFRpbWUodmFsKTtcbiAgICByZXR1cm4gZGF0ZTtcbiAgfSxcbiAgXCJbW1JlZ0V4cF1dXCI6IGZ1bmN0aW9uICh2YWwpIHtcbiAgICByZXR1cm4gbmV3IFJlZ0V4cCh2YWwuc3JjLCB2YWwuZmxhZ3MpO1xuICB9LFxuICBcIltbRXJyb3JdXVwiOiBmdW5jdGlvbiAodmFsKSB7XG4gICAgdmFyIEN0b3IgPSBHTE9CQUxbdmFsLm5hbWVdIHx8IEVycm9yO1xuICAgIHZhciBlcnIgPSBuZXcgQ3Rvcih2YWwubWVzc2FnZSk7XG4gICAgZXJyLnN0YWNrID0gdmFsLnN0YWNrO1xuICAgIHJldHVybiBlcnI7XG4gIH0sXG4gIFwiW1tBcnJheUJ1ZmZlcl1dXCI6IGZ1bmN0aW9uICh2YWwpIHtcbiAgICBpZiAoQVJSQVlfQlVGRkVSX1NVUFBPUlRFRCkge1xuICAgICAgdmFyIGJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcih2YWwubGVuZ3RoKTtcbiAgICAgIHZhciB2aWV3ID0gbmV3IEludDhBcnJheShidWZmZXIpO1xuICAgICAgdmlldy5zZXQodmFsKTtcbiAgICAgIHJldHVybiBidWZmZXI7XG4gICAgfVxuICAgIHJldHVybiB2YWw7XG4gIH0sXG4gIFwiW1tUeXBlZEFycmF5XV1cIjogZnVuY3Rpb24gKHZhbCkge1xuICAgIHJldHVybiB0eXBlb2YgR0xPQkFMW3ZhbC5jdG9yTmFtZV0gPT09IFwiZnVuY3Rpb25cIiA/IG5ldyBHTE9CQUxbdmFsLmN0b3JOYW1lXSh2YWwuYXJyKSA6IHZhbC5hcnI7XG4gIH0sXG4gIFwiW1tNYXBdXVwiOiBmdW5jdGlvbiAodmFsKSB7XG4gICAgaWYgKE1BUF9TVVBQT1JURUQpIHtcbiAgICAgIHZhciBtYXAgPSBuZXcgTWFwKCk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZhbC5sZW5ndGg7IGkgKz0gMikgbWFwLnNldCh2YWxbaV0sIHZhbFtpICsgMV0pO1xuICAgICAgcmV0dXJuIG1hcDtcbiAgICB9XG4gICAgdmFyIGt2QXJyID0gW107XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCB2YWwubGVuZ3RoOyBqICs9IDIpIGt2QXJyLnB1c2goW3ZhbFtpXSwgdmFsW2kgKyAxXV0pO1xuICAgIHJldHVybiBrdkFycjtcbiAgfSxcbiAgXCJbW1NldF1dXCI6IGZ1bmN0aW9uICh2YWwpIHtcbiAgICBpZiAoU0VUX1NVUFBPUlRFRCkge1xuICAgICAgdmFyIHNldCA9IG5ldyBTZXQoKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmFsLmxlbmd0aDsgaSsrKSBzZXQuYWRkKHZhbFtpXSk7XG4gICAgICByZXR1cm4gc2V0O1xuICAgIH1cbiAgICByZXR1cm4gdmFsO1xuICB9XG59O1xuXG52YXIgZm9ybWF0U3ltYm9scyA9IGZ1bmN0aW9uIChtZXNzYWdlKSB7XG4gIHZhciBfYTtcbiAgaWYgKHR5cGVvZiBtZXNzYWdlID09PSBcInN0cmluZ1wiIHx8IHR5cGVvZiBtZXNzYWdlID09PSBcIm51bWJlclwiIHx8IG1lc3NhZ2UgPT09IG51bGwpIHtcbiAgICByZXR1cm4gbWVzc2FnZTtcbiAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KG1lc3NhZ2UpKSB7XG4gICAgcmV0dXJuIG1lc3NhZ2UubWFwKGZvcm1hdFN5bWJvbHMpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBtZXNzYWdlID09IFwib2JqZWN0XCIgJiYgKFRSQU5TRk9STUVEX1RZUEVfS0VZIGluIG1lc3NhZ2UpKSB7XG4gICAgdmFyIHR5cGUgPSBtZXNzYWdlW1RSQU5TRk9STUVEX1RZUEVfS0VZXTtcbiAgICB2YXIgdHJhbnNmb3JtID0gdHJhbnNmb3JtZXJzW3R5cGVdO1xuICAgIHJldHVybiB0cmFuc2Zvcm0obWVzc2FnZS5kYXRhKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgbWVzc2FnZSA9PSBcIm9iamVjdFwiICYmIChUUkFOU0ZPUk1FRF9UWVBFX0tFWV9BTFRFUk5BVEUgaW4gbWVzc2FnZSkpIHtcbiAgICB2YXIgdHlwZSA9IG1lc3NhZ2VbVFJBTlNGT1JNRURfVFlQRV9LRVlfQUxURVJOQVRFXTtcbiAgICB2YXIgdHJhbnNmb3JtID0gdHJhbnNmb3JtZXJzW3R5cGVdO1xuICAgIHJldHVybiB0cmFuc2Zvcm0obWVzc2FnZS5kYXRhKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgbWVzc2FnZSA9PSBcIm9iamVjdFwiICYmICgoX2EgPSBtZXNzYWdlLmNvbnN0cnVjdG9yKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EubmFtZSkgPT09IFwiTm9kZUxpc3RcIikge1xuICAgIHZhciBOb2RlTGlzdF8xID0ge307XG4gICAgT2JqZWN0LmVudHJpZXMobWVzc2FnZSkuZm9yRWFjaChmdW5jdGlvbiAoX2EpIHtcbiAgICAgIHZhciBrZXkgPSBfYVswXSwgdmFsdWUgPSBfYVsxXTtcbiAgICAgIE5vZGVMaXN0XzFba2V5XSA9IGZvcm1hdFN5bWJvbHModmFsdWUpO1xuICAgIH0pO1xuICAgIHJldHVybiBOb2RlTGlzdF8xO1xuICB9XG4gIHJldHVybiBtZXNzYWdlO1xufTtcbnZhciBhcnJheVRvU3RyaW5nID0gZnVuY3Rpb24gKG91dHB1dCwgcmVmZXJlbmNlcywgbGV2ZWwpIHtcbiAgdmFyIG1lcmdlQXJyYXkgPSBvdXRwdXQucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGN1cnIsIGluZGV4KSB7XG4gICAgcmV0dXJuIChcIlwiKS5jb25jYXQoYWNjKS5jb25jYXQoaW5kZXggPyBcIiwgXCIgOiBcIlwiKS5jb25jYXQoZnJvbUNvbnNvbGVUb1N0cmluZyhjdXJyLCByZWZlcmVuY2VzLCBsZXZlbCkpO1xuICB9LCBcIlwiKTtcbiAgcmV0dXJuIChcIltcIikuY29uY2F0KG1lcmdlQXJyYXksIFwiXVwiKTtcbn07XG52YXIgb2JqZWN0VG9TdHJpbmcgPSBmdW5jdGlvbiAob3V0cHV0LCByZWZlcmVuY2VzLCBsZXZlbCkge1xuICB2YXIgY29uc3RydWN0b3JOYW1lID0gb3V0cHV0LmNvbnN0cnVjdG9yLm5hbWUgIT09IFwiT2JqZWN0XCIgPyAoXCJcIikuY29uY2F0KG91dHB1dC5jb25zdHJ1Y3Rvci5uYW1lLCBcIiBcIikgOiBcIlwiO1xuICBpZiAobGV2ZWwgPiBNQVhfTkVTVF9MRVZFTCkge1xuICAgIHJldHVybiBjb25zdHJ1Y3Rvck5hbWU7XG4gIH1cbiAgdmFyIGVudHJpZXMgPSBPYmplY3QuZW50cmllcyhvdXRwdXQpO1xuICB2YXIgZm9ybWF0dGVkT2JqZWN0ID0gT2JqZWN0LmVudHJpZXMob3V0cHV0KS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgX2EsIGluZGV4KSB7XG4gICAgdmFyIGtleSA9IF9hWzBdLCB2YWx1ZSA9IF9hWzFdO1xuICAgIHZhciBjb21tYSA9IGluZGV4ID09PSAwID8gXCJcIiA6IFwiLCBcIjtcbiAgICB2YXIgYnJlYWtMaW5lID0gZW50cmllcy5sZW5ndGggPiAxMCA/IFwiXFxuICBcIiA6IFwiXCI7XG4gICAgdmFyIGZvcm1hdHRlZCA9IGZyb21Db25zb2xlVG9TdHJpbmcodmFsdWUsIHJlZmVyZW5jZXMsIGxldmVsKTtcbiAgICBpZiAoaW5kZXggPT09IE1BWF9LRVlTKSB7XG4gICAgICByZXR1cm4gYWNjICsgYnJlYWtMaW5lICsgXCIuLi5cIjtcbiAgICB9IGVsc2UgaWYgKGluZGV4ID4gTUFYX0tFWVMpIHtcbiAgICAgIHJldHVybiBhY2M7XG4gICAgfVxuICAgIHJldHVybiBhY2MgKyAoXCJcIikuY29uY2F0KGNvbW1hKS5jb25jYXQoYnJlYWtMaW5lKS5jb25jYXQoa2V5LCBcIjogXCIpICsgZm9ybWF0dGVkO1xuICB9LCBcIlwiKTtcbiAgcmV0dXJuIChcIlwiKS5jb25jYXQoY29uc3RydWN0b3JOYW1lLCBcInsgXCIpLmNvbmNhdChmb3JtYXR0ZWRPYmplY3QpLmNvbmNhdChlbnRyaWVzLmxlbmd0aCA+IDEwID8gXCJcXG5cIiA6IFwiIFwiLCBcIn1cIik7XG59O1xudmFyIGZyb21Db25zb2xlVG9TdHJpbmcgPSBmdW5jdGlvbiAobWVzc2FnZSwgcmVmZXJlbmNlcywgbGV2ZWwpIHtcbiAgdmFyIF9hO1xuICBpZiAobGV2ZWwgPT09IHZvaWQgMCkge1xuICAgIGxldmVsID0gMDtcbiAgfVxuICB0cnkge1xuICAgIHZhciBvdXRwdXRfMSA9IGZvcm1hdFN5bWJvbHMobWVzc2FnZSk7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkob3V0cHV0XzEpKSB7XG4gICAgICByZXR1cm4gYXJyYXlUb1N0cmluZyhvdXRwdXRfMSwgcmVmZXJlbmNlcywgbGV2ZWwgKyAxKTtcbiAgICB9XG4gICAgc3dpdGNoICh0eXBlb2Ygb3V0cHV0XzEpIHtcbiAgICAgIGNhc2UgXCJzdHJpbmdcIjpcbiAgICAgICAgcmV0dXJuIChcIlxcXCJcIikuY29uY2F0KG91dHB1dF8xLCBcIlxcXCJcIikuc2xpY2UoMCwgTUFYX0xFTkdUSF9TVFJJTkcpO1xuICAgICAgY2FzZSBcIm51bWJlclwiOlxuICAgICAgY2FzZSBcImZ1bmN0aW9uXCI6XG4gICAgICBjYXNlIFwic3ltYm9sXCI6XG4gICAgICAgIHJldHVybiBvdXRwdXRfMS50b1N0cmluZygpO1xuICAgICAgY2FzZSBcImJvb2xlYW5cIjpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhvdXRwdXRfMSk7XG4gICAgICBjYXNlIFwidW5kZWZpbmVkXCI6XG4gICAgICAgIHJldHVybiBcInVuZGVmaW5lZFwiO1xuICAgICAgY2FzZSBcIm9iamVjdFwiOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKG91dHB1dF8xIGluc3RhbmNlb2YgUmVnRXhwIHx8IG91dHB1dF8xIGluc3RhbmNlb2YgRXJyb3IgfHwgb3V0cHV0XzEgaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgICAgICAgcmV0dXJuIG91dHB1dF8xLnRvU3RyaW5nKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG91dHB1dF8xID09PSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuIFN0cmluZyhudWxsKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3V0cHV0XzEgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xuICAgICAgICAgIHJldHVybiBvdXRwdXRfMS5vdXRlckhUTUwuc2xpY2UoMCwgTUFYX0xFTkdUSF9TVFJJTkcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChPYmplY3QuZW50cmllcyhvdXRwdXRfMSkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIFwie31cIjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKENJUkNVTEFSX1JFRl9LRVkgaW4gb3V0cHV0XzEpKSB7XG4gICAgICAgICAgaWYgKGxldmVsID4gTUFYX05FU1RfTEVWRUwpIHtcbiAgICAgICAgICAgIHJldHVybiBcIlVuYWJsZSB0byBwcmludCBpbmZvcm1hdGlvblwiO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgbmV3TWVzc2FnZSA9IHJlZmVyZW5jZXNbb3V0cHV0XzFbQ0lSQ1VMQVJfUkVGX0tFWV1dO1xuICAgICAgICAgIHJldHVybiBmcm9tQ29uc29sZVRvU3RyaW5nKG5ld01lc3NhZ2UsIHJlZmVyZW5jZXMsIGxldmVsICsgMSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCgoX2EgPSBvdXRwdXRfMS5jb25zdHJ1Y3RvcikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLm5hbWUpID09PSBcIk5vZGVMaXN0XCIpIHtcbiAgICAgICAgICB2YXIgbGVuZ3RoXzEgPSBvdXRwdXRfMS5sZW5ndGg7XG4gICAgICAgICAgdmFyIG5vZGVzID0gbmV3IEFycmF5KGxlbmd0aF8xKS5maWxsKG51bGwpLm1hcChmdW5jdGlvbiAoXywgaW5kZXgpIHtcbiAgICAgICAgICAgIHJldHVybiBmcm9tQ29uc29sZVRvU3RyaW5nKG91dHB1dF8xW2luZGV4XSwgcmVmZXJlbmNlcyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuIChcIk5vZGVMaXN0KFwiKS5jb25jYXQob3V0cHV0XzEubGVuZ3RoLCBcIilbXCIpLmNvbmNhdChub2RlcywgXCJdXCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvYmplY3RUb1N0cmluZyhvdXRwdXRfMSwgcmVmZXJlbmNlcywgbGV2ZWwgKyAxKTtcbiAgICB9XG4gIH0gY2F0Y2ggKF9iKSB7XG4gICAgcmV0dXJuIFwiVW5hYmxlIHRvIHByaW50IGluZm9ybWF0aW9uXCI7XG4gIH1cbn07XG5cbnZhciBnZXRUeXBlID0gZnVuY3Rpb24gKG1lc3NhZ2UpIHtcbiAgc3dpdGNoIChtZXNzYWdlKSB7XG4gICAgY2FzZSBcIndhcm5cIjpcbiAgICAgIHJldHVybiBcIndhcm5pbmdcIjtcbiAgICBjYXNlIFwiY2xlYXJcIjpcbiAgICAgIHJldHVybiBcImNsZWFyXCI7XG4gICAgY2FzZSBcImVycm9yXCI6XG4gICAgICByZXR1cm4gXCJlcnJvclwiO1xuICAgIGNhc2UgXCJsb2dcIjpcbiAgICBjYXNlIFwiaW5mb1wiOlxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gXCJpbmZvXCI7XG4gIH1cbn07XG5cbnZhciBDb25zb2xlTGlzdCA9IGZ1bmN0aW9uIChfYSkge1xuICB2YXIgZGF0YSA9IF9hLmRhdGE7XG4gIHZhciBjbGFzc05hbWVzID0gdXNlQ2xhc3NOYW1lcygpO1xuICByZXR1cm4ganN4KEZyYWdtZW50LCB7XG4gICAgY2hpbGRyZW46IGRhdGEubWFwKGZ1bmN0aW9uIChfYSwgbG9nSW5kZXgsIHJlZmVyZW5jZXMpIHtcbiAgICAgIHZhciBkYXRhID0gX2EuZGF0YSwgaWQgPSBfYS5pZCwgbWV0aG9kID0gX2EubWV0aG9kO1xuICAgICAgaWYgKCFkYXRhKSByZXR1cm4gbnVsbDtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGRhdGEpKSB7XG4gICAgICAgIHJldHVybiBqc3goUmVhY3QuRnJhZ21lbnQsIHtcbiAgICAgICAgICBjaGlsZHJlbjogZGF0YS5tYXAoZnVuY3Rpb24gKG1zZywgbXNnSW5kZXgpIHtcbiAgICAgICAgICAgIHZhciBmaXhSZWZlcmVuY2VzID0gcmVmZXJlbmNlcy5zbGljZShsb2dJbmRleCwgcmVmZXJlbmNlcy5sZW5ndGgpO1xuICAgICAgICAgICAgcmV0dXJuIGpzeChcImRpdlwiLCB7XG4gICAgICAgICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhcImNvbnNvbGUtaXRlbVwiLCBbY29uc29sZUl0ZW1DbGFzc05hbWUoe1xuICAgICAgICAgICAgICAgIHZhcmlhbnQ6IGdldFR5cGUobWV0aG9kKVxuICAgICAgICAgICAgICB9KV0pLFxuICAgICAgICAgICAgICBjaGlsZHJlbjoganN4KENvZGVNaXJyb3IsIHtcbiAgICAgICAgICAgICAgICBjb2RlOiBtZXRob2QgPT09IFwiY2xlYXJcIiA/IG1zZyA6IGZyb21Db25zb2xlVG9TdHJpbmcobXNnLCBmaXhSZWZlcmVuY2VzKSxcbiAgICAgICAgICAgICAgICBmaWxlVHlwZTogXCJqc1wiLFxuICAgICAgICAgICAgICAgIGluaXRNb2RlOiBcInVzZXItdmlzaWJsZVwiLFxuICAgICAgICAgICAgICAgIHNob3dSZWFkT25seTogZmFsc2UsXG4gICAgICAgICAgICAgICAgcmVhZE9ubHk6IHRydWUsXG4gICAgICAgICAgICAgICAgd3JhcENvbnRlbnQ6IHRydWVcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0sIChcIlwiKS5jb25jYXQoaWQsIFwiLVwiKS5jb25jYXQobXNnSW5kZXgpKTtcbiAgICAgICAgICB9KVxuICAgICAgICB9LCBpZCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9KVxuICB9KTtcbn07XG52YXIgY29uc29sZUl0ZW1DbGFzc05hbWUgPSBmYWtlQ3NzO1xuXG52YXIgd3JhcHBlckNsYXNzTmFtZSA9IGZha2VDc3M7XG52YXIgZmxleENsYXNzTmFtZSA9IGZha2VDc3M7XG52YXIgSGVhZGVyID0gZnVuY3Rpb24gKF9hKSB7XG4gIHZhciBjdXJyZW50VGFiID0gX2EuY3VycmVudFRhYiwgc2V0Q3VycmVudFRhYiA9IF9hLnNldEN1cnJlbnRUYWIsIG5vZGUgPSBfYS5ub2RlO1xuICB2YXIgY2xhc3NOYW1lcyA9IHVzZUNsYXNzTmFtZXMoKTtcbiAgdmFyIGJ1dHRvbnNDbGFzc05hbWUgPSBjbGFzc05hbWVzKFwiY29uc29sZS1oZWFkZXItYnV0dG9uXCIsIFtidXR0b25DbGFzc05hbWUsIHJvdW5kZWRCdXR0b25DbGFzc05hbWUsIGZha2VDc3NdKTtcbiAgcmV0dXJuIGpzeHMoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhcImNvbnNvbGUtaGVhZGVyXCIsIFt3cmFwcGVyQ2xhc3NOYW1lLCBmbGV4Q2xhc3NOYW1lXSksXG4gICAgY2hpbGRyZW46IFtqc3hzKFwicFwiLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoXCJjb25zb2xlLWhlYWRlci10aXRsZVwiLCBbZmFrZUNzc10pLFxuICAgICAgY2hpbGRyZW46IFtqc3goQ29uc29sZUljb24sIHt9KSwganN4KFwic3BhblwiLCB7XG4gICAgICAgIGNoaWxkcmVuOiBcIlRlcm1pbmFsXCJcbiAgICAgIH0pXVxuICAgIH0pLCBub2RlICYmIGpzeHMoXCJkaXZcIiwge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKFwiY29uc29sZS1oZWFkZXItYWN0aW9uc1wiLCBbZmxleENsYXNzTmFtZV0pLFxuICAgICAgY2hpbGRyZW46IFtqc3goXCJidXR0b25cIiwge1xuICAgICAgICBjbGFzc05hbWU6IGJ1dHRvbnNDbGFzc05hbWUsXG4gICAgICAgIFwiZGF0YS1hY3RpdmVcIjogY3VycmVudFRhYiA9PT0gXCJzZXJ2ZXJcIixcbiAgICAgICAgb25DbGljazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBzZXRDdXJyZW50VGFiKFwic2VydmVyXCIpO1xuICAgICAgICB9LFxuICAgICAgICB0eXBlOiBcImJ1dHRvblwiLFxuICAgICAgICBjaGlsZHJlbjogXCJTZXJ2ZXJcIlxuICAgICAgfSksIGpzeChcImJ1dHRvblwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogYnV0dG9uc0NsYXNzTmFtZSxcbiAgICAgICAgXCJkYXRhLWFjdGl2ZVwiOiBjdXJyZW50VGFiID09PSBcImNsaWVudFwiLFxuICAgICAgICBvbkNsaWNrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIHNldEN1cnJlbnRUYWIoXCJjbGllbnRcIik7XG4gICAgICAgIH0sXG4gICAgICAgIHR5cGU6IFwiYnV0dG9uXCIsXG4gICAgICAgIGNoaWxkcmVuOiBcIkNsaWVudFwiXG4gICAgICB9KV1cbiAgICB9KV1cbiAgfSk7XG59O1xuXG52YXIgdXNlU2FuZHBhY2tDb25zb2xlID0gZnVuY3Rpb24gKF9hKSB7XG4gIHZhciBjbGllbnRJZCA9IF9hLmNsaWVudElkLCBfYiA9IF9hLm1heE1lc3NhZ2VDb3VudCwgbWF4TWVzc2FnZUNvdW50ID0gX2IgPT09IHZvaWQgMCA/IE1BWF9NRVNTQUdFX0NPVU5UIDogX2IsIF9jID0gX2Euc2hvd1N5bnRheEVycm9yLCBzaG93U3ludGF4RXJyb3IgPSBfYyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfYywgX2QgPSBfYS5yZXNldE9uUHJldmlld1Jlc3RhcnQsIHJlc2V0T25QcmV2aWV3UmVzdGFydCA9IF9kID09PSB2b2lkIDAgPyBmYWxzZSA6IF9kO1xuICB2YXIgX2UgPSBSZWFjdC51c2VTdGF0ZShbXSksIGxvZ3MgPSBfZVswXSwgc2V0TG9ncyA9IF9lWzFdO1xuICB2YXIgbGlzdGVuID0gdXNlU2FuZHBhY2soKS5saXN0ZW47XG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHVuc3Vic2NyaWJlID0gbGlzdGVuKGZ1bmN0aW9uIChtZXNzYWdlKSB7XG4gICAgICBpZiAocmVzZXRPblByZXZpZXdSZXN0YXJ0ICYmIG1lc3NhZ2UudHlwZSA9PT0gXCJzdGFydFwiKSB7XG4gICAgICAgIHNldExvZ3MoW10pO1xuICAgICAgfSBlbHNlIGlmIChtZXNzYWdlLnR5cGUgPT09IFwiY29uc29sZVwiICYmIG1lc3NhZ2UuY29kZXNhbmRib3gpIHtcbiAgICAgICAgdmFyIHBheWxvYWRMb2cgPSBBcnJheS5pc0FycmF5KG1lc3NhZ2UubG9nKSA/IG1lc3NhZ2UubG9nIDogW21lc3NhZ2UubG9nXTtcbiAgICAgICAgaWYgKHBheWxvYWRMb2cuZmluZChmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICB2YXIgbWV0aG9kID0gX2EubWV0aG9kO1xuICAgICAgICAgIHJldHVybiBtZXRob2QgPT09IFwiY2xlYXJcIjtcbiAgICAgICAgfSkpIHtcbiAgICAgICAgICByZXR1cm4gc2V0TG9ncyhbQ0xFQVJfTE9HXSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGxvZ3NNZXNzYWdlc18xID0gc2hvd1N5bnRheEVycm9yID8gcGF5bG9hZExvZyA6IHBheWxvYWRMb2cuZmlsdGVyKGZ1bmN0aW9uIChtZXNzYWdlSXRlbSkge1xuICAgICAgICAgIHZhciBfYSwgX2IsIF9jO1xuICAgICAgICAgIHZhciBtZXNzYWdlc1dpdGhvdXRTeW50YXhFcnJvcnMgPSAoX2MgPSAoX2IgPSAoX2EgPSBtZXNzYWdlSXRlbSA9PT0gbnVsbCB8fCBtZXNzYWdlSXRlbSA9PT0gdm9pZCAwID8gdm9pZCAwIDogbWVzc2FnZUl0ZW0uZGF0YSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmZpbHRlcikgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmNhbGwoX2EsIGZ1bmN0aW9uIChkYXRhSXRlbSkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBkYXRhSXRlbSAhPT0gXCJzdHJpbmdcIikgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB2YXIgbWF0Y2hlcyA9IFNZTlRBWF9FUlJPUl9QQVRURVJOLmZpbHRlcihmdW5jdGlvbiAobG9va0Zvcikge1xuICAgICAgICAgICAgICByZXR1cm4gZGF0YUl0ZW0uc3RhcnRzV2l0aChsb29rRm9yKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIG1hdGNoZXMubGVuZ3RoID09PSAwO1xuICAgICAgICAgIH0pKSAhPT0gbnVsbCAmJiBfYyAhPT0gdm9pZCAwID8gX2MgOiBbXTtcbiAgICAgICAgICByZXR1cm4gbWVzc2FnZXNXaXRob3V0U3ludGF4RXJyb3JzLmxlbmd0aCA+IDA7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoIWxvZ3NNZXNzYWdlc18xKSByZXR1cm47XG4gICAgICAgIHNldExvZ3MoZnVuY3Rpb24gKHByZXYpIHtcbiAgICAgICAgICB2YXIgbWVzc2FnZXMgPSBfX3NwcmVhZEFycmF5KF9fc3ByZWFkQXJyYXkoW10sIHByZXYsIHRydWUpLCBsb2dzTWVzc2FnZXNfMSwgdHJ1ZSkuZmlsdGVyKGZ1bmN0aW9uICh2YWx1ZSwgaW5kZXgsIHNlbGYpIHtcbiAgICAgICAgICAgIHJldHVybiBpbmRleCA9PT0gc2VsZi5maW5kSW5kZXgoZnVuY3Rpb24gKHMpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHMuaWQgPT09IHZhbHVlLmlkO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgd2hpbGUgKG1lc3NhZ2VzLmxlbmd0aCA+IG1heE1lc3NhZ2VDb3VudCkge1xuICAgICAgICAgICAgbWVzc2FnZXMuc2hpZnQoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIG1lc3NhZ2VzO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LCBjbGllbnRJZCk7XG4gICAgcmV0dXJuIHVuc3Vic2NyaWJlO1xuICB9LCBbc2hvd1N5bnRheEVycm9yLCBtYXhNZXNzYWdlQ291bnQsIGNsaWVudElkLCByZXNldE9uUHJldmlld1Jlc3RhcnRdKTtcbiAgcmV0dXJuIHtcbiAgICBsb2dzOiBsb2dzLFxuICAgIHJlc2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gc2V0TG9ncyhbXSk7XG4gICAgfVxuICB9O1xufTtcblxudmFyIFNhbmRwYWNrQ29uc29sZSA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gKF9hLCByZWYpIHtcbiAgdmFyIF9jID0gX2Euc2hvd0hlYWRlciwgc2hvd0hlYWRlciA9IF9jID09PSB2b2lkIDAgPyB0cnVlIDogX2MsIF9kID0gX2Euc2hvd1N5bnRheEVycm9yLCBzaG93U3ludGF4RXJyb3IgPSBfZCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfZCwgbWF4TWVzc2FnZUNvdW50ID0gX2EubWF4TWVzc2FnZUNvdW50LCBvbkxvZ3NDaGFuZ2UgPSBfYS5vbkxvZ3NDaGFuZ2UsIGNsYXNzTmFtZSA9IF9hLmNsYXNzTmFtZSwgX2YgPSBfYS5zaG93UmVzZXRDb25zb2xlQnV0dG9uLCBzaG93UmVzZXRDb25zb2xlQnV0dG9uID0gX2YgPT09IHZvaWQgMCA/IHRydWUgOiBfZiwgX2cgPSBfYS5zaG93UmVzdGFydEJ1dHRvbiwgc2hvd1Jlc3RhcnRCdXR0b24gPSBfZyA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9nLCBfaCA9IF9hLnJlc2V0T25QcmV2aWV3UmVzdGFydCwgcmVzZXRPblByZXZpZXdSZXN0YXJ0ID0gX2ggPT09IHZvaWQgMCA/IGZhbHNlIDogX2gsIF9qID0gX2EuYWN0aW9uc0NoaWxkcmVuLCBhY3Rpb25zQ2hpbGRyZW4gPSBfaiA9PT0gdm9pZCAwID8ganN4KEZyYWdtZW50LCB7fSkgOiBfaiwgX2sgPSBfYS5zdGFuZGFsb25lLCBzdGFuZGFsb25lID0gX2sgPT09IHZvaWQgMCA/IGZhbHNlIDogX2ssIHByb3BzID0gX19yZXN0KF9hLCBbXCJzaG93SGVhZGVyXCIsIFwic2hvd1N5bnRheEVycm9yXCIsIFwibWF4TWVzc2FnZUNvdW50XCIsIFwib25Mb2dzQ2hhbmdlXCIsIFwiY2xhc3NOYW1lXCIsIFwic2hvd1NldHVwUHJvZ3Jlc3NcIiwgXCJzaG93UmVzZXRDb25zb2xlQnV0dG9uXCIsIFwic2hvd1Jlc3RhcnRCdXR0b25cIiwgXCJyZXNldE9uUHJldmlld1Jlc3RhcnRcIiwgXCJhY3Rpb25zQ2hpbGRyZW5cIiwgXCJzdGFuZGFsb25lXCJdKTtcbiAgdmFyIGVudmlyb25tZW50ID0gdXNlU2FuZHBhY2soKS5zYW5kcGFjay5lbnZpcm9ubWVudDtcbiAgdmFyIF9sID0gdXNlU2FuZHBhY2tDbGllbnQoKSwgaWZyYW1lID0gX2wuaWZyYW1lLCBpbnRlcm5hbENsaWVudElkID0gX2wuY2xpZW50SWQ7XG4gIHZhciByZXN0YXJ0ID0gdXNlU2FuZHBhY2tTaGVsbCgpLnJlc3RhcnQ7XG4gIHZhciBfbSA9IFJlYWN0LnVzZVN0YXRlKGVudmlyb25tZW50ID09PSBcIm5vZGVcIiA/IFwic2VydmVyXCIgOiBcImNsaWVudFwiKSwgY3VycmVudFRhYiA9IF9tWzBdLCBzZXRDdXJyZW50VGFiID0gX21bMV07XG4gIHZhciBjbGllbnRJZCA9IHN0YW5kYWxvbmUgPyBpbnRlcm5hbENsaWVudElkIDogdW5kZWZpbmVkO1xuICB2YXIgX28gPSB1c2VTYW5kcGFja0NvbnNvbGUoe1xuICAgIG1heE1lc3NhZ2VDb3VudDogbWF4TWVzc2FnZUNvdW50LFxuICAgIHNob3dTeW50YXhFcnJvcjogc2hvd1N5bnRheEVycm9yLFxuICAgIHJlc2V0T25QcmV2aWV3UmVzdGFydDogcmVzZXRPblByZXZpZXdSZXN0YXJ0LFxuICAgIGNsaWVudElkOiBjbGllbnRJZFxuICB9KSwgY29uc29sZURhdGEgPSBfby5sb2dzLCByZXNldENvbnNvbGUgPSBfby5yZXNldDtcbiAgdmFyIF9wID0gdXNlU2FuZHBhY2tTaGVsbFN0ZG91dCh7XG4gICAgbWF4TWVzc2FnZUNvdW50OiBtYXhNZXNzYWdlQ291bnQsXG4gICAgcmVzZXRPblByZXZpZXdSZXN0YXJ0OiByZXNldE9uUHJldmlld1Jlc3RhcnQsXG4gICAgY2xpZW50SWQ6IGNsaWVudElkXG4gIH0pLCBzdGRvdXREYXRhID0gX3AubG9ncywgcmVzZXRTdGRvdXQgPSBfcC5yZXNldDtcbiAgdmFyIHdyYXBwZXJSZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgb25Mb2dzQ2hhbmdlID09PSBudWxsIHx8IG9uTG9nc0NoYW5nZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogb25Mb2dzQ2hhbmdlKGNvbnNvbGVEYXRhKTtcbiAgICBpZiAod3JhcHBlclJlZi5jdXJyZW50KSB7XG4gICAgICB3cmFwcGVyUmVmLmN1cnJlbnQuc2Nyb2xsVG9wID0gd3JhcHBlclJlZi5jdXJyZW50LnNjcm9sbEhlaWdodDtcbiAgICB9XG4gIH0sIFtvbkxvZ3NDaGFuZ2UsIGNvbnNvbGVEYXRhLCBzdGRvdXREYXRhLCBjdXJyZW50VGFiXSk7XG4gIHZhciBpc1NlcnZlclRhYiA9IGN1cnJlbnRUYWIgPT09IFwic2VydmVyXCI7XG4gIHZhciBpc05vZGVFbnZpcm9ubWVudCA9IGVudmlyb25tZW50ID09PSBcIm5vZGVcIjtcbiAgUmVhY3QudXNlSW1wZXJhdGl2ZUhhbmRsZShyZWYsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcmVzZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmVzZXRDb25zb2xlKCk7XG4gICAgICAgIHJlc2V0U3Rkb3V0KCk7XG4gICAgICB9XG4gICAgfTtcbiAgfSk7XG4gIHZhciBjbGFzc05hbWVzID0gdXNlQ2xhc3NOYW1lcygpO1xuICByZXR1cm4ganN4cyhTYW5kcGFja1N0YWNrLCBfX2Fzc2lnbih7XG4gICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKFwiY29uc29sZVwiLCBbZmFrZUNzcywgY2xhc3NOYW1lXSlcbiAgfSwgcHJvcHMsIHtcbiAgICBjaGlsZHJlbjogW3Nob3dIZWFkZXIgJiYgaXNOb2RlRW52aXJvbm1lbnQgJiYganN4KEhlYWRlciwge1xuICAgICAgY3VycmVudFRhYjogY3VycmVudFRhYixcbiAgICAgIG5vZGU6IGlzTm9kZUVudmlyb25tZW50LFxuICAgICAgc2V0Q3VycmVudFRhYjogc2V0Q3VycmVudFRhYlxuICAgIH0pLCBqc3goXCJkaXZcIiwge1xuICAgICAgcmVmOiB3cmFwcGVyUmVmLFxuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKFwiY29uc29sZS1saXN0XCIsIFtmYWtlQ3NzXSksXG4gICAgICBjaGlsZHJlbjogaXNTZXJ2ZXJUYWIgPyBqc3goU3Rkb3V0TGlzdCwge1xuICAgICAgICBkYXRhOiBzdGRvdXREYXRhXG4gICAgICB9KSA6IGpzeChDb25zb2xlTGlzdCwge1xuICAgICAgICBkYXRhOiBjb25zb2xlRGF0YVxuICAgICAgfSlcbiAgICB9KSwganN4cyhcImRpdlwiLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoXCJjb25zb2xlLWFjdGlvbnNcIiwgW2Zha2VDc3NdKSxcbiAgICAgIGNoaWxkcmVuOiBbYWN0aW9uc0NoaWxkcmVuLCBzaG93UmVzdGFydEJ1dHRvbiAmJiBpc1NlcnZlclRhYiAmJiBqc3goUm91bmRlZEJ1dHRvbiwge1xuICAgICAgICBvbkNsaWNrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmVzdGFydCgpO1xuICAgICAgICAgIHJlc2V0Q29uc29sZSgpO1xuICAgICAgICAgIHJlc2V0U3Rkb3V0KCk7XG4gICAgICAgIH0sXG4gICAgICAgIGNoaWxkcmVuOiBqc3goUmVzdGFydEljb24sIHt9KVxuICAgICAgfSksIHNob3dSZXNldENvbnNvbGVCdXR0b24gJiYganN4KFJvdW5kZWRCdXR0b24sIHtcbiAgICAgICAgb25DbGljazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmIChjdXJyZW50VGFiID09PSBcImNsaWVudFwiKSB7XG4gICAgICAgICAgICByZXNldENvbnNvbGUoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzZXRTdGRvdXQoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNoaWxkcmVuOiBqc3goQ2xlYW5JY29uLCB7fSlcbiAgICAgIH0pXVxuICAgIH0pLCBzdGFuZGFsb25lICYmIGpzeHMoRnJhZ21lbnQsIHtcbiAgICAgIGNoaWxkcmVuOiBbanN4KERlcGVuZGVuY2llc1Byb2dyZXNzLCB7XG4gICAgICAgIGNsaWVudElkOiBjbGllbnRJZFxuICAgICAgfSksIGpzeChcImlmcmFtZVwiLCB7XG4gICAgICAgIHJlZjogaWZyYW1lXG4gICAgICB9KV1cbiAgICB9KV1cbiAgfSkpO1xufSk7XG5cbnZhciBTYW5kcGFjayA9IGZ1bmN0aW9uIChfYSkge1xuICB2YXIgX2IsIF9jLCBfZCwgX2UsIF9mLCBfZywgX2gsIF9qO1xuICB2YXIgb3B0aW9ucyA9IF9hLm9wdGlvbnMsIHRlbXBsYXRlID0gX2EudGVtcGxhdGUsIGN1c3RvbVNldHVwID0gX2EuY3VzdG9tU2V0dXAsIGZpbGVzID0gX2EuZmlsZXMsIHRoZW1lID0gX2EudGhlbWUsIHByb3BzID0gX19yZXN0KF9hLCBbXCJvcHRpb25zXCIsIFwidGVtcGxhdGVcIiwgXCJjdXN0b21TZXR1cFwiLCBcImZpbGVzXCIsIFwidGhlbWVcIl0pO1xuICBvcHRpb25zICE9PSBudWxsICYmIG9wdGlvbnMgIT09IHZvaWQgMCA/IG9wdGlvbnMgOiBvcHRpb25zID0ge307XG4gIChfYiA9IG9wdGlvbnMucmVzaXphYmxlUGFuZWxzKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBvcHRpb25zLnJlc2l6YWJsZVBhbmVscyA9IHRydWU7XG4gIChfYyA9IG9wdGlvbnMuZWRpdG9yV2lkdGhQZXJjZW50YWdlKSAhPT0gbnVsbCAmJiBfYyAhPT0gdm9pZCAwID8gX2MgOiBvcHRpb25zLmVkaXRvcldpZHRoUGVyY2VudGFnZSA9IDUwO1xuICAoX2QgPSBvcHRpb25zLnNob3dDb25zb2xlKSAhPT0gbnVsbCAmJiBfZCAhPT0gdm9pZCAwID8gX2QgOiBvcHRpb25zLnNob3dDb25zb2xlID0gZmFsc2U7XG4gIHZhciBydGxMYXlvdXQgPSAoX2UgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMucnRsKSAhPT0gbnVsbCAmJiBfZSAhPT0gdm9pZCAwID8gX2UgOiBmYWxzZTtcbiAgdmFyIGNvZGVFZGl0b3JPcHRpb25zID0ge1xuICAgIHNob3dUYWJzOiBvcHRpb25zLnNob3dUYWJzLFxuICAgIHNob3dMaW5lTnVtYmVyczogb3B0aW9ucy5zaG93TGluZU51bWJlcnMsXG4gICAgc2hvd0lubGluZUVycm9yczogb3B0aW9ucy5zaG93SW5saW5lRXJyb3JzLFxuICAgIHdyYXBDb250ZW50OiBvcHRpb25zLndyYXBDb250ZW50LFxuICAgIGNsb3NhYmxlVGFiczogb3B0aW9ucy5jbG9zYWJsZVRhYnMsXG4gICAgaW5pdE1vZGU6IG9wdGlvbnMuaW5pdE1vZGUsXG4gICAgZXh0ZW5zaW9uczogKF9mID0gb3B0aW9ucy5jb2RlRWRpdG9yKSA9PT0gbnVsbCB8fCBfZiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2YuZXh0ZW5zaW9ucyxcbiAgICBleHRlbnNpb25zS2V5bWFwOiAoX2cgPSBvcHRpb25zLmNvZGVFZGl0b3IpID09PSBudWxsIHx8IF9nID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZy5leHRlbnNpb25zS2V5bWFwLFxuICAgIHJlYWRPbmx5OiBvcHRpb25zLnJlYWRPbmx5LFxuICAgIHNob3dSZWFkT25seTogb3B0aW9ucy5zaG93UmVhZE9ubHksXG4gICAgYWRkaXRpb25hbExhbmd1YWdlczogKF9oID0gb3B0aW9ucy5jb2RlRWRpdG9yKSA9PT0gbnVsbCB8fCBfaCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2guYWRkaXRpb25hbExhbmd1YWdlc1xuICB9O1xuICB2YXIgcHJvdmlkZXJPcHRpb25zID0ge1xuICAgIGFjdGl2ZUZpbGU6IG9wdGlvbnMuYWN0aXZlRmlsZSxcbiAgICB2aXNpYmxlRmlsZXM6IG9wdGlvbnMudmlzaWJsZUZpbGVzLFxuICAgIHJlY29tcGlsZU1vZGU6IG9wdGlvbnMucmVjb21waWxlTW9kZSxcbiAgICByZWNvbXBpbGVEZWxheTogb3B0aW9ucy5yZWNvbXBpbGVEZWxheSxcbiAgICBhdXRvcnVuOiBvcHRpb25zLmF1dG9ydW4sXG4gICAgYXV0b1JlbG9hZDogb3B0aW9ucy5hdXRvUmVsb2FkLFxuICAgIGJ1bmRsZXJVUkw6IG9wdGlvbnMuYnVuZGxlclVSTCxcbiAgICBzdGFydFJvdXRlOiBvcHRpb25zLnN0YXJ0Um91dGUsXG4gICAgc2tpcEV2YWw6IG9wdGlvbnMuc2tpcEV2YWwsXG4gICAgZmlsZVJlc29sdmVyOiBvcHRpb25zLmZpbGVSZXNvbHZlcixcbiAgICBpbml0TW9kZTogb3B0aW9ucy5pbml0TW9kZSxcbiAgICBpbml0TW9kZU9ic2VydmVyT3B0aW9uczogb3B0aW9ucy5pbml0TW9kZU9ic2VydmVyT3B0aW9ucyxcbiAgICBleHRlcm5hbFJlc291cmNlczogb3B0aW9ucy5leHRlcm5hbFJlc291cmNlcyxcbiAgICBsb2dMZXZlbDogb3B0aW9ucy5sb2dMZXZlbCxcbiAgICBjbGFzc2VzOiBvcHRpb25zLmNsYXNzZXMsXG4gICAgZXhwZXJpbWVudGFsX2VuYWJsZVNlcnZpY2VXb3JrZXI6IG9wdGlvbnMuZXhwZXJpbWVudGFsX2VuYWJsZVNlcnZpY2VXb3JrZXIsXG4gICAgZXhwZXJpbWVudGFsX2VuYWJsZVN0YWJsZVNlcnZpY2VXb3JrZXJJZDogb3B0aW9ucy5leHBlcmltZW50YWxfZW5hYmxlU3RhYmxlU2VydmljZVdvcmtlcklkXG4gIH07XG4gIHZhciBfayA9IFJlYWN0LnVzZVN0YXRlKG9wdGlvbnMuc2hvd0NvbnNvbGUpLCBjb25zb2xlVmlzaWJpbGl0eSA9IF9rWzBdLCBzZXRDb25zb2xlVmlzaWJpbGl0eSA9IF9rWzFdO1xuICB2YXIgX2wgPSBSZWFjdC51c2VTdGF0ZSgwKSwgY291bnRlciA9IF9sWzBdLCBzZXRDb3VudGVyID0gX2xbMV07XG4gIHZhciBoYXNSaWdodENvbHVtbiA9IG9wdGlvbnMuc2hvd0NvbnNvbGUgfHwgb3B0aW9ucy5zaG93Q29uc29sZUJ1dHRvbjtcbiAgdmFyIHRlbXBsYXRlRmlsZXMgPSAoX2ogPSBTQU5EQk9YX1RFTVBMQVRFU1t0ZW1wbGF0ZV0pICE9PSBudWxsICYmIF9qICE9PSB2b2lkIDAgPyBfaiA6IHt9O1xuICB2YXIgbW9kZSA9IChvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMubGF5b3V0KSA/IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5sYXlvdXQgOiAoXCJtb2RlXCIgaW4gdGVtcGxhdGVGaWxlcykgPyB0ZW1wbGF0ZUZpbGVzLm1vZGUgOiBcInByZXZpZXdcIjtcbiAgdmFyIGFjdGlvbnNDaGlsZHJlbiA9IG9wdGlvbnMuc2hvd0NvbnNvbGVCdXR0b24gPyBqc3goQ29uc29sZUNvdW50ZXJCdXR0b24sIHtcbiAgICBjb3VudGVyOiBjb3VudGVyLFxuICAgIG9uQ2xpY2s6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBzZXRDb25zb2xlVmlzaWJpbGl0eShmdW5jdGlvbiAocHJldikge1xuICAgICAgICByZXR1cm4gIXByZXY7XG4gICAgICB9KTtcbiAgICB9XG4gIH0pIDogdW5kZWZpbmVkO1xuICB2YXIgZHJhZ0V2ZW50VGFyZ2V0UmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICB2YXIgX20gPSBSZWFjdC51c2VTdGF0ZShvcHRpb25zLmVkaXRvcldpZHRoUGVyY2VudGFnZSksIGhvcml6b250YWxTaXplID0gX21bMF0sIHNldEhvcml6b250YWxTaXplID0gX21bMV07XG4gIHZhciBfbyA9IFJlYWN0LnVzZVN0YXRlKDcwKSwgdmVydGljYWxTaXplID0gX29bMF0sIHNldFZlcnRpY2FsU2l6ZSA9IF9vWzFdO1xuICB2YXIgUmlnaHRDb2x1bW4gPSBoYXNSaWdodENvbHVtbiA/IFNhbmRwYWNrU3RhY2sgOiBSZWFjdC5GcmFnbWVudDtcbiAgdmFyIHJpZ2h0Q29sdW1uU3R5bGUgPSB7XG4gICAgZmxleEdyb3c6IDEwMCAtIGhvcml6b250YWxTaXplLFxuICAgIGZsZXhTaHJpbms6IDEwMCAtIGhvcml6b250YWxTaXplLFxuICAgIGZsZXhCYXNpczogMCxcbiAgICB3aWR0aDogMTAwIC0gaG9yaXpvbnRhbFNpemUgKyBcIiVcIixcbiAgICBnYXA6IGNvbnNvbGVWaXNpYmlsaXR5ID8gMSA6IDAsXG4gICAgaGVpZ2h0OiBvcHRpb25zLmVkaXRvckhlaWdodFxuICB9O1xuICB2YXIgdG9wUm93U3R5bGUgPSBoYXNSaWdodENvbHVtbiA/IHtcbiAgICBmbGV4R3JvdzogdmVydGljYWxTaXplLFxuICAgIGZsZXhTaHJpbms6IHZlcnRpY2FsU2l6ZSxcbiAgICBmbGV4QmFzaXM6IDAsXG4gICAgb3ZlcmZsb3c6IFwiaGlkZGVuXCJcbiAgfSA6IHJpZ2h0Q29sdW1uU3R5bGU7XG4gIHZhciBvbkRyYWdNb3ZlID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgaWYgKCFkcmFnRXZlbnRUYXJnZXRSZWYuY3VycmVudCkgcmV0dXJuO1xuICAgIHZhciBjb250YWluZXIgPSBkcmFnRXZlbnRUYXJnZXRSZWYuY3VycmVudC5wYXJlbnRFbGVtZW50O1xuICAgIGlmICghY29udGFpbmVyKSByZXR1cm47XG4gICAgdmFyIGRpcmVjdGlvbiA9IGRyYWdFdmVudFRhcmdldFJlZi5jdXJyZW50LmRhdGFzZXQuZGlyZWN0aW9uO1xuICAgIHZhciBpc0hvcml6b250YWwgPSBkaXJlY3Rpb24gPT09IFwiaG9yaXpvbnRhbFwiO1xuICAgIHZhciBfYSA9IGNvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSwgbGVmdCA9IF9hLmxlZnQsIHRvcCA9IF9hLnRvcCwgaGVpZ2h0ID0gX2EuaGVpZ2h0LCB3aWR0aCA9IF9hLndpZHRoO1xuICAgIHZhciBvZmZzZXQgPSBpc0hvcml6b250YWwgPyAoZXZlbnQuY2xpZW50WCAtIGxlZnQpIC8gd2lkdGggKiAxMDAgOiAoZXZlbnQuY2xpZW50WSAtIHRvcCkgLyBoZWlnaHQgKiAxMDA7XG4gICAgdmFyIGJvdW5kYXJpZXMgPSBNYXRoLm1pbihNYXRoLm1heChvZmZzZXQsIDI1KSwgNzUpO1xuICAgIGlmIChpc0hvcml6b250YWwpIHtcbiAgICAgIHNldEhvcml6b250YWxTaXplKHJ0bExheW91dCA/IDEwMCAtIGJvdW5kYXJpZXMgOiBib3VuZGFyaWVzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2V0VmVydGljYWxTaXplKGJvdW5kYXJpZXMpO1xuICAgIH1cbiAgICBjb250YWluZXIucXVlcnlTZWxlY3RvckFsbCgoXCIuXCIpLmNvbmNhdChUSEVNRV9QUkVGSVgsIFwiLXN0YWNrXCIpKS5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICBpdGVtLnN0eWxlLnBvaW50ZXJFdmVudHMgPSBcIm5vbmVcIjtcbiAgICB9KTtcbiAgfTtcbiAgdmFyIHN0b3BEcmFnZ2luZyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX2E7XG4gICAgdmFyIGNvbnRhaW5lciA9IChfYSA9IGRyYWdFdmVudFRhcmdldFJlZi5jdXJyZW50KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EucGFyZW50RWxlbWVudDtcbiAgICBpZiAoIWNvbnRhaW5lcikgcmV0dXJuO1xuICAgIGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKChcIi5cIikuY29uY2F0KFRIRU1FX1BSRUZJWCwgXCItc3RhY2tcIikpLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIGl0ZW0uc3R5bGUucG9pbnRlckV2ZW50cyA9IFwiXCI7XG4gICAgfSk7XG4gICAgZHJhZ0V2ZW50VGFyZ2V0UmVmLmN1cnJlbnQgPSBudWxsO1xuICB9O1xuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmICghKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5yZXNpemFibGVQYW5lbHMpKSByZXR1cm47XG4gICAgZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsIG9uRHJhZ01vdmUpO1xuICAgIGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIiwgc3RvcERyYWdnaW5nKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsIG9uRHJhZ01vdmUpO1xuICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLCBzdG9wRHJhZ2dpbmcpO1xuICAgIH07XG4gIH0sIFtvcHRpb25zXSk7XG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF9hO1xuICAgIHNldENvbnNvbGVWaXNpYmlsaXR5KChfYSA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5zaG93Q29uc29sZSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogZmFsc2UpO1xuICB9LCBbb3B0aW9ucy5zaG93Q29uc29sZV0pO1xuICB2YXIgcmlnaHRDb2x1bW5Qcm9wcyA9IGhhc1JpZ2h0Q29sdW1uID8ge1xuICAgIGNsYXNzTmFtZTogVEhFTUVfUFJFRklYICsgXCItcHJlc2V0LWNvbHVtblwiLFxuICAgIHN0eWxlOiByaWdodENvbHVtblN0eWxlXG4gIH0gOiB7fTtcbiAgdmFyIGNsYXNzTmFtZXMgPSB1c2VDbGFzc05hbWVzKCk7XG4gIHJldHVybiBqc3goU2FuZHBhY2tQcm92aWRlciwgX19hc3NpZ24oe1xuICAgIGN1c3RvbVNldHVwOiBjdXN0b21TZXR1cCxcbiAgICBmaWxlczogZmlsZXMsXG4gICAgb3B0aW9uczogcHJvdmlkZXJPcHRpb25zLFxuICAgIHRlbXBsYXRlOiB0ZW1wbGF0ZSxcbiAgICB0aGVtZTogdGhlbWVcbiAgfSwgcHJvcHMsIHtcbiAgICBjaGlsZHJlbjoganN4cyhTYW5kcGFja0xheW91dCwge1xuICAgICAgY2xhc3NOYW1lOiBydGxMYXlvdXQgPyBjbGFzc05hbWVzKFwicnRsLWxheW91dFwiLCBbcnRsTGF5b3V0Q2xhc3NOYW1lXSkgOiBcIlwiLFxuICAgICAgY2hpbGRyZW46IFtqc3goU2FuZHBhY2tDb2RlRWRpdG9yLCBfX2Fzc2lnbih7fSwgY29kZUVkaXRvck9wdGlvbnMsIHtcbiAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICBoZWlnaHQ6IG9wdGlvbnMuZWRpdG9ySGVpZ2h0LFxuICAgICAgICAgIGZsZXhHcm93OiBob3Jpem9udGFsU2l6ZSxcbiAgICAgICAgICBmbGV4U2hyaW5rOiBob3Jpem9udGFsU2l6ZSxcbiAgICAgICAgICBmbGV4QmFzaXM6IDAsXG4gICAgICAgICAgb3ZlcmZsb3c6IFwiaGlkZGVuXCJcbiAgICAgICAgfVxuICAgICAgfSkpLCBvcHRpb25zLnJlc2l6YWJsZVBhbmVscyAmJiBqc3goXCJkaXZcIiwge1xuICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoXCJyZXNpemUtaGFuZGxlclwiLCBbZHJhZ0hhbmRsZXIoKV0pLFxuICAgICAgICBcImRhdGEtZGlyZWN0aW9uXCI6IFwiaG9yaXpvbnRhbFwiLFxuICAgICAgICBvbk1vdXNlRG93bjogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgZHJhZ0V2ZW50VGFyZ2V0UmVmLmN1cnJlbnQgPSBldmVudC50YXJnZXQ7XG4gICAgICAgIH0sXG4gICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgbGVmdDogKFwiY2FsYyhcIikuY29uY2F0KHJ0bExheW91dCA/IDEwMCAtIGhvcml6b250YWxTaXplIDogaG9yaXpvbnRhbFNpemUsIFwiJSAtIDVweClcIilcbiAgICAgICAgfVxuICAgICAgfSksIGpzeHMoUmlnaHRDb2x1bW4sIF9fYXNzaWduKHt9LCByaWdodENvbHVtblByb3BzLCB7XG4gICAgICAgIGNoaWxkcmVuOiBbbW9kZSA9PT0gXCJwcmV2aWV3XCIgJiYganN4KFNhbmRwYWNrUHJldmlldywge1xuICAgICAgICAgIGFjdGlvbnNDaGlsZHJlbjogYWN0aW9uc0NoaWxkcmVuLFxuICAgICAgICAgIHNob3dOYXZpZ2F0b3I6IG9wdGlvbnMuc2hvd05hdmlnYXRvcixcbiAgICAgICAgICBzaG93UmVmcmVzaEJ1dHRvbjogb3B0aW9ucy5zaG93UmVmcmVzaEJ1dHRvbixcbiAgICAgICAgICBzdHlsZTogdG9wUm93U3R5bGVcbiAgICAgICAgfSksIG1vZGUgPT09IFwidGVzdHNcIiAmJiBqc3goU2FuZHBhY2tUZXN0cywge1xuICAgICAgICAgIGFjdGlvbnNDaGlsZHJlbjogYWN0aW9uc0NoaWxkcmVuLFxuICAgICAgICAgIHN0eWxlOiB0b3BSb3dTdHlsZVxuICAgICAgICB9KSwgbW9kZSA9PT0gXCJjb25zb2xlXCIgJiYganN4KFNhbmRwYWNrQ29uc29sZSwge1xuICAgICAgICAgIGFjdGlvbnNDaGlsZHJlbjogYWN0aW9uc0NoaWxkcmVuLFxuICAgICAgICAgIHN0eWxlOiB0b3BSb3dTdHlsZSxcbiAgICAgICAgICBzdGFuZGFsb25lOiB0cnVlXG4gICAgICAgIH0pLCAob3B0aW9ucy5zaG93Q29uc29sZUJ1dHRvbiB8fCBjb25zb2xlVmlzaWJpbGl0eSkgJiYganN4cyhGcmFnbWVudCwge1xuICAgICAgICAgIGNoaWxkcmVuOiBbb3B0aW9ucy5yZXNpemFibGVQYW5lbHMgJiYgY29uc29sZVZpc2liaWxpdHkgJiYganN4KFwiZGl2XCIsIHtcbiAgICAgICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhcInJlc2l6ZS1oYW5kbGVyXCIsIFtkcmFnSGFuZGxlcigpXSksXG4gICAgICAgICAgICBcImRhdGEtZGlyZWN0aW9uXCI6IFwidmVydGljYWxcIixcbiAgICAgICAgICAgIG9uTW91c2VEb3duOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgZHJhZ0V2ZW50VGFyZ2V0UmVmLmN1cnJlbnQgPSBldmVudC50YXJnZXQ7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgdG9wOiAoXCJjYWxjKFwiKS5jb25jYXQodmVydGljYWxTaXplLCBcIiUgLSA1cHgpXCIpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSksIGpzeChcImRpdlwiLCB7XG4gICAgICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoXCJjb25zb2xlLXdyYXBwZXJcIiwgW2NvbnNvbGVXcmFwcGVyXSksXG4gICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICBmbGV4R3JvdzogY29uc29sZVZpc2liaWxpdHkgPyAxMDAgLSB2ZXJ0aWNhbFNpemUgOiAwLFxuICAgICAgICAgICAgICBmbGV4U2hyaW5rOiBjb25zb2xlVmlzaWJpbGl0eSA/IDEwMCAtIHZlcnRpY2FsU2l6ZSA6IDAsXG4gICAgICAgICAgICAgIGZsZXhCYXNpczogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNoaWxkcmVuOiBqc3goU2FuZHBhY2tDb25zb2xlLCB7XG4gICAgICAgICAgICAgIG9uTG9nc0NoYW5nZTogZnVuY3Rpb24gKGxvZ3MpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2V0Q291bnRlcihsb2dzLmxlbmd0aCk7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHNob3dIZWFkZXI6IGZhbHNlXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH0pXVxuICAgICAgICB9KV1cbiAgICAgIH0pKV1cbiAgICB9KVxuICB9KSwgdGVtcGxhdGUpO1xufTtcbnZhciBkcmFnSGFuZGxlciA9IGZha2VDc3M7XG52YXIgQ29uc29sZUNvdW50ZXJCdXR0b24gPSBmdW5jdGlvbiAoX2EpIHtcbiAgdmFyIG9uQ2xpY2sgPSBfYS5vbkNsaWNrLCBjb3VudGVyID0gX2EuY291bnRlcjtcbiAgcmV0dXJuIGpzeHMoUm91bmRlZEJ1dHRvbiwge1xuICAgIGNsYXNzTmFtZTogYnV0dG9uQ291bnRlci50b1N0cmluZygpLFxuICAgIG9uQ2xpY2s6IG9uQ2xpY2ssXG4gICAgY2hpbGRyZW46IFtqc3goQ29uc29sZUljb24sIHt9KSwgY291bnRlciA+IDAgJiYganN4KFwic3Ryb25nXCIsIHtcbiAgICAgIGNoaWxkcmVuOiBjb3VudGVyXG4gICAgfSldXG4gIH0pO1xufTtcbnZhciBidXR0b25Db3VudGVyID0gZmFrZUNzcztcbnZhciBjb25zb2xlV3JhcHBlciA9IGZha2VDc3M7XG52YXIgcnRsTGF5b3V0Q2xhc3NOYW1lID0gZmFrZUNzcztcblxuZXhwb3J0IHsgQU5HVUxBUl9URU1QTEFURSwgQVNUUk9fVEVNUExBVEUsIEJhY2t3YXJkSWNvbiwgQ2xlYW5JY29uLCBDbG9zZUljb24sIENvZGVNaXJyb3IgYXMgQ29kZUVkaXRvciwgQ29uc29sZUljb24sIERlcGVuZGVuY2llc1Byb2dyZXNzLCBEaXJlY3RvcnlJY29uQ2xvc2VkLCBEaXJlY3RvcnlJY29uT3BlbiwgRXJyb3JPdmVybGF5LCBFeHBvcnRJY29uLCBGQURFX0FOSU1BVElPTl9EVVJBVElPTiwgRmlsZUljb24sIEZpbGVUYWJzLCBGb3J3YXJkSWNvbiwgTG9hZGluZ092ZXJsYXksIE5hdmlnYXRvciwgT3BlbkluQ29kZVNhbmRib3hCdXR0b24sIFJFQUNUX1RFTVBMQVRFLCBSRUFDVF9UWVBFU0NSSVBUX1RFTVBMQVRFLCBSZWZyZXNoSWNvbiwgUmVzdGFydEljb24sIFJvdW5kZWRCdXR0b24sIFJ1bkJ1dHRvbiQxIGFzIFJ1bkJ1dHRvbiwgUnVuSWNvbiwgU0FOREJPWF9URU1QTEFURVMsIFNBTkRQQUNLX1RIRU1FUywgU09MSURfVEVNUExBVEUsIFNWRUxURV9URU1QTEFURSwgU2FuZHBhY2ssIFNhbmRwYWNrQ29kZUVkaXRvciwgU2FuZHBhY2tDb2RlVmlld2VyLCBTYW5kcGFja0NvbnNvbGUsIFNhbmRwYWNrQ29uc3VtZXIsIFNhbmRwYWNrRmlsZUV4cGxvcmVyLCBTYW5kcGFja0xheW91dCwgU2FuZHBhY2tQcmV2aWV3LCBTYW5kcGFja1Byb3ZpZGVyLCBTYW5kcGFjayQxIGFzIFNhbmRwYWNrUmVhY3RDb250ZXh0LCBTYW5kcGFja1N0YWNrLCBTYW5kcGFja1Rlc3RzLCBTYW5kcGFja1RoZW1lQ29uc3VtZXIsIFNhbmRwYWNrVGhlbWVDb250ZXh0LCBTYW5kcGFja1RoZW1lUHJvdmlkZXIsIFNhbmRwYWNrVHJhbnNwaWxlZENvZGUsIFNpZ25Jbkljb24sIFNpZ25PdXRJY29uLCBURVNUX1RZUEVTQ1JJUFRfVEVNUExBVEUsIFVuc3R5bGVkT3BlbkluQ29kZVNhbmRib3hCdXR0b24sIFZBTklMTEFfVEVNUExBVEUsIFZBTklMTEFfVFlQRVNDUklQVF9URU1QTEFURSwgVlVFX1RFTVBMQVRFLCBkZWZhdWx0RGFyaywgZGVmYXVsdExpZ2h0LCBnZXRDc3NUZXh0IGFzIGdldFNhbmRwYWNrQ3NzVGV4dCwgbGF5b3V0Q2xhc3NOYW1lLCBzdGFja0NsYXNzTmFtZSwgdGFiQnV0dG9uLCB1c2VBY3RpdmVDb2RlLCB1c2VDbGFzc05hbWVzLCB1c2VFcnJvck1lc3NhZ2UsIHVzZUxvYWRpbmdPdmVybGF5U3RhdGUsIHVzZVNhbmRwYWNrLCB1c2VTYW5kcGFja0NsaWVudCwgdXNlU2FuZHBhY2tDb25zb2xlLCB1c2VTYW5kcGFja05hdmlnYXRpb24sIHVzZVNhbmRwYWNrUHJldmlld1Byb2dyZXNzLCB1c2VTYW5kcGFja1NoZWxsLCB1c2VTYW5kcGFja1NoZWxsU3Rkb3V0LCB1c2VTYW5kcGFja1RoZW1lLCB1c2VUcmFuc3BpbGVkQ29kZSB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@codesandbox/sandpack-react/dist/unstyled/index.mjs\n");

/***/ })

};
;